[
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -587,7 +587,7 @@ else if (Date.class.isInstance(obj)) {\n                 appendStringBuilder(buf, format(\"@%s[%s]\", className, new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss,SSS\").format(obj)));\n             }\n \n-            else if (object instanceof Enum<?>) {\n+            else if (obj instanceof Enum<?>) {\n                 appendStringBuilder(buf, format(\"@%s[%s]\", className, obj));\n             }\n \n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n@@ -189,6 +189,23 @@ public void testThrowable() {\n         Assert.assertTrue(objectView.draw().startsWith(\"java.lang.Exception: test\"));\n     }\n \n+    @Test\n+    public void testEnum() {\n+        EnumDemo t = EnumDemo.DEMO;\n+        ObjectView objectView = new ObjectView(t, 3);\n+        Assert.assertEquals(\"@EnumDemo[DEMO]\", objectView.draw());\n+    }\n+\n+    @Test\n+    public void testEnumList() {\n+        EnumDemo t = EnumDemo.DEMO;\n+        ObjectView objectView = new ObjectView(new Object[] {t}, 3);\n+        String expected = \"@Object[][\\n\" +\n+            \"    @EnumDemo[DEMO],\\n\" +\n+            \"]\";\n+        Assert.assertEquals(expected, objectView.draw());\n+    }\n+\n     @Test\n     public void testDate() {\n         Date d = new Date(1531204354961L - TimeZone.getDefault().getRawOffset()\n@@ -303,4 +320,8 @@ public void setJ(String j) {\n             this.j = j;\n         }\n     }\n+\n+    public enum EnumDemo {\n+        DEMO;\n+    }\n }",
    "output": "fix bug of viewing enum obj (#3041)"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -116,4 +116,16 @@ public Class<?>[] getAllLoadedClasses() {\n         return getAllLoadedClasses0(Class.class);\n     }\n \n+    @Override\n+    public int mallocTrim() {\n+        return mallocTrim0();\n+    }\n+\n+    private static synchronized native int mallocTrim0();\n+\n+    @Override\n+    public boolean mallocStats() {\n+        return mallocStats0();\n+    }\n+    private static synchronized native boolean mallocStats0();\n }\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -57,4 +57,14 @@ public interface VmToolMXBean {\n      * 获取所有已加载的类\n      */\n     public Class<?>[] getAllLoadedClasses();\n+\n+    /**\n+     * glibc 释放空闲内存\n+     */\n+    public int mallocTrim();\n+\n+    /**\n+     * glibc 输出内存状态到应用的 stderr\n+     */\n+    public boolean mallocStats();\n }\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -210,4 +210,16 @@ public void test_interrupt_thread() throws InterruptedException {\n         TimeUnit.SECONDS.sleep(5);\n         Assert.assertEquals((\"interrupted \" + interruptMe.getId() + \" thread success.\"), re[0].getMessage());\n     }\n+\n+    @Test\n+    public void testMallocTrim() {\n+        VmTool vmtool = initVmTool();\n+        vmtool.mallocTrim();\n+    }\n+\n+    @Test\n+    public void testMallocStats() {\n+        VmTool vmtool = initVmTool();\n+        vmtool.mallocStats();\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -56,6 +56,8 @@\n         + \"  vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext\\n\"\n         + \"  vmtool --action forceGc\\n\"\n         + \"  vmtool --action interruptThread -t 1\\n\"\n+        + \"  vmtool --action mallocTrim\\n\"\n+        + \"  vmtool --action mallocStats\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"vmtool\")\n //@formatter:on\n public class VmToolCommand extends AnnotatedCommand {\n@@ -157,7 +159,7 @@ public void setThreadId(int threadId) {\n     }\n \n     public enum VmToolAction {\n-        getInstances, forceGc, interruptThread\n+        getInstances, forceGc, interruptThread, mallocTrim, mallocStats\n     }\n \n     @Override\n@@ -239,6 +241,18 @@ public void process(final CommandProcess process) {\n                 process.end();\n \n                 return;\n+            } else if (VmToolAction.mallocTrim.equals(action)) {\n+                int result = vmToolInstance().mallocTrim();\n+                process.write(\"\\n\");\n+                process.end(result == 1 ? 0 : -1, \"mallocTrim result: \" +\n+                    (result == 1 ? \"true\" : (result == 0 ? \"false\" : \"not supported\")));\n+                return;\n+            } else if (VmToolAction.mallocStats.equals(action)) {\n+                boolean result = vmToolInstance().mallocStats();\n+                process.write(\"\\n\");\n+                process.end(result ? 0 : -1, \"mallocStats result: \" +\n+                    (result ? \"true\" : \"not supported\"));\n+                return;\n             }\n \n             process.end();",
    "output": "Add mallocTrim command to vmTool (#3030)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -139,14 +139,29 @@ public static String welcome(Map<String, String> infos) {\n     }\n \n     static String latestVersion() {\n+        final String[] version = { \"\" };\n+        Thread thread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    URLConnection urlConnection = openURLConnection(ARTHAS_LATEST_VERSIONS_URL);\n+                    InputStream inputStream = urlConnection.getInputStream();\n+                    version[0] = com.taobao.arthas.common.IOUtils.toString(inputStream).trim();\n+                } catch (Throwable e) {\n+                    logger.debug(\"get latest version error\", e);\n+                }\n+            }\n+        });\n+\n+        thread.setDaemon(true);\n+        thread.start();\n         try {\n-            URLConnection urlConnection = openURLConnection(ARTHAS_LATEST_VERSIONS_URL);\n-            InputStream inputStream = urlConnection.getInputStream();\n-            return com.taobao.arthas.common.IOUtils.toString(inputStream).trim();\n+            thread.join(2000); // Wait up to 2 seconds for the version check\n         } catch (Throwable e) {\n-            // ignore\n+            // Ignore\n         }\n-        return \"\";\n+\n+        return version[0];\n     }\n \n     /**",
    "output": "fix ArthasBanner latestVersion() block. #3021"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n@@ -38,7 +38,7 @@ public static String getCodeSource(final CodeSource cs) {\n     }\n \n     public static boolean isLambdaClass(Class<?> clazz) {\n-        return clazz.getName().contains(\"$$Lambda$\");\n+        return clazz.getName().contains(\"$$Lambda\");\n     }\n \n     public static Element renderClassInfo(ClassDetailVO clazz) {",
    "output": "fix lambda class filter. #3010"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n@@ -4,6 +4,12 @@\n import java.net.ServerSocket;\n import java.util.List;\n import java.util.Random;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import javax.net.ServerSocketFactory;\n \n@@ -32,33 +38,71 @@ private SocketUtils() {\n     }\n \n     public static long findTcpListenProcess(int port) {\n+        // Add a timeout of 5 seconds to prevent blocking\n+        final int TIMEOUT_SECONDS = 5;\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n         try {\n-            if (OSUtils.isWindows()) {\n-                String[] command = { \"netstat\", \"-ano\", \"-p\", \"TCP\" };\n-                List<String> lines = ExecutingCommand.runNative(command);\n-                for (String line : lines) {\n-                    if (line.contains(\"LISTENING\")) {\n-                        // TCP 0.0.0.0:49168 0.0.0.0:0 LISTENING 476\n-                        String[] strings = line.trim().split(\"\\\\s+\");\n-                        if (strings.length == 5) {\n-                            if (strings[1].endsWith(\":\" + port)) {\n-                                return Long.parseLong(strings[4]);\n-                            }\n-                        }\n-                    }\n+            Future<Long> future = executor.submit(new Callable<Long>() {\n+                @Override\n+                public Long call() throws Exception {\n+                    return doFindTcpListenProcess(port);\n                 }\n+            });\n+\n+            try {\n+                return future.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+            } catch (TimeoutException e) {\n+                future.cancel(true);\n+                return -1;\n+            } catch (Exception e) {\n+                return -1;\n+            }\n+        } finally {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    private static long doFindTcpListenProcess(int port) {\n+        try {\n+            if (OSUtils.isWindows()) {\n+                return findTcpListenProcessOnWindows(port);\n             }\n \n             if (OSUtils.isLinux() || OSUtils.isMac()) {\n-                String pid = ExecutingCommand.getFirstAnswer(\"lsof -t -s TCP:LISTEN -i TCP:\" + port);\n-                if (!pid.trim().isEmpty()) {\n-                    return Long.parseLong(pid);\n-                }\n+                return findTcpListenProcessOnUnix(port);\n             }\n         } catch (Throwable e) {\n             // ignore\n         }\n+        return -1;\n+    }\n+\n+    private static long findTcpListenProcessOnWindows(int port) {\n+        String[] command = { \"netstat\", \"-ano\", \"-p\", \"TCP\" };\n+        List<String> lines = ExecutingCommand.runNative(command);\n+        for (String line : lines) {\n+            if (line.contains(\"LISTENING\")) {\n+                // TCP 0.0.0.0:49168 0.0.0.0:0 LISTENING 476\n+                String[] strings = line.trim().split(\"\\\\s+\");\n+                if (strings.length == 5) {\n+                    if (strings[1].endsWith(\":\" + port)) {\n+                        return Long.parseLong(strings[4]);\n+                    }\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n \n+    private static long findTcpListenProcessOnUnix(int port) {\n+        String pid = ExecutingCommand.getFirstAnswer(\"lsof -t -s TCP:LISTEN -i TCP:\" + port);\n+        if (pid != null && !pid.trim().isEmpty()) {\n+            try {\n+                return Long.parseLong(pid.trim());\n+            } catch (NumberFormatException e) {\n+                // ignore\n+            }\n+        }\n         return -1;\n     }\n ",
    "output": "fix arthas-boot blocking in findTcpListenProcess method. #3007"
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -1,117 +0,0 @@\n-/*\n- * Copyright 2007-present the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-import java.net.*;\n-import java.io.*;\n-import java.nio.channels.*;\n-import java.util.Properties;\n-\n-public class MavenWrapperDownloader {\n-\n-    private static final String WRAPPER_VERSION = \"0.5.6\";\n-    /**\n-     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n-     */\n-    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n-        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n-\n-    /**\n-     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n-     * use instead of the default one.\n-     */\n-    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n-            \".mvn/wrapper/maven-wrapper.properties\";\n-\n-    /**\n-     * Path where the maven-wrapper.jar will be saved to.\n-     */\n-    private static final String MAVEN_WRAPPER_JAR_PATH =\n-            \".mvn/wrapper/maven-wrapper.jar\";\n-\n-    /**\n-     * Name of the property which should be used to override the default download url for the wrapper.\n-     */\n-    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n-\n-    public static void main(String args[]) {\n-        System.out.println(\"- Downloader started\");\n-        File baseDirectory = new File(args[0]);\n-        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n-\n-        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n-        // wrapperUrl parameter.\n-        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n-        String url = DEFAULT_DOWNLOAD_URL;\n-        if(mavenWrapperPropertyFile.exists()) {\n-            FileInputStream mavenWrapperPropertyFileInputStream = null;\n-            try {\n-                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n-                Properties mavenWrapperProperties = new Properties();\n-                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n-                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n-            } catch (IOException e) {\n-                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n-            } finally {\n-                try {\n-                    if(mavenWrapperPropertyFileInputStream != null) {\n-                        mavenWrapperPropertyFileInputStream.close();\n-                    }\n-                } catch (IOException e) {\n-                    // Ignore ...\n-                }\n-            }\n-        }\n-        System.out.println(\"- Downloading from: \" + url);\n-\n-        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n-        if(!outputFile.getParentFile().exists()) {\n-            if(!outputFile.getParentFile().mkdirs()) {\n-                System.out.println(\n-                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n-            }\n-        }\n-        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n-        try {\n-            downloadFileFromURL(url, outputFile);\n-            System.out.println(\"Done\");\n-            System.exit(0);\n-        } catch (Throwable e) {\n-            System.out.println(\"- Error downloading\");\n-            e.printStackTrace();\n-            System.exit(1);\n-        }\n-    }\n-\n-    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n-        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n-            String username = System.getenv(\"MVNW_USERNAME\");\n-            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n-            Authenticator.setDefault(new Authenticator() {\n-                @Override\n-                protected PasswordAuthentication getPasswordAuthentication() {\n-                    return new PasswordAuthentication(username, password);\n-                }\n-            });\n-        }\n-        URL website = new URL(urlString);\n-        ReadableByteChannel rbc;\n-        rbc = Channels.newChannel(website.openStream());\n-        FileOutputStream fos = new FileOutputStream(destination);\n-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n-        fos.close();\n-        rbc.close();\n-    }\n-\n-}",
    "output": "update Maven Wrapper: mvn wrapper:wrapper"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -54,7 +54,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 4.0.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.5"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -51,6 +51,9 @@\n         + \"  profiler list                # list all supported events\\n\"\n         + \"  profiler actions             # list all supported actions\\n\"\n         + \"  profiler start --event alloc\\n\"\n+        + \"  profiler start --timeout 300s\"\n+        + \"  profiler start --loop 300s -f /tmp/result-%t.html\"\n+        + \"  profiler start --duration 300\"\n         + \"  profiler stop --format html   # output file format, support flat[=N]|traces[=N]|collapsed|flamegraph|tree|jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n         + \"  profiler stop --threads \\n\"\n@@ -66,7 +69,10 @@\n //@formatter:on\n public class ProfilerCommand extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(ProfilerCommand.class);\n+    // Track if a file was specified during profiler start\n+    private static String fileSpecifiedAtStart = null;\n \n+    // TODO start 时，没指定 file， 是否在  stop 时，能生成 html 或者 jfr 不？ \n     private String action;\n     private String actionArg;\n \n@@ -743,10 +749,36 @@ public void process(final CommandProcess process) {\n                 String result = execute(asyncProfiler, this.actionArg);\n                 appendExecuteResult(process, result);\n             } else if (ProfilerAction.start.equals(profilerAction)) {\n+                // Track if file parameter was specified during start\n+                boolean autoGeneratedFile = false;\n+                if (this.file != null) {\n+                    fileSpecifiedAtStart = this.file;\n+                    logger.debug(\"File specified during profiler start: {}\", fileSpecifiedAtStart);\n+                } else if (this.timeout != null) {\n+                    // Auto-generate file if timeout is specified but file is not\n+                    try {\n+                        this.file = outputFile();\n+                        logger.debug(\"Auto-generated file for timeout: {}\", this.file);\n+                        fileSpecifiedAtStart = this.file;\n+                        autoGeneratedFile = true;\n+                    } catch (IOException e) {\n+                        logger.warn(\"Failed to auto-generate file for timeout\", e);\n+                    }\n+                }\n+\n                 if (this.duration == null) {\n                     String executeArgs = executeArgs(ProfilerAction.start);\n                     String result = execute(asyncProfiler, executeArgs);\n-                    appendExecuteResult(process, result);\n+                    ProfilerModel profilerModel = createProfilerModel(result);\n+\n+                    // Add information about auto-generated file for timeout\n+                    if (autoGeneratedFile && this.file != null) {\n+                        profilerModel.setOutputFile(this.file);\n+                        profilerModel.setExecuteResult(profilerModel.getExecuteResult()\n+                                + \"\\nAuto-generated output file will be: \" + this.file + \"\\n\");\n+                    }\n+\n+                    process.appendResult(profilerModel);\n                 } else { // 设置延时执行 stop\n                     final String outputFile = outputFile();\n                     String executeArgs = executeArgs(ProfilerAction.start);\n@@ -833,12 +865,27 @@ public void run() {\n     }\n \n     private ProfilerModel processStop(AsyncProfiler asyncProfiler, ProfilerAction profilerAction) throws IOException {\n-        String outputFile = outputFile();\n+        String outputFile = null;\n+\n+        // If we're stopping and a file was specified during start, don't generate a new\n+        // output file\n+        if (profilerAction == ProfilerAction.stop && fileSpecifiedAtStart != null) {\n+            outputFile = fileSpecifiedAtStart;\n+            // Reset the tracking variable after stop\n+            logger.debug(\"Using file specified during start: {}\", fileSpecifiedAtStart);\n+            fileSpecifiedAtStart = null;\n+        } else {\n+            // Otherwise generate or use the specified output file\n+            outputFile = outputFile();\n+        }\n+\n         String executeArgs = executeArgs(profilerAction);\n         String result = execute(asyncProfiler, executeArgs);\n \n         ProfilerModel profilerModel = createProfilerModel(result);\n-        profilerModel.setOutputFile(outputFile);\n+        if (outputFile != null) {\n+            profilerModel.setOutputFile(outputFile);\n+        }\n         return profilerModel;\n     }\n ",
    "output": "improve profiler command output, doc, timeout. #2961"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n@@ -139,17 +139,18 @@ public List<AdviceListener> queryAdviceListeners(String className, String method\n \n         public void registerTraceAdviceListener(String className, String owner, String methodName, String methodDesc,\n                 AdviceListener listener) {\n+            synchronized (this) {\n+                className = className.replace('/', '.');\n+                String key = keyForTrace(className, owner, methodName, methodDesc);\n \n-            className = className.replace('/', '.');\n-            String key = keyForTrace(className, owner, methodName, methodDesc);\n-\n-            List<AdviceListener> listeners = map.get(key);\n-            if (listeners == null) {\n-                listeners = new ArrayList<AdviceListener>();\n-                map.put(key, listeners);\n-            }\n-            if (!listeners.contains(listener)) {\n-                listeners.add(listener);\n+                List<AdviceListener> listeners = map.get(key);\n+                if (listeners == null) {\n+                    listeners = new ArrayList<AdviceListener>();\n+                    map.put(key, listeners);\n+                }\n+                if (!listeners.contains(listener)) {\n+                    listeners.add(listener);\n+                }\n             }\n         }\n ",
    "output": "fix SpyImpl.atEnter ConcurrentModificationException. #2952"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n@@ -411,7 +411,7 @@ public static synchronized void addRetransformEntry(List<RetransformEntry> retra\n         Collections.sort(tmp, new Comparator<RetransformEntry>() {\n             @Override\n             public int compare(RetransformEntry entry1, RetransformEntry entry2) {\n-                return entry1.getId() - entry2.getId();\n+                return Integer.compare(entry1.getId(), entry2.getId());\n             }\n         });\n         retransformEntries = tmp;",
    "output": "fix compare"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n@@ -9,6 +9,8 @@\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n /**\n  * @author ralf0131 2017-01-06 16:02.\n  */\n@@ -17,6 +19,7 @@ public class AbstractTraceAdviceListener extends AdviceListenerAdapter {\n     protected final ThreadLocalWatch threadLocalWatch = new ThreadLocalWatch();\n     protected TraceCommand command;\n     protected CommandProcess process;\n+    private final AtomicBoolean processAborted = new AtomicBoolean(false);\n \n     protected final ThreadLocal<TraceEntity> threadBoundEntity = new ThreadLocal<TraceEntity>();\n \n@@ -99,7 +102,6 @@ private void finishing(ClassLoader loader, Advice advice) {\n \n                     // 是否到达数量限制\n                     if (isLimitExceeded(command.getNumberOfLimit(), process.times().get())) {\n-                        // TODO: concurrency issue to abort process\n                         abortProcess(process, command.getNumberOfLimit());\n                     }\n                 }\n@@ -112,4 +114,12 @@ private void finishing(ClassLoader loader, Advice advice) {\n             }\n         }\n     }\n+\n+    @Override\n+    protected void abortProcess(CommandProcess process, int limit) {\n+        // Only proceed if this thread is the first one to set the flag to true\n+        if (processAborted.compareAndSet(false, true)) {\n+            super.abortProcess(process, limit);\n+        }\n+    }\n }",
    "output": "fix abortProcess concurrency problem. #2957"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -112,13 +112,25 @@ public static String welcome() {\n \n     public static String welcome(Map<String, String> infos) {\n         logger.info(\"Current arthas version: {}, recommend latest version: {}\", version(), latestVersion());\n+        String appName = System.getProperty(\"project.name\");\n+        if (appName == null) {\n+            appName = System.getProperty(\"app.name\");\n+        }\n+        if (appName == null) {\n+            appName = System.getProperty(\"spring.application.name\");\n+        }\n         TableElement table = new TableElement().rightCellPadding(1)\n                         .row(\"wiki\", wiki())\n                         .row(\"tutorials\", tutorials())\n                         .row(\"version\", version())\n-                        .row(\"main_class\", PidUtils.mainClass())\n-                        .row(\"pid\", PidUtils.currentPid())\n-                        .row(\"time\", DateUtils.getCurrentDateTime());\n+                        .row(\"main_class\", PidUtils.mainClass());\n+\n+        if (appName != null) {\n+            table.row(\"app_name\", appName);\n+        }\n+        table.row(\"pid\", PidUtils.currentPid())\n+             .row(\"start_time\", DateUtils.getStartDateTime())\n+             .row(\"currnt_time\", DateUtils.getCurrentDateTime());\n         for (Entry<String, String> entry : infos.entrySet()) {\n             table.row(entry.getKey(), entry.getValue());\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java b/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n@@ -1,6 +1,10 @@\n package com.taobao.arthas.core.util;\n \n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.time.Instant;\n import java.time.LocalDateTime;\n+import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n \n /**\n@@ -21,4 +25,16 @@ public static String getCurrentDateTime() {\n     public static String formatDateTime(LocalDateTime dateTime) {\n         return DATE_TIME_FORMATTER.format(dateTime);\n     }\n+\n+    public static String getStartDateTime() {\n+        try {\n+            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+            long startTime = runtimeMXBean.getStartTime();\n+            Instant startInstant = Instant.ofEpochMilli(startTime);\n+            LocalDateTime startDateTime = LocalDateTime.ofInstant(startInstant, ZoneId.systemDefault());\n+            return DATE_TIME_FORMATTER.format(startDateTime);\n+        } catch (Throwable e) {\n+            return \"unknown\";\n+        }\n+    }\n }",
    "output": "improve banner, support app_name, start_time. #2990"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/PidUtils.java b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n@@ -1,7 +1,6 @@\n package com.taobao.arthas.common;\n \n import java.lang.management.ManagementFactory;\n-import java.util.Map;\n \n /**\n  *\n@@ -29,10 +28,7 @@ public class PidUtils {\n         }\n \n         try {\n-            for (final Map.Entry<String, String> entry : System.getenv().entrySet()) {\n-                if (entry.getKey().startsWith(\"JAVA_MAIN_CLASS\")) // like JAVA_MAIN_CLASS_13328\n-                    MAIN_CLASS = entry.getValue();\n-            }\n+            MAIN_CLASS = System.getProperty(\"sun.java.command\", \"\");\n         } catch (Throwable e) {\n             // ignore\n         }",
    "output": "fix get main_class. #2990"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -57,7 +57,7 @@\n         Constants.WIKI + Constants.WIKI_HOME + \"classloader\")\n public class ClassLoaderCommand extends AnnotatedCommand {\n \n-    private Logger logger = LoggerFactory.getLogger(ClassLoaderCommand.class);\n+    private static Logger logger = LoggerFactory.getLogger(ClassLoaderCommand.class);\n     private boolean isTree = false;\n     private String hashCode;\n     private String classLoaderClass;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n@@ -9,13 +9,16 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+\n /**\n  *\n  * @author hengyunabc 2019-02-05\n  *\n  */\n public class ClassLoaderUtils {\n-\n+    private static Logger logger = LoggerFactory.getLogger(ClassLoaderUtils.class);\n     public static Set<ClassLoader> getAllClassLoader(Instrumentation inst) {\n         Set<ClassLoader> classLoaderSet = new HashSet<ClassLoader>();\n \n@@ -127,7 +130,11 @@ else if (!StringUtils.isEmpty(classLoaderToString) && StringUtils.isEmpty(classL\n     @SuppressWarnings({ \"unchecked\", \"restriction\" })\n     public static URL[] getUrls(ClassLoader classLoader) {\n         if (classLoader instanceof URLClassLoader) {\n-            return ((URLClassLoader) classLoader).getURLs();\n+            try {\n+                return ((URLClassLoader) classLoader).getURLs();\n+            } catch (Throwable e) {\n+                logger.error(\"classLoader: {} getUrls error\", classLoader, e);\n+            }\n         }\n \n         // jdk9",
    "output": "fix classLoader#getURLs() may throw NullPointerException. fix #2968"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -714,6 +714,7 @@ private String executeArgs(ProfilerAction action) {\n \n     private static String execute(AsyncProfiler asyncProfiler, String arg)\n             throws IllegalArgumentException, IOException {\n+        logger.info(\"profiler execute args: {}\", arg);\n         String result = asyncProfiler.execute(arg);\n         if (!result.endsWith(\"\\n\")) {\n             result += \"\\n\";",
    "output": "log profiler execute args"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -38,7 +38,7 @@\n import one.profiler.Counter;\n \n /**\n- * \n+ * https://github.com/async-profiler/async-profiler/blob/master/docs/ProfilerOptions.md 具体参数说明，以及哪些参数可以传递给 async-profiler agent\n  * @author hengyunabc 2019-10-31\n  *\n  */\n@@ -524,18 +524,12 @@ public void setChunktime(String chunktime) {\n     @Description(\"run profiler in a loop (continuous profiling)\")\n     public void setLoop(String loop) {\n         this.loop = loop;\n-        if (this.action.equals(\"collect\")) {\n-            this.action = \"start\";\n-        }\n     }\n \n     @Option(longName = \"timeout\")\n     @Description(\"automatically stop profiler at TIME (absolute or relative)\")\n     public void setTimeout(String timeout) {\n         this.timeout = timeout;\n-        if (this.action.equals(\"collect\")) {\n-            this.action = \"start\";\n-        }\n     }\n \n \n@@ -581,11 +575,11 @@ private AsyncProfiler profilerInstance() {\n     }\n \n     /**\n-     * https://github.com/async-profiler/async-profiler/blob/v2.9/profiler.sh#L154\n+     * https://github.com/async-profiler/async-profiler/blob/v3.0/src/arguments.cpp#L131\n      */\n     public enum ProfilerAction {\n-        // start, resume, stop, dump, check, status, meminfo, list, collect,\n-        start, resume, stop, dump, check, status, meminfo, list, collect,\n+        // start, resume, stop, dump, check, status, meminfo, list,\n+        start, resume, stop, dump, check, status, meminfo, list,\n         version,\n \n         load,\n@@ -747,21 +741,24 @@ public void process(final CommandProcess process) {\n                 }\n                 String result = execute(asyncProfiler, this.actionArg);\n                 appendExecuteResult(process, result);\n-            } else if (ProfilerAction.collect.equals(profilerAction)) {\n-                String executeArgs = executeArgs(ProfilerAction.collect);\n-                String result = execute(asyncProfiler, executeArgs);\n-                ProfilerModel profilerModel = createProfilerModel(result);\n-\n-                if (this.duration != null) {\n+            } else if (ProfilerAction.start.equals(profilerAction)) {\n+                if (this.duration == null) {\n+                    String executeArgs = executeArgs(ProfilerAction.start);\n+                    String result = execute(asyncProfiler, executeArgs);\n+                    appendExecuteResult(process, result);\n+                } else { // 设置延时执行 stop\n                     final String outputFile = outputFile();\n+                    String executeArgs = executeArgs(ProfilerAction.start);\n+                    String result = execute(asyncProfiler, executeArgs);\n+                    ProfilerModel profilerModel = createProfilerModel(result);\n                     profilerModel.setOutputFile(outputFile);\n                     profilerModel.setDuration(duration);\n \n                     // 延时执行stop\n                     ArthasBootstrap.getInstance().getScheduledExecutorService().schedule(new Runnable() {\n                         @Override\n                         public void run() {\n-                            //在异步线程执行，profiler命令已经结束，不能输出到客户端\n+                            // 在异步线程执行，profiler命令已经结束，不能输出到客户端\n                             try {\n                                 logger.info(\"stopping profiler ...\");\n                                 ProfilerModel model = processStop(asyncProfiler, ProfilerAction.stop);\n@@ -772,12 +769,9 @@ public void run() {\n                             }\n                         }\n                     }, this.duration, TimeUnit.SECONDS);\n+                    process.appendResult(profilerModel);\n                 }\n-                process.appendResult(profilerModel);\n-            } else if (ProfilerAction.start.equals(profilerAction)) {\n-                String executeArgs = executeArgs(ProfilerAction.start);\n-                String result = execute(asyncProfiler, executeArgs);\n-                appendExecuteResult(process, result);\n+\n             } else if (ProfilerAction.stop.equals(profilerAction)) {\n                 ProfilerModel profilerModel = processStop(asyncProfiler, profilerAction);\n                 process.appendResult(profilerModel);",
    "output": "remove profiler collect action. fix loop NullPointerException #2961"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -1,6 +1,11 @@\n package com.taobao.arthas.core;\n \n+import java.lang.reflect.Field;\n+\n import com.taobao.arthas.common.JavaVersionUtils;\n+import com.taobao.arthas.common.UnsafeUtils;\n+\n+import ognl.OgnlRuntime;\n \n /**\n  * 全局开关\n@@ -128,12 +133,29 @@ public class GlobalOptions {\n     public static volatile boolean verbose = false;\n \n     /**\n-     * 是否打开strict 开关\n+     * 是否打开strict 开关。更新时注意 ognl 里的配置需要同步修改\n+     * @see ognl.OgnlRuntime#getUseStricterInvocationValue()\n      */\n     @Option(level = 1,\n             name = \"strict\",\n             summary = \"Option to strict mode\",\n             description = STRICT_MESSAGE\n     )\n     public static volatile boolean strict = true;\n+\n+    public static void updateOnglStrict(boolean strict) {\n+        try {\n+            Field field = OgnlRuntime.class.getDeclaredField(\"_useStricterInvocation\");\n+            field.setAccessible(true);\n+            // 获取字段的内存偏移量和基址\n+            Object staticFieldBase = UnsafeUtils.UNSAFE.staticFieldBase(field);\n+            long staticFieldOffset = UnsafeUtils.UNSAFE.staticFieldOffset(field);\n+\n+            // 修改字段的值\n+            UnsafeUtils.UNSAFE.putBoolean(staticFieldBase, staticFieldOffset, strict);\n+        } catch (NoSuchFieldException | SecurityException e) {\n+            // ignore\n+        }\n+    }\n+\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n@@ -155,6 +155,11 @@ private ExitStatus processChangeNameValue(CommandProcess process) throws Illegal\n                 return ExitStatus.failure(-1, format(\"Options[%s] type[%s] was unsupported.\", optionName, type.getSimpleName()));\n             }\n \n+            // FIXME hack for ongl strict\n+            if (field.getName().equals(\"strict\")) {\n+                GlobalOptions.updateOnglStrict(Boolean.valueOf(optionValue));\n+                logger.info(\"update ongl strict to: {}\", optionValue);\n+            }\n         } catch (Throwable t) {\n             return ExitStatus.failure(-1, format(\"Cannot cast option value[%s] to type[%s].\", optionValue, type.getSimpleName()));\n         }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/GlobalOptionsTest.java b/core/src/test/java/com/taobao/arthas/core/GlobalOptionsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/GlobalOptionsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/GlobalOptionsTest.java\n@@ -0,0 +1,18 @@\n+package com.taobao.arthas.core;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import ognl.OgnlRuntime;\n+\n+class GlobalOptionsTest {\n+\n+    @Test\n+    void test() {\n+        GlobalOptions.updateOnglStrict(true);\n+        Assertions.assertThat(OgnlRuntime.getUseStricterInvocationValue()).isTrue();\n+        GlobalOptions.updateOnglStrict(false);\n+        Assertions.assertThat(OgnlRuntime.getUseStricterInvocationValue()).isFalse();\n+    }\n+\n+}",
    "output": "support ognl strict. #2955"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -54,7 +54,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 4.0.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.4"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/command/express/FlowAttribute.java b/core/src/test/java/com/taobao/arthas/core/command/express/FlowAttribute.java\n--- a/core/src/test/java/com/taobao/arthas/core/command/express/FlowAttribute.java\n+++ b/core/src/test/java/com/taobao/arthas/core/command/express/FlowAttribute.java\n@@ -0,0 +1,9 @@\n+package com.taobao.arthas.core.command.express;\n+\n+public class FlowAttribute {\n+    private String bxApp = \"aaa\";\n+\n+    public String getBxApp() {\n+     return this.bxApp ;\n+    }\n+}\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/command/express/FlowContext.java b/core/src/test/java/com/taobao/arthas/core/command/express/FlowContext.java\n--- a/core/src/test/java/com/taobao/arthas/core/command/express/FlowContext.java\n+++ b/core/src/test/java/com/taobao/arthas/core/command/express/FlowContext.java\n@@ -0,0 +1,9 @@\n+package com.taobao.arthas.core.command.express;\n+\n+public class FlowContext {\n+    private FlowAttribute flowAttribute = new FlowAttribute();\n+\n+    public FlowAttribute getFlowAttribute() {\n+         return this.flowAttribute ;\n+    }\n+}\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/command/express/OgnlTest.java b/core/src/test/java/com/taobao/arthas/core/command/express/OgnlTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/command/express/OgnlTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/command/express/OgnlTest.java\n@@ -0,0 +1,46 @@\n+package com.taobao.arthas.core.command.express;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.taobao.arthas.core.advisor.Advice;\n+import ognl.OgnlException;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * https://github.com/alibaba/arthas/issues/2954\n+ */\n+public class OgnlTest {\n+\n+    private Express express;\n+\n+    @BeforeEach\n+    public void setUp() throws OgnlException, ExpressException {\n+        FlowContext context = new FlowContext();\n+        Object[] params = new Object[4];\n+        params[0] = context;\n+        Advice advice = Advice.newForAfterReturning(null, getClass(), null, null, params, null);\n+        express = ExpressFactory.unpooledExpress(null).bind(advice).bind(\"cost\", 123);\n+    }\n+\n+    @Test\n+    public void testStringEquals() throws OgnlException, ExpressException {\n+        String conditionExpress = \"\\\"aaa\\\".equals(params[0].flowAttribute.getBxApp())\";\n+        boolean result = express.is(conditionExpress);\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void testObjectEquals() throws OgnlException, ExpressException {\n+        String conditionExpress = \"params[0].flowAttribute.getBxApp().equals(\\\"aaa\\\")\";\n+        boolean result = express.is(conditionExpress);\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void testEqualSign() throws OgnlException, ExpressException {\n+        String conditionExpress = \"\\\"aaa\\\" == params[0].flowAttribute.getBxApp()\";\n+        boolean result = express.is(conditionExpress);\n+        assertTrue(result);\n+    }\n+}",
    "output": "add OgnlTest. #2954"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java b/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n@@ -1,9 +1,10 @@\n package com.taobao.arthas.core.command.express;\n \n+import java.util.Map;\n+\n import com.taobao.arthas.core.GlobalOptions;\n \n import ognl.ObjectPropertyAccessor;\n-import ognl.OgnlContext;\n import ognl.OgnlException;\n \n /**\n@@ -12,7 +13,7 @@\n public class ArthasObjectPropertyAccessor extends ObjectPropertyAccessor {\n \n     @Override\n-    public Object setPossibleProperty(OgnlContext context, Object target, String name, Object value) throws OgnlException {\n+    public Object setPossibleProperty(Map context, Object target, String name, Object value) throws OgnlException {\n         if (GlobalOptions.strict) {\n             throw new IllegalAccessError(GlobalOptions.STRICT_MESSAGE);\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java b/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n@@ -4,7 +4,6 @@\n import java.util.concurrent.ConcurrentHashMap;\n \n import ognl.ClassResolver;\n-import ognl.OgnlContext;\n \n /**\n  * @author hengyunabc 2018-10-18\n@@ -20,9 +19,8 @@ public ClassLoaderClassResolver(ClassLoader classLoader) {\n         this.classLoader = classLoader;\n     }\n \n-\n     @Override\n-    public <T> Class<T> classForName(String className, OgnlContext ognlContext) throws ClassNotFoundException {\n+    public Class classForName(String className, Map context) throws ClassNotFoundException {\n         Class<?> result = null;\n \n         if ((result = classes.get(className)) == null) {\n@@ -39,6 +37,6 @@ public <T> Class<T> classForName(String className, OgnlContext ognlContext) thro\n             }\n             classes.put(className, result);\n         }\n-        return (Class<T>) result;\n+        return result;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java b/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n@@ -1,7 +1,6 @@\n package com.taobao.arthas.core.command.express;\n \n import ognl.ClassResolver;\n-import ognl.OgnlContext;\n \n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -21,7 +20,7 @@ private CustomClassResolver() {\n     }\n \n     @Override\n-    public <T> Class<T> classForName(String className, OgnlContext ognlContext) throws ClassNotFoundException {\n+    public Class classForName(String className, Map context) throws ClassNotFoundException {\n         Class<?> result = null;\n \n         if ((result = classes.get(className)) == null) {\n@@ -40,6 +39,6 @@ public <T> Class<T> classForName(String className, OgnlContext ognlContext) thro\n             }\n             classes.put(className, result);\n         }\n-        return (Class<T>) result;\n+        return result;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/express/DefaultMemberAccess.java b/core/src/main/java/com/taobao/arthas/core/command/express/DefaultMemberAccess.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/DefaultMemberAccess.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/DefaultMemberAccess.java\n@@ -1,11 +1,11 @@\n package com.taobao.arthas.core.command.express;\n \n import ognl.MemberAccess;\n-import ognl.OgnlContext;\n \n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Member;\n import java.lang.reflect.Modifier;\n+import java.util.Map;\n \n /**\n  * ognl.DefaultMemberAccess (ognl:ognl:3.1.19)\n@@ -58,7 +58,8 @@ public void setAllowPackageProtectedAccess(boolean value) {\n         allowPackageProtectedAccess = value;\n     }\n \n-    public Object setup(OgnlContext context, Object target, Member member, String propertyName) {\n+    @Override\n+    public Object setup(Map context, Object target, Member member, String propertyName) {\n         Object result = null;\n \n         if (isAccessible(context, target, member, propertyName)) {\n@@ -72,7 +73,8 @@ public Object setup(OgnlContext context, Object target, Member member, String pr\n         return result;\n     }\n \n-    public void restore(OgnlContext context, Object target, Member member, String propertyName, Object state) {\n+    @Override\n+    public void restore(Map context, Object target, Member member, String propertyName, Object state) {\n         if (state != null) {\n             ((AccessibleObject)member).setAccessible((Boolean)state);\n         }\n@@ -88,7 +90,8 @@ public void restore(OgnlContext context, Object target, Member member, String pr\n      * @param propertyName the property to test accessibility for (not used).\n      * @return true if the member is accessible in the context, false otherwise.\n      */\n-    public boolean isAccessible(OgnlContext context, Object target, Member member, String propertyName) {\n+    @Override\n+    public boolean isAccessible(Map context, Object target, Member member, String propertyName) {\n         int modifiers = member.getModifiers();\n         boolean result = Modifier.isPublic(modifiers);\n ",
    "output": "downgrade ognl to 3.3.5. #2954, #2953"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -54,7 +54,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 4.0.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.3"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -238,6 +238,7 @@ public static boolean completeMethodName(Completion completion) {\n                 res.add(method.getName());\n             }\n         }\n+        res.add(\"<init>\");\n \n         if (res.size() == 1) {\n             completion.complete(res.get(0).substring(lastToken.length()), true);",
    "output": "watch/trace support <init> completion. #2945"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n@@ -8,6 +8,7 @@\n import com.taobao.arthas.core.shell.system.Job;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.TokenUtils;\n+import com.taobao.arthas.core.view.Ansi;\n \n import java.util.List;\n \n@@ -166,6 +167,10 @@ private void handleJobs() {\n     }\n \n     private void handleExit() {\n+        String msg = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"Session has been terminated.\\n\"\n+                + \"Arthas is still running in the background.\\n\"\n+                + \"To completely shutdown arthas, please execute the 'stop' command.\\n\").reset().toString();\n+        term.write(msg);\n         term.close();\n     }\n }",
    "output": "improve quit message. #2936"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n@@ -98,18 +98,22 @@ private List<JavaFileObject> fuse(URL packageFolderURL) {\n \n             JarURLConnection jarConn = (JarURLConnection) packageFolderURL.openConnection();\n             String rootEntryName = jarConn.getEntryName();\n-            int rootEnd = rootEntryName.length() + 1;\n \n-            Enumeration<JarEntry> entryEnum = jarConn.getJarFile().entries();\n-            while (entryEnum.hasMoreElements()) {\n-                JarEntry jarEntry = entryEnum.nextElement();\n-                String name = jarEntry.getName();\n-                if (name.startsWith(rootEntryName) && name.indexOf('/', rootEnd) == -1 && name.endsWith(CLASS_FILE_EXTENSION)) {\n-                    URI uri = URI.create(jarUri + \"!/\" + name);\n-                    String binaryName = name.replaceAll(\"/\", \".\");\n-                    binaryName = binaryName.replaceAll(CLASS_FILE_EXTENSION + \"$\", \"\");\n+            if (rootEntryName != null) {\n+                //可能为 null（自己没有类文件时）\n+                int rootEnd = rootEntryName.length() + 1;\n \n-                    result.add(new CustomJavaFileObject(binaryName, uri));\n+                Enumeration<JarEntry> entryEnum = jarConn.getJarFile().entries();\n+                while (entryEnum.hasMoreElements()) {\n+                    JarEntry jarEntry = entryEnum.nextElement();\n+                    String name = jarEntry.getName();\n+                    if (name.startsWith(rootEntryName) && name.indexOf('/', rootEnd) == -1 && name.endsWith(CLASS_FILE_EXTENSION)) {\n+                        URI uri = URI.create(jarUri + \"!/\" + name);\n+                        String binaryName = name.replaceAll(\"/\", \".\");\n+                        binaryName = binaryName.replaceAll(CLASS_FILE_EXTENSION + \"$\", \"\");\n+\n+                        result.add(new CustomJavaFileObject(binaryName, uri));\n+                    }\n                 }\n             }\n         } catch (Exception e) {",
    "output": "Fixed  'PackageInternalsFinder.fuse' throws an exception when jar in jar is empty (#2941)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -54,7 +54,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 4.0.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.2"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -361,9 +361,8 @@ public void setJfrsync(String jfrsync) {\n         this.jfrsync = jfrsync;\n     }\n \n-    @Option(longName = \"wall\", flag = true)\n-    @Description(\"wall clock profiling interval\")\n-    @DefaultValue(\"10000000\")\n+    @Option(longName = \"wall\")\n+    @Description(\"wall clock profiling interval in milliseconds(recommended: 200)\")\n     public void setWall(Long wall) {\n         this.wall = wall;\n     }",
    "output": "polish #2905"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -234,6 +234,26 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private String timeout;\n \n+    /**\n+     * Features enabled for profiling\n+     */\n+    private String features;\n+\n+    /**\n+     * Profiling signal to use\n+     */\n+    private String signal;\n+\n+    /*\n+     * Clock source for sampling timestamps: monotonic or tsc\n+     */\n+    private String clock;\n+\n+    /*\n+     * Normalize method names by removing unique numerical suffixes from lambda classes.\n+     */\n+    private boolean norm;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -335,7 +355,8 @@ public void setLock(String lock) {\n     }\n \n     @Option(longName = \"jfrsync\")\n-    @Description(\"start Java Flight Recording with the given config along with the profiler\")\n+    @Description(\"Start Java Flight Recording with the given config along with the profiler. \"\n+            + \"Accepts a predefined profile name, a path to a .jfc file, or a list of JFR events starting with '+'. \")\n     public void setJfrsync(String jfrsync) {\n         this.jfrsync = jfrsync;\n     }\n@@ -353,6 +374,30 @@ public void setThreads(boolean threads) {\n         this.threads = threads;\n     }\n \n+    @Option(shortName = \"F\", longName = \"features\")\n+    @Description(\"Features enabled for profiling\")\n+    public void setFeatures(String features) {\n+        this.features = features;\n+    }\n+\n+    @Option(longName = \"signal\")\n+    @Description(\"Set the profiling signal to use\")\n+    public void setSignal(String signal) {\n+        this.signal = signal;\n+    }\n+\n+    @Option(longName = \"clock\")\n+    @Description(\"Clock source for sampling timestamps: monotonic or tsc\")\n+    public void setClock(String clock) {\n+        this.clock = clock;\n+    }\n+\n+    @Option(longName = \"norm\", flag = true)\n+    @Description(\"Normalize method names by removing unique numerical suffixes from lambda classes.\")\n+    public void setNorm(boolean norm) {\n+        this.norm = norm;\n+    }\n+\n     @Option(longName = \"sched\", flag = true)\n     @Description(\"group threads by scheduling policy\")\n     public void setSched(boolean sched) {\n@@ -584,6 +629,15 @@ private String executeArgs(ProfilerAction action) {\n         if (this.interval != null) {\n             sb.append(\"interval=\").append(this.interval).append(COMMA);\n         }\n+        if (this.features != null) {\n+            sb.append(\"features=\").append(this.features).append(COMMA);\n+        }\n+        if (this.signal != null) {\n+            sb.append(\"signal=\").append(this.signal).append(COMMA);\n+        }\n+        if (this.clock != null) {\n+            sb.append(\"clock=\").append(this.clock).append(COMMA);\n+        }\n         if (this.jstackdepth != null) {\n             sb.append(\"jstackdepth=\").append(this.jstackdepth).append(COMMA);\n         }\n@@ -611,6 +665,9 @@ private String executeArgs(ProfilerAction action) {\n         if (this.alluser) {\n             sb.append(\"alluser\").append(COMMA);\n         }\n+        if (this.norm) {\n+            sb.append(\"norm\").append(COMMA);\n+        }\n         if (this.includes != null) {\n             for (String include : includes) {\n                 sb.append(\"include=\").append(include).append(COMMA);",
    "output": "profiler command update Options and Documents (#2920)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -117,6 +117,11 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private Integer jstackdepth;\n \n+    /**\n+     * wall clock profiling interval\n+     */\n+    private Long wall;\n+\n     /**\n      * profile different threads separately\n      */\n@@ -335,6 +340,13 @@ public void setJfrsync(String jfrsync) {\n         this.jfrsync = jfrsync;\n     }\n \n+    @Option(longName = \"wall\", flag = true)\n+    @Description(\"wall clock profiling interval\")\n+    @DefaultValue(\"10000000\")\n+    public void setWall(Long wall) {\n+        this.wall = wall;\n+    }\n+\n     @Option(shortName = \"t\", longName = \"threads\", flag = true)\n     @Description(\"profile different threads separately\")\n     public void setThreads(boolean threads) {\n@@ -619,7 +631,9 @@ private String executeArgs(ProfilerAction action) {\n         if (this.end != null) {\n             sb.append(\"end=\").append(this.end).append(COMMA);\n         }\n-\n+        if (this.wall != null) {\n+            sb.append(\"wall=\").append(this.wall).append(COMMA);\n+        }\n         if (this.title != null) {\n             sb.append(\"title=\").append(this.title).append(COMMA);\n         }",
    "output": "profiler command support --wall option(#2905)"
  },
  {
    "input": "diff --git a/core/src/main/java/one/profiler/AsyncProfiler.java b/core/src/main/java/one/profiler/AsyncProfiler.java\n--- a/core/src/main/java/one/profiler/AsyncProfiler.java\n+++ b/core/src/main/java/one/profiler/AsyncProfiler.java\n@@ -1,17 +1,6 @@\n /*\n- * Copyright 2018 Andrei Pangin\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright The async-profiler authors\n+ * SPDX-License-Identifier: Apache-2.0\n  */\n \n package one.profiler;\n@@ -283,4 +272,4 @@ private void filterThread(Thread thread, boolean enable) {\n     private native String execute0(String command) throws IllegalArgumentException, IllegalStateException, IOException;\n \n     private native void filterThread0(Thread thread, boolean enable);\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/core/src/main/java/one/profiler/AsyncProfilerMXBean.java b/core/src/main/java/one/profiler/AsyncProfilerMXBean.java\n--- a/core/src/main/java/one/profiler/AsyncProfilerMXBean.java\n+++ b/core/src/main/java/one/profiler/AsyncProfilerMXBean.java\n@@ -1,17 +1,6 @@\n /*\n- * Copyright 2018 Andrei Pangin\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright The async-profiler authors\n+ * SPDX-License-Identifier: Apache-2.0\n  */\n \n package one.profiler;\n@@ -40,4 +29,4 @@ public interface AsyncProfilerMXBean {\n     String dumpCollapsed(Counter counter);\n     String dumpTraces(int maxTraces);\n     String dumpFlat(int maxMethods);\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/core/src/main/java/one/profiler/Counter.java b/core/src/main/java/one/profiler/Counter.java\n--- a/core/src/main/java/one/profiler/Counter.java\n+++ b/core/src/main/java/one/profiler/Counter.java\n@@ -1,17 +1,6 @@\n /*\n- * Copyright 2018 Andrei Pangin\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright The async-profiler authors\n+ * SPDX-License-Identifier: Apache-2.0\n  */\n \n package one.profiler;\n@@ -22,4 +11,4 @@\n public enum Counter {\n     SAMPLES,\n     TOTAL\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/core/src/main/java/one/profiler/Events.java b/core/src/main/java/one/profiler/Events.java\n--- a/core/src/main/java/one/profiler/Events.java\n+++ b/core/src/main/java/one/profiler/Events.java\n@@ -1,17 +1,6 @@\n /*\n- * Copyright 2018 Andrei Pangin\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright The async-profiler authors\n+ * SPDX-License-Identifier: Apache-2.0\n  */\n \n package one.profiler;\n@@ -24,5 +13,6 @@ public class Events {\n     public static final String ALLOC  = \"alloc\";\n     public static final String LOCK   = \"lock\";\n     public static final String WALL   = \"wall\";\n+    public static final String CTIMER = \"ctimer\";\n     public static final String ITIMER = \"itimer\";\n-}\n+}\n\\ No newline at end of file",
    "output": "update one.profiler"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -186,9 +186,15 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                     } finally {\n                         IOUtils.close(fileInputStream);\n                     }\n-                    ctx.write(fullResp);\n-                    ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n-                    future.addListener(ChannelFutureListener.CLOSE);\n+                    ChannelFuture channelFuture = ctx.writeAndFlush(fullResp);\n+                    channelFuture.addListener((ChannelFutureListener) future -> {\n+                        if (future.isSuccess()) {\n+                            ChannelFuture lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                            lastContentFuture.addListener(ChannelFutureListener.CLOSE);\n+                        } else {\n+                            future.channel().close();\n+                        }\n+                    });\n                     return fullResp;\n                 }\n                 logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);",
    "output": "fix http ERR_CONTENT_LENGTH_MISMATCH. #2916"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -429,14 +429,14 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                             + File.separator + bootstrap.getUseVersion() + File.separator + \"arthas\");\n             if (!specialVersionDir.exists()) {\n                 // try to download arthas from remote server.\n-                DownloadUtils.downArthasPackaging(bootstrap.getRepoMirror(), bootstrap.isuseHttp(),\n+                DownloadUtils.downArthasPackaging(bootstrap.getRepoMirror(), bootstrap.isUseHttp(),\n                                 bootstrap.getUseVersion(), ARTHAS_LIB_DIR.getAbsolutePath());\n             }\n             verifyArthasHome(specialVersionDir.getAbsolutePath());\n             arthasHomeDir = specialVersionDir;\n         }\n \n-        // Try set the directory where arthas-boot.jar is located to arhtas home\n+        // Try set the directory where arthas-boot.jar is located to arthas home\n         if (arthasHomeDir == null) {\n             CodeSource codeSource = Bootstrap.class.getProtectionDomain().getCodeSource();\n             if (codeSource != null) {\n@@ -470,16 +470,16 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             List<String> versionList = listNames(ARTHAS_LIB_DIR);\n             Collections.sort(versionList);\n \n-            String localLastestVersion = null;\n+            String localLatestVersion = null;\n             if (!versionList.isEmpty()) {\n-                localLastestVersion = versionList.get(versionList.size() - 1);\n+                localLatestVersion = versionList.get(versionList.size() - 1);\n             }\n \n-            String remoteLastestVersion = DownloadUtils.readLatestReleaseVersion();\n+            String remoteLatestVersion = DownloadUtils.readLatestReleaseVersion();\n \n             boolean needDownload = false;\n-            if (localLastestVersion == null) {\n-                if (remoteLastestVersion == null) {\n+            if (localLatestVersion == null) {\n+                if (remoteLatestVersion == null) {\n                     // exit\n                     AnsiLog.error(\"Can not find Arthas under local: {} and remote repo mirror: {}\", ARTHAS_LIB_DIR,\n                             bootstrap.getRepoMirror());\n@@ -490,23 +490,23 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                     needDownload = true;\n                 }\n             } else {\n-                if (remoteLastestVersion != null) {\n-                    if (localLastestVersion.compareTo(remoteLastestVersion) < 0) {\n-                        AnsiLog.info(\"local lastest version: {}, remote lastest version: {}, try to download from remote.\",\n-                                        localLastestVersion, remoteLastestVersion);\n+                if (remoteLatestVersion != null) {\n+                    if (localLatestVersion.compareTo(remoteLatestVersion) < 0) {\n+                        AnsiLog.info(\"local latest version: {}, remote latest version: {}, try to download from remote.\",\n+                                localLatestVersion, remoteLatestVersion);\n                         needDownload = true;\n                     }\n                 }\n             }\n             if (needDownload) {\n                 // try to download arthas from remote server.\n-                DownloadUtils.downArthasPackaging(bootstrap.getRepoMirror(), bootstrap.isuseHttp(),\n-                                remoteLastestVersion, ARTHAS_LIB_DIR.getAbsolutePath());\n-                localLastestVersion = remoteLastestVersion;\n+                DownloadUtils.downArthasPackaging(bootstrap.getRepoMirror(), bootstrap.isUseHttp(),\n+                        remoteLatestVersion, ARTHAS_LIB_DIR.getAbsolutePath());\n+                localLatestVersion = remoteLatestVersion;\n             }\n \n             // get the latest version\n-            arthasHomeDir = new File(ARTHAS_LIB_DIR, localLastestVersion + File.separator + \"arthas\");\n+            arthasHomeDir = new File(ARTHAS_LIB_DIR, localLatestVersion + File.separator + \"arthas\");\n         }\n \n         verifyArthasHome(arthasHomeDir.getAbsolutePath());\n@@ -785,7 +785,7 @@ public String getRepoMirror() {\n         return repoMirror;\n     }\n \n-    public boolean isuseHttp() {\n+    public boolean isUseHttp() {\n         return useHttp;\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -39,7 +39,7 @@ public void setClear(boolean clear) {\n     }\n \n     @Argument(index = 0, argName = \"n\", required = false)\n-    @Description(\"how many history commnads to display\")\n+    @Description(\"how many history commands to display\")\n     public void setNumber(int n) {\n         this.n = n;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n@@ -322,7 +322,7 @@ public void process(CommandProcess process) {\n                 try {\n                     r.setDestination(Paths.get(getFilename()));\n                 } catch (IOException e) {\n-                    process.end(-1, \"Failed to stop\" + r.getName() + \". Could not set destination for \" + filename + \"to file\" + e.getMessage());\n+                    process.end(-1, \"Failed to stop \" + r.getName() + \". Could not set destination for \" + filename + \"to file\" + e.getMessage());\n                 }\n \n                 r.stop();\n@@ -353,7 +353,7 @@ public long parseSize(String s) throws Exception {\n             try {\n                 return Long.parseLong(s);\n             } catch (Exception e) {\n-                throw new NumberFormatException(\"'\" + s + \"' is not a valid size. Shoule be numeric value followed by a unit, i.e. 20M. Valid units k, M, G\");\n+                throw new NumberFormatException(\"'\" + s + \"' is not a valid size. Should be numeric value followed by a unit, i.e. 20M. Valid units k, M, G\");\n             }\n         }\n     }",
    "output": "typo: ariable name and word error."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -236,16 +236,12 @@ public class ProfilerCommand extends AnnotatedCommand {\n         String profilerSoPath = null;\n         if (OSUtils.isMac()) {\n             // FAT_BINARY support both x86_64/arm64\n-            profilerSoPath = \"async-profiler/libasyncProfiler-mac.so\";\n+            profilerSoPath = \"async-profiler/libasyncProfiler-mac.dylib\";\n         }\n         if (OSUtils.isLinux()) {\n-            if (OSUtils.isX86_64() && OSUtils.isMuslLibc()) {\n-                profilerSoPath = \"async-profiler/libasyncProfiler-linux-musl-x64.so\";\n-            } else if(OSUtils.isX86_64()){\n+            if (OSUtils.isX86_64()) {\n                 profilerSoPath = \"async-profiler/libasyncProfiler-linux-x64.so\";\n-            } else if (OSUtils.isArm64() && OSUtils.isMuslLibc()) {\n-                profilerSoPath = \"async-profiler/libasyncProfiler-linux-musl-arm64.so\";\n-            } else if (OSUtils.isArm64()) {\n+            }  else if (OSUtils.isArm64()) {\n                 profilerSoPath = \"async-profiler/libasyncProfiler-linux-arm64.so\";\n             }\n         }",
    "output": "Upgrade async profiler to 3.0 (#2903)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -54,7 +54,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 4.0.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.1"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -45,7 +45,8 @@\n  */\n @Name(\"arthas-boot\")\n @Summary(\"Bootstrap Arthas\")\n-@Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n+@Description(\"NOTE: Arthas 4 supports JDK 8+. If you need to diagnose applications running on JDK 6/7, you can use Arthas 3.\\n\\n\"\n+                +\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar --username admin --password <password>\\n\"\n                 + \"  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws' --app-name demoapp\\n\"",
    "output": "feat: website supports switching to v3.x and add notice for not supporting JDK 6/7 (#2891)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n@@ -222,8 +222,8 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok\n                 stdoutHandlerChain.add(new RedirectHandler());\n             }\n         }\n-        ProcessOutput ProcessOutput = new ProcessOutput(stdoutHandlerChain, cacheLocation, term);\n-        ProcessImpl process = new ProcessImpl(command, remaining, command.processHandler(), ProcessOutput, resultDistributor);\n+        ProcessOutput processOutput = new ProcessOutput(stdoutHandlerChain, cacheLocation, term);\n+        ProcessImpl process = new ProcessImpl(command, remaining, command.processHandler(), processOutput, resultDistributor);\n         process.setTty(term);\n         return process;\n     }",
    "output": "fix typo (#2762)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n@@ -102,7 +102,8 @@ public void process(CommandProcess process) {\n \n         Express unpooledExpress = ExpressFactory.unpooledExpress(classLoader);\n         try {\n-            Object value = unpooledExpress.get(express);\n+            // https://github.com/alibaba/arthas/issues/2892\n+            Object value = unpooledExpress.bind(new Object()).get(express);\n             OgnlModel ognlModel = new OgnlModel()\n                     .setValue(new ObjectVO(value, expand));\n             process.appendResult(ognlModel);",
    "output": "fix ognl command not invoke static method. #2892"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n@@ -68,7 +68,7 @@ public void process(CommandProcess process) {\n                 message = \"username can not be empty!\";\n                 return;\n             }\n-            if (password == null) { // 没有传入passowrd参数时，打印当前结果\n+            if (password == null) { // 没有传入password参数时，打印当前结果\n                 boolean authenticated = session.get(ArthasConstants.SUBJECT_KEY) != null;\n                 boolean needLogin = this.authenticator.needLogin();\n ",
    "output": "fix typo (#2894)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -449,31 +449,37 @@ private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats(Instrumentation inst) {\n \n     // 以树状列出ClassLoader的继承结构\n     private static List<ClassLoaderVO> processClassLoaderTree(List<ClassLoaderVO> classLoaders) {\n-        List<ClassLoaderVO> rootClassLoaders = new ArrayList<ClassLoaderVO>();\n-        List<ClassLoaderVO> parentNotNullClassLoaders = new ArrayList<ClassLoaderVO>();\n+        List<ClassLoaderVO> rootClassLoaders = new ArrayList<>();\n+        Map<String, List<ClassLoaderVO>> childMap = new HashMap<>();\n+\n+        // 分离根节点和非根节点，并构建父子关系映射\n         for (ClassLoaderVO classLoaderVO : classLoaders) {\n             if (classLoaderVO.getParent() == null) {\n                 rootClassLoaders.add(classLoaderVO);\n             } else {\n-                parentNotNullClassLoaders.add(classLoaderVO);\n+                childMap.computeIfAbsent(classLoaderVO.getParent(), k -> new ArrayList<>()).add(classLoaderVO);\n             }\n         }\n \n-        for (ClassLoaderVO classLoaderVO : rootClassLoaders) {\n-            buildTree(classLoaderVO, parentNotNullClassLoaders);\n+        // 构建树\n+        for (ClassLoaderVO root : rootClassLoaders) {\n+            buildTree(root, childMap);\n         }\n+\n         return rootClassLoaders;\n     }\n \n-    private static void buildTree(ClassLoaderVO parent, List<ClassLoaderVO> parentNotNullClassLoaders) {\n-        for (ClassLoaderVO classLoaderVO : parentNotNullClassLoaders) {\n-            if (parent.getName().equals(classLoaderVO.getParent())){\n-                parent.addChild(classLoaderVO);\n-                buildTree(classLoaderVO, parentNotNullClassLoaders);\n+    private static void buildTree(ClassLoaderVO parent, Map<String, List<ClassLoaderVO>> childMap) {\n+        List<ClassLoaderVO> children = childMap.get(parent.getName());\n+        if (children != null) {\n+            for (ClassLoaderVO child : children) {\n+                parent.addChild(child);\n+                buildTree(child, childMap);\n             }\n         }\n     }\n \n+\n     private static Set<ClassLoader> getAllClassLoaders(Instrumentation inst, Filter... filters) {\n         Set<ClassLoader> classLoaderSet = new HashSet<ClassLoader>();\n ",
    "output": "Merge pull request #2845 from ZhaoGuorui666/optimize-buildtree\n\noptimize BuildTree of ClassLoader -t"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.8\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 4.0.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 4.0.0"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -212,8 +212,10 @@ private ExitStatus processTopBusyThreads(CommandProcess process) {\n         List<BusyThreadInfo> busyThreadInfos = new ArrayList<BusyThreadInfo>(topNThreads.size());\n         for (ThreadVO thread : topNThreads) {\n             ThreadInfo threadInfo = findThreadInfoById(threadInfos, thread.getId());\n-            BusyThreadInfo busyThread = new BusyThreadInfo(thread, threadInfo);\n-            busyThreadInfos.add(busyThread);\n+            if (threadInfo != null) {\n+                BusyThreadInfo busyThread = new BusyThreadInfo(thread, threadInfo);\n+                busyThreadInfos.add(busyThread);\n+            }\n         }\n         process.appendResult(new ThreadModel(busyThreadInfos));\n         return ExitStatus.success();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -266,6 +266,9 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l\n     }\n \n     public static String getFullStacktrace(BusyThreadInfo threadInfo, int lockIdentityHashCode, int blockingThreadCount) {\n+        if (threadInfo == null) {\n+            return \"\";\n+        }\n         StringBuilder sb = new StringBuilder(\"\\\"\" + threadInfo.getName() + \"\\\"\");\n         if (threadInfo.getId() > 0) {\n             sb.append(\" Id=\").append(threadInfo.getId());",
    "output": "fix thread command NullPointerException. #2875"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n@@ -112,12 +112,12 @@ public void process(CommandProcess process) {\n         }\n \n         InputStream input = null;\n+        ByteBuf convertResult = null;\n \n         try {\n             input = new FileInputStream(f);\n             byte[] bytes = IOUtils.getBytes(input);\n \n-            ByteBuf convertResult = null;\n             if (this.decode) {\n                 convertResult = Base64.decode(Unpooled.wrappedBuffer(bytes));\n             } else {\n@@ -138,6 +138,9 @@ public void process(CommandProcess process) {\n             process.end(1, \"read file error: \" + e.getMessage());\n             return;\n         } finally {\n+            if (convertResult != null) {\n+                convertResult.release();\n+            }\n             IOUtils.close(input);\n         }\n \n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n@@ -134,17 +134,25 @@ public void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n             if (msg instanceof HttpContent) {\n                 HttpContent content = (HttpContent) msg;\n \n-                ByteBuf byteBuf = content.content();\n-                byte[] bytes = new byte[byteBuf.readableBytes()];\n-                byteBuf.readBytes(bytes);\n+                ByteBuf byteBuf = null;\n+                try{\n+                    byteBuf = content.content();\n+                    byte[] bytes = new byte[byteBuf.readableBytes()];\n+                    byteBuf.readBytes(bytes);\n \n-                simpleHttpResponse.setContent(bytes);\n+                    simpleHttpResponse.setContent(bytes);\n \n-                promise.setSuccess(simpleHttpResponse);\n+                    promise.setSuccess(simpleHttpResponse);\n \n-                if (content instanceof LastHttpContent) {\n-                    ctx.close();\n+                    if (content instanceof LastHttpContent) {\n+                        ctx.close();\n+                    }\n+                }finally {\n+                    if (byteBuf != null) {\n+                        byteBuf.release();\n+                    }\n                 }\n+\n             }\n         }\n \n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n@@ -120,17 +120,24 @@ public void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) throws\n                     String targetUrl = targetUrls.get(0);\n                     SimpleHttpResponse simpleHttpResponse = proxyClient.query(targetUrl);\n \n-                    ByteBuf byteBuf = Base64\n-                            .encode(Unpooled.wrappedBuffer(SimpleHttpResponse.toBytes(simpleHttpResponse)));\n-                    String requestData = byteBuf.toString(CharsetUtil.UTF_8);\n-\n-                    QueryStringEncoder queryEncoder = new QueryStringEncoder(\"\");\n-                    queryEncoder.addParam(URIConstans.METHOD, MethodConstants.HTTP_PROXY);\n-                    queryEncoder.addParam(URIConstans.PROXY_REQUEST_ID, id);\n-                    queryEncoder.addParam(URIConstans.PROXY_RESPONSE_DATA, requestData);\n-\n-                    String url = queryEncoder.toString();\n-                    ctx.writeAndFlush(new TextWebSocketFrame(url));\n+                    ByteBuf byteBuf = null;\n+                    try{\n+                        byteBuf = Base64\n+                                .encode(Unpooled.wrappedBuffer(SimpleHttpResponse.toBytes(simpleHttpResponse)));\n+                        String requestData = byteBuf.toString(CharsetUtil.UTF_8);\n+\n+                        QueryStringEncoder queryEncoder = new QueryStringEncoder(\"\");\n+                        queryEncoder.addParam(URIConstans.METHOD, MethodConstants.HTTP_PROXY);\n+                        queryEncoder.addParam(URIConstans.PROXY_REQUEST_ID, id);\n+                        queryEncoder.addParam(URIConstans.PROXY_RESPONSE_DATA, requestData);\n+\n+                        String url = queryEncoder.toString();\n+                        ctx.writeAndFlush(new TextWebSocketFrame(url));\n+                    }finally {\n+                        if (byteBuf != null) {\n+                            byteBuf.release();\n+                        }\n+                    }\n                 }\n             }\n ",
    "output": "Release netty ByteBuf after use (#2835)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -449,31 +449,37 @@ private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats(Instrumentation inst) {\n \n     // 以树状列出ClassLoader的继承结构\n     private static List<ClassLoaderVO> processClassLoaderTree(List<ClassLoaderVO> classLoaders) {\n-        List<ClassLoaderVO> rootClassLoaders = new ArrayList<ClassLoaderVO>();\n-        List<ClassLoaderVO> parentNotNullClassLoaders = new ArrayList<ClassLoaderVO>();\n+        List<ClassLoaderVO> rootClassLoaders = new ArrayList<>();\n+        Map<String, List<ClassLoaderVO>> childMap = new HashMap<>();\n+\n+        // 分离根节点和非根节点，并构建父子关系映射\n         for (ClassLoaderVO classLoaderVO : classLoaders) {\n             if (classLoaderVO.getParent() == null) {\n                 rootClassLoaders.add(classLoaderVO);\n             } else {\n-                parentNotNullClassLoaders.add(classLoaderVO);\n+                childMap.computeIfAbsent(classLoaderVO.getParent(), k -> new ArrayList<>()).add(classLoaderVO);\n             }\n         }\n \n-        for (ClassLoaderVO classLoaderVO : rootClassLoaders) {\n-            buildTree(classLoaderVO, parentNotNullClassLoaders);\n+        // 构建树\n+        for (ClassLoaderVO root : rootClassLoaders) {\n+            buildTree(root, childMap);\n         }\n+\n         return rootClassLoaders;\n     }\n \n-    private static void buildTree(ClassLoaderVO parent, List<ClassLoaderVO> parentNotNullClassLoaders) {\n-        for (ClassLoaderVO classLoaderVO : parentNotNullClassLoaders) {\n-            if (parent.getName().equals(classLoaderVO.getParent())){\n-                parent.addChild(classLoaderVO);\n-                buildTree(classLoaderVO, parentNotNullClassLoaders);\n+    private static void buildTree(ClassLoaderVO parent, Map<String, List<ClassLoaderVO>> childMap) {\n+        List<ClassLoaderVO> children = childMap.get(parent.getName());\n+        if (children != null) {\n+            for (ClassLoaderVO child : children) {\n+                parent.addChild(child);\n+                buildTree(child, childMap);\n             }\n         }\n     }\n \n+\n     private static Set<ClassLoader> getAllClassLoaders(Instrumentation inst, Filter... filters) {\n         Set<ClassLoader> classLoaderSet = new HashSet<ClassLoader>();\n ",
    "output": "optimize BuildTree of ClassLoader -t"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -233,29 +233,29 @@ public class ProfilerCommand extends AnnotatedCommand {\n     private static AsyncProfiler profiler = null;\n \n     static {\n-        String profierSoPath = null;\n+        String profilerSoPath = null;\n         if (OSUtils.isMac()) {\n             // FAT_BINARY support both x86_64/arm64\n-            profierSoPath = \"async-profiler/libasyncProfiler-mac.so\";\n+            profilerSoPath = \"async-profiler/libasyncProfiler-mac.so\";\n         }\n         if (OSUtils.isLinux()) {\n             if (OSUtils.isX86_64() && OSUtils.isMuslLibc()) {\n-                profierSoPath = \"async-profiler/libasyncProfiler-linux-musl-x64.so\";\n+                profilerSoPath = \"async-profiler/libasyncProfiler-linux-musl-x64.so\";\n             } else if(OSUtils.isX86_64()){\n-                profierSoPath = \"async-profiler/libasyncProfiler-linux-x64.so\";\n+                profilerSoPath = \"async-profiler/libasyncProfiler-linux-x64.so\";\n             } else if (OSUtils.isArm64() && OSUtils.isMuslLibc()) {\n-                profierSoPath = \"async-profiler/libasyncProfiler-linux-musl-arm64.so\";\n+                profilerSoPath = \"async-profiler/libasyncProfiler-linux-musl-arm64.so\";\n             } else if (OSUtils.isArm64()) {\n-                profierSoPath = \"async-profiler/libasyncProfiler-linux-arm64.so\";\n+                profilerSoPath = \"async-profiler/libasyncProfiler-linux-arm64.so\";\n             }\n         }\n \n-        if (profierSoPath != null) {\n+        if (profilerSoPath != null) {\n             CodeSource codeSource = ProfilerCommand.class.getProtectionDomain().getCodeSource();\n             if (codeSource != null) {\n                 try {\n                     File bootJarPath = new File(codeSource.getLocation().toURI().getSchemeSpecificPart());\n-                    File soFile = new File(bootJarPath.getParentFile(), profierSoPath);\n+                    File soFile = new File(bootJarPath.getParentFile(), profilerSoPath);\n                     if (soFile.exists()) {\n                         libPath = soFile.getAbsolutePath();\n                     }",
    "output": "fix typo (#2830)"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n@@ -33,6 +33,7 @@ public DynamicCompiler(ClassLoader classLoader) {\n         standardFileManager = javaCompiler.getStandardFileManager(null, null, null);\n \n         options.add(\"-Xlint:unchecked\");\n+        options.add(\"-g\");\n         dynamicClassLoader = new DynamicClassLoader(classLoader);\n     }\n ",
    "output": "update DynamicCompiler add -g option for generate LocalVariableTable"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -168,7 +168,7 @@ public void setRegEx(boolean regEx) {\n     }\n \n     @Option(shortName = \"n\", longName = \"limits\")\n-    @Description(\"Threshold of execution times\")\n+    @Description(\"Threshold of execution times, default value 100\")\n     public void setNumberOfLimit(int numberOfLimit) {\n         this.numberOfLimit = numberOfLimit;\n     }",
    "output": "update tt docs. #2771"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -28,19 +28,19 @@ public static float javaVersion() {\n     }\n \n     public static boolean isJava6() {\n-        return JAVA_VERSION_STR.equals(\"1.6\");\n+        return \"1.6\".equals(JAVA_VERSION_STR);\n     }\n \n     public static boolean isJava7() {\n-        return JAVA_VERSION_STR.equals(\"1.7\");\n+        return \"1.7\".equals(JAVA_VERSION_STR);\n     }\n \n     public static boolean isJava8() {\n-        return JAVA_VERSION_STR.equals(\"1.8\");\n+        return \"1.8\".equals(JAVA_VERSION_STR);\n     }\n \n     public static boolean isJava9() {\n-        return JAVA_VERSION_STR.equals(\"9\");\n+        return \"9\".equals(JAVA_VERSION_STR);\n     }\n \n     public static boolean isLessThanJava9() {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -42,20 +42,10 @@ public static void writeByteArrayToFile(File file, byte[] data) throws IOExcepti\n      * @since IO 2.1\n      */\n     public static void writeByteArrayToFile(File file, byte[] data, boolean append) throws IOException {\n-        OutputStream out = null;\n-        try {\n-            out = openOutputStream(file, append);\n+        try (OutputStream out = openOutputStream(file, append)) {\n             out.write(data);\n-            out.close(); // don't swallow close Exception if copy completes normally\n-        } finally {\n-            try {\n-                if (out != null) {\n-                    out.close();\n-                }\n-            } catch (IOException ioe) {\n-                // ignore\n-            }\n         }\n+        // ignore\n     }\n \n     /**\n@@ -111,10 +101,8 @@ private static boolean isAuthCommand(String command) {\n      * @param file the file to save the history\n      */\n     public static void saveCommandHistory(List<int[]> history, File file) {\n-        OutputStream out = null;\n-        try {\n-            out = new BufferedOutputStream(openOutputStream(file, false));\n-            for (int[] command: history) {\n+        try (OutputStream out = new BufferedOutputStream(openOutputStream(file, false))) {\n+            for (int[] command : history) {\n                 String commandStr = Helper.fromCodePoints(command);\n                 if (isAuthCommand(commandStr)) {\n                     command = AUTH_CODEPOINTS;\n@@ -127,20 +115,13 @@ public static void saveCommandHistory(List<int[]> history, File file) {\n             }\n         } catch (IOException e) {\n             // ignore\n-        } finally {\n-            try {\n-                if (out != null) {\n-                    out.close();\n-                }\n-            } catch (IOException ioe) {\n-                // ignore\n-            }\n         }\n+        // ignore\n     }\n \n     public static List<int[]> loadCommandHistory(File file) {\n         BufferedReader br = null;\n-        List<int[]> history = new ArrayList<int[]>();\n+        List<int[]> history = new ArrayList<>();\n         try {\n             br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n             String line;\n@@ -167,10 +148,8 @@ public static List<int[]> loadCommandHistory(File file) {\n      * @param file the file to save the history\n      */\n     public static void saveCommandHistoryString(List<String> history, File file) {\n-        OutputStream out = null;\n-        try {\n-            out = new BufferedOutputStream(openOutputStream(file, false));\n-            for (String command: history) {\n+        try (OutputStream out = new BufferedOutputStream(openOutputStream(file, false))) {\n+            for (String command : history) {\n                 if (!StringUtils.isBlank(command)) {\n                     if (isAuthCommand(command)) {\n                         command = ArthasConstants.AUTH;\n@@ -181,20 +160,13 @@ public static void saveCommandHistoryString(List<String> history, File file) {\n             }\n         } catch (IOException e) {\n             // ignore\n-        } finally {\n-            try {\n-                if (out != null) {\n-                    out.close();\n-                }\n-            } catch (IOException ioe) {\n-                // ignore\n-            }\n         }\n+        // ignore\n     }\n \n     public static List<String> loadCommandHistoryString(File file) {\n         BufferedReader br = null;\n-        List<String> history = new ArrayList<String>();\n+        List<String> history = new ArrayList<>();\n         try {\n             br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n             String line;\n@@ -218,8 +190,7 @@ public static List<String> loadCommandHistoryString(File file) {\n     }\n \n     public static String readFileToString(File file, Charset encoding) throws IOException {\n-        FileInputStream stream = new FileInputStream(file);\n-        try {\n+        try (FileInputStream stream = new FileInputStream(file)) {\n             Reader reader = new BufferedReader(new InputStreamReader(stream, encoding));\n             StringBuilder builder = new StringBuilder();\n             char[] buffer = new char[8192];\n@@ -228,8 +199,6 @@ public static String readFileToString(File file, Charset encoding) throws IOExce\n                 builder.append(buffer, 0, read);\n             }\n             return builder.toString();\n-        } finally {\n-            stream.close();\n         }\n     }\n ",
    "output": "Refactored code to adopt JDK 8 style and features. (#2759)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -53,16 +53,20 @@ public abstract class AnsiLog {\n     private static final String ERROR_COLOR_PREFIX = \"[\" + colorStr(\"ERROR\", RED) + \"] \";\n \n     static {\n-        if (System.console() != null) {\n-            enableColor = true;\n-            // windows dos, do not support color\n-            if (OSUtils.isWindows()) {\n-                enableColor = false;\n+        try {\n+            if (System.console() != null) {\n+                enableColor = true;\n+                // windows dos, do not support color\n+                if (OSUtils.isWindows()) {\n+                    enableColor = false;\n+                }\n             }\n-        }\n-        // cygwin and mingw support color\n-        if (OSUtils.isCygwinOrMinGW()) {\n-            enableColor = true;\n+            // cygwin and mingw support color\n+            if (OSUtils.isCygwinOrMinGW()) {\n+                enableColor = true;\n+            }\n+        } catch (Throwable t) {\n+            // ignore\n         }\n     }\n ",
    "output": "fix AnsiLog static init may error. #2740"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/ReflectException.java b/common/src/main/java/com/taobao/arthas/common/ReflectException.java\n--- a/common/src/main/java/com/taobao/arthas/common/ReflectException.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ReflectException.java\n@@ -6,7 +6,7 @@ public class ReflectException extends RuntimeException {\n     private Throwable cause;\n \n     public ReflectException(Throwable cause) {\n-        super(cause.getClass().getName() + \"-->\" + cause.getMessage());\n+        super(cause != null ? cause.getClass().getName() + \"-->\" + cause.getMessage() : \"\");\n         this.cause = cause;\n     }\n \n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java b/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n@@ -3,7 +3,9 @@\n import java.beans.IntrospectionException;\n import java.beans.Introspector;\n import java.beans.PropertyDescriptor;\n+import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n@@ -429,6 +431,29 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \n         Class c = null;\n \n+        // 在 jdk 17之后，需要hack方式来调用 #2659\n+        if (c == null && classLoaderDefineClassMethod != null) {\n+            Lookup implLookup = UnsafeUtils.implLookup();\n+            MethodHandle unreflect = implLookup.unreflect(classLoaderDefineClassMethod);\n+\n+            if (protectionDomain == null) {\n+                protectionDomain = PROTECTION_DOMAIN;\n+            }\n+            try {\n+                c = (Class) unreflect.invoke(loader, className, b, 0, b.length, protectionDomain);\n+            } catch (InvocationTargetException ex) {\n+                throw new ReflectException(ex.getTargetException());\n+            } catch (Throwable ex) {\n+                // Fall through if setAccessible fails with InaccessibleObjectException on JDK\n+                // 9+\n+                // (on the module path and/or with a JVM bootstrapped with\n+                // --illegal-access=deny)\n+                if (!ex.getClass().getName().endsWith(\"InaccessibleObjectException\")) {\n+                    throw new ReflectException(ex);\n+                }\n+            }\n+        }\n+\n         // Preferred option: JDK 9+ Lookup.defineClass API if ClassLoader matches\n         if (contextClass != null && contextClass.getClassLoader() == loader && privateLookupInMethod != null\n                         && lookupDefineClassMethod != null) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/UnsafeUtils.java b/common/src/main/java/com/taobao/arthas/common/UnsafeUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/UnsafeUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/UnsafeUtils.java\n@@ -0,0 +1,44 @@\n+package com.taobao.arthas.common;\n+\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+\n+import sun.misc.Unsafe;\n+\n+/**\n+ * \n+ * @author hengyunabc 2023-09-21\n+ *\n+ */\n+public class UnsafeUtils {\n+    public static final Unsafe UNSAFE;\n+    private static MethodHandles.Lookup IMPL_LOOKUP;\n+\n+    static {\n+        Unsafe unsafe = null;\n+        try {\n+            Field theUnsafeField = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+            theUnsafeField.setAccessible(true);\n+            unsafe = (Unsafe) theUnsafeField.get(null);\n+        } catch (Throwable ignored) {\n+            // ignored\n+        }\n+        UNSAFE = unsafe;\n+    }\n+\n+    public static MethodHandles.Lookup implLookup() {\n+        if (IMPL_LOOKUP == null) {\n+            Class<MethodHandles.Lookup> lookupClass = MethodHandles.Lookup.class;\n+\n+            try {\n+                Field implLookupField = lookupClass.getDeclaredField(\"IMPL_LOOKUP\");\n+                long offset = UNSAFE.staticFieldOffset(implLookupField);\n+                IMPL_LOOKUP = (MethodHandles.Lookup) UNSAFE.getObject(UNSAFE.staticFieldBase(implLookupField), offset);\n+            } catch (Throwable e) {\n+                // ignored\n+            }\n+        }\n+        return IMPL_LOOKUP;\n+    }\n+}",
    "output": "use MethodHandles.Lookup IMPL_LOOKUP to support define class after jdk 17. #2659"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -219,6 +219,16 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private String chunktime;\n \n+    /**\n+     * run profiler in a loop (continuous profiling)\n+     */\n+    private String loop;\n+\n+    /**\n+     * automatically stop profiler at TIME (absolute or relative)\n+     */\n+    private String timeout;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -458,6 +468,25 @@ public void setChunktime(String chunktime) {\n         this.chunktime = chunktime;\n     }\n \n+    @Option(longName = \"loop\")\n+    @Description(\"run profiler in a loop (continuous profiling)\")\n+    public void setLoop(String loop) {\n+        this.loop = loop;\n+        if (this.action.equals(\"collect\")) {\n+            this.action = \"start\";\n+        }\n+    }\n+\n+    @Option(longName = \"timeout\")\n+    @Description(\"automatically stop profiler at TIME (absolute or relative)\")\n+    public void setTimeout(String timeout) {\n+        this.timeout = timeout;\n+        if (this.action.equals(\"collect\")) {\n+            this.action = \"start\";\n+        }\n+    }\n+\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n@@ -504,7 +533,7 @@ private AsyncProfiler profilerInstance() {\n      */\n     public enum ProfilerAction {\n         // start, resume, stop, dump, check, status, meminfo, list, collect,\n-        start, resume, stop, dump, check, status, meminfo, list,\n+        start, resume, stop, dump, check, status, meminfo, list, collect,\n         version,\n \n         load,\n@@ -613,6 +642,12 @@ private String executeArgs(ProfilerAction action) {\n         if (this.chunktime!= null) {\n             sb.append(\"chunktime=\").append(this.chunktime).append(COMMA);\n         }\n+        if (this.loop != null) {\n+            sb.append(\"loop=\").append(this.loop).append(COMMA);\n+        }\n+        if (this.timeout != null) {\n+            sb.append(\"timeout=\").append(this.timeout).append(COMMA);\n+        }\n \n         return sb.toString();\n     }\n@@ -646,12 +681,8 @@ public void process(final CommandProcess process) {\n                 }\n                 String result = execute(asyncProfiler, this.actionArg);\n                 appendExecuteResult(process, result);\n-            } else if (ProfilerAction.start.equals(profilerAction)) {\n-                //jfr录制，必须在start的时候就指定文件路径\n-                if (this.file == null && \"jfr\".equals(format)) {\n-                    this.file = outputFile();\n-                }\n-                String executeArgs = executeArgs(ProfilerAction.start);\n+            } else if (ProfilerAction.collect.equals(profilerAction)) {\n+                String executeArgs = executeArgs(ProfilerAction.collect);\n                 String result = execute(asyncProfiler, executeArgs);\n                 ProfilerModel profilerModel = createProfilerModel(result);\n \n@@ -677,6 +708,10 @@ public void run() {\n                     }, this.duration, TimeUnit.SECONDS);\n                 }\n                 process.appendResult(profilerModel);\n+            } else if (ProfilerAction.start.equals(profilerAction)) {\n+                String executeArgs = executeArgs(ProfilerAction.start);\n+                String result = execute(asyncProfiler, executeArgs);\n+                appendExecuteResult(process, result);\n             } else if (ProfilerAction.stop.equals(profilerAction)) {\n                 ProfilerModel profilerModel = processStop(asyncProfiler, profilerAction);\n                 process.appendResult(profilerModel);",
    "output": "profiler command add action collect (#2685)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -92,6 +92,11 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private String lock;\n \n+    /**\n+     * start Java Flight Recording with the given config along with the profiler\n+     */\n+    private String jfrsync;\n+\n     /**\n      * output file name for dumping\n      */\n@@ -318,6 +323,12 @@ public void setLock(String lock) {\n         this.lock = lock;\n     }\n \n+    @Option(longName = \"jfrsync\")\n+    @Description(\"start Java Flight Recording with the given config along with the profiler\")\n+    public void setJfrsync(String jfrsync) {\n+        this.jfrsync = jfrsync;\n+    }\n+\n     @Option(shortName = \"t\", longName = \"threads\", flag = true)\n     @Description(\"profile different threads separately\")\n     public void setThreads(boolean threads) {\n@@ -493,7 +504,7 @@ private AsyncProfiler profilerInstance() {\n      */\n     public enum ProfilerAction {\n         // start, resume, stop, dump, check, status, meminfo, list, collect,\n-        start, resume, stop, dump, status, meminfo, list,\n+        start, resume, stop, dump, check, status, meminfo, list,\n         version,\n \n         load,\n@@ -523,6 +534,10 @@ private String executeArgs(ProfilerAction action) {\n         if (this.lock!= null) {\n             sb.append(\"lock=\").append(this.lock).append(COMMA);\n         }\n+        if (this.jfrsync != null) {\n+            this.format = \"jfr\";\n+            sb.append(\"jfrsync=\").append(this.jfrsync).append(COMMA);\n+        }\n         if (this.file != null) {\n             sb.append(\"file=\").append(this.file).append(COMMA);\n         }\n@@ -672,6 +687,10 @@ public void run() {\n                 String executeArgs = executeArgs(ProfilerAction.resume);\n                 String result = execute(asyncProfiler, executeArgs);\n                 appendExecuteResult(process, result);\n+            } else if (ProfilerAction.check.equals(profilerAction)) {\n+                String executeArgs = executeArgs(ProfilerAction.check);\n+                String result = execute(asyncProfiler, executeArgs);\n+                appendExecuteResult(process, result);\n             } else if (ProfilerAction.version.equals(profilerAction)) {\n                 String result = asyncProfiler.execute(\"version=full\");\n                 appendExecuteResult(process, result);",
    "output": "profiler command support jfrsync option, check action (#2683)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -77,6 +77,10 @@ public static boolean complete(Completion completion, Collection<String> searchS\n         }\n     }\n \n+    private static boolean isEndOfDirectory(String token) {\n+        return !StringUtils.isBlank(token) && (token.endsWith(File.separator) || token.endsWith(\"/\"));\n+    }\n+\n     /**\n      * 返回true表示已经完成completion，返回否则表示没有，调用者需要另外完成补全\n      * @param completion\n@@ -95,7 +99,7 @@ public static boolean completeFilePath(Completion completion) {\n         if (StringUtils.isBlank(token)) {\n             dir = new File(\"\").getAbsoluteFile();\n             token = \"\";\n-        } else if (token.endsWith(\"/\")) {\n+        } else if (isEndOfDirectory(token)) {\n             dir = new File(token);\n         } else {\n             File parent = new File(token).getAbsoluteFile().getParentFile();\n@@ -108,7 +112,7 @@ public static boolean completeFilePath(Completion completion) {\n         File tokenFile = new File(token);\n \n         String tokenFileName = null;\n-        if (token.endsWith(\"/\")) {\n+        if (isEndOfDirectory(token)) {\n             tokenFileName = \"\";\n         } else {\n             tokenFileName = tokenFile.getName();\n@@ -120,7 +124,7 @@ public static boolean completeFilePath(Completion completion) {\n \n         File[] listFiles = dir.listFiles();\n \n-        ArrayList<String> names = new ArrayList<String>();\n+        ArrayList<String> names = new ArrayList<>();\n         if (listFiles != null) {\n             for (File child : listFiles) {\n                 if (child.getName().startsWith(partName)) {\n@@ -133,21 +137,21 @@ public static boolean completeFilePath(Completion completion) {\n             }\n         }\n \n-        if (names.size() == 1 && names.get(0).endsWith(\"/\")) {\n+        if (names.size() == 1 && isEndOfDirectory(names.get(0))) {\n             String name = names.get(0);\n             // 这个函数补全后不会有空格，并且只能传入要补全的内容\n             completion.complete(name.substring(tokenFileName.length()), false);\n             return true;\n         }\n \n         String prefix = null;\n-        if (token.endsWith(\"/\")) {\n+        if (isEndOfDirectory(token)) {\n             prefix = token;\n         } else {\n             prefix = token.substring(0, token.length() - new File(token).getName().length());\n         }\n \n-        ArrayList<String> namesWithPrefix = new ArrayList<String>();\n+        ArrayList<String> namesWithPrefix = new ArrayList<>();\n         for (String name : names) {\n             namesWithPrefix.add(prefix + name);\n         }",
    "output": "support windows file separator for file path completion"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -96,7 +96,7 @@ public void setSampleInterval(int sampleInterval) {\n     }\n \n     @Option(longName = \"state\")\n-    @Description(\"Display the thead filter by the state. NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED is optional.\")\n+    @Description(\"Display the thread filter by the state. NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED is optional.\")\n     public void setState(String state) {\n         this.state = state;\n     }\n@@ -238,4 +238,4 @@ private ExitStatus processThread(CommandProcess process) {\n         process.appendResult(new ThreadModel(threadInfos[0]));\n         return ExitStatus.success();\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "fix typo in thread command description (#2690)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -518,7 +518,7 @@ private String executeArgs(ProfilerAction action) {\n             sb.append(\"alloc=\").append(this.alloc).append(COMMA);\n         }\n         if (this.live) {\n-            sb.append(this.live).append(COMMA);\n+            sb.append(\"live\").append(COMMA);\n         }\n         if (this.lock!= null) {\n             sb.append(\"lock=\").append(this.lock).append(COMMA);",
    "output": "Fix profiler command live option (#2684)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -14,11 +14,7 @@\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.command.ExitStatus;\n-import com.taobao.arthas.core.util.ClassUtils;\n-import com.taobao.arthas.core.util.ClassLoaderUtils;\n-import com.taobao.arthas.core.util.CommandUtils;\n-import com.taobao.arthas.core.util.InstrumentationUtils;\n-import com.taobao.arthas.core.util.SearchUtils;\n+import com.taobao.arthas.core.util.*;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.DefaultValue;\n@@ -100,18 +96,11 @@ public void setLimit(int limit) {\n \n     @Override\n     public void process(CommandProcess process) {\n-        RowAffect effect = new RowAffect();\n         try {\n-            if (directory != null) {\n-                File dir = new File(directory);\n-                if (!dir.isDirectory()) {\n-                    process.end(-1, directory + \" :is not a directory, please check it\");\n-                    return;\n-                }\n+            if (directory != null && !FileUtils.isDirectoryOrNotExist(directory)) {\n+                process.end(-1, directory + \" :is not a directory, please check it\");\n+                return;\n             }\n-\n-            ExitStatus status = null;\n-\n             Instrumentation inst = process.session().getInstrumentation();\n             if (code == null && classLoaderClass != null) {\n                 List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst, classLoaderClass);\n@@ -130,8 +119,9 @@ public void process(CommandProcess process) {\n                     return;\n                 }\n             }\n-\n             Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx, code);\n+            final RowAffect effect = new RowAffect();\n+            final ExitStatus status;\n             if (matchedClasses == null || matchedClasses.isEmpty()) {\n                 status = processNoMatch(process);\n             } else if (matchedClasses.size() > limit) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -14,12 +14,7 @@\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.command.ExitStatus;\n-import com.taobao.arthas.core.util.ClassUtils;\n-import com.taobao.arthas.core.util.ClassLoaderUtils;\n-import com.taobao.arthas.core.util.CommandUtils;\n-import com.taobao.arthas.core.util.Decompiler;\n-import com.taobao.arthas.core.util.InstrumentationUtils;\n-import com.taobao.arthas.core.util.SearchUtils;\n+import com.taobao.arthas.core.util.*;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.DefaultValue;\n@@ -77,7 +72,7 @@ public void setClassPattern(String classPattern) {\n     }\n \n     @Argument(argName = \"method-name\", index = 1, required = false)\n-    @Description(\"method name pattern, decompile a specific method instead of the whole class\")\n+    @Description(\"Method name pattern, decompile a specific method instead of the whole class\")\n     public void setMethodName(String methodName) {\n         this.methodName = methodName;\n     }\n@@ -102,7 +97,7 @@ public void setRegEx(boolean regEx) {\n     }\n \n     @Option(longName = \"hideUnicode\", flag = true)\n-    @Description(\"hide unicode, default value false\")\n+    @Description(\"Hide unicode, default value false\")\n     public void setHideUnicode(boolean hideUnicode) {\n         this.hideUnicode = hideUnicode;\n     }\n@@ -115,20 +110,23 @@ public void setSourceOnly(boolean sourceOnly) {\n \n     @Option(longName = \"lineNumber\")\n     @DefaultValue(\"true\")\n-    @Description(\"Output source code contins line number, default value true\")\n+    @Description(\"Output source code contains line number, default value true\")\n     public void setLineNumber(boolean lineNumber) {\n         this.lineNumber = lineNumber;\n     }\n \n     @Option(shortName = \"d\", longName = \"directory\")\n-    @Description(\"Sets the destination directory for dummped class files required by cfr decompiler\")\n+    @Description(\"Sets the destination directory for dumped class files required by cfr decompiler\")\n     public void setDirectory(String directory) {\n         this.directory = directory;\n     }\n \n     @Override\n     public void process(CommandProcess process) {\n-        RowAffect affect = new RowAffect();\n+        if (directory != null && !FileUtils.isDirectoryOrNotExist(directory)) {\n+            process.end(-1, directory + \" :is not a directory, please check it\");\n+            return;\n+        }\n         Instrumentation inst = process.session().getInstrumentation();\n \n         if (code == null && classLoaderClass != null) {\n@@ -152,7 +150,8 @@ public void process(CommandProcess process) {\n         Set<Class<?>> matchedClasses = SearchUtils.searchClassOnly(inst, classPattern, isRegEx, code);\n \n         try {\n-            ExitStatus status = null;\n+            final RowAffect affect = new RowAffect();\n+            final ExitStatus status;\n             if (matchedClasses == null || matchedClasses.isEmpty()) {\n                 status = processNoMatch(process);\n             } else if (matchedClasses.size() > 1) {\n@@ -177,9 +176,8 @@ public void process(CommandProcess process) {\n \n     private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, Instrumentation inst, Set<Class<?>> matchedClasses, Set<Class<?>> withInnerClasses) {\n         Class<?> c = matchedClasses.iterator().next();\n-        Set<Class<?>> allClasses = new HashSet<Class<?>>(withInnerClasses);\n+        Set<Class<?>> allClasses = new HashSet<>(withInnerClasses);\n         allClasses.add(c);\n-\n         try {\n             final ClassDumpTransformer transformer;\n             if (directory == null) {\n@@ -195,15 +193,13 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n                 \"\\\" or try with \\\"-d/--directory\\\" to specify the directory of dump files\");\n             }\n             File classFile = classFiles.get(c);\n-\n             Pair<String,NavigableMap<Integer,Integer>> decompileResult = Decompiler.decompileWithMappings(classFile.getAbsolutePath(), methodName, hideUnicode, lineNumber);\n             String source = decompileResult.getFirst();\n             if (source != null) {\n                 source = pattern.matcher(source).replaceAll(\"\");\n             } else {\n                 source = \"unknown\";\n             }\n-\n             JadModel jadModel = new JadModel();\n             jadModel.setSource(source);\n             jadModel.setMappings(decompileResult.getSecond());\n@@ -212,7 +208,6 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n                 jadModel.setLocation(ClassUtils.getCodeSource(c.getProtectionDomain().getCodeSource()));\n             }\n             process.appendResult(jadModel);\n-\n             affect.rCnt(classFiles.keySet().size());\n             return ExitStatus.success();\n         } catch (Throwable t) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -246,5 +246,15 @@ public static Properties readProperties(String file) throws IOException {\n         }\n \n     }\n+\n+    /**\n+     * Check if the given path is a directory or not exists.\n+     * @param path path of file.\n+     * @return {@code true} if the path is not exist or is an existing directory, otherwise returns {@code false}.\n+     */\n+    public static boolean isDirectoryOrNotExist(String path) {\n+        File file = new File(path);\n+        return !file.exists() || file.isDirectory();\n+    }\n }\n ",
    "output": "check directory for JadCommand and fix typos (#2670)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -9,11 +9,7 @@\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.command.express.ExpressFactory;\n-import com.taobao.arthas.core.command.model.MessageModel;\n-import com.taobao.arthas.core.command.model.ObjectVO;\n-import com.taobao.arthas.core.command.model.RowAffectModel;\n-import com.taobao.arthas.core.command.model.TimeFragmentVO;\n-import com.taobao.arthas.core.command.model.TimeTunnelModel;\n+import com.taobao.arthas.core.command.model.*;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.handlers.command.CommandInterruptHandler;\n import com.taobao.arthas.core.shell.handlers.shell.QExitHandler;\n@@ -22,15 +18,10 @@\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.arthas.core.util.matcher.Matcher;\n-import com.taobao.middleware.cli.annotations.Description;\n-import com.taobao.middleware.cli.annotations.Name;\n-import com.taobao.middleware.cli.annotations.Option;\n-import com.taobao.middleware.cli.annotations.Summary;\n-import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.*;\n \n import java.time.LocalDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n@@ -13,8 +13,7 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.lang.reflect.InvocationTargetException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n+import java.time.LocalDateTime;\n import java.util.List;\n import java.util.Map;\n \n@@ -93,9 +92,8 @@ static TableElement fillTableRow(TableElement table, TimeFragmentVO tf) {\n     }\n \n     public static void drawTimeTunnel(TableElement table, TimeFragmentVO tf) {\n-        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n         table.row(\"INDEX\", \"\" + tf.getIndex())\n-                .row(\"GMT-CREATE\", sdf.format(tf.getTimestamp()))\n+                .row(\"GMT-CREATE\", DateUtils.formatDateTime(tf.getTimestamp()))\n                 .row(\"COST(ms)\", \"\" + tf.getCost())\n                 .row(\"OBJECT\", tf.getObject())\n                 .row(\"CLASS\", tf.getClassName())\n@@ -161,9 +159,8 @@ public static void drawWatchResults(TableElement table, Map<Integer, ObjectVO> w\n \n     public static TableElement drawPlayHeader(String className, String methodName, String objectAddress, int index,\n                                        TableElement table) {\n-        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n         return table.row(\"RE-INDEX\", \"\" + index)\n-                .row(\"GMT-REPLAY\", sdf.format(new Date()))\n+                .row(\"GMT-REPLAY\", DateUtils.formatDateTime(LocalDateTime.now()))\n                 .row(\"OBJECT\", objectAddress)\n                 .row(\"CLASS\", className)\n                 .row(\"METHOD\", methodName);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java b/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n@@ -9,7 +9,6 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n \n import static com.taobao.text.ui.Element.label;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java b/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/DateUtils.java\n@@ -12,7 +12,7 @@ private DateUtils() {\n         throw new AssertionError();\n     }\n \n-    public static DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n \n     public static String getCurrentDateTime() {\n         return DATE_TIME_FORMATTER.format(LocalDateTime.now());",
    "output": "Polishing #2663 (#2672)"
  },
  {
    "input": "diff --git a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n--- a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n+++ b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n@@ -71,7 +71,7 @@ public static void attach(Map<String, String> configMap) {\n      * @param arthasHome arthas directory\n      */\n     public static void attach(String arthasHome) {\n-        new ArthasAgent().init();\n+        new ArthasAgent(arthasHome).init();\n     }\n \n     public void init() throws IllegalStateException {",
    "output": "fix not use arthasHome when constructing ArthasAgent(#2544)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -104,7 +104,7 @@ public void process(CommandProcess process) {\n         try {\n             if (directory != null) {\n                 File dir = new File(directory);\n-                if (dir.isFile()) {\n+                if (!dir.isDirectory()) {\n                     process.end(-1, directory + \" :is not a directory, please check it\");\n                     return;\n                 }",
    "output": "fix directory check for DumpClassCommand"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n@@ -89,10 +89,10 @@ private void renderNode(StringBuilder sb, TraceNode node, Ansi highlighted) {\n             //render thread info\n             ThreadNode threadNode = (ThreadNode) node;\n             //ts=2020-04-29 10:34:00;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@18b4aac2\n-            sb.append(format(\"ts=%s;thread_name=%s;id=%s;is_daemon=%s;priority=%d;TCCL=%s\",\n+            sb.append(format(\"ts=%s;thread_name=%s;id=%d;is_daemon=%s;priority=%d;TCCL=%s\",\n                     DateUtils.formatDate(threadNode.getTimestamp()),\n                     threadNode.getThreadName(),\n-                    Long.toHexString(threadNode.getThreadId()),\n+                    threadNode.getThreadId(),\n                     threadNode.isDaemon(),\n                     threadNode.getPriority(),\n                     threadNode.getClassloader()));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -399,7 +399,7 @@ private static int findTheSpyAPIDepth(StackTraceElement[] stackTraceElementArray\n     public static StackModel getThreadStackModel(ClassLoader loader, Thread currentThread) {\n         StackModel stackModel = new StackModel();\n         stackModel.setThreadName(currentThread.getName());\n-        stackModel.setThreadId(Long.toHexString(currentThread.getId()));\n+        stackModel.setThreadId(Long.toString(currentThread.getId()));\n         stackModel.setDaemon(currentThread.isDaemon());\n         stackModel.setPriority(currentThread.getPriority());\n         stackModel.setClassloader(getTCCL(currentThread));",
    "output": "Make thread id uniformly displayed in decimal format"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -54,6 +54,9 @@ public static void setAgentId(String id) {\n     }\n \n     public static void arthasStart() {\n+        if (statUrl == null) {\n+            return;\n+        }\n         RemoteJob job = new RemoteJob();\n         job.appendQueryData(\"ip\", ip);\n         job.appendQueryData(\"version\", version);\n@@ -69,7 +72,7 @@ public static void arthasStart() {\n         }\n     }\n \n-    public static void arthasUsage(String cmd, String detail) {\n+    private static void arthasUsage(String cmd, String detail) {\n         RemoteJob job = new RemoteJob();\n         job.appendQueryData(\"ip\", ip);\n         job.appendQueryData(\"version\", version);\n@@ -89,6 +92,9 @@ public static void arthasUsage(String cmd, String detail) {\n     }\n \n     public static void arthasUsageSuccess(String cmd, List<String> args) {\n+        if (statUrl == null) {\n+            return;\n+        }\n         StringBuilder commandString = new StringBuilder(cmd);\n         for (String arg : args) {\n             commandString.append(\" \").append(arg);",
    "output": "improve UserStatUtil"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -81,6 +81,11 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private String alloc;\n \n+    /**\n+     * build allocation profile from live objects only\n+     */\n+    private boolean live;\n+\n     /**\n      * profile contended locks longer than DURATION ns\n      * according to async-profiler README, alloc may contains non-numeric charactors\n@@ -112,6 +117,17 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private boolean threads;\n \n+    /**\n+     * group threads by scheduling policy\n+     */\n+    private boolean sched;\n+\n+    /**\n+     * how to collect C stack frames in addition to Java stack\n+     * MODE is 'fp' (Frame Pointer), 'dwarf', 'lbr' (Last Branch Record) or 'no'\n+     */\n+    private String cstack;\n+\n     /**\n      * use simple class names instead of FQN\n      */\n@@ -132,11 +148,6 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private boolean lib;\n \n-    /**\n-     * include only kernel-mode events\n-     */\n-    private boolean allkernel;\n-\n     /**\n      * include only user-mode events\n      */\n@@ -157,6 +168,21 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private List<String> excludes;\n \n+    /**\n+     * automatically start profiling when the specified native function is executed.\n+     */\n+    private String begin;\n+\n+    /**\n+     * automatically stop profiling when the specified native function is executed.\n+     */\n+    private String end;\n+\n+    /**\n+     * time-to-safepoint profiling.\n+     * An alias for --begin SafepointSynchronize::begin --end RuntimeService::record_safepoint_synchronized\n+     */\n+    private boolean ttsp;\n \n     /**\n      * FlameGraph title\n@@ -280,6 +306,12 @@ public void setAlloc(String alloc) {\n         this.alloc = alloc;\n     }\n \n+    @Option(longName = \"live\", flag = true)\n+    @Description(\"build allocation profile from live objects only\")\n+    public void setLive(boolean live) {\n+        this.live = live;\n+    }\n+\n     @Option(longName = \"lock\")\n     @Description(\"lock profiling threshold in nanoseconds\")\n     public void setLock(String lock) {\n@@ -292,6 +324,18 @@ public void setThreads(boolean threads) {\n         this.threads = threads;\n     }\n \n+    @Option(longName = \"sched\", flag = true)\n+    @Description(\"group threads by scheduling policy\")\n+    public void setSched(boolean sched) {\n+        this.sched = sched;\n+    }\n+\n+    @Option(longName = \"cstack\")\n+    @Description(\"how to traverse C stack: fp|dwarf|lbr|no\")\n+    public void setCstack(String cstack) {\n+        this.cstack = cstack;\n+    }\n+\n     @Option(shortName = \"s\", flag = true)\n     @Description(\"use simple class names instead of FQN\")\n     public void setSimple(boolean simple) {\n@@ -316,13 +360,7 @@ public void setLib(boolean lib) {\n         this.lib = lib;\n     }\n \n-    @Option(longName = \"allkernel\", flag = true)\n-    @Description(\"include only kernel-mode events\")\n-    public void setAllkernel(boolean allkernel) {\n-        this.allkernel = allkernel;\n-    }\n-\n-    @Option(longName = \"alluser\", flag = true)\n+    @Option(longName = \"all-user\", flag = true)\n     @Description(\"include only user-mode events\")\n     public void setAlluser(boolean alluser) {\n         this.alluser = alluser;\n@@ -346,6 +384,25 @@ public void setExclude(List<String> excludes) {\n         this.excludes = excludes;\n     }\n \n+    @Option(longName = \"begin\")\n+    @Description(\"automatically start profiling when the specified native function is executed\")\n+    public void setBegin(String begin) {\n+        this.begin = begin;\n+    }\n+\n+    @Option(longName = \"end\")\n+    @Description(\"automatically stop profiling when the specified native function is executed\")\n+    public void setEnd(String end) {\n+        this.end = end;\n+    }\n+\n+    @Option(longName = \"ttsp\", flag = true)\n+    @Description(\"time-to-safepoint profiling. \"\n+        + \"An alias for --begin SafepointSynchronize::begin --end RuntimeService::record_safepoint_synchronized\")\n+    public void setTtsp(boolean ttsp) {\n+        this.ttsp = ttsp;\n+    }\n+\n     @Option(longName = \"title\")\n     @Description(\"FlameGraph title\")\n     public void setTitle(String title) {\n@@ -460,6 +517,9 @@ private String executeArgs(ProfilerAction action) {\n         if (this.alloc!= null) {\n             sb.append(\"alloc=\").append(this.alloc).append(COMMA);\n         }\n+        if (this.live) {\n+            sb.append(this.live).append(COMMA);\n+        }\n         if (this.lock!= null) {\n             sb.append(\"lock=\").append(this.lock).append(COMMA);\n         }\n@@ -478,6 +538,12 @@ private String executeArgs(ProfilerAction action) {\n         if (this.threads) {\n             sb.append(\"threads\").append(COMMA);\n         }\n+        if (this.sched) {\n+            sb.append(\"sched\").append(COMMA);\n+        }\n+        if (this.cstack != null) {\n+            sb.append(\"cstack=\").append(this.cstack).append(COMMA);\n+        }\n         if (this.simple) {\n             sb.append(\"simple\").append(COMMA);\n         }\n@@ -490,9 +556,6 @@ private String executeArgs(ProfilerAction action) {\n         if (this.lib) {\n             sb.append(\"lib\").append(COMMA);\n         }\n-        if (this.allkernel) {\n-            sb.append(\"allkernel\").append(COMMA);\n-        }\n         if (this.alluser) {\n             sb.append(\"alluser\").append(COMMA);\n         }\n@@ -506,6 +569,16 @@ private String executeArgs(ProfilerAction action) {\n                 sb.append(\"exclude=\").append(exclude).append(COMMA);\n             }\n         }\n+        if (this.ttsp) {\n+            this.begin = \"SafepointSynchronize::begin\";\n+            this.end = \"RuntimeService::record_safepoint_synchronized\";\n+        }\n+        if (this.begin != null) {\n+            sb.append(\"begin=\").append(this.begin).append(COMMA);\n+        }\n+        if (this.end != null) {\n+            sb.append(\"end=\").append(this.end).append(COMMA);\n+        }\n \n         if (this.title != null) {\n             sb.append(\"title=\").append(this.title).append(COMMA);",
    "output": "profiler command support live/sched/cstack/begin/end/ttsp options (#2657)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n@@ -124,6 +124,7 @@ public int compare(ThreadVO o1, ThreadVO o2) {\n \n         // Sort by CPU time : should be a rendering hint...\n         Collections.sort(threads, new Comparator<ThreadVO>() {\n+            @Override\n             public int compare(ThreadVO o1, ThreadVO o2) {\n                 long l1 = deltas.get(o1);\n                 long l2 = deltas.get(o2);",
    "output": "fix Override  annotation (#2653)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/SystemEnvModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/SystemEnvModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/SystemEnvModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/SystemEnvModel.java\n@@ -1,15 +1,15 @@\n package com.taobao.arthas.core.command.model;\n \n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.TreeMap;\n \n /**\n  * sysenv KV Result\n  * @author gongdewei 2020/4/2\n  */\n public class SystemEnvModel extends ResultModel {\n \n-    private Map<String, String> env = new HashMap<String, String>();\n+    private Map<String, String> env = new TreeMap<String, String>();\n \n     public SystemEnvModel() {\n     }",
    "output": "sysenv/sysprop command sorted by key #2619 (#2652)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n@@ -52,18 +52,23 @@ public Map<Class<?>, File> getDumpResult() {\n         return dumpResult;\n     }\n \n-    private void dumpClassIfNecessary(Class<?> clazz, byte[] data) {\n-        String className = clazz.getName();\n-        ClassLoader classLoader = clazz.getClassLoader();\n+    public File dumpDir() {\n         String classDumpDir = \"classdump\";\n-\n-        // 创建类所在的包路径\n-        File dumpDir = null;\n+        final File dumpDir;\n         if (directory != null) {\n             dumpDir = directory;\n         } else {\n             dumpDir = new File(arthasLogHome, classDumpDir);\n         }\n+        return dumpDir;\n+    }\n+\n+    private void dumpClassIfNecessary(Class<?> clazz, byte[] data) {\n+        String className = clazz.getName();\n+        ClassLoader classLoader = clazz.getClassLoader();\n+\n+        // 创建类所在的包路径\n+        File dumpDir = dumpDir();\n         if (!dumpDir.mkdirs() && !dumpDir.exists()) {\n             logger.warn(\"create dump directory:{} failed.\", dumpDir.getAbsolutePath());\n             return;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -47,6 +47,7 @@\n @Description(Constants.EXAMPLE +\n         \"  jad java.lang.String\\n\" +\n         \"  jad java.lang.String toString\\n\" +\n+        \"  jad java.lang.String -d /tmp/jad/dump\\n\" +\n         \"  jad --source-only java.lang.String\\n\" +\n         \"  jad -c 39eb305e org/apache/log4j/Logger\\n\" +\n         \"  jad -c 39eb305e -E org\\\\\\\\.apache\\\\\\\\.*\\\\\\\\.StringUtils\\n\" +\n@@ -62,6 +63,7 @@ public class JadCommand extends AnnotatedCommand {\n     private boolean isRegEx = false;\n     private boolean hideUnicode = false;\n     private boolean lineNumber;\n+    private String directory;\n \n     /**\n      * jad output source code only\n@@ -118,6 +120,12 @@ public void setLineNumber(boolean lineNumber) {\n         this.lineNumber = lineNumber;\n     }\n \n+    @Option(shortName = \"d\", longName = \"directory\")\n+    @Description(\"Sets the destination directory for dummped class files required by cfr decompiler\")\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect affect = new RowAffect();\n@@ -173,10 +181,19 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n         allClasses.add(c);\n \n         try {\n-            ClassDumpTransformer transformer = new ClassDumpTransformer(allClasses);\n+            final ClassDumpTransformer transformer;\n+            if (directory == null) {\n+                transformer = new ClassDumpTransformer(allClasses);\n+            } else {\n+                transformer = new ClassDumpTransformer(allClasses, new File(directory));\n+            }\n             InstrumentationUtils.retransformClasses(inst, transformer, allClasses);\n \n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n+            if (classFiles == null || classFiles.isEmpty()) {\n+                return ExitStatus.failure(-1, \"jad: fail to dump class file for decompiler, make sure you have write permission of the directory \\\"\" + transformer.dumpDir() +\n+                \"\\\" or try with \\\"-d/--directory\\\" to specify the directory of dump files\");\n+            }\n             File classFile = classFiles.get(c);\n \n             Pair<String,NavigableMap<Integer,Integer>> decompileResult = Decompiler.decompileWithMappings(classFile.getAbsolutePath(), methodName, hideUnicode, lineNumber);",
    "output": "jad command support -d/--directory option (#2646)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -75,6 +75,18 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private String event;\n \n+    /**\n+     * profile allocations with BYTES interval\n+     * according to async-profiler README, alloc may contains non-numeric charactors\n+     */\n+    private String alloc;\n+\n+    /**\n+     * profile contended locks longer than DURATION ns\n+     * according to async-profiler README, alloc may contains non-numeric charactors\n+     */\n+    private String lock;\n+\n     /**\n      * output file name for dumping\n      */\n@@ -166,6 +178,16 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private boolean total;\n \n+    /**\n+     * approximate size of JFR chunk in bytes (default: 100 MB)\n+     */\n+    private String chunksize;\n+\n+    /**\n+     * duration of JFR chunk in seconds (default: 1 hour)\n+     */\n+    private String chunktime;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -252,6 +274,18 @@ public void setEvent(String event) {\n         this.event = event;\n     }\n \n+    @Option(longName = \"alloc\")\n+    @Description(\"allocation profiling interval in bytes\")\n+    public void setAlloc(String alloc) {\n+        this.alloc = alloc;\n+    }\n+\n+    @Option(longName = \"lock\")\n+    @Description(\"lock profiling threshold in nanoseconds\")\n+    public void setLock(String lock) {\n+        this.lock = lock;\n+    }\n+\n     @Option(shortName = \"t\", longName = \"threads\", flag = true)\n     @Description(\"profile different threads separately\")\n     public void setThreads(boolean threads) {\n@@ -344,6 +378,18 @@ public void setTotal(boolean total) {\n         this.total = total;\n     }\n \n+    @Option(longName = \"chunksize\")\n+    @Description(\"approximate size limits for a single JFR chunk in bytes (default: 100 MB) or other units\")\n+    public void setChunksize(String chunksize) {\n+        this.chunksize = chunksize;\n+    }\n+\n+    @Option(longName = \"chunktime\")\n+    @Description(\"approximate time limits for a single JFR chunk in second (default: 1 hour) or other units\")\n+    public void setChunktime(String chunktime) {\n+        this.chunktime = chunktime;\n+    }\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n@@ -411,6 +457,12 @@ private String executeArgs(ProfilerAction action) {\n         if (this.event != null) {\n             sb.append(\"event=\").append(this.event).append(COMMA);\n         }\n+        if (this.alloc!= null) {\n+            sb.append(\"alloc=\").append(this.alloc).append(COMMA);\n+        }\n+        if (this.lock!= null) {\n+            sb.append(\"lock=\").append(this.lock).append(COMMA);\n+        }\n         if (this.file != null) {\n             sb.append(\"file=\").append(this.file).append(COMMA);\n         }\n@@ -467,6 +519,12 @@ private String executeArgs(ProfilerAction action) {\n         if (this.total) {\n             sb.append(\"total\").append(COMMA);\n         }\n+        if (this.chunksize != null) {\n+            sb.append(\"chunksize=\").append(this.chunksize).append(COMMA);\n+        }\n+        if (this.chunktime!= null) {\n+            sb.append(\"chunktime=\").append(this.chunktime).append(COMMA);\n+        }\n \n         return sb.toString();\n     }",
    "output": "profiler command support alloc/lock/chunksize/chunktime option (#2647)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -54,7 +54,7 @@\n         + \"  profiler stop --format html   # output file format, support flat[=N]|traces[=N]|collapsed|flamegraph|tree|jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n         + \"  profiler stop --threads \\n\"\n-        + \"  profiler start --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\\n\"\n+        + \"  profiler stop --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\\n\"\n         + \"  profiler status\\n\"\n         + \"  profiler resume              # Start or resume profiling without resetting collected data.\\n\"\n         + \"  profiler getSamples          # Get the number of samples collected during the profiling session\\n\"",
    "output": "fix include/exclude docs of profiler command(#2636)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -61,7 +61,6 @@\n         + \"  profiler dumpFlat            # Dump flat profile, i.e. the histogram of the hottest methods\\n\"\n         + \"  profiler dumpCollapsed       # Dump profile in 'collapsed stacktraces' format\\n\"\n         + \"  profiler dumpTraces          # Dump collected stack traces\\n\"\n-        + \"  profiler execute 'start,framebuf=5000000'      # Execute an agent-compatible profiling command\\n\"\n         + \"  profiler execute 'stop,file=/tmp/result.html'   # Execute an agent-compatible profiling command\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"profiler\")\n //@formatter:on\n@@ -71,9 +70,16 @@ public class ProfilerCommand extends AnnotatedCommand {\n     private String action;\n     private String actionArg;\n \n+    /**\n+     * which event to trace (cpu, wall, cache-misses, etc.)\n+     */\n     private String event;\n \n+    /**\n+     * output file name for dumping\n+     */\n     private String file;\n+\n     /**\n      * output file format, default value is html.\n      */\n@@ -85,9 +91,9 @@ public class ProfilerCommand extends AnnotatedCommand {\n     private Long interval;\n \n     /**\n-     * size of the buffer for stack frames (default: 1'000'000)\n+     * maximum Java stack depth (default: 2048)\n      */\n-    private Long framebuf;\n+    private Integer jstackdepth;\n \n     /**\n      * profile different threads separately\n@@ -217,11 +223,10 @@ public void setInterval(long interval) {\n         this.interval = interval;\n     }\n \n-    @Option(shortName = \"b\", longName = \"framebuf\")\n-    @Description(\"size of the buffer for stack frames (default: 1'000'000)\")\n-    @DefaultValue(\"1000000\")\n-    public void setFramebuf(long framebuf) {\n-        this.framebuf = framebuf;\n+    @Option(shortName = \"j\", longName = \"jstackdepth\")\n+    @Description(\"maximum Java stack depth (default: 2048)\")\n+    public void setJstackdepth(int jstackdepth) {\n+        this.jstackdepth = jstackdepth;\n     }\n \n     @Option(shortName = \"f\", longName = \"file\")\n@@ -247,7 +252,7 @@ public void setEvent(String event) {\n         this.event = event;\n     }\n \n-    @Option(longName = \"threads\", flag = true)\n+    @Option(shortName = \"t\", longName = \"threads\", flag = true)\n     @Description(\"profile different threads separately\")\n     public void setThreads(boolean threads) {\n         this.threads = threads;\n@@ -396,70 +401,71 @@ public enum ProfilerAction {\n \n     private String executeArgs(ProfilerAction action) {\n         StringBuilder sb = new StringBuilder();\n+        final char COMMA = ',';\n \n         // start - start profiling\n         // resume - start or resume profiling without resetting collected data\n         // stop - stop profiling\n-        sb.append(action).append(',');\n+        sb.append(action).append(COMMA);\n \n         if (this.event != null) {\n-            sb.append(\"event=\").append(this.event).append(',');\n+            sb.append(\"event=\").append(this.event).append(COMMA);\n         }\n         if (this.file != null) {\n-            sb.append(\"file=\").append(this.file).append(',');\n+            sb.append(\"file=\").append(this.file).append(COMMA);\n         }\n         if (this.format != null) {\n-            sb.append(this.format).append(',');\n+            sb.append(this.format).append(COMMA);\n         }\n         if (this.interval != null) {\n-            sb.append(\"interval=\").append(this.interval).append(',');\n+            sb.append(\"interval=\").append(this.interval).append(COMMA);\n         }\n-        if (this.framebuf != null) {\n-            sb.append(\"framebuf=\").append(this.framebuf).append(',');\n+        if (this.jstackdepth != null) {\n+            sb.append(\"jstackdepth=\").append(this.jstackdepth).append(COMMA);\n         }\n         if (this.threads) {\n-            sb.append(\"threads\").append(',');\n+            sb.append(\"threads\").append(COMMA);\n         }\n         if (this.simple) {\n-            sb.append(\"simple\").append(\",\");\n+            sb.append(\"simple\").append(COMMA);\n         }\n         if (this.sig) {\n-            sb.append(\"sig\").append(\",\");\n+            sb.append(\"sig\").append(COMMA);\n         }\n         if (this.ann) {\n-            sb.append(\"ann\").append(\",\");\n+            sb.append(\"ann\").append(COMMA);\n         }\n         if (this.lib) {\n-            sb.append(\"lib\").append(\",\");\n+            sb.append(\"lib\").append(COMMA);\n         }\n         if (this.allkernel) {\n-            sb.append(\"allkernel\").append(',');\n+            sb.append(\"allkernel\").append(COMMA);\n         }\n         if (this.alluser) {\n-            sb.append(\"alluser\").append(',');\n+            sb.append(\"alluser\").append(COMMA);\n         }\n         if (this.includes != null) {\n             for (String include : includes) {\n-                sb.append(\"include=\").append(include).append(',');\n+                sb.append(\"include=\").append(include).append(COMMA);\n             }\n         }\n         if (this.excludes != null) {\n             for (String exclude : excludes) {\n-                sb.append(\"exclude=\").append(exclude).append(',');\n+                sb.append(\"exclude=\").append(exclude).append(COMMA);\n             }\n         }\n \n         if (this.title != null) {\n-            sb.append(\"title=\").append(this.title).append(',');\n+            sb.append(\"title=\").append(this.title).append(COMMA);\n         }\n         if (this.minwidth != null) {\n-            sb.append(\"minwidth=\").append(this.minwidth).append(',');\n+            sb.append(\"minwidth=\").append(this.minwidth).append(COMMA);\n         }\n         if (this.reverse) {\n-            sb.append(\"reverse\").append(',');\n+            sb.append(\"reverse\").append(COMMA);\n         }\n         if (this.total) {\n-            sb.append(\"total\").append(',');\n+            sb.append(\"total\").append(COMMA);\n         }\n \n         return sb.toString();",
    "output": "profiler command support jstackdepth option, remove framebuf option  (#2634)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/FunctionInvocationHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/FunctionInvocationHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/FunctionInvocationHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/FunctionInvocationHandler.java\n@@ -0,0 +1,53 @@\n+package com.taobao.arthas.core.shell.term.impl;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+\n+import com.taobao.arthas.common.ArthasConstants;\n+import com.taobao.arthas.core.shell.session.Session;\n+\n+import io.termd.core.readline.Function;\n+import io.termd.core.readline.Readline;\n+import io.termd.core.readline.Readline.Interaction;\n+\n+/**\n+ * 拦截指定的 Function 的 apply 函数\n+ * \n+ * @author hengyunabc 2023-08-24\n+ *\n+ */\n+public class FunctionInvocationHandler implements InvocationHandler {\n+\n+    private TermImpl termImpl;\n+\n+    private Function target;\n+\n+    public FunctionInvocationHandler(TermImpl termImpl, Function target) {\n+        this.termImpl = termImpl;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+\n+        String name = method.getName();\n+\n+        if (name.equals(\"apply\")) {\n+            Session session = termImpl.getSession();\n+            if (session != null) {\n+                boolean authenticated = session.get(ArthasConstants.SUBJECT_KEY) != null;\n+                if (authenticated) {\n+                    return method.invoke(target, args);\n+                } else {\n+                    Readline.Interaction interaction = (Interaction) args[0];\n+                    // 必要\n+                    interaction.resume();\n+                    return null;\n+                }\n+            }\n+        }\n+\n+        return method.invoke(target, args);\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/TermImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/TermImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/TermImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/TermImpl.java\n@@ -1,10 +1,15 @@\n package com.taobao.arthas.core.shell.term.impl;\n \n+import java.io.File;\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.handlers.term.CloseHandlerWrapper;\n import com.taobao.arthas.core.shell.handlers.term.DefaultTermStdinHandler;\n import com.taobao.arthas.core.shell.handlers.term.EventHandler;\n-import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.handlers.term.RequestHandler;\n import com.taobao.arthas.core.shell.handlers.term.SizeHandlerWrapper;\n import com.taobao.arthas.core.shell.handlers.term.StdinHandlerWrapper;\n@@ -13,17 +18,15 @@\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.FileUtils;\n+\n import io.termd.core.function.Consumer;\n import io.termd.core.readline.Function;\n import io.termd.core.readline.Keymap;\n import io.termd.core.readline.Readline;\n+import io.termd.core.readline.functions.HistorySearchForward;\n import io.termd.core.tty.TtyConnection;\n import io.termd.core.util.Helper;\n \n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n@@ -50,6 +53,18 @@ public TermImpl(Keymap keymap, TtyConnection conn) {\n         readline = new Readline(keymap);\n         readline.setHistory(FileUtils.loadCommandHistory(new File(Constants.CMD_HISTORY_FILE)));\n         for (Function function : readlineFunctions) {\n+            /**\n+             * 防止没有鉴权时，查看历史命令\n+             * \n+             * @see io.termd.core.readline.functions.HistorySearchForward\n+             */\n+            if (function.name().contains(\"history\")) {\n+                FunctionInvocationHandler funcHandler = new FunctionInvocationHandler(this, function);\n+                function = (Function) Proxy.newProxyInstance(this.getClass().getClassLoader(),\n+                        HistorySearchForward.class.getInterfaces(), funcHandler);\n+\n+            }\n+\n             readline.addFunction(function);\n         }\n \n@@ -64,6 +79,10 @@ public Term setSession(Session session) {\n         return this;\n     }\n \n+    public Session getSession() {\n+        return session;\n+    }\n+\n     @Override\n     public void readline(String prompt, Handler<String> lineHandler) {\n         if (conn.getStdinHandler() != echoHandler) {",
    "output": "disable viewing history commands without auth #2620"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -45,7 +45,7 @@\n  */\n @Name(\"arthas-boot\")\n @Summary(\"Bootstrap Arthas\")\n-@Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\" + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0\\n\"\n+@Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar --username admin --password <password>\\n\"\n                 + \"  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws' --app-name demoapp\\n\"",
    "output": "update as.sh/arthas-boot help message. #2620"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java\n@@ -32,7 +32,7 @@\n @Name(ArthasConstants.AUTH)\n @Summary(\"Authenticates the current session\")\n @Description(Constants.EXAMPLE +\n-        \"  auth\" +\n+        \"  auth\\n\" +\n         \"  auth <password>\\n\" +\n         \"  auth --username <username> <password>\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + ArthasConstants.AUTH)\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -69,6 +69,7 @@\n import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n import com.taobao.arthas.core.util.ArthasBanner;\n import com.taobao.arthas.core.util.FileUtils;\n+import com.taobao.arthas.core.util.IPUtils;\n import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.StringUtils;\n@@ -393,6 +394,19 @@ private void bind(Configure configure) throws Throwable {\n             }\n \n             this.httpSessionManager = new HttpSessionManager();\n+            if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n+                // 当 listen 0.0.0.0 时，强制生成密码，防止被远程连接\n+                String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n+                        + \"No password is currently configured. \" + \"Therefore, a default password is generated, \"\n+                        + \"and clients need to use the password to connect!\";\n+                AnsiLog.error(errorMsg);\n+                configure.setPassword(StringUtils.randomString(64));\n+                AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n+\n+                logger().error(errorMsg);\n+                logger().info(\"Generated arthas password: \" + configure.getPassword());\n+            }\n+\n             this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n \n             shellServer = new ShellServerImpl(options);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n@@ -23,7 +23,8 @@ public static boolean isWindowsOS() {\n     }\n \n     /**\n-     * get IP address, automatically distinguish the operating system.（windows or linux）\n+     * get IP address, automatically distinguish the operating system.（windows or\n+     * linux）\n      *\n      * @return String\n      */\n@@ -33,7 +34,7 @@ public static String getLocalIP() {\n             if (isWindowsOS()) {\n                 ip = InetAddress.getLocalHost();\n             } else {\n-                //scan all NetWorkInterfaces if it's loopback address\n+                // scan all NetWorkInterfaces if it's loopback address\n                 if (!InetAddress.getLocalHost().isLoopbackAddress()) {\n                     ip = InetAddress.getLocalHost();\n                 } else {\n@@ -50,7 +51,8 @@ public static String getLocalIP() {\n                         while (ips.hasMoreElements()) {\n                             ip = ips.nextElement();\n                             // IP starts with 127. is loopback address\n-                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress() && !ip.getHostAddress().contains(\":\")) {\n+                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress()\n+                                    && !ip.getHostAddress().contains(\":\")) {\n                                 bFindIP = true;\n                                 break;\n                             }\n@@ -65,4 +67,19 @@ public static String getLocalIP() {\n         return ip == null ? null : ip.getHostAddress();\n     }\n \n+\n+    public static boolean isAllZeroIP(String ipStr) {\n+        if (ipStr == null || ipStr.isEmpty()) {\n+            return false;\n+        }\n+        char[] charArray = ipStr.toCharArray();\n+\n+        for (char c : charArray) {\n+            if (c != '0' && c != '.' && c != ':') {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/IPUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/IPUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/IPUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/IPUtilsTest.java\n@@ -0,0 +1,56 @@\n+package com.taobao.arthas.core.util;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class IPUtilsTest {\n+    \n+    @Test\n+    public void testZeroIPv4() {\n+        String zero = \"0.0.0.0\";\n+        assertEquals(true, IPUtils.isAllZeroIP(zero));\n+    }\n+\n+    @Test\n+    public void testZeroIPv6() {\n+        String zero = \"::\";\n+        assertEquals(true, IPUtils.isAllZeroIP(zero));\n+    }\n+\n+    @Test\n+    public void testNormalIPv6() {\n+        String ipv6 = \"2001:db8:85a3::8a2e:370:7334\";\n+        assertEquals(false, IPUtils.isAllZeroIP(ipv6));\n+    }\n+\n+    @Test\n+    public void testLeadingZerosIPv6() {\n+        String ipv6 = \"0000::0000:0000\";\n+        assertEquals(true, IPUtils.isAllZeroIP(ipv6));\n+    }\n+\n+    @Test\n+    public void testTrailingZerosIPv6() {\n+        String ipv6 = \"::0000:0000:0000\";\n+        assertEquals(true, IPUtils.isAllZeroIP(ipv6));\n+    }\n+\n+    @Test\n+    public void testMixedZerosIPv6() {\n+        String ipv6 = \"0000::0000:0000:0000:0000\";\n+        assertEquals(true, IPUtils.isAllZeroIP(ipv6));\n+    }\n+\n+    @Test\n+    public void testEmptyIPv6() {\n+        String empty = \"\";\n+        assertEquals(false, IPUtils.isAllZeroIP(empty));\n+    }\n+\n+    @Test\n+    public void testBlankIPv6() {\n+        String blank = \" \";\n+        assertEquals(false, IPUtils.isAllZeroIP(blank));\n+    }\n+}",
    "output": "when listen 0.0.0.0, generate random password. #2620"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -385,7 +385,7 @@ private AsyncProfiler profilerInstance() {\n      */\n     public enum ProfilerAction {\n         // start, resume, stop, dump, check, status, meminfo, list, collect,\n-        start, resume, stop, dump, status, list,\n+        start, resume, stop, dump, status, meminfo, list,\n         version,\n \n         load,\n@@ -535,14 +535,13 @@ public void run() {\n                 String executeArgs = executeArgs(ProfilerAction.resume);\n                 String result = execute(asyncProfiler, executeArgs);\n                 appendExecuteResult(process, result);\n-            } else if (ProfilerAction.list.equals(profilerAction)) {\n-                String result = asyncProfiler.execute(\"list\");\n-                appendExecuteResult(process, result);\n             } else if (ProfilerAction.version.equals(profilerAction)) {\n-                String result = asyncProfiler.execute(\"version\");\n+                String result = asyncProfiler.execute(\"version=full\");\n                 appendExecuteResult(process, result);\n-            } else if (ProfilerAction.status.equals(profilerAction)) {\n-                String result = asyncProfiler.execute(\"status\");\n+            } else if (ProfilerAction.status.equals(profilerAction)\n+                    || ProfilerAction.meminfo.equals(profilerAction)\n+                    || ProfilerAction.list.equals(profilerAction)) {\n+                String result = asyncProfiler.execute(profilerAction.toString());\n                 appendExecuteResult(process, result);\n             } else if (ProfilerAction.dumpCollapsed.equals(profilerAction)) {\n                 if (actionArg == null) {",
    "output": "Upgrade profiler action: version, meminfo (#2626)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -381,14 +381,16 @@ private AsyncProfiler profilerInstance() {\n     }\n \n     /**\n-     * https://github.com/jvm-profiling-tools/async-profiler/blob/v2.5/src/arguments.cpp#L50\n-     *\n+     * https://github.com/async-profiler/async-profiler/blob/v2.9/profiler.sh#L154\n      */\n     public enum ProfilerAction {\n-        execute, start, stop, resume, list, version, status, load,\n+        // start, resume, stop, dump, check, status, meminfo, list, collect,\n+        start, resume, stop, dump, status, list,\n+        version,\n \n+        load,\n+        execute,\n         dumpCollapsed, dumpFlat, dumpTraces, getSamples,\n-\n         actions\n     }\n \n@@ -513,7 +515,7 @@ public void run() {\n                             //在异步线程执行，profiler命令已经结束，不能输出到客户端\n                             try {\n                                 logger.info(\"stopping profiler ...\");\n-                                ProfilerModel model = processStop(asyncProfiler);\n+                                ProfilerModel model = processStop(asyncProfiler, ProfilerAction.stop);\n                                 logger.info(\"profiler output file: \" + model.getOutputFile());\n                                 logger.info(\"stop profiler successfully.\");\n                             } catch (Throwable e) {\n@@ -524,7 +526,10 @@ public void run() {\n                 }\n                 process.appendResult(profilerModel);\n             } else if (ProfilerAction.stop.equals(profilerAction)) {\n-                ProfilerModel profilerModel = processStop(asyncProfiler);\n+                ProfilerModel profilerModel = processStop(asyncProfiler, profilerAction);\n+                process.appendResult(profilerModel);\n+            } else if (ProfilerAction.dump.equals(profilerAction)) {\n+                ProfilerModel profilerModel = processStop(asyncProfiler, profilerAction);\n                 process.appendResult(profilerModel);\n             } else if (ProfilerAction.resume.equals(profilerAction)) {\n                 String executeArgs = executeArgs(ProfilerAction.resume);\n@@ -576,9 +581,9 @@ public void run() {\n         }\n     }\n \n-    private ProfilerModel processStop(AsyncProfiler asyncProfiler) throws IOException {\n+    private ProfilerModel processStop(AsyncProfiler asyncProfiler, ProfilerAction profilerAction) throws IOException {\n         String outputFile = outputFile();\n-        String executeArgs = executeArgs(ProfilerAction.stop);\n+        String executeArgs = executeArgs(profilerAction);\n         String result = execute(asyncProfiler, executeArgs);\n \n         ProfilerModel profilerModel = createProfilerModel(result);",
    "output": "profiler command add dump action (#2622)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -51,7 +51,7 @@\n         + \"  profiler list                # list all supported events\\n\"\n         + \"  profiler actions             # list all supported actions\\n\"\n         + \"  profiler start --event alloc\\n\"\n-        + \"  profiler stop --format html   # output file format, support html,jfr\\n\"\n+        + \"  profiler stop --format html   # output file format, support flat[=N]|traces[=N]|collapsed|flamegraph|tree|jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n         + \"  profiler stop --threads \\n\"\n         + \"  profiler start --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\\n\"\n@@ -94,6 +94,26 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private boolean threads;\n \n+    /**\n+     * use simple class names instead of FQN\n+     */\n+    private boolean simple;\n+\n+    /**\n+     * print method signatures\n+     */\n+    private boolean sig;\n+\n+    /**\n+     * annotate Java methods\n+     */\n+    private boolean ann;\n+\n+    /**\n+     * prepend library names\n+     */\n+    private boolean lib;\n+\n     /**\n      * include only kernel-mode events\n      */\n@@ -119,6 +139,27 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private List<String> excludes;\n \n+\n+    /**\n+     * FlameGraph title\n+     */\n+    private String title;\n+\n+    /**\n+     * FlameGraph minimum frame width in percent\n+     */\n+    private String minwidth;\n+\n+    /**\n+     * generate stack-reversed FlameGraph / Call tree\n+     */\n+    private boolean reverse;\n+\n+    /**\n+     * count the total value (time, bytes, etc.) instead of samples\n+     */\n+    private boolean total;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -184,15 +225,18 @@ public void setFramebuf(long framebuf) {\n     }\n \n     @Option(shortName = \"f\", longName = \"file\")\n-    @Description(\"dump output to <filename>\")\n+    @Description(\"dump output to <filename>, if ends with html or jfr, content format can be infered\")\n     public void setFile(String file) {\n         this.file = file;\n     }\n \n-    @Option(longName = \"format\")\n-    @Description(\"dump output file format(html, jfr), default valut is html\")\n-    @DefaultValue(\"html\")\n+    @Option(shortName = \"o\", longName = \"format\")\n+    @Description(\"dump output content format(flat[=N]|traces[=N]|collapsed|flamegraph|tree|jfr)\")\n     public void setFormat(String format) {\n+        // only for backward compatibility\n+        if (\"html\".equals(format)) {\n+            format = \"flamegraph\";\n+        }\n         this.format = format;\n     }\n \n@@ -209,6 +253,30 @@ public void setThreads(boolean threads) {\n         this.threads = threads;\n     }\n \n+    @Option(shortName = \"s\", flag = true)\n+    @Description(\"use simple class names instead of FQN\")\n+    public void setSimple(boolean simple) {\n+        this.simple = simple;\n+    }\n+\n+    @Option(shortName = \"g\", flag = true)\n+    @Description(\"print method signatures\")\n+    public void setSig(boolean sig) {\n+        this.sig = sig;\n+    }\n+\n+    @Option(shortName = \"a\", flag = true)\n+    @Description(\"annotate Java methods\")\n+    public void setAnn(boolean ann) {\n+        this.ann = ann;\n+    }\n+\n+    @Option(shortName = \"l\", flag = true)\n+    @Description(\"prepend library names\")\n+    public void setLib(boolean lib) {\n+        this.lib = lib;\n+    }\n+\n     @Option(longName = \"allkernel\", flag = true)\n     @Description(\"include only kernel-mode events\")\n     public void setAllkernel(boolean allkernel) {\n@@ -227,18 +295,50 @@ public void setDuration(long duration) {\n         this.duration = duration;\n     }\n \n-    @Option(longName = \"include\")\n+    @Option(shortName = \"I\", longName = \"include\")\n     @Description(\"include stack traces containing PATTERN, for example: 'java/*'\")\n     public void setInclude(List<String> includes) {\n         this.includes = includes;\n     }\n \n-    @Option(longName = \"exclude\")\n+    @Option(shortName = \"X\", longName = \"exclude\")\n     @Description(\"exclude stack traces containing PATTERN, for example: '*Unsafe.park*'\")\n     public void setExclude(List<String> excludes) {\n         this.excludes = excludes;\n     }\n \n+    @Option(longName = \"title\")\n+    @Description(\"FlameGraph title\")\n+    public void setTitle(String title) {\n+        // escape HTML special characters\n+        // and escape comma to avoid conflicts with JVM TI\n+        title = title.replace(\"&\", \"&amp;\")\n+                .replace(\"<\", \"&lt;\")\n+                .replace(\">\", \"&gt;\")\n+                .replace(\"\\\"\", \"&quot;\")\n+                .replace(\"'\", \"&apos;\")\n+                .replace(\",\", \"&#44;\");\n+        this.title = title;\n+    }\n+\n+    @Option(longName = \"minwidth\")\n+    @Description(\"FlameGraph minimum frame width in percent\")\n+    public void setMinwidth(String minwidth) {\n+        this.minwidth = minwidth;\n+    }\n+\n+    @Option(longName = \"reverse\", flag = true)\n+    @Description(\"generate stack-reversed FlameGraph / Call tree\")\n+    public void setReverse(boolean reverse) {\n+        this.reverse = reverse;\n+    }\n+\n+    @Option(longName = \"total\", flag = true)\n+    @Description(\"count the total value (time, bytes, etc.) instead of samples\")\n+    public void setTotal(boolean total) {\n+        this.total = total;\n+    }\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n@@ -306,6 +406,9 @@ private String executeArgs(ProfilerAction action) {\n         if (this.file != null) {\n             sb.append(\"file=\").append(this.file).append(',');\n         }\n+        if (this.format != null) {\n+            sb.append(this.format).append(',');\n+        }\n         if (this.interval != null) {\n             sb.append(\"interval=\").append(this.interval).append(',');\n         }\n@@ -315,6 +418,18 @@ private String executeArgs(ProfilerAction action) {\n         if (this.threads) {\n             sb.append(\"threads\").append(',');\n         }\n+        if (this.simple) {\n+            sb.append(\"simple\").append(\",\");\n+        }\n+        if (this.sig) {\n+            sb.append(\"sig\").append(\",\");\n+        }\n+        if (this.ann) {\n+            sb.append(\"ann\").append(\",\");\n+        }\n+        if (this.lib) {\n+            sb.append(\"lib\").append(\",\");\n+        }\n         if (this.allkernel) {\n             sb.append(\"allkernel\").append(',');\n         }\n@@ -332,6 +447,19 @@ private String executeArgs(ProfilerAction action) {\n             }\n         }\n \n+        if (this.title != null) {\n+            sb.append(\"title=\").append(this.title).append(',');\n+        }\n+        if (this.minwidth != null) {\n+            sb.append(\"minwidth=\").append(this.minwidth).append(',');\n+        }\n+        if (this.reverse) {\n+            sb.append(\"reverse\").append(',');\n+        }\n+        if (this.total) {\n+            sb.append(\"total\").append(',');\n+        }\n+\n         return sb.toString();\n     }\n \n@@ -460,18 +588,40 @@ private ProfilerModel processStop(AsyncProfiler asyncProfiler) throws IOExceptio\n \n     private String outputFile() throws IOException {\n         if (this.file == null) {\n+            String fileExt = outputFileExt();\n             File outputPath = ArthasBootstrap.getInstance().getOutputPath();\n             if (outputPath != null) {\n                 this.file = new File(outputPath,\n-                        new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + this.format)\n+                        new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + fileExt)\n                                 .getAbsolutePath();\n             } else {\n-                this.file = File.createTempFile(\"arthas-output\", \".\" + this.format).getAbsolutePath();\n+                this.file = File.createTempFile(\"arthas-output\", \".\" + fileExt).getAbsolutePath();\n             }\n         }\n         return file;\n     }\n \n+    /**\n+     * This method should only be called when {@code this.file == null} is true.\n+     */\n+    private String outputFileExt() {\n+        String fileExt = \"\";\n+        if (this.format == null) {\n+            fileExt = \"html\";\n+        } else if (this.format.startsWith(\"flat\") || this.format.startsWith(\"traces\") \n+                || this.format.equals(\"collapsed\")) {\n+            fileExt = \"txt\";\n+        } else if (this.format.equals(\"flamegraph\") || this.format.equals(\"tree\")) {\n+            fileExt = \"html\";\n+        } else if (this.format.equals(\"jfr\")) {\n+            fileExt = \"jfr\";\n+        } else {\n+            // illegal -o option makes async-profiler use flat\n+            fileExt = \"txt\";\n+        }\n+        return fileExt;\n+    }\n+\n     private void appendExecuteResult(CommandProcess process, String result) {\n         ProfilerModel profilerModel = createProfilerModel(result);\n         process.appendResult(profilerModel);",
    "output": "Add -s,-g,-a,-l option for profiler command, better support farmat option (#2613)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -175,7 +175,11 @@ public void process(CommandProcess process) {\n         }\n \n         if (all) {\n-            processAllClasses(process, inst);\n+            String hashCode = this.hashCode;\n+            if (StringUtils.isBlank(hashCode) && targetClassLoader != null) {\n+                hashCode = \"\" + Integer.toHexString(targetClassLoader.hashCode());\n+            }\n+            processAllClasses(process, inst, hashCode);\n         } else if (classLoaderSpecified && resource != null) {\n             processResources(process, inst, targetClassLoader);\n         } else if (classLoaderSpecified && this.loadClass != null) {\n@@ -305,7 +309,7 @@ private void processLoadClass(CommandProcess process, Instrumentation inst, Clas\n         process.end();\n     }\n \n-    private void processAllClasses(CommandProcess process, Instrumentation inst) {\n+    private void processAllClasses(CommandProcess process, Instrumentation inst,String hashCode) {\n         RowAffect affect = new RowAffect();\n         getAllClasses(hashCode, inst, affect, process);\n         if (checkInterrupted(process)) {",
    "output": "fix classloader command (#2601)"
  },
  {
    "input": "diff --git a/core/src/main/java/one/profiler/AsyncProfiler.java b/core/src/main/java/one/profiler/AsyncProfiler.java\n--- a/core/src/main/java/one/profiler/AsyncProfiler.java\n+++ b/core/src/main/java/one/profiler/AsyncProfiler.java\n@@ -16,7 +16,10 @@\n \n package one.profiler;\n \n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n \n /**\n  * Java API for in-process profiling. Serves as a wrapper around\n@@ -39,20 +42,85 @@ public static synchronized AsyncProfiler getInstance(String libPath) {\n             return instance;\n         }\n \n-        if (libPath == null) {\n-            System.loadLibrary(\"asyncProfiler\");\n-        } else {\n+        AsyncProfiler profiler = new AsyncProfiler();\n+        if (libPath != null) {\n             System.load(libPath);\n+        } else {\n+            try {\n+                // No need to load library, if it has been preloaded with -agentpath\n+                profiler.getVersion();\n+            } catch (UnsatisfiedLinkError e) {\n+                File file = extractEmbeddedLib();\n+                if (file != null) {\n+                    try {\n+                        System.load(file.getPath());\n+                    } finally {\n+                        file.delete();\n+                    }\n+                } else {\n+                    System.loadLibrary(\"asyncProfiler\");\n+                }\n+            }\n+        }\n+\n+        instance = profiler;\n+        return profiler;\n+    }\n+\n+    private static File extractEmbeddedLib() {\n+        String resourceName = \"/\" + getPlatformTag() + \"/libasyncProfiler.so\";\n+        InputStream in = AsyncProfiler.class.getResourceAsStream(resourceName);\n+        if (in == null) {\n+            return null;\n+        }\n+\n+        try {\n+            String extractPath = System.getProperty(\"one.profiler.extractPath\");\n+            File file = File.createTempFile(\"libasyncProfiler-\", \".so\",\n+                    extractPath == null || extractPath.isEmpty() ? null : new File(extractPath));\n+            try (FileOutputStream out = new FileOutputStream(file)) {\n+                byte[] buf = new byte[32000];\n+                for (int bytes; (bytes = in.read(buf)) >= 0; ) {\n+                    out.write(buf, 0, bytes);\n+                }\n+            }\n+            return file;\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        } finally {\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                // ignore\n+            }\n         }\n+    }\n \n-        instance = new AsyncProfiler();\n-        return instance;\n+    private static String getPlatformTag() {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        String arch = System.getProperty(\"os.arch\").toLowerCase();\n+        if (os.contains(\"linux\")) {\n+            if (arch.equals(\"amd64\") || arch.equals(\"x86_64\") || arch.contains(\"x64\")) {\n+                return \"linux-x64\";\n+            } else if (arch.equals(\"aarch64\") || arch.contains(\"arm64\")) {\n+                return \"linux-arm64\";\n+            } else if (arch.equals(\"aarch32\") || arch.contains(\"arm\")) {\n+                return \"linux-arm32\";\n+            } else if (arch.contains(\"86\")) {\n+                return \"linux-x86\";\n+            } else if (arch.contains(\"ppc64\")) {\n+                return \"linux-ppc64le\";\n+            }\n+        } else if (os.contains(\"mac\")) {\n+            return \"macos\";\n+        }\n+        throw new UnsupportedOperationException(\"Unsupported platform: \" + os + \"-\" + arch);\n     }\n \n     /**\n      * Start profiling\n      *\n-     * @param event Profiling event, see {@link Events}\n+     * @param event    Profiling event, see {@link Events}\n      * @param interval Sampling interval, e.g. nanoseconds for Events.CPU\n      * @throws IllegalStateException If profiler is already running\n      */\n@@ -68,7 +136,7 @@ public void start(String event, long interval) throws IllegalStateException {\n      * Start or resume profiling without resetting collected data.\n      * Note that event and interval may change since the previous profiling session.\n      *\n-     * @param event Profiling event, see {@link Events}\n+     * @param event    Profiling event, see {@link Events}\n      * @param interval Sampling interval, e.g. nanoseconds for Events.CPU\n      * @throws IllegalStateException If profiler is already running\n      */\n@@ -119,7 +187,7 @@ public String getVersion() {\n      * @param command Profiling command\n      * @return The command result\n      * @throws IllegalArgumentException If failed to parse the command\n-     * @throws IOException If failed to create output file\n+     * @throws IOException              If failed to create output file\n      */\n     @Override\n     public String execute(String command) throws IllegalArgumentException, IllegalStateException, IOException {\n@@ -209,7 +277,10 @@ private void filterThread(Thread thread, boolean enable) {\n     }\n \n     private native void start0(String event, long interval, boolean reset) throws IllegalStateException;\n+\n     private native void stop0() throws IllegalStateException;\n+\n     private native String execute0(String command) throws IllegalArgumentException, IllegalStateException, IOException;\n+\n     private native void filterThread0(Thread thread, boolean enable);\n }\n\ndiff --git a/core/src/main/java/one/profiler/package-info.java b/core/src/main/java/one/profiler/package-info.java\n--- a/core/src/main/java/one/profiler/package-info.java\n+++ b/core/src/main/java/one/profiler/package-info.java\n@@ -1,5 +1,5 @@\n-\n /**\n- * from https://github.com/jvm-profiling-tools/async-profiler\n+ * This package is from https://github.com/async-profiler/async-profiler/\n+ * tag v2.9 commit 32601bc\n  */\n-package one.profiler;\n+package one.profiler;\n\\ No newline at end of file",
    "output": "Upgrade Async Profiler API to v2.9 (#2608)"
  },
  {
    "input": "diff --git a/tunnel-common/src/main/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponse.java b/tunnel-common/src/main/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponse.java\n--- a/tunnel-common/src/main/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponse.java\n+++ b/tunnel-common/src/main/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponse.java\n@@ -3,11 +3,14 @@\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.ObjectInput;\n+import java.io.InvalidClassException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n import java.io.Serializable;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -16,9 +19,11 @@\n  *\n  */\n public class SimpleHttpResponse implements Serializable {\n-\n     private static final long serialVersionUID = 1L;\n \n+    private static final List<String> whitelist = Arrays.asList(byte[].class.getName(), String.class.getName(),\n+            Map.class.getName(), HashMap.class.getName(), SimpleHttpResponse.class.getName());\n+\n     private int status = 200;\n \n     private Map<String, String> headers = new HashMap<String, String>();\n@@ -55,35 +60,25 @@ public void setStatus(int status) {\n \n     public static byte[] toBytes(SimpleHttpResponse response) throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        ObjectOutputStream out = null;\n-        try {\n-            out = new ObjectOutputStream(bos);\n+        try (ObjectOutputStream out = new ObjectOutputStream(bos)) {\n             out.writeObject(response);\n             out.flush();\n             return bos.toByteArray();\n-        } finally {\n-            try {\n-                bos.close();\n-            } catch (IOException ex) {\n-                // ignore close exception\n-            }\n         }\n     }\n \n     public static SimpleHttpResponse fromBytes(byte[] bytes) throws IOException, ClassNotFoundException {\n         ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-        ObjectInput in = null;\n-        try {\n-            in = new ObjectInputStream(bis);\n-            return (SimpleHttpResponse) in.readObject();\n-        } finally {\n-            try {\n-                if (in != null) {\n-                    in.close();\n+        try (ObjectInputStream in = new ObjectInputStream(bis) {\n+            protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+                if (!whitelist.contains(desc.getName())) {\n+                    throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n                 }\n-            } catch (IOException ex) {\n-                // ignore close exception\n+                return super.resolveClass(desc);\n             }\n+        }) {\n+            return (SimpleHttpResponse) in.readObject();\n         }\n     }\n+\n }\n\ndiff --git a/tunnel-common/src/test/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponseTest.java b/tunnel-common/src/test/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponseTest.java\n--- a/tunnel-common/src/test/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponseTest.java\n+++ b/tunnel-common/src/test/java/com/alibaba/arthas/tunnel/common/SimpleHttpResponseTest.java\n@@ -0,0 +1,59 @@\n+package com.alibaba.arthas.tunnel.common;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InvalidClassException;\n+import java.io.ObjectOutputStream;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class SimpleHttpResponseTest {\n+\n+    @Test\n+    public void testSerialization() throws IOException, ClassNotFoundException {\n+        SimpleHttpResponse response = new SimpleHttpResponse();\n+        response.setStatus(200);\n+\n+        Map<String, String> headers = new HashMap<String, String>();\n+        headers.put(\"Content-Type\", \"text/plain\");\n+        response.setHeaders(headers);\n+\n+        String content = \"Hello, world!\";\n+        response.setContent(content.getBytes());\n+\n+        byte[] bytes = SimpleHttpResponse.toBytes(response);\n+\n+        SimpleHttpResponse deserializedResponse = SimpleHttpResponse.fromBytes(bytes);\n+\n+        assertEquals(response.getStatus(), deserializedResponse.getStatus());\n+        assertEquals(response.getHeaders(), deserializedResponse.getHeaders());\n+        assertArrayEquals(response.getContent(), deserializedResponse.getContent());\n+    }\n+\n+    private static byte[] toBytes(Object object) throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        try (ObjectOutputStream out = new ObjectOutputStream(bos)) {\n+            out.writeObject(object);\n+            out.flush();\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    @Test(expected = InvalidClassException.class)\n+    public void testDeserializationWithUnauthorizedClass() throws IOException, ClassNotFoundException {\n+        Date date = new Date();\n+\n+        byte[] bytes = toBytes(date);\n+\n+        // Try to deserialize the object with an unauthorized class\n+        // This should throw an InvalidClassException\n+        SimpleHttpResponse.fromBytes(bytes);\n+    }\n+\n+}",
    "output": "SimpleHttpResponse adds deserialization whitelist"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/AgentClusterInfo.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/AgentClusterInfo.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/AgentClusterInfo.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/AgentClusterInfo.java\n@@ -13,19 +13,21 @@ public class AgentClusterInfo {\n     private String arthasVersion;\n \n     /**\n-     * agent 连接到的 tunnel server 的ip\n+     * agent 连接到的 tunnel server 的ip 和 port\n      */\n     private String clientConnectHost;\n+    private int clientConnectTunnelPort;\n \n     public AgentClusterInfo() {\n \n     }\n \n-    public AgentClusterInfo(AgentInfo agentInfo, String clientConnectHost) {\n+    public AgentClusterInfo(AgentInfo agentInfo, String clientConnectHost, int clientConnectTunnelPort) {\n         this.host = agentInfo.getHost();\n         this.port = agentInfo.getPort();\n         this.arthasVersion = agentInfo.getArthasVersion();\n         this.clientConnectHost = clientConnectHost;\n+        this.clientConnectTunnelPort = clientConnectTunnelPort;\n     }\n \n     public String getHost() {\n@@ -60,4 +62,12 @@ public void setClientConnectHost(String clientConnectHost) {\n         this.clientConnectHost = clientConnectHost;\n     }\n \n+    public int getClientConnectTunnelPort() {\n+        return clientConnectTunnelPort;\n+    }\n+\n+    public void setClientConnectTunnelPort(int clientConnectTunnelPort) {\n+        this.clientConnectTunnelPort = clientConnectTunnelPort;\n+    }\n+\n }\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n@@ -97,7 +97,7 @@ public void run() {\n                 if (tunnelClusterStore != null && clientConnectHost != null) {\n                     try {\n                         for (Entry<String, AgentInfo> entry : agentInfoMap.entrySet()) {\n-                            tunnelClusterStore.addAgent(entry.getKey(), new AgentClusterInfo(entry.getValue(), clientConnectHost), 60 * 60, TimeUnit.SECONDS);\n+                            tunnelClusterStore.addAgent(entry.getKey(), new AgentClusterInfo(entry.getValue(), clientConnectHost, port), 60 * 60, TimeUnit.SECONDS);\n                         }\n                     } catch (Throwable t) {\n                         logger.error(\"update tunnel info error\", t);\n@@ -123,7 +123,7 @@ public Optional<AgentInfo> findAgent(String id) {\n     public void addAgent(String id, AgentInfo agentInfo) {\n         agentInfoMap.put(id, agentInfo);\n         if (this.tunnelClusterStore != null) {\n-            this.tunnelClusterStore.addAgent(id, new AgentClusterInfo(agentInfo, clientConnectHost), 60 * 60, TimeUnit.SECONDS);\n+            this.tunnelClusterStore.addAgent(id, new AgentClusterInfo(agentInfo, clientConnectHost, port), 60 * 60, TimeUnit.SECONDS);\n         }\n     }\n ",
    "output": "Fix the page redirection issue of Arthas tunnel server"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n@@ -17,6 +17,8 @@\n public class RedirectHandler extends PlainTextHandler implements CloseFunction {\n     private PrintWriter out;\n \n+    private File file;\n+\n     public RedirectHandler() {\n \n     }\n@@ -34,6 +36,7 @@ public RedirectHandler(String name, boolean append) throws IOException {\n                 parentFile.mkdirs();\n             }\n         }\n+        this.file = file;\n         out = new PrintWriter(new BufferedWriter(new FileWriter(file, append)));\n     }\n \n@@ -55,4 +58,8 @@ public void close() {\n             out.close();\n         }\n     }\n+\n+    public String getFilePath() {\n+        return file.getAbsolutePath();\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n@@ -215,6 +215,7 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok\n         injectHandler(stdoutHandlerChain, pipelineTokens);\n         if (redirectHandler != null) {\n             stdoutHandlerChain.add(redirectHandler);\n+            term.write(\"redirect output file will be: \" + redirectHandler.getFilePath()+\"\\n\");\n         } else {\n             stdoutHandlerChain.add(new TermHandler(term));\n             if (GlobalOptions.isSaveResult) {",
    "output": "print job output file path  (#2566)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -54,7 +54,7 @@\n         + \"  profiler stop --format html   # output file format, support html,jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n         + \"  profiler stop --threads \\n\"\n-        + \"  profiler start --include 'java/*' --include 'demo/*' --exclude '*Unsafe.park*'\\n\"\n+        + \"  profiler start --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\\n\"\n         + \"  profiler status\\n\"\n         + \"  profiler resume              # Start or resume profiling without resetting collected data.\\n\"\n         + \"  profiler getSamples          # Get the number of samples collected during the profiling session\\n\"",
    "output": "update profile include/exclude doc (#2560)"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplication.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplication.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplication.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplication.java\n@@ -1,15 +1,15 @@\n-package com.example.arthasspringbootstarterexample;\n+package com.example.arthasspringboot3starterexample;\n \n import java.util.concurrent.TimeUnit;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n \n @SpringBootApplication\n-public class ArthasSpringBootStarterExampleApplication {\n+public class ArthasSpringBoot3StarterExampleApplication {\n \n \tpublic static void main(String[] args) throws InterruptedException {\n-\t\tSpringApplication.run(ArthasSpringBootStarterExampleApplication.class, args);\n+\t\tSpringApplication.run(ArthasSpringBoot3StarterExampleApplication.class, args);\n \t\tSystem.out.println(\"xxxxxxxxxxxxxxxxxx\");\n \t\tTimeUnit.SECONDS.sleep(3);\n \t\tSystem.exit(0);\n\ndiff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplicationTests.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplicationTests.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplicationTests.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringboot3starterexample/ArthasSpringBoot3StarterExampleApplicationTests.java\n@@ -1,10 +1,10 @@\n-package com.example.arthasspringbootstarterexample;\n+package com.example.arthasspringbootstarterexample3;\n \n import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;\n \n @SpringBootTest\n-class ArthasSpringBootStarterExampleApplicationTests {\n+class ArthasSpringBoot3StarterExampleApplicationTests {\n \n \t@Test\n \tvoid contextLoads() {",
    "output": "polish #2524"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n@@ -0,0 +1,18 @@\n+package com.example.arthasspringbootstarterexample;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class ArthasSpringBootStarterExampleApplication {\n+\n+\tpublic static void main(String[] args) throws InterruptedException {\n+\t\tSpringApplication.run(ArthasSpringBootStarterExampleApplication.class, args);\n+\t\tSystem.out.println(\"xxxxxxxxxxxxxxxxxx\");\n+\t\tTimeUnit.SECONDS.sleep(3);\n+\t\tSystem.exit(0);\n+\t}\n+\n+}\n\ndiff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot3-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n@@ -0,0 +1,13 @@\n+package com.example.arthasspringbootstarterexample;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class ArthasSpringBootStarterExampleApplicationTests {\n+\n+\t@Test\n+\tvoid contextLoads() {\n+\t}\n+\n+}",
    "output": "arthas-spring-boot-starter support spring boot3. #2524"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -456,6 +456,7 @@ private void bind(Configure configure) throws Throwable {\n                 logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n             }\n             UserStatUtil.setStatUrl(configure.getStatUrl());\n+            UserStatUtil.setAgentId(configure.getAgentId());\n             UserStatUtil.arthasStart();\n \n             try {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -35,6 +35,8 @@ public Thread newThread(Runnable r) {\n \n     private static volatile String statUrl = null;\n \n+    private static volatile String agentId = null;\n+\n     public static String getStatUrl() {\n         return statUrl;\n     }\n@@ -43,10 +45,21 @@ public static void setStatUrl(String url) {\n         statUrl = url;\n     }\n \n+    public static String getAgentId() {\n+        return agentId;\n+    }\n+\n+    public static void setAgentId(String id) {\n+        agentId = id;\n+    }\n+\n     public static void arthasStart() {\n         RemoteJob job = new RemoteJob();\n         job.appendQueryData(\"ip\", ip);\n         job.appendQueryData(\"version\", version);\n+        if (agentId != null) {\n+            job.appendQueryData(\"agentId\", agentId);\n+        }\n         job.appendQueryData(\"command\", \"start\");\n \n         try {\n@@ -60,6 +73,9 @@ public static void arthasUsage(String cmd, String detail) {\n         RemoteJob job = new RemoteJob();\n         job.appendQueryData(\"ip\", ip);\n         job.appendQueryData(\"version\", version);\n+        if (agentId != null) {\n+            job.appendQueryData(\"agentId\", agentId);\n+        }\n         job.appendQueryData(\"command\", URLEncoder.encode(cmd));\n         if (detail != null) {\n             job.appendQueryData(\"arguments\", URLEncoder.encode(detail));\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/StatController.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/StatController.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/StatController.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/StatController.java\n@@ -23,10 +23,11 @@ public class StatController {\n     @ResponseBody\n     public Map<String, Object> execute(@RequestParam(value = \"ip\", required = true) String ip,\n             @RequestParam(value = \"version\", required = true) String version,\n+            @RequestParam(value = \"agentId\", required = false) String agentId,\n             @RequestParam(value = \"command\", required = true) String command,\n             @RequestParam(value = \"arguments\", required = false, defaultValue = \"\") String arguments) {\n \n-        logger.info(\"arthas stat, ip: {}, version: {}, command: {}, arguments: {}\", ip, version, command, arguments);\n+        logger.info(\"arthas stat, ip: {}, version: {}, agentId: {}, command: {}, arguments: {}\", ip, version, agentId, command, arguments);\n \n         Map<String, Object> result = new HashMap<>();\n ",
    "output": "UserStat support agentId (#2501)"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n@@ -3,13 +3,14 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Field;\n \n import org.jboss.modules.ModuleClassLoader;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.internal.util.reflection.FieldSetter;\n \n+import com.alibaba.bytekit.utils.ReflectionUtils;\n import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.core.bytecode.TestHelper;\n import com.taobao.arthas.core.config.Configure;\n@@ -40,9 +41,13 @@ public void test() throws Exception {\n         Configure configure = Mockito.mock(Configure.class);\n         Mockito.when(configure.getEnhanceLoaders())\n                 .thenReturn(\"java.lang.ClassLoader,org.jboss.modules.ConcurrentClassLoader\");\n-        FieldSetter.setField(arthasBootstrap, ArthasBootstrap.class.getDeclaredField(\"configure\"), configure);\n-        FieldSetter.setField(arthasBootstrap, ArthasBootstrap.class.getDeclaredField(\"instrumentation\"),\n-                instrumentation);\n+        Field configureField = ArthasBootstrap.class.getDeclaredField(\"configure\");\n+        configureField.setAccessible(true);\n+        ReflectionUtils.setField(configureField, arthasBootstrap, configure);\n+\n+        Field instrumentationField = ArthasBootstrap.class.getDeclaredField(\"instrumentation\");\n+        instrumentationField.setAccessible(true);\n+        ReflectionUtils.setField(instrumentationField, arthasBootstrap, instrumentation);\n \n         org.jboss.modules.ModuleClassLoader moduleClassLoader = Mockito.mock(ModuleClassLoader.class);\n ",
    "output": "change target to jdk8. #2146"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.7\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.8\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.8"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -1,5 +1,7 @@\n package arthas;\n \n+import java.util.Map;\n+\n /**\n  * @author ZhangZiCheng 2021-02-12\n  * @author hengyunabc 2021-04-26\n@@ -70,6 +72,17 @@ public void forceGc() {\n         forceGc0();\n     }\n \n+    @Override\n+    public void interruptSpecialThread(int threadId) {\n+        Map<Thread, StackTraceElement[]> allThread = Thread.getAllStackTraces();\n+        for (Map.Entry<Thread, StackTraceElement[]> entry : allThread.entrySet()) {\n+            if (entry.getKey().getId() == threadId) {\n+                entry.getKey().interrupt();\n+                return;\n+            }\n+        }\n+    }\n+\n     @Override\n     public <T> T[] getInstances(Class<T> klass) {\n         return getInstances0(klass, -1);\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -20,6 +20,13 @@ public interface VmToolMXBean {\n      */\n     public void forceGc();\n \n+    /**\n+     * 打断指定线程\n+     *\n+     * @param threadId 线程ID\n+     */\n+    void interruptSpecialThread(int threadId);\n+\n     public <T> T[] getInstances(Class<T> klass);\n \n     /**\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -3,9 +3,11 @@\n import java.io.File;\n import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.assertj.core.api.Assertions;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.taobao.arthas.common.VmToolUtils;\n@@ -182,4 +184,30 @@ public void test_getInstances_interface() {\n \n         Assertions.assertThat(interfaceInstances[0]).isEqualTo(ObjectInstances[0]);\n     }\n+\n+    @Test\n+    public void test_interrupt_thread() throws InterruptedException {\n+        String threadName = \"interruptMe\";\n+        final RuntimeException[] re = new RuntimeException[1];\n+        Runnable runnable = new Runnable() {\n+            @Override public void run() {\n+                try {\n+                    System.out.printf(\"Thread name is: [%s], thread id is: [%d].\\n\", Thread.currentThread().getName(),Thread.currentThread().getId());\n+                    TimeUnit.SECONDS.sleep(1000);\n+                } catch (InterruptedException e) {\n+                    re[0] = new RuntimeException(\"interrupted \" + Thread.currentThread().getId() + \" thread success.\");\n+                }\n+            }\n+        };\n+        Thread interruptMe = new Thread(runnable,threadName);\n+        Thread interruptMe1 = new Thread(runnable,threadName);\n+\n+        interruptMe.start();\n+        interruptMe1.start();\n+\n+        VmTool tool = initVmTool();\n+        tool.interruptSpecialThread((int) interruptMe.getId());\n+        TimeUnit.SECONDS.sleep(5);\n+        Assert.assertEquals((\"interrupted \" + interruptMe.getId() + \" thread success.\"), re[0].getMessage());\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -55,6 +55,7 @@\n         + \"  vmtool --action getInstances --className java.lang.String --limit 10\\n\"\n         + \"  vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext\\n\"\n         + \"  vmtool --action forceGc\\n\"\n+        + \"  vmtool --action interruptThread -t 1\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"vmtool\")\n //@formatter:on\n public class VmToolCommand extends AnnotatedCommand {\n@@ -63,7 +64,7 @@ public class VmToolCommand extends AnnotatedCommand {\n     private VmToolAction action;\n     private String className;\n     private String express;\n-\n+    private int threadId;\n     private String hashCode = null;\n     private String classLoaderClass;\n     /**\n@@ -149,8 +150,14 @@ public void setExpress(String express) {\n         this.express = express;\n     }\n \n+    @Option(shortName = \"t\", longName = \"threadId\", required = false)\n+    @Description(\"The id of the thread to be interrupted\")\n+    public void setThreadId(int threadId) {\n+        this.threadId = threadId;\n+    }\n+\n     public enum VmToolAction {\n-        getInstances, forceGc\n+        getInstances, forceGc, interruptThread\n     }\n \n     @Override\n@@ -225,6 +232,12 @@ public void process(final CommandProcess process) {\n                 vmToolInstance().forceGc();\n                 process.write(\"\\n\");\n                 process.end();\n+                return;\n+            } else if (VmToolAction.interruptThread.equals(action)) {\n+                vmToolInstance().interruptSpecialThread(threadId);\n+                process.write(\"\\n\");\n+                process.end();\n+\n                 return;\n             }\n ",
    "output": "vmtool command support interrupt thread. #2427"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -71,6 +71,10 @@ public static boolean isX86() {\n     \treturn \"x86_32\".equals(arch);\n \t}\n \n+\tpublic static boolean isX86_64() {\n+\t\treturn \"x86_64\".equals(arch);\n+\t}\n+\n \tprivate static String normalizeArch(String value) {\n \t\tvalue = normalize(value);\n \t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n@@ -127,8 +131,7 @@ private static String normalizeArch(String value) {\n \t\tif (\"s390x\".equals(value)) {\n \t\t\treturn \"s390_64\";\n \t\t}\n-\n-\t\treturn UNKNOWN;\n+\t\treturn value;\n \t}\n \n \tprivate static String normalize(String value) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n@@ -12,11 +12,14 @@ public class VmToolUtils {\n             libName = \"libArthasJniLibrary.dylib\";\n         }\n         if (OSUtils.isLinux()) {\n-            libName = \"libArthasJniLibrary-x64.so\";\n             if (OSUtils.isArm32()) {\n                 libName = \"libArthasJniLibrary-arm.so\";\n             } else if (OSUtils.isArm64()) {\n                 libName = \"libArthasJniLibrary-aarch64.so\";\n+            } else if (OSUtils.isX86_64()) {\n+                libName = \"libArthasJniLibrary-x64.so\";\n+            }else {\n+                libName = \"libArthasJniLibrary-\" + OSUtils.arch() + \".so\";\n             }\n         }\n         if (OSUtils.isWindows()) {",
    "output": "add linux-other-arch complie/build support (#2443)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n@@ -125,6 +125,7 @@ private ChannelFuture writeResponse(ChannelHandlerContext ctx, HttpResponse resp\n         // try to add content-length header for DefaultFullHttpResponse\n         if (!HttpUtil.isTransferEncodingChunked(response)\n             && response instanceof DefaultFullHttpResponse) {\n+            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n             response.headers().set(HttpHeaderNames.CONTENT_LENGTH,\n                 ((DefaultFullHttpResponse) response).content().readableBytes());\n             return ctx.writeAndFlush(response);",
    "output": "Add http header connection close (#2432)"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -30,9 +30,11 @@\n import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.QueryStringDecoder;\n import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n+import io.netty.handler.timeout.IdleStateEvent;\n import io.netty.util.concurrent.Future;\n import io.netty.util.concurrent.FutureListener;\n import io.netty.util.concurrent.GenericFutureListener;\n@@ -74,6 +76,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                 String clientConnectionId = parameters.getFirst(URIConstans.CLIENT_CONNECTION_ID);\n                 openTunnel(ctx, clientConnectionId);\n             }\n+        } else if (evt instanceof IdleStateEvent) {\n+            ctx.writeAndFlush(new PingWebSocketFrame());\n         } else {\n             ctx.fireUserEventTriggered(evt);\n         }",
    "output": "TunnelSocketFrameHandler support IdleStateEvent. #2448"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketServerInitializer.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketServerInitializer.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketServerInitializer.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketServerInitializer.java\n@@ -10,6 +10,7 @@\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler;\n import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.timeout.IdleStateHandler;\n \n /**\n  * \n@@ -37,7 +38,7 @@ public void initChannel(SocketChannel ch) throws Exception {\n         pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n         pipeline.addLast(new WebSocketServerCompressionHandler());\n         pipeline.addLast(new WebSocketServerProtocolHandler(tunnelServer.getPath(), null, true, ArthasConstants.MAX_HTTP_CONTENT_LENGTH, false, true, 10000L));\n-\n+        pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));\n         pipeline.addLast(new TunnelSocketFrameHandler(tunnelServer));\n     }\n }",
    "output": "change tunnel server websocket idle time to 10s. #2448"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java b/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n--- a/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n@@ -26,7 +26,7 @@ public class ArthasConstants {\n     public static final int TELNET_PORT = 3658;\n \n     public static final String DEFAULT_WEBSOCKET_PATH = \"/ws\";\n-    public static final int WEBSOCKET_IDLE_SECONDS = 60;\n+    public static final int WEBSOCKET_IDLE_SECONDS = 10;\n \n     /**\n      * HTTP cookie id",
    "output": "change websocket idle time to 10s. #2448"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -408,20 +408,20 @@ private static Pair<Boolean, String> isUnsupportedClass(Class<?> clazz) {\n      * 对象增强\n      *\n      * @param inst              inst\n-     * @param adviceId          通知ID\n-     * @param isTracing         可跟踪方法调用\n-     * @param skipJDKTrace      是否忽略对JDK内部方法的跟踪\n-     * @param classNameMatcher  类名匹配\n-     * @param methodNameMatcher 方法名匹配\n+     * @param maxNumOfMatchedClass 匹配的class最大数量\n      * @return 增强影响范围\n      * @throws UnmodifiableClassException 增强失败\n      */\n-    public synchronized EnhancerAffect enhance(final Instrumentation inst) throws UnmodifiableClassException {\n+    public synchronized EnhancerAffect enhance(final Instrumentation inst, int maxNumOfMatchedClass) throws UnmodifiableClassException {\n         // 获取需要增强的类集合\n         this.matchingClasses = GlobalOptions.isDisableSubClass\n                 ? SearchUtils.searchClass(inst, classNameMatcher)\n                 : SearchUtils.searchSubClass(inst, SearchUtils.searchClass(inst, classNameMatcher));\n \n+        if (matchingClasses.size() > maxNumOfMatchedClass) {\n+            affect.setOverLimitMsg(\"The number of matched classes is \" +matchingClasses.size()+ \", greater than the limit value \" + maxNumOfMatchedClass + \". Try to change the limit with option '-m <arg>'.\");\n+            return affect;\n+        }\n         // 过滤掉无法被增强的类\n         List<Pair<Class<?>, String>> filtedList = filter(matchingClasses);\n         if (!filtedList.isEmpty()) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/EnhancerAffectVO.java b/core/src/main/java/com/taobao/arthas/core/command/model/EnhancerAffectVO.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/EnhancerAffectVO.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/EnhancerAffectVO.java\n@@ -20,13 +20,15 @@ public class EnhancerAffectVO {\n     private Throwable throwable;\n     private List<String> classDumpFiles;\n     private List<String> methods;\n+    private String overLimitMsg;\n \n     public EnhancerAffectVO(EnhancerAffect affect) {\n         this.cost = affect.cost();\n         this.classCount = affect.cCnt();\n         this.methodCount = affect.mCnt();\n         this.listenerId = affect.getListenerId();\n         this.throwable = affect.getThrowable();\n+        this.overLimitMsg = affect.getOverLimitMsg();\n \n         if (GlobalOptions.isDump) {\n             classDumpFiles = new ArrayList<String>();\n@@ -87,4 +89,12 @@ public List<String> getMethods() {\n     public void setMethods(List<String> methods) {\n         this.methods = methods;\n     }\n+\n+    public void setOverLimitMsg(String overLimitMsg) {\n+        this.overLimitMsg = overLimitMsg;\n+    }\n+\n+    public String getOverLimitMsg() {\n+        return overLimitMsg;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -20,9 +20,11 @@\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.Matcher;\n import com.taobao.arthas.core.view.Ansi;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Option;\n \n@@ -45,6 +47,8 @@ public abstract class EnhancerCommand extends AnnotatedCommand {\n \n     protected boolean verbose;\n \n+    protected int maxNumOfMatchedClass;\n+\n     @Option(longName = \"exclude-class-pattern\")\n     @Description(\"exclude class name pattern, use either '.' or '/' as separator\")\n     public void setExcludeClassPattern(String excludeClassPattern) {\n@@ -63,6 +67,13 @@ public void setVerbosee(boolean verbose) {\n         this.verbose = verbose;\n     }\n \n+    @Option(shortName = \"m\", longName = \"maxMatch\")\n+    @DefaultValue(\"50\")\n+    @Description(\"The maximum of matched class.\")\n+    public void setMaxNumOfMatchedClass(int maxNumOfMatchedClass) {\n+        this.maxNumOfMatchedClass = maxNumOfMatchedClass;\n+    }\n+\n     /**\n      * 类名匹配\n      *\n@@ -159,7 +170,7 @@ protected void enhance(CommandProcess process) {\n             Enhancer enhancer = new Enhancer(listener, listener instanceof InvokeTraceable, skipJDKTrace, getClassNameMatcher(), getClassNameExcludeMatcher(), getMethodNameMatcher());\n             // 注册通知监听器\n             process.register(listener, enhancer);\n-            effect = enhancer.enhance(inst);\n+            effect = enhancer.enhance(inst, this.maxNumOfMatchedClass);\n \n             if (effect.getThrowable() != null) {\n                 String msg = \"error happens when enhancing class: \"+effect.getThrowable().getMessage();\n@@ -170,6 +181,11 @@ protected void enhance(CommandProcess process) {\n \n             if (effect.cCnt() == 0 || effect.mCnt() == 0) {\n                 // no class effected\n+                if (!StringUtils.isEmpty(effect.getOverLimitMsg())) {\n+                    process.appendResult(new EnhancerModel(effect, false));\n+                    process.end(-1);\n+                    return;\n+                }\n                 // might be method code too large\n                 process.appendResult(new EnhancerModel(effect, false, \"No class or method is affected\"));\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n@@ -95,7 +95,9 @@ public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n                 affectVO.getMethodCount(),\n                 affectVO.getCost(),\n                 affectVO.getListenerId()));\n-\n+        if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n+            infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n+        }\n         if (affectVO.getThrowable() != null) {\n             infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n@@ -123,7 +123,6 @@ public static Set<Class<?>> searchSubClass(Instrumentation inst, Set<Class<?>> c\n         return matches;\n     }\n \n-\n     /**\n      * 搜索目标类的内部类\n      *\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n@@ -34,6 +34,8 @@ public final class EnhancerAffect extends Affect {\n \n     private final List<String> methods = new ArrayList<String>();\n \n+    private String overLimitMsg;\n+\n     public EnhancerAffect() {\n     }\n \n@@ -121,6 +123,14 @@ public List<String> getMethods() {\n         return methods;\n     }\n \n+    public String getOverLimitMsg() {\n+        return overLimitMsg;\n+    }\n+\n+    public void setOverLimitMsg(String overLimitMsg) {\n+        this.overLimitMsg = overLimitMsg;\n+    }\n+\n     @Override\n     public String toString() {\n         //TODO removing EnhancerAffect.toString(), replace with ViewRenderUtil.renderEnhancerAffect()",
    "output": "watch/trace support maxMatch option. (#2385)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n@@ -26,6 +26,7 @@\n \n /**\n  * @see sun.misc.Perf\n+ * @see jdk.internal.perf.Perf\n  * @see sun.management.counter.perf.PerfInstrumentation\n  * @author hengyunabc 2020-02-16\n  */\n@@ -55,7 +56,9 @@ public void process(CommandProcess process) {\n             process.end(1,\n                     \"please check arthas log. if java version >=9 , try to add jvm options when start your process: \"\n                             + \"--add-opens java.base/jdk.internal.perf=ALL-UNNAMED \"\n-                            + \"--add-exports java.base/jdk.internal.perf=ALL-UNNAMED\");\n+                            + \"--add-exports java.base/jdk.internal.perf=ALL-UNNAMED \"\n+                            + \"--add-opens java.management/sun.management.counter.perf=ALL-UNNAMED \"\n+                            + \"--add-opens java.management/sun.management.counter=ALL-UNNAMED\");\n             return;\n         }\n ",
    "output": "when jdk version greater than 9, perfcounter command print more info (#2371)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/env/ArthasEnvironment.java b/core/src/main/java/com/taobao/arthas/core/env/ArthasEnvironment.java\n--- a/core/src/main/java/com/taobao/arthas/core/env/ArthasEnvironment.java\n+++ b/core/src/main/java/com/taobao/arthas/core/env/ArthasEnvironment.java\n@@ -21,10 +21,10 @@ public class ArthasEnvironment implements Environment {\n             this.propertySources);\n \n     public ArthasEnvironment() {\n-        propertySources\n-                .addLast(new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n         propertySources.addLast(\n                 new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n+        propertySources\n+                .addLast(new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n     }\n \n     /**",
    "output": "fix the priority of environment properties (#2412)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -412,7 +412,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                             pid, bootstrap.getHttpPortOrDefault());\n             AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'stop' command.\",\n                             httpPortPid);\n-            AnsiLog.error(\"2. Or try to use different http port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port 9999\", httpPortPid);\n+            AnsiLog.error(\"2. Or try to use different http port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port 9999\");\n             System.exit(1);\n         }\n ",
    "output": "remove useless param"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -118,7 +118,7 @@ private static void saveUrl(final String filename, final String urlString, boole\n             int totalCount = 0;\n             int count;\n             long lastPrintTime = System.currentTimeMillis();\n-            while ((count = in.read(data, 0, 1024 * 1024)) != -1) {\n+            while ((count = in.read(data, 0, data.length)) != -1) {\n                 totalCount += count;\n                 if (printProgress) {\n                     long now = System.currentTimeMillis();",
    "output": "update DownloadUtils: clear hardcode"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -278,7 +278,7 @@ private static String format(String from, Object... arguments) {\n             String computed = from;\n             if (arguments != null && arguments.length != 0) {\n                 for (Object argument : arguments) {\n-                    computed = computed.replaceFirst(\"\\\\{\\\\}\", Matcher.quoteReplacement(argument.toString()));\n+                    computed = computed.replaceFirst(\"\\\\{\\\\}\", Matcher.quoteReplacement(String.valueOf(argument)));\n                 }\n             }\n             return computed;",
    "output": "fix AnsiLog format NullPointerException"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -215,7 +215,7 @@ public static int process(String[] args, ActionListener eotEventCallback) throws\n \n         if (telnetConsole.isHelp()) {\n             System.out.println(usage(cli));\n-            return STATUS_ERROR;\n+            return STATUS_OK;\n         }\n \n         // Try to read cmds",
    "output": "fix TelnetConsole#process return status"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -518,74 +518,78 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             //double check telnet port and pid before attach\n             telnetPortPid = findProcessByTelnetClient(arthasHomeDir.getAbsolutePath(), bootstrap.getTelnetPortOrDefault());\n             checkTelnetPortPid(bootstrap, telnetPortPid, pid);\n+            if (telnetPortPid > 0 && pid == telnetPortPid) {\n+                AnsiLog.info(\"The target process already listen port {}, skip attach.\", bootstrap.getTelnetPortOrDefault());\n+            } else {\n \n-            // start arthas-core.jar\n-            List<String> attachArgs = new ArrayList<String>();\n-            attachArgs.add(\"-jar\");\n-            attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n-            attachArgs.add(\"-pid\");\n-            attachArgs.add(\"\" + pid);\n-            if (bootstrap.getTargetIp() != null) {\n-                attachArgs.add(\"-target-ip\");\n-                attachArgs.add(bootstrap.getTargetIp());\n-            }\n+                // start arthas-core.jar\n+                List<String> attachArgs = new ArrayList<String>();\n+                attachArgs.add(\"-jar\");\n+                attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n+                attachArgs.add(\"-pid\");\n+                attachArgs.add(\"\" + pid);\n+                if (bootstrap.getTargetIp() != null) {\n+                    attachArgs.add(\"-target-ip\");\n+                    attachArgs.add(bootstrap.getTargetIp());\n+                }\n \n-            if (bootstrap.getTelnetPort() != null) {\n-                attachArgs.add(\"-telnet-port\");\n-                attachArgs.add(\"\" + bootstrap.getTelnetPort());\n-            }\n+                if (bootstrap.getTelnetPort() != null) {\n+                    attachArgs.add(\"-telnet-port\");\n+                    attachArgs.add(\"\" + bootstrap.getTelnetPort());\n+                }\n \n-            if (bootstrap.getHttpPort() != null) {\n-                attachArgs.add(\"-http-port\");\n-                attachArgs.add(\"\" + bootstrap.getHttpPort());\n-            }\n+                if (bootstrap.getHttpPort() != null) {\n+                    attachArgs.add(\"-http-port\");\n+                    attachArgs.add(\"\" + bootstrap.getHttpPort());\n+                }\n \n-            attachArgs.add(\"-core\");\n-            attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n-            attachArgs.add(\"-agent\");\n-            attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n-            if (bootstrap.getSessionTimeout() != null) {\n-                attachArgs.add(\"-session-timeout\");\n-                attachArgs.add(\"\" + bootstrap.getSessionTimeout());\n-            }\n+                attachArgs.add(\"-core\");\n+                attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n+                attachArgs.add(\"-agent\");\n+                attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n+                if (bootstrap.getSessionTimeout() != null) {\n+                    attachArgs.add(\"-session-timeout\");\n+                    attachArgs.add(\"\" + bootstrap.getSessionTimeout());\n+                }\n \n-            if (bootstrap.getAppName() != null) {\n-                attachArgs.add(\"-app-name\");\n-                attachArgs.add(bootstrap.getAppName());\n-            }\n+                if (bootstrap.getAppName() != null) {\n+                    attachArgs.add(\"-app-name\");\n+                    attachArgs.add(bootstrap.getAppName());\n+                }\n \n-            if (bootstrap.getUsername() != null) {\n-                attachArgs.add(\"-username\");\n-                attachArgs.add(bootstrap.getUsername());\n-            }\n-            if (bootstrap.getPassword() != null) {\n-                attachArgs.add(\"-password\");\n-                attachArgs.add(bootstrap.getPassword());\n-            }\n+                if (bootstrap.getUsername() != null) {\n+                    attachArgs.add(\"-username\");\n+                    attachArgs.add(bootstrap.getUsername());\n+                }\n+                if (bootstrap.getPassword() != null) {\n+                    attachArgs.add(\"-password\");\n+                    attachArgs.add(bootstrap.getPassword());\n+                }\n \n-            if (bootstrap.getTunnelServer() != null) {\n-                attachArgs.add(\"-tunnel-server\");\n-                attachArgs.add(bootstrap.getTunnelServer());\n-            }\n-            if (bootstrap.getAgentId() != null) {\n-                attachArgs.add(\"-agent-id\");\n-                attachArgs.add(bootstrap.getAgentId());\n-            }\n-            if (bootstrap.getStatUrl() != null) {\n-                attachArgs.add(\"-stat-url\");\n-                attachArgs.add(bootstrap.getStatUrl());\n-            }\n+                if (bootstrap.getTunnelServer() != null) {\n+                    attachArgs.add(\"-tunnel-server\");\n+                    attachArgs.add(bootstrap.getTunnelServer());\n+                }\n+                if (bootstrap.getAgentId() != null) {\n+                    attachArgs.add(\"-agent-id\");\n+                    attachArgs.add(bootstrap.getAgentId());\n+                }\n+                if (bootstrap.getStatUrl() != null) {\n+                    attachArgs.add(\"-stat-url\");\n+                    attachArgs.add(bootstrap.getStatUrl());\n+                }\n \n-            if (bootstrap.getDisabledCommands() != null){\n-                attachArgs.add(\"-disabled-commands\");\n-                attachArgs.add(bootstrap.getDisabledCommands());\n-            }\n+                if (bootstrap.getDisabledCommands() != null) {\n+                    attachArgs.add(\"-disabled-commands\");\n+                    attachArgs.add(bootstrap.getDisabledCommands());\n+                }\n \n-            AnsiLog.info(\"Try to attach process \" + pid);\n-            AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n-            ProcessUtils.startArthasCore(pid, attachArgs);\n+                AnsiLog.info(\"Try to attach process \" + pid);\n+                AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n+                ProcessUtils.startArthasCore(pid, attachArgs);\n \n-            AnsiLog.info(\"Attach process {} success.\", pid);\n+                AnsiLog.info(\"Attach process {} success.\", pid);\n+            }\n         }\n \n         if (bootstrap.isAttachOnly()) {",
    "output": "fix attach doublecheck"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -129,7 +129,7 @@ private static Map<Long, String> listProcessByJps(boolean v) {\n             jps = jpsFile.getAbsolutePath();\n         }\n \n-        AnsiLog.debug(\"Try use jps to lis java process, jps: \" + jps);\n+        AnsiLog.debug(\"Try use jps to list java process, jps: \" + jps);\n \n         String[] command = null;\n         if (v) {",
    "output": "typo fix"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java\n@@ -8,16 +8,25 @@\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.middleware.cli.annotations.*;\n+import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n-import jdk.jfr.*;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import jdk.jfr.Configuration;\n+import jdk.jfr.Recording;\n+\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Paths;\n import java.text.SimpleDateFormat;\n import java.time.Duration;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n \n@@ -163,7 +172,7 @@ public String getState() {\n     @Override\n     public void process(CommandProcess process) {\n \n-        if (cmd.equals(\"start\")) {\n+        if (\"start\".equals(cmd)) {\n             Configuration c = null;\n             try {\n                 if (getSettings() == null) {\n@@ -235,25 +244,26 @@ public void process(CommandProcess process) {\n \n             if (duration == null && maxAge == null && maxSize == null) {\n                 result.setJfrOutput(\" No limit specified, using maxsize=250MB as default.\");\n-                r.setMaxSize(250*1024L*1024L);\n+                r.setMaxSize(250 * 1024L * 1024L);\n             }\n \n             if (filename != null && duration != null) {\n                 result.setJfrOutput(\" The result will be written to:\\n\" + filename);\n             }\n-        } else if (cmd.equals(\"status\")) {\n+        } else if (\"status\".equals(cmd)) {\n             // list recording id = recording\n             if (getRecording() != null) {\n                 Recording r = recordings.get(getRecording());\n-                if (r == null)\n+                if (r == null) {\n                     process.end(-1, \"recording not exit\");\n+                }\n                 printRecording(r);\n             } else {// list all recordings\n                 List<Recording> recordingList;\n                 if (state != null) {\n                     recordingList = findRecordingByState(state);\n                 } else {\n-                    recordingList =  new ArrayList<Recording>(recordings.values());\n+                    recordingList = new ArrayList<Recording>(recordings.values());\n                 }\n                 if (recordingList.isEmpty()) {\n                     process.end(-1, \"No available recordings.\\n Use jfr start to start a recording.\\n\");\n@@ -263,14 +273,15 @@ public void process(CommandProcess process) {\n                     }\n                 }\n             }\n-        } else if (cmd.equals(\"dump\")) {\n+        } else if (\"dump\".equals(cmd)) {\n             if (recordings.isEmpty()) {\n-                process.end(-1,\"No recordings to dump. Use jfr start to start a recording.\");\n+                process.end(-1, \"No recordings to dump. Use jfr start to start a recording.\");\n             }\n             if (getRecording() != null) {\n                 Recording r = recordings.get(getRecording());\n-                if (r == null)\n+                if (r == null) {\n                     process.end(-1, \"recording not exit\");\n+                }\n                 if (getFilename() == null) {\n                     try {\n                         setFilename(outputFile());\n@@ -282,23 +293,25 @@ public void process(CommandProcess process) {\n                 try {\n                     r.dump(Paths.get(getFilename()));\n                 } catch (IOException e) {\n-                    process.end(-1,\"Could not to dump. \"+ e.getMessage());\n+                    process.end(-1, \"Could not to dump. \" + e.getMessage());\n                 }\n                 result.setJfrOutput(\"Dump recording \" + r.getId() + \", The result will be written to:\\n\" + getFilename());\n             } else {\n-                process.end(-1,\"Failed to dump. Please input recording id\");\n+                process.end(-1, \"Failed to dump. Please input recording id\");\n             }\n \n-        } else if (cmd.equals(\"stop\")) {\n+        } else if (\"stop\".equals(cmd)) {\n             if (recordings.isEmpty()) {\n-                process.end(-1,\"No recordings to stop. Use jfr start to start a recording.\");\n+                process.end(-1, \"No recordings to stop. Use jfr start to start a recording.\");\n             }\n             if (getRecording() != null) {\n                 Recording r = recordings.remove(getRecording());\n-                if (r == null)\n+                if (r == null) {\n                     process.end(-1, \"recording not exit\");\n-                if (r.getState().toString().equals(\"CLOSED\") || r.getState().toString().equals(\"STOPPED\"))\n+                }\n+                if (\"CLOSED\".equals(r.getState().toString()) || \"STOPPED\".equals(r.getState().toString())) {\n                     process.end(-1, \"Failed to stop recording, state can not be closed/stopped\");\n+                }\n                 if (getFilename() == null) {\n                     try {\n                         setFilename(outputFile());\n@@ -309,7 +322,7 @@ public void process(CommandProcess process) {\n                 try {\n                     r.setDestination(Paths.get(getFilename()));\n                 } catch (IOException e) {\n-                    process.end(-1, \"Failed to stop\" + r.getName() +\". Could not set destination for \"+ filename+ \"to file\" + e.getMessage());\n+                    process.end(-1, \"Failed to stop\" + r.getName() + \". Could not set destination for \" + filename + \"to file\" + e.getMessage());\n                 }\n \n                 r.stop();\n@@ -326,7 +339,7 @@ public void process(CommandProcess process) {\n         process.end();\n     }\n \n-    public long parseSize(String s) throws Exception{\n+    public long parseSize(String s) throws Exception {\n         s = s.toLowerCase();\n         if (s.endsWith(\"b\")) {\n             return Long.parseLong(s.substring(0, s.length() - 1).trim());\n@@ -368,18 +381,19 @@ private List<Recording> findRecordingByState(String state) {\n         List<Recording> resultRecordingList = new ArrayList<Recording>();\n         Collection<Recording> recordingList = recordings.values();\n         for (Recording recording : recordingList) {\n-            if (recording.getState().toString().toLowerCase().equals(state))\n+            if (recording.getState().toString().toLowerCase().equals(state)) {\n                 resultRecordingList.add(recording);\n+            }\n         }\n         return resultRecordingList;\n     }\n \n     private void printRecording(Recording recording) {\n-        String format = \"Recording: recording=\"+recording.getId()+\" name=\"+recording.getName()+\"\";\n+        String format = \"Recording: recording=\" + recording.getId() + \" name=\" + recording.getName() + \"\";\n         result.setJfrOutput(format);\n         Duration duration = recording.getDuration();\n         if (duration != null) {\n-            result.setJfrOutput(\" duration=\"+ duration.toString());\n+            result.setJfrOutput(\" duration=\" + duration.toString());\n         }\n         result.setJfrOutput(\" (\" + recording.getState().toString().toLowerCase() + \")\\n\");\n     }",
    "output": "reformat JFRCommand"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -144,7 +144,7 @@ public void setLibPath(String path) {\n     }\n \n     @Option(longName = \"express\", required = false)\n-    @Description(\"The ognl expression, default valueis `instances`.\")\n+    @Description(\"The ognl expression, default value is `instances`.\")\n     public void setExpress(String express) {\n         this.express = express;\n     }",
    "output": "fix typo (#2388)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -15,6 +15,7 @@\n import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.ClassLoaderUtils;\n import com.taobao.arthas.core.util.ResultUtils;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n@@ -23,7 +24,6 @@\n \n import java.lang.instrument.Instrumentation;\n import java.net.URL;\n-import java.net.URLClassLoader;\n import java.security.CodeSource;\n import java.security.ProtectionDomain;\n import java.util.ArrayList;\n@@ -246,14 +246,14 @@ private void processClassLoaders(CommandProcess process, Instrumentation inst) {\n     private void processClassLoader(CommandProcess process, Instrumentation inst, ClassLoader targetClassLoader) {\n         RowAffect affect = new RowAffect();\n         if (targetClassLoader != null) {\n-            if (targetClassLoader instanceof URLClassLoader) {\n-                List<String> classLoaderUrls = getClassLoaderUrls(targetClassLoader);\n-                affect.rCnt(classLoaderUrls.size());\n-                if (classLoaderUrls.isEmpty()) {\n+            URL[] classLoaderUrls = ClassLoaderUtils.getUrls(targetClassLoader);\n+            if (classLoaderUrls != null) {\n+                affect.rCnt(classLoaderUrls.length);\n+                if (classLoaderUrls.length == 0) {\n                     process.appendResult(new MessageModel(\"urls is empty.\"));\n                 } else {\n-                    process.appendResult(new ClassLoaderModel().setUrls(classLoaderUrls));\n-                    affect.rCnt(classLoaderUrls.size());\n+                    process.appendResult(new ClassLoaderModel().setUrls(StringUtils.toStringList(classLoaderUrls)));\n+                    affect.rCnt(classLoaderUrls.length);\n                 }\n             } else {\n                 process.appendResult(new MessageModel(\"not a URLClassLoader.\"));\n@@ -403,20 +403,6 @@ private boolean checkInterrupted(CommandProcess process) {\n         }\n     }\n \n-    private static List<String> getClassLoaderUrls(ClassLoader classLoader) {\n-        List<String> urlStrs = new ArrayList<String>();\n-        if (classLoader instanceof URLClassLoader) {\n-            URLClassLoader cl = (URLClassLoader) classLoader;\n-            URL[] urls = cl.getURLs();\n-            if (urls != null) {\n-                for (URL url : urls) {\n-                    urlStrs.add(url.toString());\n-                }\n-            }\n-        }\n-        return urlStrs;\n-    }\n-    \n     private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats(Instrumentation inst) {\n         Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats = new HashMap<ClassLoaderVO, ClassLoaderUrlStat>();\n         Map<ClassLoader, Set<String>> usedUrlsMap = new HashMap<ClassLoader, Set<String>>();\n@@ -441,13 +427,17 @@ private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats(Instrumentation inst) {\n         for (Entry<ClassLoader, Set<String>> entry : usedUrlsMap.entrySet()) {\n             ClassLoader loader = entry.getKey();\n             Set<String> usedUrls = entry.getValue();\n-            List<String> allUrls = getClassLoaderUrls(loader);\n+            URL[] allUrls = ClassLoaderUtils.getUrls(loader);\n             List<String> unusedUrls = new ArrayList<String>();\n-            for (String url : allUrls) {\n-                if (!usedUrls.contains(url)) {\n-                    unusedUrls.add(url);\n+            if (allUrls != null) {\n+                for (URL url : allUrls) {\n+                    String urlStr = url.toString();\n+                    if (!usedUrls.contains(urlStr)) {\n+                        unusedUrls.add(urlStr);\n+                    }\n                 }\n             }\n+\n             urlStats.put(ClassUtils.createClassLoaderVO(loader), new ClassLoaderUrlStat(usedUrls, unusedUrls));\n         }\n         return urlStats;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n@@ -1,6 +1,9 @@\n package com.taobao.arthas.core.util;\n \n import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Field;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -120,4 +123,56 @@ else if (!StringUtils.isEmpty(classLoaderToString) && StringUtils.isEmpty(classL\n         }\n         return matchClassLoaders;\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"restriction\" })\n+    public static URL[] getUrls(ClassLoader classLoader) {\n+        if (classLoader instanceof URLClassLoader) {\n+            return ((URLClassLoader) classLoader).getURLs();\n+        }\n+\n+        // jdk9\n+        if (classLoader.getClass().getName().startsWith(\"jdk.internal.loader.ClassLoaders$\")) {\n+            try {\n+                Field field = sun.misc.Unsafe.class.getDeclaredField(\"theUnsafe\");\n+                field.setAccessible(true);\n+                sun.misc.Unsafe unsafe = (sun.misc.Unsafe) field.get(null);\n+\n+                Class<?> ucpOwner = classLoader.getClass();\n+                Field ucpField = null;\n+\n+                // jdk 9~15: jdk.internal.loader.ClassLoaders$AppClassLoader.ucp\n+                // jdk 16~17: jdk.internal.loader.BuiltinClassLoader.ucp\n+                while (ucpField == null && !ucpOwner.getName().equals(\"java.lang.Object\")) {\n+                    try {\n+                        ucpField = ucpOwner.getDeclaredField(\"ucp\");\n+                    } catch (NoSuchFieldException ex) {\n+                        ucpOwner = ucpOwner.getSuperclass();\n+                    }\n+                }\n+                if (ucpField == null) {\n+                    return null;\n+                }\n+\n+                long ucpFieldOffset = unsafe.objectFieldOffset(ucpField);\n+                Object ucpObject = unsafe.getObject(classLoader, ucpFieldOffset);\n+                if (ucpObject == null) {\n+                    return null;\n+                }\n+\n+                // jdk.internal.loader.URLClassPath.path\n+                Field pathField = ucpField.getType().getDeclaredField(\"path\");\n+                if (pathField == null) {\n+                    return null;\n+                }\n+                long pathFieldOffset = unsafe.objectFieldOffset(pathField);\n+                ArrayList<URL> path = (ArrayList<URL>) unsafe.getObject(ucpObject, pathFieldOffset);\n+\n+                return path.toArray(new URL[path.size()]);\n+            } catch (Throwable e) {\n+                // ignore\n+                return null;\n+            }\n+        }\n+        return null;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -20,9 +20,11 @@\n import java.io.IOException;\n import java.io.StringReader;\n import java.lang.reflect.Modifier;\n+import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n@@ -981,4 +983,15 @@ public static String[] splitInvokeInfo(String invokeInfo) {\n     public static String beautifyName(String name) {\n         return name.replace(' ', '_').toLowerCase();\n     }\n+\n+    public static List<String> toStringList(URL[] urls) {\n+        if (urls != null) {\n+            List<String> result = new ArrayList<String>(urls.length);\n+            for (URL url : urls) {\n+                result.add(url.toString());\n+            }\n+            return result;\n+        }\n+        return Collections.emptyList();\n+    }\n }",
    "output": "classloader command support jdk.internal.loader.ClassLoaders$AppClassLoade. #2350"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.6\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.7\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.7"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -50,6 +50,7 @@ public class SearchClassCommand extends AnnotatedCommand {\n     private boolean isRegEx = false;\n     private String hashCode = null;\n     private String classLoaderClass;\n+    private String classLoaderToString;\n     private Integer expand;\n     private int numberOfLimit = 100;\n \n@@ -101,14 +102,27 @@ public void setNumberOfLimit(int numberOfLimit) {\n         this.numberOfLimit = numberOfLimit;\n     }\n \n+    @Option(shortName = \"cs\", longName = \"classLoaderStr\")\n+    @Description(\"The return value of the special class's ClassLoader#toString().\")\n+    public void setClassLoaderToString(String classLoaderToString) {\n+        this.classLoaderToString = classLoaderToString;\n+    }\n+\n     @Override\n     public void process(final CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n \n-        if (hashCode == null && classLoaderClass != null) {\n-            List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst, classLoaderClass);\n+        if (hashCode == null && (classLoaderClass != null || classLoaderToString != null)) {\n+            List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoader(inst, classLoaderClass, classLoaderToString);\n+            String tips = \"\";\n+            if (classLoaderClass != null) {\n+                tips = \"class name: \" + classLoaderClass;\n+            }\n+            if (classLoaderToString != null) {\n+                tips = tips + (StringUtils.isEmpty(tips) ? \"ClassLoader#toString(): \" : \", ClassLoader#toString(): \") + classLoaderToString;\n+            }\n             if (matchedClassLoaders.size() == 1) {\n                 hashCode = Integer.toHexString(matchedClassLoaders.get(0).hashCode());\n             } else if (matchedClassLoaders.size() > 1) {\n@@ -117,10 +131,10 @@ public void process(final CommandProcess process) {\n                         .setClassLoaderClass(classLoaderClass)\n                         .setMatchedClassLoaders(classLoaderVOList);\n                 process.appendResult(searchclassModel);\n-                process.end(-1, \"Found more than one classloader by class name, please specify classloader with '-c <classloader hash>'\");\n+                process.end(-1, \"Found more than one classloader by \" + tips + \", please specify classloader with '-c <classloader hash>'\");\n                 return;\n             } else {\n-                process.end(-1, \"Can not find classloader by class name: \" + classLoaderClass + \".\");\n+                process.end(-1, \"Can not find classloader by \" + tips + \".\");\n                 return;\n             }\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n@@ -76,4 +76,48 @@ public static String classLoaderHash(ClassLoader classLoader) {\n         }\n         return Integer.toHexString(hashCode);\n     }\n+\n+    /**\n+     * Find List<ClassLoader> by the class name of ClassLoader or the return value of ClassLoader#toString().\n+     * @param inst\n+     * @param classLoaderClassName\n+     * @param classLoaderToString\n+     * @return\n+     */\n+    public static List<ClassLoader> getClassLoader(Instrumentation inst, String classLoaderClassName, String classLoaderToString) {\n+        List<ClassLoader> matchClassLoaders = new ArrayList<ClassLoader>();\n+        if (StringUtils.isEmpty(classLoaderClassName) && StringUtils.isEmpty(classLoaderToString)) {\n+            return matchClassLoaders;\n+        }\n+        Set<ClassLoader> classLoaderSet = getAllClassLoader(inst);\n+        List<ClassLoader> matchedByClassLoaderToStr = new ArrayList<ClassLoader>();\n+        for (ClassLoader classLoader : classLoaderSet) {\n+            // only classLoaderClassName\n+            if (!StringUtils.isEmpty(classLoaderClassName) && StringUtils.isEmpty(classLoaderToString)) {\n+                if (classLoader.getClass().getName().equals(classLoaderClassName)) {\n+                    matchClassLoaders.add(classLoader);\n+                }\n+            }\n+            // only classLoaderToString\n+            else if (!StringUtils.isEmpty(classLoaderToString) && StringUtils.isEmpty(classLoaderClassName)) {\n+                if (classLoader.toString().equals(classLoaderToString)) {\n+                    matchClassLoaders.add(classLoader);\n+                }\n+            }\n+            // classLoaderClassName and classLoaderToString\n+            else {\n+                if (classLoader.getClass().getName().equals(classLoaderClassName)) {\n+                    matchClassLoaders.add(classLoader);\n+                }\n+                if (classLoader.toString().equals(classLoaderToString)) {\n+                    matchedByClassLoaderToStr.add(classLoader);\n+                }\n+            }\n+        }\n+        // classLoaderClassName and classLoaderToString\n+        if (!StringUtils.isEmpty(classLoaderClassName) && !StringUtils.isEmpty(classLoaderToString)) {\n+            matchClassLoaders.retainAll(matchedByClassLoaderToStr);\n+        }\n+        return matchClassLoaders;\n+    }\n }",
    "output": "support ClassLoader#toString() for sc command. (#2329)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -222,7 +222,7 @@ private ExitStatus processTopBusyThreads(CommandProcess process) {\n     private ThreadInfo findThreadInfoById(ThreadInfo[] threadInfos, long id) {\n         for (int i = 0; i < threadInfos.length; i++) {\n             ThreadInfo threadInfo = threadInfos[i];\n-            if ( threadInfo.getThreadId() == id) {\n+            if (threadInfo != null && threadInfo.getThreadId() == id) {\n                 return threadInfo;\n             }\n         }",
    "output": "fix thread command NullPointerException. #2342"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -160,6 +160,7 @@ private void finishing(Class<?> clazz, ArthasMethod method, boolean isThrowing,\n                 MonitorData oData = value.get();\n                 MonitorData nData = new MonitorData();\n                 nData.setCost(oData.getCost() + cost);\n+                nData.setTimestamp(new Date());\n                 if (isThrowing) {\n                     nData.setFailed(oData.getFailed() + 1);\n                     nData.setSuccess(oData.getSuccess());\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorData.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorData.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorData.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorData.java\n@@ -1,5 +1,7 @@\n package com.taobao.arthas.core.command.monitor200;\n \n+import java.util.Date;\n+\n /**\n  * 数据监控用的value for MonitorCommand\n  *\n@@ -12,6 +14,7 @@ public class MonitorData {\n     private int success;\n     private int failed;\n     private double cost;\n+    private Date timestamp;\n \n     public String getClassName() {\n         return className;\n@@ -60,4 +63,15 @@ public double getCost() {\n     public void setCost(double cost) {\n         this.cost = cost;\n     }\n+\n+    public Date getTimestamp() {\n+        if (timestamp == null) {\n+            timestamp = new Date();\n+        }\n+        return timestamp;\n+    }\n+\n+    public void setTimestamp(Date timestamp) {\n+        this.timestamp = timestamp;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java b/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/MonitorView.java\n@@ -9,7 +9,6 @@\n \n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n-import java.util.Date;\n \n import static com.taobao.text.ui.Element.label;\n \n@@ -34,7 +33,7 @@ public void draw(CommandProcess process, MonitorModel result) {\n \n         for (MonitorData data : result.getMonitorDataList()) {\n             table.row(\n-                    new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()),\n+                    new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(data.getTimestamp()),\n                     data.getClassName(),\n                     data.getMethodName(),\n                     \"\" + data.getTotal(),",
    "output": "http api monitor command return timestamp. close #2320"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -67,6 +67,10 @@ public static boolean isArm64() {\n \t\treturn \"aarch_64\".equals(arch);\n \t}\n \n+\tpublic static boolean isX86() {\n+    \treturn \"x86_32\".equals(arch);\n+\t}\n+\n \tprivate static String normalizeArch(String value) {\n \t\tvalue = normalize(value);\n \t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n@@ -21,6 +21,9 @@ public class VmToolUtils {\n         }\n         if (OSUtils.isWindows()) {\n             libName = \"libArthasJniLibrary-x64.dll\";\n+            if (OSUtils.isX86()) {\n+                libName = \"libArthasJniLibrary-x86.dll\";\n+            }\n         }\n     }\n ",
    "output": "support packaging arthas-vmtool in 32-bit windows. (#2316)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n@@ -82,7 +82,7 @@ private static Set<Class<?>> filter(Set<Class<?>> matchedClasses, String code) {\n         Set<Class<?>> result = new HashSet<Class<?>>();\n         if (matchedClasses != null) {\n             for (Class<?> c : matchedClasses) {\n-                if (Integer.toHexString(c.getClassLoader().hashCode()).equals(code)) {\n+                if (c.getClassLoader() != null && Integer.toHexString(c.getClassLoader().hashCode()).equals(code)) {\n                     result.add(c);\n                 }\n             }",
    "output": "fix #2277 sc command throws NPE. (#2308)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n@@ -17,7 +17,7 @@\n  * @author ralf0131 2017-01-09 14:03.\n  */\n @Name(\"sysprop\")\n-@Summary(\"Display, and change the system properties.\")\n+@Summary(\"Display and change the system properties.\")\n @Description(Constants.EXAMPLE + \"  sysprop\\n\"+ \"  sysprop file.encoding\\n\" + \"  sysprop production.mode true\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"sysprop\")\n public class SystemPropertyCommand extends AnnotatedCommand {",
    "output": "Fix typo (#2294)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -135,6 +135,7 @@ public class Bootstrap {\n         String arthasLibDirEnv = System.getenv(\"ARTHAS_LIB_DIR\");\n         if (arthasLibDirEnv != null) {\n             ARTHAS_LIB_DIR = new File(arthasLibDirEnv);\n+            AnsiLog.info(\"ARTHAS_LIB_DIR: \" + arthasLibDirEnv);\n         } else {\n             ARTHAS_LIB_DIR = new File(\n                     System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n@@ -311,6 +312,10 @@ public void setDisabledCommands(String disabledCommands) {\n     public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException,\n                     ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException,\n                     IllegalArgumentException, InvocationTargetException {\n+        String javaHome = System.getProperty(\"java.home\");\n+        if (javaHome != null) {\n+            AnsiLog.info(\"JAVA_HOME: \" + javaHome);\n+        }\n         Package bootstrapPackage = Bootstrap.class.getPackage();\n         if (bootstrapPackage != null) {\n             String arthasBootVersion = bootstrapPackage.getImplementationVersion();",
    "output": "print ARTHAS_LIB_DIR and JAVA_HOME. #2289"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -34,6 +34,8 @@ public class ArthasBanner {\n \n     private static final int CONNECTION_TIMEOUT = 1000;\n \n+    private static final int READ_TIMEOUT = 1000;\n+\n     private static String LOGO = \"Welcome to Arthas\";\n     private static String VERSION = \"unknown\";\n     private static String THANKS = \"\";\n@@ -147,6 +149,7 @@ private static URLConnection openURLConnection(String url) throws MalformedURLEx\n         URLConnection connection = new URL(url).openConnection();\n         if (connection instanceof HttpURLConnection) {\n             connection.setConnectTimeout(CONNECTION_TIMEOUT);\n+            connection.setReadTimeout(READ_TIMEOUT);\n             // normally, 3xx is redirect\n             int status = ((HttpURLConnection) connection).getResponseCode();\n             if (status != HttpURLConnection.HTTP_OK) {",
    "output": "fix:Solve the problem that the response stream is blocked when getting the latest version of arthas (#2290)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.6\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.6"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -319,6 +319,15 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             }\n         }\n \n+        try {\n+            String javaToolOptions = System.getenv(\"JAVA_TOOL_OPTIONS\");\n+            if (javaToolOptions != null && !javaToolOptions.trim().isEmpty()) {\n+                AnsiLog.info(\"JAVA_TOOL_OPTIONS: \" + javaToolOptions);\n+            }\n+        } catch (Throwable e) {\n+            // ignore\n+        }\n+\n         Bootstrap bootstrap = new Bootstrap();\n \n         CLI cli = CLIConfigurator.define(Bootstrap.class);\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -266,6 +266,8 @@ public static void startArthasCore(long targetPid, List<String> attachArgs) {\n         // -agent \"${arthas_lib_dir}/arthas-agent.jar\"\n \n         ProcessBuilder pb = new ProcessBuilder(command);\n+        // https://github.com/alibaba/arthas/issues/2166\n+        pb.environment().put(\"JAVA_TOOL_OPTIONS\", \"\");\n         try {\n             final Process proc = pb.start();\n             Thread redirectStdout = new Thread(new Runnable() {",
    "output": "arthas-boot support unset JAVA_TOOL_OPTIONS. #2166"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.5"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -130,6 +130,16 @@ private void attachAgent(Configure configure) throws Exception {\n                 } else {\n                     throw e;\n                 }\n+            } catch (com.sun.tools.attach.AgentLoadException ex) {\n+                if (\"0\".equals(ex.getMessage())) {\n+                    // https://stackoverflow.com/a/54454418\n+                    AnsiLog.warn(ex);\n+                    AnsiLog.warn(\"It seems to use the higher version of JDK to attach the lower version of JDK.\");\n+                    AnsiLog.warn(\n+                            \"This error message can be ignored, the attach may have been successful, and it will still try to connect.\");\n+                } else {\n+                    throw ex;\n+                }\n             }\n         } finally {\n             if (null != virtualMachine) {",
    "output": "support higher version of JDK to attach lower version of JDK. #2249"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.4"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.3"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.2"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java b/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n--- a/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n+++ b/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n@@ -4,7 +4,7 @@\n import java.util.Map;\n \n import org.assertj.core.api.Assertions;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * ",
    "output": "upgrade spring boot to 2.7.0 #2186"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n@@ -122,9 +122,8 @@ private String renderCost(MethodNode node) {\n                 sb.append('[').append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\"] \");\n             }else {\n                 MethodNode parentNode = (MethodNode) node.parent();\n-                double nodeMillis = nanoToMillis(node.getCost());\n-                String percentage = String.format(\"%.2f\", nodeMillis/nanoToMillis(parentNode.getCost())*100.0);\n-                sb.append('[').append(percentage).append(PERCENTAGE).append(\" \").append(nodeMillis).append(TIME_UNIT).append(\" \").append(\"] \");\n+                String percentage = String.format(\"%.2f\", node.getCost()*100.0/parentNode.getTotalCost());\n+                sb.append('[').append(percentage).append(PERCENTAGE).append(\" \").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\" \").append(\"] \");\n \n             }\n         } else {\n@@ -135,11 +134,10 @@ private String renderCost(MethodNode node) {\n                         .append(node.getTimes()).append(\"] \");\n             }else {\n                 MethodNode parentNode = (MethodNode) node.parent();\n-                double totalCostMillis = nanoToMillis(node.getTotalCost());\n-                String percentage = String.format(\"%.2f\",totalCostMillis/nanoToMillis(parentNode.getCost())*100.0);\n+                String percentage = String.format(\"%.2f\",node.getTotalCost()*100.0/parentNode.getTotalCost());\n                 sb.append('[').append(percentage).append(PERCENTAGE).append(\" min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n                         .append(nanoToMillis(node.getMaxCost())).append(TIME_UNIT).append(\",total=\")\n-                        .append(totalCostMillis).append(TIME_UNIT).append(\",count=\")\n+                        .append(nanoToMillis(node.getTotalCost())).append(TIME_UNIT).append(\",count=\")\n                         .append(node.getTimes()).append(\"] \");\n             }\n ",
    "output": "fix trace cost percentage. #2171"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -83,14 +83,16 @@ public class DirectoryBrowser {\n     private static String linePart1Str = \"<a href=\\\"%s\\\" title=\\\"%s\\\">\";\n     private static String linePart2Str = \"%-60s\";\n \n-    static String renderDir(File dir) {\n+    static String renderDir(File dir, boolean printParentLink) {\n         File[] listFiles = dir.listFiles();\n \n         StringBuilder sb = new StringBuilder(8192);\n         String dirName = dir.getName() + \"/\";\n         sb.append(String.format(pageHeader, dirName, dirName));\n \n-        sb.append(\"<a href=\\\"../\\\" title=\\\"../\\\">../</a>\\n\");\n+        if (printParentLink) {\n+            sb.append(\"<a href=\\\"../\\\" title=\\\"../\\\">../</a>\\n\");\n+        }\n \n         if (listFiles != null) {\n             Arrays.sort(listFiles);\n@@ -161,8 +163,7 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                 if (!path.endsWith(\"/\")) {\n                     fullResp.setStatus(HttpResponseStatus.FOUND).headers().set(HttpHeaderNames.LOCATION, \"/\" + path + \"/\");\n                 }\n-                \n-                String renderResult = renderDir(file);\n+                String renderResult = renderDir(file, !isSameFile(dir, file));\n                 fullResp.content().writeBytes(renderResult.getBytes(\"utf-8\"));\n                 fullResp.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html; charset=utf-8\");\n                 ctx.write(fullResp);\n@@ -275,4 +276,11 @@ public static boolean isSubFile(File parent, File child) throws IOException {\n         return false;\n     }\n \n+    public static boolean isSameFile(File a, File b) {\n+        try {\n+            return a.getCanonicalPath().equals(b.getCanonicalPath());\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n }",
    "output": "when under root dir, do not print parent link in DirectoryBrowser. #2173"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java\n@@ -40,14 +40,14 @@ public class TunnelServer {\n     private int port;\n     private String path = ArthasConstants.DEFAULT_WEBSOCKET_PATH;\n \n-    private Map<String, AgentInfo> agentInfoMap = new ConcurrentHashMap<String, AgentInfo>();\n+    private Map<String, AgentInfo> agentInfoMap = new ConcurrentHashMap<>();\n \n-    private Map<String, ClientConnectionInfo> clientConnectionInfoMap = new ConcurrentHashMap<String, ClientConnectionInfo>();\n+    private Map<String, ClientConnectionInfo> clientConnectionInfoMap = new ConcurrentHashMap<>();\n     \n     /**\n      * 记录 proxy request\n      */\n-    private Map<String, Promise<SimpleHttpResponse>> proxyRequestPromiseMap = new ConcurrentHashMap<String, Promise<SimpleHttpResponse>>();\n+    private Map<String, Promise<SimpleHttpResponse>> proxyRequestPromiseMap = new ConcurrentHashMap<>();\n \n     private EventLoopGroup bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(\"arthas-TunnelServer-boss\", true));\n     private EventLoopGroup workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TunnelServer-worker\", true));",
    "output": "Strengthen the code (#2168)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.6.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.1"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/VmToolModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/VmToolModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/VmToolModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/VmToolModel.java\n@@ -0,0 +1,58 @@\n+package com.taobao.arthas.core.command.model;\n+\n+import java.util.Collection;\n+\n+/**\n+ * \n+ * @author hengyunabc 2022-04-24\n+ *\n+ */\n+public class VmToolModel extends ResultModel {\n+    private Object value;\n+    private int expand = 1;\n+\n+    private Collection<ClassLoaderVO> matchedClassLoaders;\n+    private String classLoaderClass;\n+\n+\n+    @Override\n+    public String getType() {\n+        return \"vmtool\";\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public VmToolModel setValue(Object value) {\n+        this.value = value;\n+        return this;\n+    }\n+\n+    public int getExpand() {\n+        return expand;\n+    }\n+\n+    public VmToolModel setExpand(int expand) {\n+        this.expand = expand;\n+        return this;\n+    }\n+\n+    public String getClassLoaderClass() {\n+        return classLoaderClass;\n+    }\n+\n+    public VmToolModel setClassLoaderClass(String classLoaderClass) {\n+        this.classLoaderClass = classLoaderClass;\n+        return this;\n+    }\n+\n+    public Collection<ClassLoaderVO> getMatchedClassLoaders() {\n+        return matchedClassLoaders;\n+    }\n+\n+    public VmToolModel setMatchedClassLoaders(Collection<ClassLoaderVO> matchedClassLoaders) {\n+        this.matchedClassLoaders = matchedClassLoaders;\n+        return this;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -21,6 +21,7 @@\n import com.taobao.arthas.core.command.express.ExpressFactory;\n import com.taobao.arthas.core.command.model.ClassLoaderVO;\n import com.taobao.arthas.core.command.model.SearchClassModel;\n+import com.taobao.arthas.core.command.model.VmToolModel;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.cli.OptionCompleteHandler;\n@@ -179,9 +180,10 @@ public void process(final CommandProcess process) {\n                     } else if (matchedClassLoaders.size() > 1) {\n                         Collection<ClassLoaderVO> classLoaderVOList = ClassUtils\n                                 .createClassLoaderVOList(matchedClassLoaders);\n-                        SearchClassModel searchclassModel = new SearchClassModel().setClassLoaderClass(classLoaderClass)\n+\n+                        VmToolModel vmToolModel = new VmToolModel().setClassLoaderClass(classLoaderClass)\n                                 .setMatchedClassLoaders(classLoaderVOList);\n-                        process.appendResult(searchclassModel);\n+                        process.appendResult(vmToolModel);\n                         process.end(-1,\n                                 \"Found more than one classloader by class name, please specify classloader with '-c <classloader hash>'\");\n                         return;\n@@ -216,8 +218,8 @@ public void process(final CommandProcess process) {\n                         }\n                     }\n \n-                    process.write(new ObjectView(value, this.expand).draw());\n-                    process.write(\"\\n\");\n+                    VmToolModel vmToolModel = new VmToolModel().setValue(value).setExpand(expand);\n+                    process.appendResult(vmToolModel);\n                     process.end();\n                 }\n             } else if (VmToolAction.forceGc.equals(action)) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n@@ -78,6 +78,7 @@ private void initResultViews() {\n             registerView(TimeTunnelView.class);\n             registerView(TraceView.class);\n             registerView(WatchView.class);\n+            registerView(VmToolView.class);\n \n         } catch (Throwable e) {\n             logger.error(\"register result view failed\", e);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/VmToolView.java b/core/src/main/java/com/taobao/arthas/core/command/view/VmToolView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/VmToolView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/VmToolView.java\n@@ -0,0 +1,28 @@\n+package com.taobao.arthas.core.command.view;\n+\n+import com.taobao.arthas.core.command.model.VmToolModel;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.arthas.core.view.ObjectView;\n+\n+/**\n+ * \n+ * @author hengyunabc 2022-04-24\n+ *\n+ */\n+public class VmToolView extends ResultView<VmToolModel> {\n+    @Override\n+    public void draw(CommandProcess process, VmToolModel model) {\n+        if (model.getMatchedClassLoaders() != null) {\n+            process.write(\"Matched classloaders: \\n\");\n+            ClassLoaderView.drawClassLoaders(process, model.getMatchedClassLoaders(), false);\n+            process.write(\"\\n\");\n+            return;\n+        }\n+\n+        int expand = model.getExpand();\n+        Object value = model.getValue();\n+        String resultStr = StringUtils.objectToString(expand >= 0 ? new ObjectView(value, expand).draw() : value);\n+        process.write(resultStr).write(\"\\n\");\n+    }\n+}",
    "output": "vmtool command support http api. #2141"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -183,7 +183,6 @@ private void initFastjson() {\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();\n         // ignore getter error #1661\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();\n-        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreNonFieldGetter.getMask();\n         // #2081\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteNonStringKeyAsString.getMask();\n     }",
    "output": "Revert \"fastjson IgnoreNonFieldGetter\"\n\nThis reverts commit c214f2fca993f8660551f179b40050524e3f36be."
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n@@ -30,6 +30,9 @@ public class ArthasProperties {\n \t */\n \tprivate long sessionTimeout;\n \n+    private String username;\n+    private String password;\n+\n \tprivate String home;\n \n \t/**\n@@ -138,4 +141,20 @@ public String getDisabledCommands() {\n \tpublic void setDisabledCommands(String disabledCommands) {\n \t\tthis.disabledCommands = disabledCommands;\n \t}\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n }",
    "output": "starter ArthasProperties support username/password fields. #2092"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -200,7 +200,7 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n             return ExitStatus.success();\n         } catch (Throwable t) {\n             logger.error(\"jad: fail to decompile class: \" + c.getName(), t);\n-            return ExitStatus.failure(-1, \"jad: fail to decompile class: \" + c.getName());\n+            return ExitStatus.failure(-1, \"jad: fail to decompile class: \" + c.getName() + \", please check $HOME/logs/arthas/arthas.log for more details.\");\n         }\n     }\n ",
    "output": "print more info when jad command failed. #2148"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n@@ -61,7 +61,7 @@ public void setCycle(int cycle) {\n         this.cycle = cycle;\n     }\n \n-    @Option(shortName = \"E\", longName = \"regex\")\n+    @Option(shortName = \"E\", longName = \"regex\", flag = true)\n     @Description(\"Enable regular expression to match (wildcard matching by default)\")\n     public void setRegEx(boolean regEx) {\n         isRegEx = regEx;",
    "output": "fix monitor command -E flag support #2009"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n@@ -24,7 +24,7 @@ public class TraceView extends ResultView<TraceModel> {\n     private static final String STEP_HAS_BOARD = \"|   \";\n     private static final String STEP_EMPTY_BOARD = \"    \";\n     private static final String TIME_UNIT = \"ms\";\n-    private static final String PERCENTAGE = \"%\";\n+    private static final char PERCENTAGE = '%';\n \n     // 是否输出耗时\n     private boolean isPrintCost = true;\n@@ -119,11 +119,12 @@ private String renderCost(MethodNode node) {\n         StringBuilder sb = new StringBuilder();\n         if (node.getTimes() <= 1) {\n             if(node.parent() instanceof ThreadNode) {\n-                sb.append(\"[\").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\"] \");\n+                sb.append('[').append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\"] \");\n             }else {\n                 MethodNode parentNode = (MethodNode) node.parent();\n-                String percentage = String.format(\"%.2f\",nanoToMillis(node.getCost())/nanoToMillis(parentNode.getCost())*100.0);\n-                sb.append(\"[\").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\" \").append(percentage).append(PERCENTAGE).append(\"] \");\n+                double nodeMillis = nanoToMillis(node.getCost());\n+                String percentage = String.format(\"%.2f\", nodeMillis/nanoToMillis(parentNode.getCost())*100.0);\n+                sb.append('[').append(percentage).append(PERCENTAGE).append(\" \").append(nodeMillis).append(TIME_UNIT).append(\" \").append(\"] \");\n \n             }\n         } else {\n@@ -134,10 +135,11 @@ private String renderCost(MethodNode node) {\n                         .append(node.getTimes()).append(\"] \");\n             }else {\n                 MethodNode parentNode = (MethodNode) node.parent();\n-                String percentage = String.format(\"%.2f\",nanoToMillis(node.getCost())/nanoToMillis(parentNode.getCost())*100.0);\n-                sb.append(\"[min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n+                double totalCostMillis = nanoToMillis(node.getTotalCost());\n+                String percentage = String.format(\"%.2f\",totalCostMillis/nanoToMillis(parentNode.getCost())*100.0);\n+                sb.append('[').append(percentage).append(PERCENTAGE).append(\" min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n                         .append(nanoToMillis(node.getMaxCost())).append(TIME_UNIT).append(\",total=\")\n-                        .append(nanoToMillis(node.getTotalCost())).append(TIME_UNIT).append(\" \").append(percentage).append(PERCENTAGE).append(\",count=\")\n+                        .append(totalCostMillis).append(TIME_UNIT).append(\",count=\")\n                         .append(node.getTimes()).append(\"] \");\n             }\n ",
    "output": "polish #2156"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n@@ -24,6 +24,7 @@ public class TraceView extends ResultView<TraceModel> {\n     private static final String STEP_HAS_BOARD = \"|   \";\n     private static final String STEP_EMPTY_BOARD = \"    \";\n     private static final String TIME_UNIT = \"ms\";\n+    private static final String PERCENTAGE = \"%\";\n \n     // 是否输出耗时\n     private boolean isPrintCost = true;\n@@ -117,12 +118,29 @@ private void renderNode(StringBuilder sb, TraceNode node, Ansi highlighted) {\n     private String renderCost(MethodNode node) {\n         StringBuilder sb = new StringBuilder();\n         if (node.getTimes() <= 1) {\n-            sb.append(\"[\").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\"] \");\n+            if(node.parent() instanceof ThreadNode) {\n+                sb.append(\"[\").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\"] \");\n+            }else {\n+                MethodNode parentNode = (MethodNode) node.parent();\n+                String percentage = String.format(\"%.2f\",nanoToMillis(node.getCost())/nanoToMillis(parentNode.getCost())*100.0);\n+                sb.append(\"[\").append(nanoToMillis(node.getCost())).append(TIME_UNIT).append(\" \").append(percentage).append(PERCENTAGE).append(\"] \");\n+\n+            }\n         } else {\n-            sb.append(\"[min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n-                    .append(nanoToMillis(node.getMaxCost())).append(TIME_UNIT).append(\",total=\")\n-                    .append(nanoToMillis(node.getTotalCost())).append(TIME_UNIT).append(\",count=\")\n-                    .append(node.getTimes()).append(\"] \");\n+            if(node.parent() instanceof ThreadNode) {\n+                sb.append(\"[min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n+                        .append(nanoToMillis(node.getMaxCost())).append(TIME_UNIT).append(\",total=\")\n+                        .append(nanoToMillis(node.getTotalCost())).append(TIME_UNIT).append(\",count=\")\n+                        .append(node.getTimes()).append(\"] \");\n+            }else {\n+                MethodNode parentNode = (MethodNode) node.parent();\n+                String percentage = String.format(\"%.2f\",nanoToMillis(node.getCost())/nanoToMillis(parentNode.getCost())*100.0);\n+                sb.append(\"[min=\").append(nanoToMillis(node.getMinCost())).append(TIME_UNIT).append(\",max=\")\n+                        .append(nanoToMillis(node.getMaxCost())).append(TIME_UNIT).append(\",total=\")\n+                        .append(nanoToMillis(node.getTotalCost())).append(TIME_UNIT).append(\" \").append(percentage).append(PERCENTAGE).append(\",count=\")\n+                        .append(node.getTimes()).append(\"] \");\n+            }\n+\n         }\n         return sb.toString();\n     }",
    "output": "trace command print the percentage of time cost  (#2156)"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n@@ -41,6 +41,12 @@ public void channelInactive(ChannelHandlerContext ctx) {\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n         logger.error(\"RelayHandler error\", cause);\n-        ctx.close();\n+        try {\n+            if (relayChannel.isActive()) {\n+                relayChannel.close();\n+            }\n+        } finally {\n+            ctx.close();\n+        }\n     }\n }",
    "output": "RelayHandler clone relayChannel whent exceptionCaught. #2152"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -183,6 +183,7 @@ private void initFastjson() {\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();\n         // ignore getter error #1661\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreNonFieldGetter.getMask();\n         // #2081\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteNonStringKeyAsString.getMask();\n     }",
    "output": "fastjson IgnoreNonFieldGetter"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -10,6 +10,7 @@\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.matcher.Matcher;\n+import com.taobao.arthas.core.view.ObjectView;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n@@ -101,7 +102,7 @@ public void setSizeLimit(Integer sizeLimit) {\n     }\n \n     @Option(shortName = \"x\", longName = \"expand\")\n-    @Description(\"Expand level of object (1 by default)\")\n+    @Description(\"Expand level of object (1 by default), the max value is \" + ObjectView.MAX_DEEP)\n     public void setExpand(Integer expand) {\n         this.expand = expand;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -20,6 +20,7 @@\n  * Created by vlinux on 15/5/20.\n  */\n public class ObjectView implements View {\n+    public static final int MAX_DEEP = 4;\n     private static final Logger logger = LoggerFactory.getLogger(ObjectView.class);\n     private final static int MAX_OBJECT_LENGTH = 10 * 1024 * 1024; // 10M\n \n@@ -33,7 +34,7 @@ public ObjectView(Object object, int deep) {\n \n     public ObjectView(Object object, int deep, int maxObjectLength) {\n         this.object = object;\n-        this.deep = deep > 4 ? 4 : deep;\n+        this.deep = deep > MAX_DEEP ? MAX_DEEP : deep;\n         this.maxObjectLength = maxObjectLength;\n     }\n ",
    "output": "add more info about expand object"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -39,6 +39,7 @@\n         \"  trace demo.MathGame run -n 5\\n\" +\n         \"  trace demo.MathGame run --skipJDKMethod false\\n\" +\n         \"  trace javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter\\n\" +\n+        \"  trace OuterClass$InnerClass *\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"trace\")\n //@formatter:on\n public class TraceCommand extends EnhancerCommand {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -28,6 +28,7 @@\n         \"  watch *StringUtils isBlank params[0]\\n\" +\n         \"  watch -E -b org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank params[0]\\n\" +\n         \"  watch javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter\\n\" +\n+        \"  watch OuterClass$InnerClass\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"watch\")\n public class WatchCommand extends EnhancerCommand {\n ",
    "output": "update trace/watch command help message"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.6\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.6.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.6.0"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -175,13 +175,7 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                     return null;\n                 }\n \n-                RandomAccessFile raf;\n-                try {\n-                    raf = new RandomAccessFile(file, \"r\");\n-                } catch (Exception ignore) {\n-                    return null;\n-                }\n-                long fileLength = raf.length();\n+                long fileLength = file.length();\n                 if (fileLength < MIN_NETTY_DIRECT_SEND_SIZE){\n                     FileInputStream fileInputStream = new FileInputStream(file);\n                     try {\n@@ -210,6 +204,7 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                 // Write the content.\n                 ChannelFuture sendFileFuture;\n                 ChannelFuture lastContentFuture;\n+                RandomAccessFile raf = new RandomAccessFile(file, \"r\"); // will closed by netty\n                 if (ctx.pipeline().get(SslHandler.class) == null) {\n                     sendFileFuture =\n                             ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());",
    "output": "fix download large file problem. #2135"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -175,81 +175,75 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                     return null;\n                 }\n \n-                RandomAccessFile raf = null;\n+                RandomAccessFile raf;\n                 try {\n                     raf = new RandomAccessFile(file, \"r\");\n-                    long fileLength = raf.length();\n-                    if (fileLength < MIN_NETTY_DIRECT_SEND_SIZE){\n-                        FileInputStream fileInputStream = new FileInputStream(file);\n-                        try {\n-                            byte[] content = IOUtils.getBytes(fileInputStream);\n-                            fullResp.content().writeBytes(content);\n-                            HttpUtil.setContentLength(fullResp, fullResp.content().readableBytes());\n-                        } finally {\n-                            IOUtils.close(fileInputStream);\n-                        }\n-                        ctx.write(fullResp);\n-                        ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n-                        future.addListener(ChannelFutureListener.CLOSE);\n-                        return fullResp;\n-                    }\n-                    logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);\n-                    HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);\n-                    HttpUtil.setContentLength(response, fileLength);\n-                    setContentTypeHeader(response, file);\n-                    setDateAndCacheHeaders(response, file);\n-                    if (HttpUtil.isKeepAlive(request)) {\n-                        response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n-                    }\n-\n-                    // Write the initial line and the header.\n-                    ctx.write(response);\n-                    // Write the content.\n-                    ChannelFuture sendFileFuture;\n-                    ChannelFuture lastContentFuture;\n-                    if (ctx.pipeline().get(SslHandler.class) == null) {\n-                        sendFileFuture =\n-                                ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());\n-                        // Write the end marker.\n-                        lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n-                    } else {\n-                        sendFileFuture =\n-                                ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),\n-                                        ctx.newProgressivePromise());\n-                        // HttpChunkedInput will write the end marker (LastHttpContent) for us.\n-                        lastContentFuture = sendFileFuture;\n+                } catch (Exception ignore) {\n+                    return null;\n+                }\n+                long fileLength = raf.length();\n+                if (fileLength < MIN_NETTY_DIRECT_SEND_SIZE){\n+                    FileInputStream fileInputStream = new FileInputStream(file);\n+                    try {\n+                        byte[] content = IOUtils.getBytes(fileInputStream);\n+                        fullResp.content().writeBytes(content);\n+                        HttpUtil.setContentLength(fullResp, fullResp.content().readableBytes());\n+                    } finally {\n+                        IOUtils.close(fileInputStream);\n                     }\n+                    ctx.write(fullResp);\n+                    ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                    future.addListener(ChannelFutureListener.CLOSE);\n+                    return fullResp;\n+                }\n+                logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);\n+                HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);\n+                HttpUtil.setContentLength(response, fileLength);\n+                setContentTypeHeader(response, file);\n+                setDateAndCacheHeaders(response, file);\n+                if (HttpUtil.isKeepAlive(request)) {\n+                    response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n+                }\n \n-                    sendFileFuture.addListener(new ChannelProgressiveFutureListener() {\n-                        @Override\n-                        public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {\n-                            if (total < 0) { // total unknown\n-                                logger.info(future.channel() + \" Transfer progress: \" + progress);\n-                            } else {\n-                                logger.info(future.channel() + \" Transfer progress: \" + progress + \" / \" + total);\n-                            }\n-                        }\n+                // Write the initial line and the header.\n+                ctx.write(response);\n+                // Write the content.\n+                ChannelFuture sendFileFuture;\n+                ChannelFuture lastContentFuture;\n+                if (ctx.pipeline().get(SslHandler.class) == null) {\n+                    sendFileFuture =\n+                            ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());\n+                    // Write the end marker.\n+                    lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                } else {\n+                    sendFileFuture =\n+                            ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),\n+                                    ctx.newProgressivePromise());\n+                    // HttpChunkedInput will write the end marker (LastHttpContent) for us.\n+                    lastContentFuture = sendFileFuture;\n+                }\n \n-                        @Override\n-                        public void operationComplete(ChannelProgressiveFuture future) {\n-                            logger.info(future.channel() + \" Transfer complete.\");\n+                sendFileFuture.addListener(new ChannelProgressiveFutureListener() {\n+                    @Override\n+                    public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {\n+                        if (total < 0) { // total unknown\n+                            logger.info(future.channel() + \" Transfer progress: \" + progress);\n+                        } else {\n+                            logger.info(future.channel() + \" Transfer progress: \" + progress + \" / \" + total);\n                         }\n-                    });\n-\n-                    // Decide whether to close the connection or not.\n-                    if (!HttpUtil.isKeepAlive(request)) {\n-                        // Close the connection when the whole content is written out.\n-                        lastContentFuture.addListener(ChannelFutureListener.CLOSE);\n                     }\n-                } catch (Throwable e) {\n-                    logger.error(\"view file error, dir: {}, path: {}\", dir, path, e);\n-                    return null;\n-                } finally {\n-                    if (raf != null) {\n-                        IOUtils.close(raf);\n+\n+                    @Override\n+                    public void operationComplete(ChannelProgressiveFuture future) {\n+                        logger.info(future.channel() + \" Transfer complete.\");\n                     }\n-                }\n+                });\n \n+                // Decide whether to close the connection or not.\n+                if (!HttpUtil.isKeepAlive(request)) {\n+                    // Close the connection when the whole content is written out.\n+                    lastContentFuture.addListener(ChannelFutureListener.CLOSE);\n+                }\n                 return fullResp;\n             }\n         }",
    "output": "Revert \"fix resource not close problem. #2037\"\n\nThis reverts commit c08ccec21fec7ba7f56987bdbbe782e723f26fa8."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -7,6 +7,9 @@\n  * Created by vlinux on 15/6/4.\n  */\n public class GlobalOptions {\n+    public static final String STRICT_MESSAGE = \"By default, strict mode is true, \"\n+            + \"not allowed to set object properties. \"\n+            + \"Want to set object properties, execute `options strict false`\";\n \n     /**\n      * 是否支持系统类<br/>\n@@ -123,4 +126,14 @@ public class GlobalOptions {\n             description = \"This option enables print verbose information, default value false.\"\n     )\n     public static volatile boolean verbose = false;\n+\n+    /**\n+     * 是否打开strict 开关\n+     */\n+    @Option(level = 1,\n+            name = \"strict\",\n+            summary = \"Option to strict mode\",\n+            description = STRICT_MESSAGE\n+    )\n+    public static volatile boolean strict = true;\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java b/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/ArthasObjectPropertyAccessor.java\n@@ -0,0 +1,25 @@\n+package com.taobao.arthas.core.command.express;\n+\n+import java.util.Map;\n+\n+import com.taobao.arthas.core.GlobalOptions;\n+\n+import ognl.ObjectPropertyAccessor;\n+import ognl.OgnlException;\n+\n+/**\n+ * \n+ * @author hengyunabc 2022-03-24\n+ *\n+ */\n+public class ArthasObjectPropertyAccessor extends ObjectPropertyAccessor {\n+\n+    @Override\n+    public Object setPossibleProperty(Map context, Object target, String name, Object value) throws OgnlException {\n+        if (GlobalOptions.strict) {\n+            throw new IllegalAccessError(GlobalOptions.STRICT_MESSAGE);\n+        }\n+        return super.setPossibleProperty(context, target, name, value);\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java b/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n@@ -8,6 +8,7 @@\n import ognl.MemberAccess;\n import ognl.Ognl;\n import ognl.OgnlContext;\n+import ognl.OgnlRuntime;\n \n /**\n  * @author ralf0131 2017-01-04 14:41.\n@@ -16,6 +17,7 @@\n public class OgnlExpress implements Express {\n     private static final MemberAccess MEMBER_ACCESS = new DefaultMemberAccess(true);\n     private static final Logger logger = LoggerFactory.getLogger(OgnlExpress.class);\n+    private static final ArthasObjectPropertyAccessor OBJECT_PROPERTY_ACCESSOR = new ArthasObjectPropertyAccessor();\n \n     private Object bindObject;\n     private final OgnlContext context;\n@@ -25,6 +27,7 @@ public OgnlExpress() {\n     }\n \n     public OgnlExpress(ClassResolver classResolver) {\n+        OgnlRuntime.setPropertyAccessor(Object.class, OBJECT_PROPERTY_ACCESSOR);\n         context = new OgnlContext();\n         context.setClassResolver(classResolver);\n         // allow private field access",
    "output": "Support strict mode (#2134)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -426,7 +426,7 @@ public synchronized EnhancerAffect enhance(final Instrumentation inst) throws Un\n         List<Pair<Class<?>, String>> filtedList = filter(matchingClasses);\n         if (!filtedList.isEmpty()) {\n             for (Pair<Class<?>, String> filted : filtedList) {\n-                logger.info(\"ignore class: {}, reson: {}\", filted.getFirst().getName(), filted.getSecond());\n+                logger.info(\"ignore class: {}, reason: {}\", filted.getFirst().getName(), filted.getSecond());\n             }\n         }\n ",
    "output": "fix typo"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.6\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.6"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -24,6 +24,8 @@\n import java.lang.instrument.Instrumentation;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -51,6 +53,7 @@\n         \"  classloader -a\\n\" +\n         \"  classloader -a -c 327a647b\\n\" +\n         \"  classloader -c 659e0bfd --load demo.MathGame\\n\" +\n+        \"  classloader -u      # url statistics\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"classloader\")\n public class ClassLoaderCommand extends AnnotatedCommand {\n \n@@ -63,6 +66,8 @@ public class ClassLoaderCommand extends AnnotatedCommand {\n     private boolean includeReflectionClassLoader = true;\n     private boolean listClassLoader = false;\n \n+    private boolean urlStat = false;\n+\n     private String loadClass = null;\n \n     private volatile boolean isInterrupted = false;\n@@ -115,6 +120,12 @@ public void setLoadClass(String className) {\n         this.loadClass = className;\n     }\n \n+    @Option(shortName = \"u\", longName = \"url-stat\", flag = true)\n+    @Description(\"Display classloader url statistics\")\n+    public void setUrlStat(boolean urlStat) {\n+        this.urlStat = urlStat;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         // ctrl-C support\n@@ -123,6 +134,15 @@ public void process(CommandProcess process) {\n         boolean classLoaderSpecified = false;\n \n         Instrumentation inst = process.session().getInstrumentation();\n+\n+        if (urlStat) {\n+            Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats = this.urlStats(inst);\n+            ClassLoaderModel model = new ClassLoaderModel();\n+            model.setUrlStats(urlStats);\n+            process.appendResult(model);\n+            process.end();\n+            return;\n+        }\n         \n         if (hashCode != null || classLoaderClass != null) {\n             classLoaderSpecified = true;\n@@ -396,6 +416,42 @@ private static List<String> getClassLoaderUrls(ClassLoader classLoader) {\n         }\n         return urlStrs;\n     }\n+    \n+    private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats(Instrumentation inst) {\n+        Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats = new HashMap<ClassLoaderVO, ClassLoaderUrlStat>();\n+        Map<ClassLoader, Set<String>> usedUrlsMap = new HashMap<ClassLoader, Set<String>>();\n+        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            if (classLoader != null) {\n+                ProtectionDomain protectionDomain = clazz.getProtectionDomain();\n+                CodeSource codeSource = protectionDomain.getCodeSource();\n+                if (codeSource != null) {\n+                    URL location = codeSource.getLocation();\n+                    if (location != null) {\n+                        Set<String> urls = usedUrlsMap.get(classLoader);\n+                        if (urls == null) {\n+                            urls = new HashSet<String>();\n+                            usedUrlsMap.put(classLoader, urls);\n+                        }\n+                        urls.add(location.toString());\n+                    }\n+                }\n+            }\n+        }\n+        for (Entry<ClassLoader, Set<String>> entry : usedUrlsMap.entrySet()) {\n+            ClassLoader loader = entry.getKey();\n+            Set<String> usedUrls = entry.getValue();\n+            List<String> allUrls = getClassLoaderUrls(loader);\n+            List<String> unusedUrls = new ArrayList<String>();\n+            for (String url : allUrls) {\n+                if (!usedUrls.contains(url)) {\n+                    unusedUrls.add(url);\n+                }\n+            }\n+            urlStats.put(ClassUtils.createClassLoaderVO(loader), new ClassLoaderUrlStat(usedUrls, unusedUrls));\n+        }\n+        return urlStats;\n+    }\n \n     // 以树状列出ClassLoader的继承结构\n     private static List<ClassLoaderVO> processClassLoaderTree(List<ClassLoaderVO> classLoaders) {\n@@ -583,6 +639,36 @@ public boolean accept(ClassLoader classLoader) {\n         }\n     }\n \n+    public static class ClassLoaderUrlStat {\n+        private Collection<String> usedUrls;\n+        private Collection<String> unUsedUrls;\n+\n+        public ClassLoaderUrlStat() {\n+        }\n+\n+        public ClassLoaderUrlStat(Collection<String> usedUrls, Collection<String> unUsedUrls) {\n+            super();\n+            this.usedUrls = usedUrls;\n+            this.unUsedUrls = unUsedUrls;\n+        }\n+\n+        public Collection<String> getUsedUrls() {\n+            return usedUrls;\n+        }\n+\n+        public void setUsedUrls(Collection<String> usedUrls) {\n+            this.usedUrls = usedUrls;\n+        }\n+\n+        public Collection<String> getUnUsedUrls() {\n+            return unUsedUrls;\n+        }\n+\n+        public void setUnUsedUrls(Collection<String> unUsedUrls) {\n+            this.unUsedUrls = unUsedUrls;\n+        }\n+    }\n+\n     public static class ClassLoaderStat {\n         private int loadedCount;\n         private int numberOfInstance;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.core.command.model;\n \n import com.taobao.arthas.core.command.klass100.ClassLoaderCommand.ClassLoaderStat;\n+import com.taobao.arthas.core.command.klass100.ClassLoaderCommand.ClassLoaderUrlStat;\n \n import java.util.List;\n import java.util.Map;\n@@ -24,6 +25,9 @@ public class ClassLoaderModel extends ResultModel {\n     private Collection<ClassLoaderVO> matchedClassLoaders;\n     private String classLoaderClass;\n \n+    //urls stat\n+    private Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats;\n+\n     public ClassLoaderModel() {\n     }\n \n@@ -112,4 +116,13 @@ public ClassLoaderModel setMatchedClassLoaders(Collection<ClassLoaderVO> matched\n         this.matchedClassLoaders = matchedClassLoaders;\n         return this;\n     }\n+\n+    public Map<ClassLoaderVO, ClassLoaderUrlStat> getUrlStats() {\n+        return urlStats;\n+    }\n+\n+    public void setUrlStats(Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats) {\n+        this.urlStats = urlStats;\n+    }\n+\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java b/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.core.command.view;\n \n import com.taobao.arthas.core.command.klass100.ClassLoaderCommand.ClassLoaderStat;\n+import com.taobao.arthas.core.command.klass100.ClassLoaderCommand.ClassLoaderUrlStat;\n import com.taobao.arthas.core.command.model.ClassDetailVO;\n import com.taobao.arthas.core.command.model.ClassLoaderModel;\n import com.taobao.arthas.core.command.model.ClassLoaderVO;\n@@ -14,6 +15,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n /**\n  * @author gongdewei 2020/4/21\n@@ -46,8 +48,39 @@ public void draw(CommandProcess process, ClassLoaderModel result) {\n         if (result.getClassLoaderStats() != null){\n             drawClassLoaderStats(process, result.getClassLoaderStats());\n         }\n+        if (result.getUrlStats() != null) {\n+            drawUrlStats(process, result.getUrlStats());\n+        }\n     }\n \n+    private void drawUrlStats(CommandProcess process, Map<ClassLoaderVO, ClassLoaderUrlStat> urlStats) {\n+        for (Entry<ClassLoaderVO, ClassLoaderUrlStat> entry : urlStats.entrySet()) {\n+            ClassLoaderVO classLoaderVO = entry.getKey();\n+            ClassLoaderUrlStat urlStat = entry.getValue();\n+\n+            // 忽略 sun.reflect.DelegatingClassLoader 等动态ClassLoader\n+            if (urlStat.getUsedUrls().isEmpty() && urlStat.getUnUsedUrls().isEmpty()) {\n+                continue;\n+            }\n+\n+            TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n+            table.row(new LabelElement(classLoaderVO.getName() + \", hash:\" + classLoaderVO.getHash())\n+                    .style(Decoration.bold.bold()));\n+            Collection<String> usedUrls = urlStat.getUsedUrls();\n+            table.row(new LabelElement(\"Used URLs:\").style(Decoration.bold.bold()));\n+            for (String url : usedUrls) {\n+                table.row(url);\n+            }\n+            Collection<String> UnnsedUrls = urlStat.getUnUsedUrls();\n+            table.row(new LabelElement(\"Unused URLs:\").style(Decoration.bold.bold()));\n+            for (String url : UnnsedUrls) {\n+                table.row(url);\n+            }\n+            process.write(RenderUtil.render(table, process.width()))\n+                    .write(\"\\n\");\n+        }\n+    }\n+    \n     private void drawClassLoaderStats(CommandProcess process, Map<String, ClassLoaderStat> classLoaderStats) {\n         Element element = renderStat(classLoaderStats);\n         process.write(RenderUtil.render(element, process.width()))",
    "output": "classloader command support url statistics. #2095"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MemoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MemoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MemoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MemoryCommand.java\n@@ -49,9 +49,11 @@ static Map<String, List<MemoryEntryVO>> memoryInfo() {\n         heapMemEntries.add(createMemoryEntryVO(TYPE_HEAP, TYPE_HEAP, heapMemoryUsage));\n         for (MemoryPoolMXBean poolMXBean : memoryPoolMXBeans) {\n             if (MemoryType.HEAP.equals(poolMXBean.getType())) {\n-                MemoryUsage usage = poolMXBean.getUsage();\n-                String poolName = StringUtils.beautifyName(poolMXBean.getName());\n-                heapMemEntries.add(createMemoryEntryVO(TYPE_HEAP, poolName, usage));\n+                MemoryUsage usage = getUsage(poolMXBean);\n+                if (usage != null) {\n+                    String poolName = StringUtils.beautifyName(poolMXBean.getName());\n+                    heapMemEntries.add(createMemoryEntryVO(TYPE_HEAP, poolName, usage));\n+                }\n             }\n         }\n         memoryInfoMap.put(TYPE_HEAP, heapMemEntries);\n@@ -62,9 +64,11 @@ static Map<String, List<MemoryEntryVO>> memoryInfo() {\n         nonheapMemEntries.add(createMemoryEntryVO(TYPE_NON_HEAP, TYPE_NON_HEAP, nonHeapMemoryUsage));\n         for (MemoryPoolMXBean poolMXBean : memoryPoolMXBeans) {\n             if (MemoryType.NON_HEAP.equals(poolMXBean.getType())) {\n-                MemoryUsage usage = poolMXBean.getUsage();\n-                String poolName = StringUtils.beautifyName(poolMXBean.getName());\n-                nonheapMemEntries.add(createMemoryEntryVO(TYPE_NON_HEAP, poolName, usage));\n+                MemoryUsage usage = getUsage(poolMXBean);\n+                if (usage != null) {\n+                    String poolName = StringUtils.beautifyName(poolMXBean.getName());\n+                    nonheapMemEntries.add(createMemoryEntryVO(TYPE_NON_HEAP, poolName, usage));\n+                }\n             }\n         }\n         memoryInfoMap.put(TYPE_NON_HEAP, nonheapMemEntries);\n@@ -73,6 +77,16 @@ static Map<String, List<MemoryEntryVO>> memoryInfo() {\n         return memoryInfoMap;\n     }\n \n+    private static MemoryUsage getUsage(MemoryPoolMXBean memoryPoolMXBean) {\n+        try {\n+            return memoryPoolMXBean.getUsage();\n+        } catch (InternalError e) {\n+            // Defensive for potential InternalError with some specific JVM options. Based on its Javadoc,\n+            // MemoryPoolMXBean.getUsage() should return null, not throwing InternalError, so it seems to be a JVM bug.\n+            return null;\n+        }\n+    }\n+\n     private static void addBufferPoolMemoryInfo(Map<String, List<MemoryEntryVO>> memoryInfoMap) {\n         try {\n             List<MemoryEntryVO> bufferPoolMemEntries = new ArrayList<MemoryEntryVO>();",
    "output": "handle MemoryPoolMXBean.getUsage() exception. #2120"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -42,6 +42,7 @@\n import com.alibaba.bytekit.asm.location.filter.LocationFilter;\n import com.alibaba.bytekit.utils.AsmOpUtils;\n import com.alibaba.bytekit.utils.AsmUtils;\n+import com.taobao.arthas.common.Pair;\n import com.taobao.arthas.core.GlobalOptions;\n import com.taobao.arthas.core.advisor.SpyInterceptors.SpyInterceptor1;\n import com.taobao.arthas.core.advisor.SpyInterceptors.SpyInterceptor2;\n@@ -76,6 +77,7 @@ public class Enhancer implements ClassFileTransformer {\n     private final Matcher methodNameMatcher;\n     private final EnhancerAffect affect;\n     private Set<Class<?>> matchingClasses = null;\n+    private static final ClassLoader selfClassLoader = Enhancer.class.getClassLoader();\n \n     // 被增强的类的缓存\n     private final static Map<Class<?>/* Class */, Object> classBytesCache = new WeakHashMap<Class<?>, Object>();\n@@ -320,14 +322,35 @@ private static void dumpClassIfNecessary(String className, byte[] data, Enhancer\n      *\n      * @param classes 类集合\n      */\n-    private void filter(Set<Class<?>> classes) {\n+    private List<Pair<Class<?>, String>> filter(Set<Class<?>> classes) {\n+        List<Pair<Class<?>, String>> filteredClasses = new ArrayList<Pair<Class<?>, String>>();\n         final Iterator<Class<?>> it = classes.iterator();\n         while (it.hasNext()) {\n             final Class<?> clazz = it.next();\n-            if (null == clazz || isSelf(clazz) || isUnsafeClass(clazz) || isUnsupportedClass(clazz) || isExclude(clazz)) {\n+            boolean removeFlag = false;\n+            if (null == clazz) {\n+                removeFlag = true;\n+            } else if (isSelf(clazz)) {\n+                filteredClasses.add(new Pair<Class<?>, String>(clazz, \"class loaded by arthas itself\"));\n+                removeFlag = true;\n+            } else if (isUnsafeClass(clazz)) {\n+                filteredClasses.add(new Pair<Class<?>, String>(clazz, \"class loaded by Bootstrap Classloader, try to execute `options unsafe true`\"));\n+                removeFlag = true;\n+            } else if (isExclude(clazz)) {\n+                filteredClasses.add(new Pair<Class<?>, String>(clazz, \"class is excluded\"));\n+                removeFlag = true;\n+            } else {\n+                Pair<Boolean, String> unsupportedResult = isUnsupportedClass(clazz);\n+                if (unsupportedResult.getFirst()) {\n+                    filteredClasses.add(new Pair<Class<?>, String>(clazz, unsupportedResult.getSecond()));\n+                    removeFlag = true;\n+                }\n+            }\n+            if (removeFlag) {\n                 it.remove();\n             }\n         }\n+        return filteredClasses;\n     }\n \n     private boolean isExclude(Class<?> clazz) {\n@@ -341,7 +364,7 @@ private boolean isExclude(Class<?> clazz) {\n      * 是否过滤Arthas加载的类\n      */\n     private static boolean isSelf(Class<?> clazz) {\n-        return null != clazz && isEquals(clazz.getClassLoader(), Enhancer.class.getClassLoader());\n+        return null != clazz && isEquals(clazz.getClassLoader(), selfClassLoader);\n     }\n \n     /**\n@@ -354,9 +377,31 @@ private static boolean isUnsafeClass(Class<?> clazz) {\n     /**\n      * 是否过滤目前暂不支持的类\n      */\n-    private static boolean isUnsupportedClass(Class<?> clazz) {\n-        return clazz.isArray() || (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod) || clazz.isEnum()\n-                || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class) || ClassUtils.isLambdaClass(clazz);\n+    private static Pair<Boolean, String> isUnsupportedClass(Class<?> clazz) {\n+        if (ClassUtils.isLambdaClass(clazz)) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is lambda\");\n+        }\n+\n+        if (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is interface\");\n+        }\n+\n+        if (clazz.equals(Integer.class)) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is java.lang.Integer\");\n+        }\n+\n+        if (clazz.equals(Class.class)) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is java.lang.Class\");\n+        }\n+\n+        if (clazz.equals(Method.class)) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is java.lang.Method\");\n+        }\n+\n+        if (clazz.isArray()) {\n+            return new Pair<Boolean, String>(Boolean.TRUE, \"class is array\");\n+        }\n+        return new Pair<Boolean, String>(Boolean.FALSE, \"\");\n     }\n \n     /**\n@@ -378,7 +423,12 @@ public synchronized EnhancerAffect enhance(final Instrumentation inst) throws Un\n                 : SearchUtils.searchSubClass(inst, SearchUtils.searchClass(inst, classNameMatcher));\n \n         // 过滤掉无法被增强的类\n-        filter(matchingClasses);\n+        List<Pair<Class<?>, String>> filtedList = filter(matchingClasses);\n+        if (!filtedList.isEmpty()) {\n+            for (Pair<Class<?>, String> filted : filtedList) {\n+                logger.info(\"ignore class: {}, reson: {}\", filted.getFirst().getName(), filted.getSecond());\n+            }\n+        }\n \n         logger.info(\"enhance matched classes: {}\", matchingClasses);\n ",
    "output": "support enhance enum, print ignore class reson. #1677"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n@@ -37,6 +37,9 @@ public AgentClusterInfo findAgent(String agentId) {\n         try {\n             ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();\n             String infoStr = opsForValue.get(prefix + agentId);\n+            if (infoStr == null) {\n+                throw new IllegalArgumentException(\"can not find info for agentId: \" + agentId);\n+            }\n             AgentClusterInfo info = MAPPER.readValue(infoStr, AgentClusterInfo.class);\n             return info;\n         } catch (Throwable e) {",
    "output": "fix jackson null IllegalArgumentException. #2110"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -183,8 +183,9 @@ protected void enhance(CommandProcess process) {\n                         + \"1. Execute `\" + smCommand + \"` to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n                         + \"2. Execute `\" + optionsCommand + \"`, if you want to enhance the classes under the `\" + javaPackage + \"` package.\\n\"\n                         + \"3. Execute `\" + resetCommand + \"` and try again, your method body might be too large.\\n\"\n-                        + \"4. Check arthas log: \" + logStr + \"\\n\"\n-                        + \"5. Visit \" + issueStr + \" for more details.\";\n+                        + \"4. Match the constructor, use `<init>`, for example: `watch demo.MathGame <init>`\\n\"\n+                        + \"5. Check arthas log: \" + logStr + \"\\n\"\n+                        + \"6. Visit \" + issueStr + \" for more details.\";\n                 process.end(-1, msg);\n                 return;\n             }",
    "output": "update tips"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -92,7 +92,7 @@ public void setDirectory(String directory) {\n     }\n \n     @Option(shortName = \"l\", longName = \"limit\")\n-    @Description(\"The limit of dump classes size, default value is 5\")\n+    @Description(\"The limit of dump classes size, default value is 50\")\n     @DefaultValue(\"50\")\n     public void setLimit(int limit) {\n         this.limit = limit;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n@@ -124,7 +124,7 @@ public void setPaths(List<String> paths) {\n     }\n \n     @Option(longName = \"limit\")\n-    @Description(\"The limit of dump classes size, default value is 5\")\n+    @Description(\"The limit of dump classes size, default value is 50\")\n     @DefaultValue(\"50\")\n     public void setLimit(int limit) {\n         this.limit = limit;",
    "output": "change RetransformCommand and DumpClassCommand limit option description to match @DefaultValue annotation (#2086)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n@@ -30,7 +30,7 @@\n @Name(\"ognl\")\n @Summary(\"Execute ognl expression.\")\n @Description(Constants.EXAMPLE\n-                + \"  ognl '@java.lang.System@out.println(\\\"hello\\\")' \\n\"\n+                + \"  ognl '@java.lang.System@out.println(\\\"hello \\\\u4e2d\\\\u6587\\\")' \\n\"\n                 + \"  ognl -x 2 '@Singleton@getInstance()' \\n\"\n                 + \"  ognl '@Demo@staticFiled' \\n\"\n                 + \"  ognl '#value1=@System@getProperty(\\\"java.home\\\"), #value2=@System@getProperty(\\\"java.runtime.name\\\"), {#value1, #value2}'\\n\"",
    "output": "add unicode docs"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -183,6 +183,8 @@ private void initFastjson() {\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();\n         // ignore getter error #1661\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();\n+        // #2081\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteNonStringKeyAsString.getMask();\n     }\n \n     private void initBeans() {",
    "output": "fix http api json format. #2081"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -1,9 +1,9 @@\n package com.taobao.arthas.core.shell.system.impl;\n \n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n@@ -25,7 +25,7 @@\n  * @author gehui 2017年7月31日 上午11:55:41\n  */\n public class GlobalJobControllerImpl extends JobControllerImpl {\n-    private Map<Integer, JobTimeoutTask> jobTimeoutTaskMap = new HashMap<Integer, JobTimeoutTask>();\n+    private Map<Integer, JobTimeoutTask> jobTimeoutTaskMap = new ConcurrentHashMap<Integer, JobTimeoutTask>();\n     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);\n \n     @Override\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n@@ -132,8 +132,9 @@ public void terminate() {\n             process.terminate();\n         } catch (IllegalStateException ignore) {\n             // Process already terminated, likely by itself\n+        } finally {\n+            controller.removeJob(this.id);\n         }\n-        controller.removeJob(this.id);\n     }\n \n     @Override",
    "output": "fix GlobalJobControllerImpl jobTimeoutTaskMap not thread safe problem. #2074"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/RelayHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/RelayHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/RelayHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/RelayHandler.java\n@@ -37,9 +37,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {\n     @Override\n     public void channelInactive(ChannelHandlerContext ctx) {\n         if (relayChannel.isActive()) {\n-            if (relayChannel.isActive()) {\n-                relayChannel.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);\n-            }\n+            relayChannel.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);\n         }\n     }\n ",
    "output": "Remove repeated conditional judgments. (#2068)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.5"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -175,75 +175,81 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                     return null;\n                 }\n \n-                RandomAccessFile raf;\n+                RandomAccessFile raf = null;\n                 try {\n                     raf = new RandomAccessFile(file, \"r\");\n-                } catch (Exception ignore) {\n-                    return null;\n-                }\n-                long fileLength = raf.length();\n-                if (fileLength < MIN_NETTY_DIRECT_SEND_SIZE){\n-                    FileInputStream fileInputStream = new FileInputStream(file);\n-                    try {\n-                        byte[] content = IOUtils.getBytes(fileInputStream);\n-                        fullResp.content().writeBytes(content);\n-                        HttpUtil.setContentLength(fullResp, fullResp.content().readableBytes());\n-                    } finally {\n-                        IOUtils.close(fileInputStream);\n+                    long fileLength = raf.length();\n+                    if (fileLength < MIN_NETTY_DIRECT_SEND_SIZE){\n+                        FileInputStream fileInputStream = new FileInputStream(file);\n+                        try {\n+                            byte[] content = IOUtils.getBytes(fileInputStream);\n+                            fullResp.content().writeBytes(content);\n+                            HttpUtil.setContentLength(fullResp, fullResp.content().readableBytes());\n+                        } finally {\n+                            IOUtils.close(fileInputStream);\n+                        }\n+                        ctx.write(fullResp);\n+                        ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                        future.addListener(ChannelFutureListener.CLOSE);\n+                        return fullResp;\n+                    }\n+                    logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);\n+                    HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);\n+                    HttpUtil.setContentLength(response, fileLength);\n+                    setContentTypeHeader(response, file);\n+                    setDateAndCacheHeaders(response, file);\n+                    if (HttpUtil.isKeepAlive(request)) {\n+                        response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n                     }\n-                    ctx.write(fullResp);\n-                    ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n-                    future.addListener(ChannelFutureListener.CLOSE);\n-                    return fullResp;\n-                }\n-                logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);\n-                HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);\n-                HttpUtil.setContentLength(response, fileLength);\n-                setContentTypeHeader(response, file);\n-                setDateAndCacheHeaders(response, file);\n-                if (HttpUtil.isKeepAlive(request)) {\n-                    response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n-                }\n \n-                // Write the initial line and the header.\n-                ctx.write(response);\n-                // Write the content.\n-                ChannelFuture sendFileFuture;\n-                ChannelFuture lastContentFuture;\n-                if (ctx.pipeline().get(SslHandler.class) == null) {\n-                    sendFileFuture =\n-                            ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());\n-                    // Write the end marker.\n-                    lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n-                } else {\n-                    sendFileFuture =\n-                            ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),\n-                                    ctx.newProgressivePromise());\n-                    // HttpChunkedInput will write the end marker (LastHttpContent) for us.\n-                    lastContentFuture = sendFileFuture;\n-                }\n+                    // Write the initial line and the header.\n+                    ctx.write(response);\n+                    // Write the content.\n+                    ChannelFuture sendFileFuture;\n+                    ChannelFuture lastContentFuture;\n+                    if (ctx.pipeline().get(SslHandler.class) == null) {\n+                        sendFileFuture =\n+                                ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());\n+                        // Write the end marker.\n+                        lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                    } else {\n+                        sendFileFuture =\n+                                ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),\n+                                        ctx.newProgressivePromise());\n+                        // HttpChunkedInput will write the end marker (LastHttpContent) for us.\n+                        lastContentFuture = sendFileFuture;\n+                    }\n \n-                sendFileFuture.addListener(new ChannelProgressiveFutureListener() {\n-                    @Override\n-                    public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {\n-                        if (total < 0) { // total unknown\n-                            logger.info(future.channel() + \" Transfer progress: \" + progress);\n-                        } else {\n-                            logger.info(future.channel() + \" Transfer progress: \" + progress + \" / \" + total);\n+                    sendFileFuture.addListener(new ChannelProgressiveFutureListener() {\n+                        @Override\n+                        public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {\n+                            if (total < 0) { // total unknown\n+                                logger.info(future.channel() + \" Transfer progress: \" + progress);\n+                            } else {\n+                                logger.info(future.channel() + \" Transfer progress: \" + progress + \" / \" + total);\n+                            }\n                         }\n-                    }\n \n-                    @Override\n-                    public void operationComplete(ChannelProgressiveFuture future) {\n-                        logger.info(future.channel() + \" Transfer complete.\");\n-                    }\n-                });\n+                        @Override\n+                        public void operationComplete(ChannelProgressiveFuture future) {\n+                            logger.info(future.channel() + \" Transfer complete.\");\n+                        }\n+                    });\n \n-                // Decide whether to close the connection or not.\n-                if (!HttpUtil.isKeepAlive(request)) {\n-                    // Close the connection when the whole content is written out.\n-                    lastContentFuture.addListener(ChannelFutureListener.CLOSE);\n+                    // Decide whether to close the connection or not.\n+                    if (!HttpUtil.isKeepAlive(request)) {\n+                        // Close the connection when the whole content is written out.\n+                        lastContentFuture.addListener(ChannelFutureListener.CLOSE);\n+                    }\n+                } catch (Throwable e) {\n+                    logger.error(\"view file error, dir: {}, path: {}\", dir, path, e);\n+                    return null;\n+                } finally {\n+                    if (raf != null) {\n+                        IOUtils.close(raf);\n+                    }\n                 }\n+\n                 return fullResp;\n             }\n         }",
    "output": "fix resource not close problem. #2037"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/StringUtils.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/StringUtils.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/StringUtils.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/StringUtils.java\n@@ -12,7 +12,7 @@\n public class StringUtils {\n \n \tpublic static Map<String, String> removeDashKey(Map<String, String> map) {\n-\t\tMap<String, String> result = new HashMap<String, String>();\n+\t\tMap<String, String> result = new HashMap<String, String>(map.size());\n \n \t\tfor (Entry<String, String> entry : map.entrySet()) {\n \t\t\tString key = entry.getKey();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -257,16 +257,19 @@ private void initArthasEnvironment(Map<String, String> argsMap) throws IOExcepti\n          * https://github.com/alibaba/arthas/issues/986\n          * </pre>\n          */\n-        Map<String, String> copyMap = new HashMap<String, String>();\n+        Map<String, Object> copyMap;\n         if (argsMap != null) {\n-            copyMap.putAll(argsMap);\n-        }\n-        // 添加 arthas.home\n-        if (!copyMap.containsKey(ARTHAS_HOME_PROPERTY)) {\n+            copyMap = new HashMap<String, Object>(argsMap);\n+            // 添加 arthas.home\n+            if (!copyMap.containsKey(ARTHAS_HOME_PROPERTY)) {\n+                copyMap.put(ARTHAS_HOME_PROPERTY, arthasHome());\n+            }\n+        } else {\n+            copyMap = new HashMap<String, Object>(1);\n             copyMap.put(ARTHAS_HOME_PROPERTY, arthasHome());\n         }\n \n-        MapPropertySource mapPropertySource = new MapPropertySource(\"args\", (Map<String, Object>)(Object)copyMap);\n+        MapPropertySource mapPropertySource = new MapPropertySource(\"args\", copyMap);\n         arthasEnvironment.addFirst(mapPropertySource);\n \n         tryToLoadArthasProperties();\n\ndiff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n@@ -42,7 +42,7 @@ private List<Map<String, Object>> getErrorList() {\n         List<Map<String, Object>> messages = new ArrayList<Map<String, Object>>();\n         if (diagnostics != null) {\n             for (Diagnostic<? extends JavaFileObject> diagnostic : diagnostics) {\n-                Map<String, Object> message = new HashMap<String, Object>();\n+                Map<String, Object> message = new HashMap<String, Object>(2);\n                 message.put(\"line\", diagnostic.getLineNumber());\n                 message.put(\"message\", diagnostic.getMessage(Locale.US));\n                 messages.add(message);\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ArthasEndpoint.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ArthasEndpoint.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ArthasEndpoint.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ArthasEndpoint.java\n@@ -20,7 +20,7 @@ public class ArthasEndpoint {\n \n     @ReadOperation\n     public Map<String, Object> invoke() {\n-        Map<String, Object> result = new HashMap<String, Object>();\n+        Map<String, Object> result = new HashMap<>(4);\n \n         result.put(\"version\", this.getClass().getPackage().getImplementationVersion());\n         result.put(\"properties\", arthasProperties);",
    "output": "refine collection creations (#1974)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -94,7 +94,7 @@ public synchronized void create() {\n         if (timer == null) {\n             timer = new Timer(\"Timer-for-arthas-monitor-\" + process.session().getSessionId(), true);\n             timer.scheduleAtFixedRate(new MonitorTimer(monitorData, process, command.getNumberOfLimit()),\n-                    0, command.getCycle() * 1000);\n+                    0, command.getCycle() * 1000L);\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java\n@@ -118,7 +118,7 @@ public int compare(ThreadVO o1, ThreadVO o2) {\n         // Compute cpu usage\n         final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n         for (ThreadVO thread : threads) {\n-            double cpu = sampleIntervalNanos == 0 ? 0 : (deltas.get(thread) * 10000 / sampleIntervalNanos / 100.0);\n+            double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n             cpuUsages.put(thread, cpu);\n         }\n ",
    "output": "numeric issues (#1982)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -116,12 +116,12 @@ private static String addLineNumber(String src, Map<Integer, Integer> lineMappin\n \n         List<String> lines = StringUtils.toLines(src);\n \n-        if (maxLineNumber >= 100) {\n-            formatStr = \"/*%3d*/ \";\n-            emptyStr = \"        \";\n-        } else if (maxLineNumber >= 1000) {\n+        if (maxLineNumber >= 1000) {\n             formatStr = \"/*%4d*/ \";\n             emptyStr = \"         \";\n+        } else if (maxLineNumber >= 100) {\n+            formatStr = \"/*%3d*/ \";\n+            emptyStr = \"        \";\n         }\n \n         int index = 0;",
    "output": "logic bug in Decompiler (#1997)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -92,7 +92,8 @@ private long getJobTimeoutInSecond() {\n                 result = Long.parseLong(jobTimeoutConfig);\n                 break;\n             }\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n+            logger.error(\"parse jobTimeoutConfig: {} error!\", jobTimeoutConfig, e);\n         }\n \n         if (result < 0) {",
    "output": "add exception log. #1978"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -698,11 +698,15 @@ private static String listVersions() {\n         }\n         result.append(\"Remote versions:\\n\");\n \n-\t\tList<String> remoteVersions = DownloadUtils.readRemoteVersions();\n-\t\tCollections.reverse(remoteVersions);\n-\t\tfor (String version : remoteVersions) {\n-\t\t\tresult.append(\" \").append(version).append('\\n');\n-\t\t}\n+        List<String> remoteVersions = DownloadUtils.readRemoteVersions();\n+        if (remoteVersions != null) {\n+            Collections.reverse(remoteVersions);\n+            for (String version : remoteVersions) {\n+                result.append(\" \" + version).append('\\n');\n+            }\n+        } else {\n+            result.append(\" unknown\\n\");\n+        }\n         return result.toString();\n     }\n ",
    "output": "fix potential NPE in Bootstrap. #1995"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java\n@@ -1,6 +1,8 @@\n package com.alibaba.arthas.tunnel.server.cluster;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -74,14 +76,18 @@ public void setRedisTemplate(StringRedisTemplate redisTemplate) {\n     public Collection<String> allAgentIds() {\n         ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();\n \n-        Set<String> result = new HashSet<String>();\n-\n         int length = prefix.length();\n-        for (String value : opsForValue.getOperations().keys(prefix + \"*\")) {\n-            result.add(value.substring(length));\n-\n+        final Set<String> redisValues = opsForValue.getOperations().keys(prefix + \"*\");\n+        if (redisValues != null) {\n+            final ArrayList<String> result = new ArrayList<>(redisValues.size());\n+            for (String value : redisValues) {\n+                result.add(value.substring(length));\n+            }\n+            return result;\n+        } else {\n+            logger.error(\"try to get allAgentIds error. redis returned null.\");\n+            return Collections.emptyList();\n         }\n-        return result;\n     }\n \n     @Override\n@@ -90,14 +96,9 @@ public Map<String, AgentClusterInfo> agentInfo(String appName) {\n \n             ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();\n \n-            Set<String> keys = new HashSet<String>();\n-\n             String prefixWithAppName = prefix + appName + \"_\";\n \n-            for (String value : opsForValue.getOperations().keys(prefixWithAppName + \"*\")) {\n-                keys.add(value);\n-\n-            }\n+            ArrayList<String> keys = new ArrayList<>(opsForValue.getOperations().keys(prefixWithAppName + \"*\"));\n \n             List<String> values = opsForValue.getOperations().opsForValue().multiGet(keys);\n ",
    "output": "potential NPE in RedisTunnelClusterStore. (#1999)"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -117,14 +117,14 @@ protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) thr\n                 final String data;\n                 if (dataRaw != null) {\n                     data = URLDecoder.decode(dataRaw, \"utf-8\");\n+                    byte[] bytes = Base64.decodeBase64(data);\n+\n+                    SimpleHttpResponse simpleHttpResponse = SimpleHttpResponse.fromBytes(bytes);\n+                    promise.setSuccess(simpleHttpResponse);\n                 } else {\n                     data = null;\n+                    promise.setFailure(new Exception(URIConstans.PROXY_RESPONSE_DATA + \" is null! reuqestId: \" + requestId));\n                 }\n-\n-                byte[] bytes = Base64.decodeBase64(data);\n-\n-                SimpleHttpResponse simpleHttpResponse = SimpleHttpResponse.fromBytes(bytes);\n-                promise.setSuccess(simpleHttpResponse);\n             }\n         }\n     }",
    "output": "polish #2000"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -98,8 +98,13 @@ protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) thr\n              * </pre>\n              */\n             if (MethodConstants.HTTP_PROXY.equals(method)) {\n-                String requestId = URLDecoder.decode(parameters.getFirst(URIConstans.PROXY_REQUEST_ID), \"utf-8\");\n-\n+                final String requestIdRaw = parameters.getFirst(URIConstans.PROXY_REQUEST_ID);\n+                final String requestId;\n+                if (requestIdRaw != null) {\n+                    requestId = URLDecoder.decode(requestIdRaw, \"utf-8\");\n+                } else {\n+                    requestId = null;\n+                }\n                 if (requestId == null) {\n                     logger.error(\"error, need {}, text: {}\", URIConstans.PROXY_REQUEST_ID, text);\n                     return;\n@@ -108,7 +113,13 @@ protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) thr\n \n                 Promise<SimpleHttpResponse> promise = tunnelServer.findProxyRequestPromise(requestId);\n \n-                String data = URLDecoder.decode(parameters.getFirst(URIConstans.PROXY_RESPONSE_DATA), \"utf-8\");\n+                final String dataRaw = parameters.getFirst(URIConstans.PROXY_RESPONSE_DATA);\n+                final String data;\n+                if (dataRaw != null) {\n+                    data = URLDecoder.decode(dataRaw, \"utf-8\");\n+                } else {\n+                    data = null;\n+                }\n \n                 byte[] bytes = Base64.decodeBase64(data);\n ",
    "output": "potential NPE in TunnelSocketFrameHandler. (#2000)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/BasicHttpAuthenticatorHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/BasicHttpAuthenticatorHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/BasicHttpAuthenticatorHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/BasicHttpAuthenticatorHandler.java\n@@ -82,7 +82,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n             Subject subject = securityAuthenticator.login(principal);\n             if (subject != null) {\n                 authed = true;\n-                session.setAttribute(ArthasConstants.SUBJECT_KEY, subject);\n+                if (session != null) {\n+                    session.setAttribute(ArthasConstants.SUBJECT_KEY, subject);\n+                }\n             }\n \n             if (!authed) {\n@@ -160,6 +162,10 @@ protected static BasicPrincipal extractBasicAuthSubject(HttpRequest request) {\n             if (constraint != null) {\n                 if (\"Basic\".equalsIgnoreCase(constraint.trim())) {\n                     String decoded = StringUtils.after(auth, \" \");\n+                    if (decoded == null) {\n+                        logger.error(\"Extracted Basic Auth principal failed, bad auth String: {}\", auth);\n+                        return null;\n+                    }\n                     // the decoded part is base64 encoded, so we need to decode that\n                     ByteBuf buf = Unpooled.wrappedBuffer(decoded.getBytes());\n                     ByteBuf out = Base64.decode(buf);",
    "output": "potential NPE in BasicHttpAuthenticatorHandler (#1994)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -316,25 +316,25 @@ private void tryToLoadArthasProperties() throws IOException {\n             if (!location.endsWith(\".properties\")) {\n                 location = new File(location, configName + \".properties\").getAbsolutePath();\n             }\n-        }\n-\n-        if (new File(location).exists()) {\n-            Properties properties = FileUtils.readProperties(location);\n-\n-            boolean overrideAll = false;\n-            if (arthasEnvironment.containsProperty(CONFIG_OVERRIDE_ALL)) {\n-                overrideAll = arthasEnvironment.getRequiredProperty(CONFIG_OVERRIDE_ALL, boolean.class);\n-            } else {\n-                overrideAll = Boolean.parseBoolean(properties.getProperty(CONFIG_OVERRIDE_ALL, \"false\"));\n-            }\n+            if (new File(location).exists()) {\n+                Properties properties = FileUtils.readProperties(location);\n+\n+                boolean overrideAll = false;\n+                if (arthasEnvironment.containsProperty(CONFIG_OVERRIDE_ALL)) {\n+                    overrideAll = arthasEnvironment.getRequiredProperty(CONFIG_OVERRIDE_ALL, boolean.class);\n+                } else {\n+                    overrideAll = Boolean.parseBoolean(properties.getProperty(CONFIG_OVERRIDE_ALL, \"false\"));\n+                }\n \n-            PropertySource<?> propertySource = new PropertiesPropertySource(location, properties);\n-            if (overrideAll) {\n-                arthasEnvironment.addFirst(propertySource);\n-            } else {\n-                arthasEnvironment.addLast(propertySource);\n+                PropertySource<?> propertySource = new PropertiesPropertySource(location, properties);\n+                if (overrideAll) {\n+                    arthasEnvironment.addFirst(propertySource);\n+                } else {\n+                    arthasEnvironment.addLast(propertySource);\n+                }\n             }\n         }\n+\n     }\n \n     /**",
    "output": "potential NPE in ArthasBootstrap (#1991)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/VmToolUtils.java\n@@ -9,7 +9,7 @@ public class VmToolUtils {\n     private static String libName = null;\n     static {\n         if (OSUtils.isMac()) {\n-            libName = \"libArthasJniLibrary-x64.dylib\";\n+            libName = \"libArthasJniLibrary.dylib\";\n         }\n         if (OSUtils.isLinux()) {\n             libName = \"libArthasJniLibrary-x64.so\";",
    "output": "vmtool support mac arm64 #2036"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n@@ -444,12 +444,10 @@ public static String nullSafeToString(Object[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -470,12 +468,10 @@ public static String nullSafeToString(boolean[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -496,12 +492,10 @@ public static String nullSafeToString(byte[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -522,12 +516,10 @@ public static String nullSafeToString(char[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -548,12 +540,10 @@ public static String nullSafeToString(double[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -574,12 +564,10 @@ public static String nullSafeToString(float[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -600,12 +588,10 @@ public static String nullSafeToString(int[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -626,12 +612,10 @@ public static String nullSafeToString(long[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n \n@@ -652,12 +636,10 @@ public static String nullSafeToString(short[] array) {\n             if(length == 0) {\n                 return \"{}\";\n             } else {\n-                StringBuilder sb = new StringBuilder();\n+                StringBuilder sb = new StringBuilder(\"{\");\n \n                 for(int i = 0; i < length; ++i) {\n-                    if(i == 0) {\n-                        sb.append(\"{\");\n-                    } else {\n+                    if(i > 0) {\n                         sb.append(\", \");\n                     }\n ",
    "output": "Optimize string splicing. (#2034)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -12,6 +12,7 @@\n import com.taobao.middleware.cli.Option;\n import com.taobao.middleware.cli.TypedOption;\n \n+import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import java.util.Arrays;\n@@ -117,8 +118,19 @@ private void attachAgent(Configure configure) throws Exception {\n             //convert jar path to unicode string\n             configure.setArthasAgent(encodeArg(arthasAgentPath));\n             configure.setArthasCore(encodeArg(configure.getArthasCore()));\n-            virtualMachine.loadAgent(arthasAgentPath,\n-                    configure.getArthasCore() + \";\" + configure.toString());\n+            try {\n+                virtualMachine.loadAgent(arthasAgentPath,\n+                        configure.getArthasCore() + \";\" + configure.toString());\n+            } catch (IOException e) {\n+                if (e.getMessage() != null && e.getMessage().contains(\"Non-numeric value found\")) {\n+                    AnsiLog.warn(e);\n+                    AnsiLog.warn(\"It seems to use the lower version of JDK to attach the higher version of JDK.\");\n+                    AnsiLog.warn(\n+                            \"This error message can be ignored, the attach may have been successful, and it will still try to connect.\");\n+                } else {\n+                    throw e;\n+                }\n+            }\n         } finally {\n             if (null != virtualMachine) {\n                 virtualMachine.detach();",
    "output": "improve the handling of attach exception \"Non-numeric value found\". #2023"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n@@ -7,6 +7,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.ConfigurationProperties;",
    "output": "polish #2017"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n@@ -36,15 +36,15 @@ public class ArthasConfiguration {\n \t * </pre>\n \t */\n \t@ConfigurationProperties(prefix = \"arthas\")\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(name=\"arthasConfigMap\")\n \t@Bean\n \tpublic HashMap<String, String> arthasConfigMap() {\n \t\treturn new HashMap<String, String>();\n \t}\n \n \t@ConditionalOnMissingBean\n \t@Bean\n-\tpublic ArthasAgent arthasAgent(@Autowired Map<String, String> arthasConfigMap,\n+\tpublic ArthasAgent arthasAgent(@Autowired @Qualifier(\"arthasConfigMap\") Map<String, String> arthasConfigMap,\n \t\t\t@Autowired ArthasProperties arthasProperties) throws Throwable {\n         arthasConfigMap = StringUtils.removeDashKey(arthasConfigMap);\n         ArthasProperties.updateArthasConfigMapDefaultValue(arthasConfigMap);",
    "output": "fix user define arthasConfigMap support (#2017)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n@@ -42,8 +42,8 @@\n public class Base64Command extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(Base64Command.class);\n     private String file;\n-    private Integer sizeLimit = 128 * 1024;\n-    private int maxSizeLimit = 8 * 1024 * 1024;\n+    private int sizeLimit = 128 * 1024;\n+    private static final int MAX_SIZE_LIMIT = 8 * 1024 * 1024;\n \n     private boolean decode;\n \n@@ -150,8 +150,8 @@ private boolean verifyOptions(CommandProcess process) {\n             return false;\n         }\n \n-        if (sizeLimit > maxSizeLimit) {\n-            process.end(-1, \"sizeLimit cannot be large than: \" + maxSizeLimit);\n+        if (sizeLimit > MAX_SIZE_LIMIT) {\n+            process.end(-1, \"sizeLimit cannot be large than: \" + MAX_SIZE_LIMIT);\n             return false;\n         }\n ",
    "output": "reduce memory use in Base64Command (#1986)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java b/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n@@ -78,7 +78,6 @@ public static ShellServer create() {\n     /**\n      * Start the shell service, this is an asynchronous start.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public ShellServer listen() {\n         return listen(new NoOpHandler<Future<Void>>());\n     }\n@@ -93,7 +92,6 @@ public ShellServer listen() {\n     /**\n      * Close the shell server, this is an asynchronous close.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void close() {\n         close(new NoOpHandler<Future<Void>>());\n     }",
    "output": "polish #1976"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java b/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java\n@@ -80,7 +80,7 @@ public static ShellServer create() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public ShellServer listen() {\n-        return listen(new NoOpHandler());\n+        return listen(new NoOpHandler<Future<Void>>());\n     }\n \n     /**\n@@ -95,7 +95,7 @@ public ShellServer listen() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public void close() {\n-        close(new NoOpHandler());\n+        close(new NoOpHandler<Future<Void>>());\n     }\n \n     /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/NoOpHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/NoOpHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/NoOpHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/NoOpHandler.java\n@@ -7,12 +7,12 @@\n /**\n  * @author beiwei30 on 22/11/2016.\n  */\n-public class NoOpHandler implements Handler {\n+public class NoOpHandler<E> implements Handler<E> {\n \n     private static final Logger logger = LoggerFactory.getLogger(NoOpHandler.class);\n \n     @Override\n-    public void handle(Object event) {\n+    public void handle(E event) {\n         if (event instanceof Future && ((Future) event).failed()) {\n             logger.error(\"Error listening term server:\", ((Future) event).cause());\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/BuiltinCommandResolver.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/BuiltinCommandResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/BuiltinCommandResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/BuiltinCommandResolver.java\n@@ -21,7 +21,7 @@ class BuiltinCommandResolver implements CommandResolver {\n     private Handler<CommandProcess> handler;\n \n     public BuiltinCommandResolver() {\n-        this.handler = new NoOpHandler();\n+        this.handler = new NoOpHandler<CommandProcess>();\n     }\n \n     @Override",
    "output": "use generic on class NoOpHandler (#1976)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -627,7 +627,7 @@ public int compare(String o1, String o2) {\n         }\n     }\n \n-    private class ClassLoaderInterruptHandler implements Handler<Void> {\n+    private static class ClassLoaderInterruptHandler implements Handler<Void> {\n \n         private ClassLoaderCommand command;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MBeanCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MBeanCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MBeanCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MBeanCommand.java\n@@ -349,7 +349,7 @@ private Matcher<String> getAttributeMatcher() {\n     }\n \n \n-    public class MBeanInterruptHandler extends CommandInterruptHandler {\n+    public static class MBeanInterruptHandler extends CommandInterruptHandler {\n \n         private volatile Timer timer;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/distribution/impl/SharingResultDistributorImpl.java b/core/src/main/java/com/taobao/arthas/core/distribution/impl/SharingResultDistributorImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/distribution/impl/SharingResultDistributorImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/distribution/impl/SharingResultDistributorImpl.java\n@@ -135,7 +135,7 @@ public void run() {\n         }\n     }\n \n-    private class SharingResultConsumerImpl implements ResultConsumer {\n+    private static class SharingResultConsumerImpl implements ResultConsumer {\n         private BlockingQueue<ResultModel> resultQueue = new ArrayBlockingQueue<ResultModel>(DistributorOptions.resultQueueSize);\n         private ReentrantLock queueLock = new ReentrantLock();\n         private InputStatusModel lastInputStatus;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -227,7 +227,7 @@ public Job getForegroundJob() {\n         return currentForegroundJob;\n     }\n \n-    private class ShellJobHandler implements JobListener {\n+    private static class ShellJobHandler implements JobListener {\n         ShellImpl shell;\n \n         public ShellJobHandler(ShellImpl shell) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -658,7 +658,7 @@ public void onSuspend(Job job) {\n         }\n     }\n \n-    private class ApiTerm implements Term {\n+    private static class ApiTerm implements Term {\n \n         private Session session;\n \n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ProxyClient.java\n@@ -103,7 +103,7 @@ public void operationComplete(ChannelFuture channelFuture) throws Exception {\n         return httpResponse;\n     }\n \n-    class HttpProxyClientHandler extends SimpleChannelInboundHandler<HttpObject> {\n+    static class HttpProxyClientHandler extends SimpleChannelInboundHandler<HttpObject> {\n \n         private Promise<SimpleHttpResponse> promise;\n ",
    "output": "use static inner class when can (#1981)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -208,7 +208,7 @@ private static void addRuntimeInfo(DashboardModel dashboardModel) {\n         runtimeInfo.setSystemLoadAverage(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n         runtimeInfo.setProcessors(Runtime.getRuntime().availableProcessors());\n         runtimeInfo.setUptime(ManagementFactory.getRuntimeMXBean().getUptime() / 1000);\n-        runtimeInfo.setTimestamp(new Date().getTime());\n+        runtimeInfo.setTimestamp(System.currentTimeMillis());\n         dashboardModel.setRuntimeInfo(runtimeInfo);\n     }\n ",
    "output": "use System#currentTimeMillis instead of new Date().getTime() (#1975)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -694,14 +694,14 @@ private static String listVersions() {\n \n         result.append(\"Local versions:\\n\");\n         for (String version : versionList) {\n-            result.append(\" \" + version).append('\\n');\n+            result.append(\" \").append(version).append('\\n');\n         }\n         result.append(\"Remote versions:\\n\");\n \n \t\tList<String> remoteVersions = DownloadUtils.readRemoteVersions();\n \t\tCollections.reverse(remoteVersions);\n \t\tfor (String version : remoteVersions) {\n-\t\t\tresult.append(\" \" + version).append('\\n');\n+\t\t\tresult.append(\" \").append(version).append('\\n');\n \t\t}\n         return result.toString();\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/TraceView.java\n@@ -98,10 +98,10 @@ private void renderNode(StringBuilder sb, TraceNode node, Ansi highlighted) {\n \n             //trace_id\n             if (threadNode.getTraceId() != null) {\n-                sb.append(\";trace_id=\"+threadNode.getTraceId());\n+                sb.append(\";trace_id=\").append(threadNode.getTraceId());\n             }\n             if (threadNode.getRpcId() != null) {\n-                sb.append(\";rpc_id=\"+threadNode.getRpcId());\n+                sb.append(\";rpc_id=\").append(threadNode.getRpcId());\n             }\n         } else if (node instanceof ThrowNode) {\n             ThrowNode throwNode = (ThrowNode) node;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n@@ -97,7 +97,7 @@ public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n                 affectVO.getListenerId()));\n \n         if (affectVO.getThrowable() != null) {\n-            infoSB.append(\"\\nEnhance error! exception: \" + affectVO.getThrowable());\n+            infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n         }\n         infoSB.append(\"\\n\");\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -91,9 +91,9 @@ static class RemoteJob implements Runnable {\n         public void appendQueryData(String key, String value) {\n             if (key != null && value != null) {\n                 if (queryData.length() == 0) {\n-                    queryData.append(key + \"=\" + value);\n+                    queryData.append(key).append(\"=\").append(value);\n                 } else {\n-                    queryData.append(\"&\" + key + \"=\" + value);\n+                    queryData.append(\"&\").append(key).append(\"=\").append(value);\n                 }\n             }\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n@@ -144,7 +144,7 @@ public String toString() {\n                 cost(),\n                 listenerId));\n         if (this.throwable != null) {\n-            infoSB.append(\"\\nEnhance error! exception: \" + this.throwable);\n+            infoSB.append(\"\\nEnhance error! exception: \").append(this.throwable);\n         }\n         return infoSB.toString();\n     }",
    "output": "string concat in StringBuilder append chain (#1984)"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -285,7 +285,7 @@ public static int process(String[] args, ActionListener eotEventCallback) throws\n             }\n \n             // ctrl + c event callback\n-            consoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {\n+            consoleReader.getKeys().bind(Character.toString((char) CTRL_C), new ActionListener() {\n                 @Override\n                 public void actionPerformed(ActionEvent e) {\n                     try {\n@@ -300,7 +300,7 @@ public void actionPerformed(ActionEvent e) {\n             });\n \n             // ctrl + d event call back\n-            consoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), eotEventCallback);\n+            consoleReader.getKeys().bind(Character.toString(KeyMap.CTRL_D), eotEventCallback);\n \n             try {\n                 telnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n@@ -25,7 +25,7 @@ public static StdoutHandler inject(List<CliToken> tokens) {\n         CommandLine commandLine = CLIs.create(NAME)\n                 .addOption(new Option().setShortName(\"l\").setFlag(true))\n                 .parse(args);\n-        Boolean lineMode = commandLine.isFlagEnabled(\"l\");\n+        boolean lineMode = commandLine.isFlagEnabled(\"l\");\n         return new WordCountHandler(lineMode);\n     }\n ",
    "output": "do NOT create wrapper type instance when can (#1985)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -121,12 +121,14 @@ public static boolean completeFilePath(Completion completion) {\n         File[] listFiles = dir.listFiles();\n \n         ArrayList<String> names = new ArrayList<String>();\n-        for (File child : listFiles) {\n-            if (child.getName().startsWith(partName)) {\n-                if (child.isDirectory()) {\n-                    names.add(child.getName() + \"/\");\n-                } else {\n-                    names.add(child.getName());\n+        if (listFiles != null) {\n+            for (File child : listFiles) {\n+                if (child.getName().startsWith(partName)) {\n+                    if (child.isDirectory()) {\n+                        names.add(child.getName() + \"/\");\n+                    } else {\n+                        names.add(child.getName());\n+                    }\n                 }\n             }\n         }",
    "output": "potential NPE in CompletionUtils (#1996)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -38,6 +38,7 @@\n import java.util.Map;\n import java.util.Timer;\n import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.taobao.arthas.core.command.model.MemoryEntryVO.TYPE_BUFFER_POOL;\n import static com.taobao.arthas.core.command.model.MemoryEntryVO.TYPE_HEAP;\n@@ -66,7 +67,7 @@ public class DashboardCommand extends AnnotatedCommand {\n \n     private long interval = 5000;\n \n-    private volatile long count = 0;\n+    private final AtomicLong count = new AtomicLong(0);\n     private volatile Timer timer;\n \n     @Option(shortName = \"n\", longName = \"number-of-execution\")\n@@ -297,7 +298,7 @@ public DashboardTimerTask(CommandProcess process) {\n         @Override\n         public void run() {\n             try {\n-                if (count >= getNumOfExecutions()) {\n+                if (count.get() >= getNumOfExecutions()) {\n                     // stop the timer\n                     timer.cancel();\n                     timer.purge();\n@@ -329,7 +330,7 @@ public void run() {\n \n                 process.appendResult(dashboardModel);\n \n-                count++;\n+                count.getAndIncrement();\n                 process.times().incrementAndGet();\n             } catch (Throwable e) {\n                 String msg = \"process dashboard failed: \" + e.getMessage();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java\n@@ -6,6 +6,7 @@\n import com.taobao.middleware.cli.Option;\n \n import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * @author ralf0131 2017-02-23 23:28.\n@@ -17,7 +18,7 @@ public class WordCountHandler extends StdoutHandler implements StatisticsFunctio\n     private boolean lineMode;\n \n     private String result = null;\n-    private volatile int total = 0;\n+    private final AtomicInteger total = new AtomicInteger(0);\n \n     public static StdoutHandler inject(List<CliToken> tokens) {\n         List<String> args = StdoutHandler.parseArgs(tokens, NAME);\n@@ -39,7 +40,7 @@ public String apply(String input) {\n             result = \"wc currently only support wc -l!\\n\";\n         } else {\n             if (input != null && !\"\".equals(input.trim())) {\n-                total += input.split(\"\\n\").length;\n+                total.getAndAdd(input.split(\"\\n\").length);\n             }\n         }\n \n@@ -52,6 +53,6 @@ public String result() {\n             return result;\n         }\n \n-        return total + \"\\n\";\n+        return total.get() + \"\\n\";\n     }\n }",
    "output": "thread safety bug (#1988)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java b/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ReflectUtils.java\n@@ -212,7 +212,7 @@ private static Class getClass(String className, ClassLoader loader, String[] pac\n         while ((index = className.indexOf(\"[]\", index) + 1) > 0) {\n             dimensions++;\n         }\n-        StringBuffer brackets = new StringBuffer(className.length() - dimensions);\n+        StringBuilder brackets = new StringBuilder(className.length() - dimensions);\n         for (int i = 0; i < dimensions; i++) {\n             brackets.append('[');\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n@@ -83,7 +83,7 @@ public static String simpleRequest(String url) {\n             int responseCode = con.getResponseCode();\n \n             br = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-            StringBuffer sb = new StringBuffer();\n+            StringBuilder sb = new StringBuilder();\n             String line = null;\n             while ((line = br.readLine()) != null) {\n                 sb.append(line);\n@@ -138,7 +138,7 @@ public static Response requestViaSocket(String path) {\n             pw.flush();\n \n             br = new BufferedReader(new InputStreamReader(s.getInputStream()));\n-            StringBuffer sb = new StringBuffer();\n+            StringBuilder sb = new StringBuilder();\n             String line = null;\n             boolean start = false;\n             while ((line = br.readLine()) != null) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -689,7 +689,7 @@ public static String join(Object[] array, String separator) {\n         }\n         int arraySize = array.length;\n         int bufSize = (arraySize == 0 ? 0 : (array[0].toString().length() + separator.length()) * arraySize);\n-        StringBuffer buf = new StringBuffer(bufSize);\n+        StringBuilder buf = new StringBuilder(bufSize);\n \n         for (int i = 0; i < arraySize; i++) {\n             if (i > 0) {",
    "output": "use StringBuilder instead of StringBuffer when can (#1980)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n@@ -2,7 +2,6 @@\n \n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.model.EchoModel;\n-import com.taobao.arthas.core.command.model.MessageModel;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.middleware.cli.annotations.Argument;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n@@ -20,7 +20,6 @@\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.arthas.core.util.ClassLoaderUtils;\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.ClassLoaderUtils;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/GetStaticModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/GetStaticModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/GetStaticModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/GetStaticModel.java\n@@ -1,7 +1,6 @@\n package com.taobao.arthas.core.command.model;\n \n import java.util.Collection;\n-import java.util.List;\n \n /**\n  * Data model of GetStaticCommand\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n@@ -1,7 +1,6 @@\n package com.taobao.arthas.core.command.model;\n \n import java.util.Collection;\n-import java.util.List;\n import java.util.Map;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/RetransformModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/RetransformModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/RetransformModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/RetransformModel.java\n@@ -5,7 +5,6 @@\n import java.util.List;\n \n import com.taobao.arthas.core.command.klass100.RetransformCommand.RetransformEntry;\n-import com.taobao.arthas.core.util.ClassUtils;\n \n /**\n  * \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -20,17 +20,11 @@\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.LogUtil;\n-import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.Matcher;\n import com.taobao.arthas.core.view.Ansi;\n-import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Option;\n-import com.taobao.text.Color;\n-import com.taobao.text.Decoration;\n-import com.taobao.text.ui.LabelElement;\n-import com.taobao.text.util.RenderUtil;\n \n /**\n  * @author beiwei30 on 29/11/2016.\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java b/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n@@ -3,7 +3,6 @@\n import com.taobao.arthas.core.command.logger.LoggerHelper;\n import com.taobao.arthas.core.command.model.LoggerModel;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.text.Decoration;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java b/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n@@ -17,7 +17,6 @@\n \n import static com.taobao.text.ui.Element.label;\n import static javax.management.MBeanOperationInfo.*;\n-import static javax.management.MBeanOperationInfo.UNKNOWN;\n \n /**\n  * View of 'mbean' command\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n@@ -1,8 +1,6 @@\n package com.taobao.arthas.core.shell.system.impl;\n \n-import java.io.File;\n import java.util.Date;\n-import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.taobao.arthas.core.shell.future.Future;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n@@ -6,7 +6,6 @@\n import com.taobao.arthas.core.shell.cli.CliTokens;\n import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.session.Session;\n-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n \n import io.termd.core.function.Consumer;\n import io.termd.core.readline.Completion;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java\n@@ -4,7 +4,6 @@\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.arthas.core.shell.term.TermServer;\n-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n import io.termd.core.readline.Keymap;\n \n import java.io.FileInputStream;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/ApiRequest.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/ApiRequest.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/ApiRequest.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/ApiRequest.java\n@@ -1,7 +1,5 @@\n package com.taobao.arthas.core.shell.term.impl.http.api;\n \n-import java.util.Map;\n-\n /**\n  * Http Api request\n  *\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n@@ -8,7 +8,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n \n import com.alibaba.deps.org.objectweb.asm.Type;\n import com.taobao.arthas.core.command.model.ClassDetailVO;",
    "output": "remove unused imports (#1979)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -1,8 +1,7 @@\n package com.taobao.arthas.core.util;\n \n-import java.io.BufferedReader;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n+import java.io.InputStream;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLEncoder;\n@@ -17,6 +16,11 @@\n  * Created by zhuyong on 15/11/12.\n  */\n public class UserStatUtil {\n+\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+\n+    private static final byte[] SKIP_BYTE_BUFFER = new byte[DEFAULT_BUFFER_SIZE];\n+\n     private static final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {\n         @Override\n         public Thread newThread(Runnable r) {\n@@ -100,7 +104,7 @@ public void run() {\n             if (link == null) {\n                 return;\n             }\n-            BufferedReader br = null;\n+            InputStream inputStream = null;\n             try {\n                 if (queryData.length() != 0) {\n                     link = link + \"?\" + queryData;\n@@ -110,18 +114,17 @@ public void run() {\n                 connection.setConnectTimeout(1000);\n                 connection.setReadTimeout(1000);\n                 connection.connect();\n-                br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n-                String line = null;\n-                StringBuilder result = new StringBuilder();\n-                while ((line = br.readLine()) != null) {\n-                    result.append(line);\n+                inputStream = connection.getInputStream();\n+                //noinspection StatementWithEmptyBody\n+                while (inputStream.read(SKIP_BYTE_BUFFER) != -1) {\n+                    // do nothing\n                 }\n             } catch (Throwable t) {\n                 // ignore\n             } finally {\n-                if (br != null) {\n+                if (inputStream != null) {\n                     try {\n-                        br.close();\n+                        inputStream.close();\n                     } catch (IOException e) {\n                         // ignore\n                     }",
    "output": "improve UserStatUtil. (#1987)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/concurrent/ConcurrentWeakKeyHashMap.java b/common/src/main/java/com/taobao/arthas/common/concurrent/ConcurrentWeakKeyHashMap.java\n--- a/common/src/main/java/com/taobao/arthas/common/concurrent/ConcurrentWeakKeyHashMap.java\n+++ b/common/src/main/java/com/taobao/arthas/common/concurrent/ConcurrentWeakKeyHashMap.java\n@@ -26,6 +26,7 @@\n import java.util.AbstractCollection;\n import java.util.AbstractMap;\n import java.util.AbstractSet;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.ConcurrentModificationException;\n import java.util.Enumeration;\n@@ -619,10 +620,7 @@ void clear() {\n             if (count != 0) {\n                 lock();\n                 try {\n-                    HashEntry<K, V>[] tab = table;\n-                    for (int i = 0; i < tab.length; i ++) {\n-                        tab[i] = null;\n-                    }\n+                    Arrays.fill(table, null);\n                     ++ modCount;\n                     // replace the reference queue to avoid unnecessary stale\n                     // cleanups",
    "output": "use Arrays.fill (#1989)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n@@ -87,8 +87,13 @@ public void process(CommandProcess process) {\n         }\n \n         // 确认输入\n-        if (file == null && this.input != null) {\n-            file = input;\n+        if (file == null) {\n+            if (this.input != null) {\n+                file = input;\n+            } else {\n+                process.end(-1, \": No file, nor input\");\n+                return;\n+            }\n         }\n \n         File f = new File(file);",
    "output": "potential NPE in Base64Command (#1993)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/reflect/ArthasReflectUtils.java b/core/src/main/java/com/taobao/arthas/core/util/reflect/ArthasReflectUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/reflect/ArthasReflectUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/reflect/ArthasReflectUtils.java\n@@ -144,27 +144,29 @@ public boolean accept(File file) {\n                         || (file.getName().endsWith(\".class\"));\n             }\n         });\n-        // 循环所有文件\n-        for (File file : dirfiles) {\n-            // 如果是目录 则继续扫描\n-            if (file.isDirectory()) {\n-                findAndAddClassesInPackageByFile(\n-                        packageName + \".\" + file.getName(),\n-                        file.getAbsolutePath(), recursive, classes);\n-            } else {\n-                // 如果是java类文件 去掉后面的.class 只留下类名\n-                String className = file.getName().substring(0,\n-                        file.getName().length() - 6);\n-                try {\n-                    // 添加到集合中去\n-                    // classes.add(Class.forName(packageName + '.' +\n-                    // className));\n-                    // 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净\n-                    classes.add(Thread.currentThread().getContextClassLoader()\n-                            .loadClass(packageName + '.' + className));\n-                } catch (ClassNotFoundException e) {\n-                    // log.error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n-//                    e.printStackTrace();\n+        if (dirfiles != null) {\n+            // 循环所有文件\n+            for (File file : dirfiles) {\n+                // 如果是目录 则继续扫描\n+                if (file.isDirectory()) {\n+                    findAndAddClassesInPackageByFile(\n+                            packageName + \".\" + file.getName(),\n+                            file.getAbsolutePath(), recursive, classes);\n+                } else {\n+                    // 如果是java类文件 去掉后面的.class 只留下类名\n+                    String className = file.getName().substring(0,\n+                            file.getName().length() - 6);\n+                    try {\n+                        // 添加到集合中去\n+                        // classes.add(Class.forName(packageName + '.' +\n+                        // className));\n+                        // 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净\n+                        classes.add(Thread.currentThread().getContextClassLoader()\n+                                .loadClass(packageName + '.' + className));\n+                    } catch (ClassNotFoundException e) {\n+                        // log.error(\"添加用户自定义视图类错误 找不到此类的.class文件\");\n+                        //                    e.printStackTrace();\n+                    }\n                 }\n             }\n         }",
    "output": "potential NPE in ArthasReflectUtils (#1992)"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n@@ -95,14 +95,16 @@ private List<JavaFileObject> processDir(String packageName, File directory) {\n         List<JavaFileObject> result = new ArrayList<JavaFileObject>();\n \n         File[] childFiles = directory.listFiles();\n-        for (File childFile : childFiles) {\n-            if (childFile.isFile()) {\n-                // We only want the .class files.\n-                if (childFile.getName().endsWith(CLASS_FILE_EXTENSION)) {\n-                    String binaryName = packageName + \".\" + childFile.getName();\n-                    binaryName = binaryName.replaceAll(CLASS_FILE_EXTENSION + \"$\", \"\");\n-\n-                    result.add(new CustomJavaFileObject(binaryName, childFile.toURI()));\n+        if (childFiles != null) {\n+            for (File childFile : childFiles) {\n+                if (childFile.isFile()) {\n+                    // We only want the .class files.\n+                    if (childFile.getName().endsWith(CLASS_FILE_EXTENSION)) {\n+                        String binaryName = packageName + \".\" + childFile.getName();\n+                        binaryName = binaryName.replaceAll(CLASS_FILE_EXTENSION + \"$\", \"\");\n+\n+                        result.add(new CustomJavaFileObject(binaryName, childFile.toURI()));\n+                    }\n                 }\n             }\n         }",
    "output": "potential NPE in PackageInternalsFinder (#1998)"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/PackageInternalsFinder.java\n@@ -26,6 +26,7 @@\n import java.net.JarURLConnection;\n import java.net.URI;\n import java.net.URL;\n+import java.net.URLDecoder;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Enumeration;\n@@ -55,7 +56,7 @@ public List<JavaFileObject> find(String packageName) throws IOException {\n     }\n \n     private Collection<JavaFileObject> listUnder(String packageName, URL packageFolderURL) {\n-        File directory = new File(packageFolderURL.getFile());\n+        File directory = new File(decode(packageFolderURL.getFile()));\n         if (directory.isDirectory()) { // browse local .class files - useful for local execution\n             return processDir(packageName, directory);\n         } else { // browse a jar file\n@@ -108,4 +109,14 @@ private List<JavaFileObject> processDir(String packageName, File directory) {\n \n         return result;\n     }\n+\n+    private String decode(String filePath) {\n+        try {\n+            return URLDecoder.decode(filePath, \"utf-8\");\n+        } catch (Exception e) {\n+            // ignore, return original string\n+        }\n+\n+        return filePath;\n+    }\n }\n\ndiff --git a/memorycompiler/src/test/java/com/taobao/arthas/compiler/PackageInternalsFinderTest.java b/memorycompiler/src/test/java/com/taobao/arthas/compiler/PackageInternalsFinderTest.java\n--- a/memorycompiler/src/test/java/com/taobao/arthas/compiler/PackageInternalsFinderTest.java\n+++ b/memorycompiler/src/test/java/com/taobao/arthas/compiler/PackageInternalsFinderTest.java\n@@ -0,0 +1,33 @@\n+package com.taobao.arthas.compiler;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.tools.JavaFileObject;\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * description: PackageInternalsFinderTest <br>\n+ * date: 2021/9/23 12:55 下午 <br>\n+ * author: zzq0324 <br>\n+ * version: 1.0 <br>\n+ */\n+public class PackageInternalsFinderTest {\n+\n+    @Test\n+    public void testFilePathContainWhitespace() throws IOException {\n+        PackageInternalsFinder finder = new PackageInternalsFinder(this.getClass().getClassLoader());\n+        List<JavaFileObject> fileObjectList= finder.find(\"file/test folder\");\n+\n+        Assert.assertEquals(fileObjectList.size(), 0);\n+    }\n+\n+    @Test\n+    public void testFilePathContainChineseCharacter() throws IOException {\n+        PackageInternalsFinder finder = new PackageInternalsFinder(this.getClass().getClassLoader());\n+        List<JavaFileObject> fileObjectList= finder.find(\"file/测试目录\");\n+\n+        Assert.assertEquals(fileObjectList.size(), 0);\n+    }\n+}",
    "output": "Bugfix: PackageInternalsFinder support file path with white space and Unicode characters (#1921)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -144,7 +144,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         outputPath.mkdirs();\n \n         // 3. init logger\n-        loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         // 4. 增强ClassLoader\n         enhanceClassLoader();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n@@ -51,7 +51,7 @@ public class LogUtil {\n      * \n      * @param env\n      */\n-    public static LoggerContext initLooger(ArthasEnvironment env) {\n+    public static LoggerContext initLogger(ArthasEnvironment env) {\n         String loggingConfig = env.resolvePlaceholders(LOGGING_CONFIG);\n         if (loggingConfig == null || loggingConfig.trim().isEmpty()) {\n             return null;\n@@ -88,7 +88,7 @@ public static LoggerContext initLooger(ArthasEnvironment env) {\n                 if (appender instanceof RollingFileAppender) {\n                     RollingFileAppender fileAppender = (RollingFileAppender) appender;\n                     if (\"ARTHAS\".equalsIgnoreCase(fileAppender.getName())) {\n-                        logFile = fileAppender.getFile();\n+                        logFile = new File(fileAppender.getFile()).getCanonicalPath();\n                     }\n                 }\n             }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java b/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n@@ -49,7 +49,7 @@ public void testArthasHome() throws URISyntaxException {\n         properties1.put(\"arthas.home\", testResourcesDir);\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n-        LoggerContext loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        LoggerContext loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         Logger logger = loggerContext.getLogger(\"root\");\n         Level level = logger.getLevel();\n@@ -64,7 +64,7 @@ public void testLogConfig() throws URISyntaxException {\n         properties1.put(LogUtil.LOGGING_CONFIG_PROPERTY, testResourcesDir + \"/logback-test.xml\");\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n-        LoggerContext loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        LoggerContext loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         Logger logger = loggerContext.getLogger(\"root\");\n         Level level = logger.getLevel();\n@@ -80,7 +80,7 @@ public void test_DefaultLogFile() throws URISyntaxException, IOException {\n \n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n-        LoggerContext loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        LoggerContext loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         Logger logger = loggerContext.getLogger(\"root\");\n         Level level = logger.getLevel();\n@@ -112,7 +112,7 @@ public void test_ARTHAS_LOG_FILE() throws URISyntaxException, IOException {\n         properties1.put(LogUtil.FILE_NAME_PROPERTY, logFile);\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n-        LoggerContext loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        LoggerContext loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         Logger logger = loggerContext.getLogger(\"root\");\n         Level level = logger.getLevel();\n@@ -144,7 +144,7 @@ public void test_ARTHAS_LOG_PATH() throws URISyntaxException, IOException {\n         properties1.put(LogUtil.FILE_PATH_PROPERTY, tempFolder.getRoot().getAbsolutePath());\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n-        LoggerContext loggerContext = LogUtil.initLooger(arthasEnvironment);\n+        LoggerContext loggerContext = LogUtil.initLogger(arthasEnvironment);\n \n         Logger logger = loggerContext.getLogger(\"root\");\n         Level level = logger.getLevel();",
    "output": "fix arthas logfile path in windows, fix typo (#1913)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.4"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -20,13 +20,12 @@\n @Name(\"watch\")\n @Summary(\"Display the input/output parameter, return object, and thrown exception of specified method invocation\")\n @Description(Constants.EXPRESS_DESCRIPTION + \"\\nExamples:\\n\" +\n-        \"  watch -b org.apache.commons.lang.StringUtils isBlank params\\n\" +\n-        \"  watch -f org.apache.commons.lang.StringUtils isBlank returnObj\\n\" +\n-        \"  watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj}' -x 2\\n\" +\n-        \"  watch -bf *StringUtils isBlank params\\n\" +\n-        \"  watch *StringUtils isBlank params[0]\\n\" +\n+        \"  watch org.apache.commons.lang.StringUtils isBlank\\n\" +\n+        \"  watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj, throwExp}' -x 2\\n\" +\n         \"  watch *StringUtils isBlank params[0] params[0].length==1\\n\" +\n         \"  watch *StringUtils isBlank params '#cost>100'\\n\" +\n+        \"  watch -f *StringUtils isBlank params\\n\" +\n+        \"  watch *StringUtils isBlank params[0]\\n\" +\n         \"  watch -E -b org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank params[0]\\n\" +\n         \"  watch javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"watch\")\n@@ -59,7 +58,7 @@ public void setMethodPattern(String methodPattern) {\n \n     @Argument(index = 2, argName = \"express\", required = false)\n     @DefaultValue(\"{params, target, returnObj}\")\n-    @Description(\"the content you want to watch, written by ognl.\\n\" + Constants.EXPRESS_EXAMPLES)\n+    @Description(\"The content you want to watch, written by ognl. Default value is '{params, target, returnObj}'\\n\" + Constants.EXPRESS_EXAMPLES)\n     public void setExpress(String express) {\n         this.express = express;\n     }",
    "output": "update watch/trace docs"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -163,8 +163,14 @@ public void process(final CommandProcess process) {\n                     process.end(-1, \"The className option cannot be empty!\");\n                     return;\n                 }\n-                ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n-                if (hashCode == null && classLoaderClass != null) {\n+                ClassLoader classLoader = null;\n+                if (hashCode != null) {\n+                    classLoader = ClassLoaderUtils.getClassLoader(inst, hashCode);\n+                    if (classLoader == null) {\n+                        process.end(-1, \"Can not find classloader with hashCode: \" + hashCode + \".\");\n+                        return;\n+                    }\n+                }else if ( classLoaderClass != null) {\n                     List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst,\n                             classLoaderClass);\n                     if (matchedClassLoaders.size() == 1) {\n@@ -183,6 +189,8 @@ public void process(final CommandProcess process) {\n                         process.end(-1, \"Can not find classloader by class name: \" + classLoaderClass + \".\");\n                         return;\n                     }\n+                }else {\n+                    classLoader = ClassLoader.getSystemClassLoader();\n                 }\n \n                 List<Class<?>> matchedClasses = new ArrayList<Class<?>>(",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/WebSecurityConfig.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/WebSecurityConfig.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/WebSecurityConfig.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/WebSecurityConfig.java\n@@ -1,15 +1,30 @@\n-package com.alibaba.arthas.tunnel.server.endpoint;\n+package com.alibaba.arthas.tunnel.server.app;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n+import com.alibaba.arthas.tunnel.server.app.configuration.ArthasProperties;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-08-11\n+ *\n+ */\n @Configuration\n-public class ActuatorSecurity extends WebSecurityConfigurerAdapter {\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Autowired\n+    ArthasProperties arthasProperties;\n     @Override\n     protected void configure(HttpSecurity httpSecurity) throws Exception {\n         httpSecurity.authorizeRequests().requestMatchers(EndpointRequest.toAnyEndpoint()).authenticated().anyRequest()\n-                .permitAll().and().formLogin();\n+        .permitAll().and().formLogin();\n+        // allow iframe\n+        if (arthasProperties.isEnableIframeSupport()) {\n+            httpSecurity.headers().frameOptions().disable();\n+        }\n     }\n }\n\\ No newline at end of file\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n@@ -27,6 +27,8 @@ public class ArthasProperties {\n      */\n     private boolean enableDetailPages = false;\n \n+    private boolean enableIframeSupport = true;\n+\n     public Server getServer() {\n         return server;\n     }\n@@ -51,6 +53,14 @@ public void setEnableDetailPages(boolean enableDetailPages) {\n         this.enableDetailPages = enableDetailPages;\n     }\n \n+    public boolean isEnableIframeSupport() {\n+        return enableIframeSupport;\n+    }\n+\n+    public void setEnableIframeSupport(boolean enableIframeSupport) {\n+        this.enableIframeSupport = enableIframeSupport;\n+    }\n+\n     public static class Server {\n         /**\n          * tunnel server listen host",
    "output": "disable iframe deny header by default. #1873"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -163,8 +163,14 @@ public void process(final CommandProcess process) {\n                     process.end(-1, \"The className option cannot be empty!\");\n                     return;\n                 }\n-                ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n-                if (hashCode == null && classLoaderClass != null) {\n+                ClassLoader classLoader = null;\n+                if (hashCode != null) {\n+                    classLoader = ClassLoaderUtils.getClassLoader(inst, hashCode);\n+                    if (classLoader == null) {\n+                        process.end(-1, \"Can not find classloader with hashCode: \" + hashCode + \".\");\n+                        return;\n+                    }\n+                }else if ( classLoaderClass != null) {\n                     List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst,\n                             classLoaderClass);\n                     if (matchedClassLoaders.size() == 1) {\n@@ -183,6 +189,8 @@ public void process(final CommandProcess process) {\n                         process.end(-1, \"Can not find classloader by class name: \" + classLoaderClass + \".\");\n                         return;\n                     }\n+                }else {\n+                    classLoader = ClassLoader.getSystemClassLoader();\n                 }\n \n                 List<Class<?>> matchedClasses = new ArrayList<Class<?>>(",
    "output": "fix vmtool find clasloader error with hashcode(#1885)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.3"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n@@ -29,10 +29,16 @@\n  * @author hengyunabc 2019-09-02\n  *\n  */\n+// @formatter:off\n @Name(\"vmoption\")\n @Summary(\"Display, and update the vm diagnostic options.\")\n-@Description(\"\\nExamples:\\n\" + \"  vmoption\\n\" + \"  vmoption PrintGCDetails\\n\" + \"  vmoption PrintGCDetails true\\n\"\n-                + Constants.WIKI + Constants.WIKI_HOME + \"vmoption\")\n+@Description(\"\\nExamples:\\n\" + \n+        \"  vmoption\\n\" + \n+        \"  vmoption PrintGC\\n\" + \n+        \"  vmoption PrintGC true\\n\" + \n+        \"  vmoption PrintGCDetails true\\n\" + \n+        Constants.WIKI + Constants.WIKI_HOME + \"vmoption\")\n+//@formatter:on\n public class VMOptionCommand extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(VMOptionCommand.class);\n ",
    "output": "update vmoption/vmtool doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -957,15 +957,18 @@ public static String after(String text, String after) {\n         return text.substring(pos + after.length());\n     }\n \n+    // print|(ILjava/util/List;)V\n     public static String[] splitMethodInfo(String methodInfo) {\n         int index = methodInfo.indexOf('|');\n         return new String[] { methodInfo.substring(0, index), methodInfo.substring(index + 1, methodInfo.length()) };\n     }\n \n+    // demo/MathGame|primeFactors|(I)Ljava/util/List;|24\n     public static String[] splitInvokeInfo(String invokeInfo) {\n         int index1 = invokeInfo.indexOf('|');\n         int index2 = invokeInfo.indexOf('|', index1 + 1);\n+        int index3 = invokeInfo.indexOf('|', index2 + 1);\n         return new String[] { invokeInfo.substring(0, index1), invokeInfo.substring(index1 + 1, index2),\n-                invokeInfo.substring(index2 + 1, invokeInfo.length()) };\n+                invokeInfo.substring(index2 + 1, index3), invokeInfo.substring(index3 + 1, invokeInfo.length()) };\n     }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n@@ -17,12 +17,14 @@ public void testSplitMethodInfo() throws Throwable {\n         Assertions.assertThat(StringUtils.splitMethodInfo(\"a|b\")).containsExactly(\"a\", \"b\");\n         Assertions.assertThat(StringUtils.splitMethodInfo(\"xxxxxxxxxx|fffffffffff\")).containsExactly(\"xxxxxxxxxx\",\n                 \"fffffffffff\");\n+        Assertions.assertThat(StringUtils.splitMethodInfo(\"print|(ILjava/util/List;)V\")).containsExactly(\"print\",\n+                \"(ILjava/util/List;)V\");\n     }\n \n     @Test\n     public void testSplitInvokeInfo() throws Throwable {\n-        Assertions.assertThat(StringUtils.splitInvokeInfo(\"a|b|c\")).containsExactly(\"a\", \"b\", \"c\");\n-        Assertions.assertThat(StringUtils.splitInvokeInfo(\"xxxxxxxxxx|fffffffffff|yyy\")).containsExactly(\"xxxxxxxxxx\",\n-                \"fffffffffff\", \"yyy\");\n+        Assertions.assertThat(StringUtils.splitInvokeInfo(\"demo/MathGame|primeFactors|(I)Ljava/util/List;|24\"))\n+                .containsExactly(\"demo/MathGame\", \"primeFactors\", \"(I)Ljava/util/List;\", \"24\");\n+\n     }\n }",
    "output": "fix imporve split methodInfo/invokeInfo. #1860"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -1,6 +1,8 @@\n package com.taobao.arthas.core.command.monitor200;\n \n import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.security.CodeSource;\n import java.text.SimpleDateFormat;\n@@ -14,6 +16,7 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.common.IOUtils;\n import com.taobao.arthas.common.OSUtils;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.model.ProfilerModel;\n@@ -30,6 +33,7 @@\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n \n+import arthas.VmTool;\n import one.profiler.AsyncProfiler;\n import one.profiler.Counter;\n \n@@ -243,6 +247,23 @@ private AsyncProfiler profilerInstance() {\n \n         if (libPath != null) {\n             // load from arthas directory\n+            // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n+            FileOutputStream tmpLibOutputStream = null;\n+            FileInputStream libInputStream = null;\n+            try {\n+                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n+                tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n+                libInputStream = new FileInputStream(new File(libPath));\n+\n+                IOUtils.copy(libInputStream, tmpLibOutputStream);\n+                libPath = tmpLibFile.getAbsolutePath();\n+                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n+            } catch (Throwable e) {\n+                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n+            } finally {\n+                IOUtils.close(libInputStream);\n+                IOUtils.close(tmpLibOutputStream);\n+            }\n             profiler = AsyncProfiler.getInstance(libPath);\n         } else {\n             if (OSUtils.isLinux() || OSUtils.isMac()) {",
    "output": "move one.profiler from arthas-spy to arthas-core. #1796"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -195,15 +195,12 @@ public static int process(String[] args) throws IOException, InterruptedExceptio\n      * arthas client 主函数\n      * 注意： process()函数提供给arthas-boot使用，内部不能调用System.exit()结束进程的方法\n      *\n-     * @param telnetConsole\n-     * @param cli\n      * @param args\n      * @param eotEventCallback Ctrl+D signals an End of Transmission (EOT) event\n      * @return status code\n      * @throws IOException\n-     * @throws InterruptedException\n      */\n-    public static int process(String[] args, ActionListener eotEventCallback) throws IOException, InterruptedException {\n+    public static int process(String[] args, ActionListener eotEventCallback) throws IOException {\n         // support mingw/cygw jline color\n         if (OSUtils.isCygwinOrMinGW()) {\n             System.setProperty(\"jline.terminal\", System.getProperty(\"jline.terminal\", \"jline.UnixTerminal\"));",
    "output": "fix method signature/javadoc (#1869)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java b/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n@@ -2,12 +2,12 @@\n \n import java.arthas.SpyAPI.AbstractSpy;\n import java.util.List;\n-import java.util.regex.Pattern;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.shell.system.ExecStatus;\n import com.taobao.arthas.core.shell.system.ProcessAware;\n+import com.taobao.arthas.core.util.StringUtils;\n \n /**\n  * <pre>\n@@ -27,7 +27,7 @@ public class SpyImpl extends AbstractSpy {\n     public void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] args) {\n         ClassLoader classLoader = clazz.getClassLoader();\n \n-        String[] info = splitMethodInfo(methodInfo);\n+        String[] info = StringUtils.splitMethodInfo(methodInfo);\n         String methodName = info[0];\n         String methodDesc = info[1];\n         // TODO listener 只用查一次，放到 thread local里保存起来就可以了！\n@@ -52,7 +52,7 @@ public void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] a\n     public void atExit(Class<?> clazz, String methodInfo, Object target, Object[] args, Object returnObject) {\n         ClassLoader classLoader = clazz.getClassLoader();\n \n-        String[] info = splitMethodInfo(methodInfo);\n+        String[] info = StringUtils.splitMethodInfo(methodInfo);\n         String methodName = info[0];\n         String methodDesc = info[1];\n \n@@ -76,7 +76,7 @@ public void atExit(Class<?> clazz, String methodInfo, Object target, Object[] ar\n     public void atExceptionExit(Class<?> clazz, String methodInfo, Object target, Object[] args, Throwable throwable) {\n         ClassLoader classLoader = clazz.getClassLoader();\n \n-        String[] info = splitMethodInfo(methodInfo);\n+        String[] info = StringUtils.splitMethodInfo(methodInfo);\n         String methodName = info[0];\n         String methodDesc = info[1];\n \n@@ -99,7 +99,7 @@ public void atExceptionExit(Class<?> clazz, String methodInfo, Object target, Ob\n     @Override\n     public void atBeforeInvoke(Class<?> clazz, String invokeInfo, Object target) {\n         ClassLoader classLoader = clazz.getClassLoader();\n-        String[] info = splitInvokeInfo(invokeInfo);\n+        String[] info = StringUtils.splitInvokeInfo(invokeInfo);\n         String owner = info[0];\n         String methodName = info[1];\n         String methodDesc = info[2];\n@@ -125,7 +125,7 @@ public void atBeforeInvoke(Class<?> clazz, String invokeInfo, Object target) {\n     @Override\n     public void atAfterInvoke(Class<?> clazz, String invokeInfo, Object target) {\n         ClassLoader classLoader = clazz.getClassLoader();\n-        String[] info = splitInvokeInfo(invokeInfo);\n+        String[] info = StringUtils.splitInvokeInfo(invokeInfo);\n         String owner = info[0];\n         String methodName = info[1];\n         String methodDesc = info[2];\n@@ -151,7 +151,7 @@ public void atAfterInvoke(Class<?> clazz, String invokeInfo, Object target) {\n     @Override\n     public void atInvokeException(Class<?> clazz, String invokeInfo, Object target, Throwable throwable) {\n         ClassLoader classLoader = clazz.getClassLoader();\n-        String[] info = splitInvokeInfo(invokeInfo);\n+        String[] info = StringUtils.splitInvokeInfo(invokeInfo);\n         String owner = info[0];\n         String methodName = info[1];\n         String methodDesc = info[2];\n@@ -174,15 +174,7 @@ public void atInvokeException(Class<?> clazz, String invokeInfo, Object target,\n         }\n     }\n \n-    private String[] splitMethodInfo(String methodInfo) {\n-        return methodInfo.split(Pattern.quote(\"|\"));\n-    }\n-\n-    private String[] splitInvokeInfo(String invokeInfo) {\n-        return invokeInfo.split(Pattern.quote(\"|\"));\n-    }\n-\n-    private boolean skipAdviceListener(AdviceListener adviceListener) {\n+    private static boolean skipAdviceListener(AdviceListener adviceListener) {\n         if (adviceListener instanceof ProcessAware) {\n             ProcessAware processAware = (ProcessAware) adviceListener;\n             ExecStatus status = processAware.getProcess().status();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -956,4 +956,16 @@ public static String after(String text, String after) {\n         }\n         return text.substring(pos + after.length());\n     }\n+\n+    public static String[] splitMethodInfo(String methodInfo) {\n+        int index = methodInfo.indexOf('|');\n+        return new String[] { methodInfo.substring(0, index), methodInfo.substring(index + 1, methodInfo.length()) };\n+    }\n+\n+    public static String[] splitInvokeInfo(String invokeInfo) {\n+        int index1 = invokeInfo.indexOf('|');\n+        int index2 = invokeInfo.indexOf('|', index1 + 1);\n+        return new String[] { invokeInfo.substring(0, index1), invokeInfo.substring(index1 + 1, index2),\n+                invokeInfo.substring(index2 + 1, invokeInfo.length()) };\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/SpyImplTest.java\n@@ -0,0 +1,28 @@\n+package com.taobao.arthas.core.advisor;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n+import com.taobao.arthas.core.util.StringUtils;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-07-14\n+ *\n+ */\n+public class SpyImplTest {\n+\n+    @Test\n+    public void testSplitMethodInfo() throws Throwable {\n+        Assertions.assertThat(StringUtils.splitMethodInfo(\"a|b\")).containsExactly(\"a\", \"b\");\n+        Assertions.assertThat(StringUtils.splitMethodInfo(\"xxxxxxxxxx|fffffffffff\")).containsExactly(\"xxxxxxxxxx\",\n+                \"fffffffffff\");\n+    }\n+\n+    @Test\n+    public void testSplitInvokeInfo() throws Throwable {\n+        Assertions.assertThat(StringUtils.splitInvokeInfo(\"a|b|c\")).containsExactly(\"a\", \"b\", \"c\");\n+        Assertions.assertThat(StringUtils.splitInvokeInfo(\"xxxxxxxxxx|fffffffffff|yyy\")).containsExactly(\"xxxxxxxxxx\",\n+                \"fffffffffff\", \"yyy\");\n+    }\n+}",
    "output": "imporve split methodInfo/invokeInfo. #1860"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -132,8 +132,14 @@ public class Bootstrap {\n     private String disabledCommands;\n \n \tstatic {\n-        ARTHAS_LIB_DIR = new File(\n-                System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n+        String arthasLibDirEnv = System.getenv(\"ARTHAS_LIB_DIR\");\n+        if (arthasLibDirEnv != null) {\n+            ARTHAS_LIB_DIR = new File(arthasLibDirEnv);\n+        } else {\n+            ARTHAS_LIB_DIR = new File(\n+                    System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n+        }\n+\n         try {\n             ARTHAS_LIB_DIR.mkdirs();\n         } catch (Throwable t) {",
    "output": "support ARTHAS_LIB_DIR env. close #1861"
  },
  {
    "input": "diff --git a/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplicationTest.java b/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplicationTest.java\n--- a/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplicationTest.java\n+++ b/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplicationTest.java\n@@ -0,0 +1,22 @@\n+package com.alibaba.arthas.tunnel.server.app;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-07-12\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = { ArthasTunnelApplication.class })\n+public class ArthasTunnelApplicationTest {\n+\n+    @Test\n+    public void contextLoads() {\n+        System.out.println(\"hello\");\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "add ArthasTunnelApplicationTest"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -292,24 +292,25 @@ private static String arthasHome() {\n         return ARTHAS_HOME;\n     }\n \n+    static String reslove(ArthasEnvironment arthasEnvironment, String key, String defaultValue) {\n+        String value = arthasEnvironment.getProperty(key);\n+        if (value == null) {\n+            return defaultValue;\n+        }\n+        return arthasEnvironment.resolvePlaceholders(value);\n+    }\n+\n     // try to load arthas.properties\n     private void tryToLoadArthasProperties() throws IOException {\n         this.arthasEnvironment.resolvePlaceholders(CONFIG_LOCATION_PROPERTY);\n \n-        String location = null;\n-\n-        if (arthasEnvironment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n-            location = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_LOCATION_PROPERTY));\n-        }\n+        String location = reslove(arthasEnvironment, CONFIG_LOCATION_PROPERTY, null);\n \n         if (location == null) {\n             location = arthasHome();\n         }\n \n-        String configName = \"arthas\";\n-        if (arthasEnvironment.containsProperty(CONFIG_NAME_PROPERTY)) {\n-            configName = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_NAME_PROPERTY));\n-        }\n+        String configName = reslove(arthasEnvironment, CONFIG_NAME_PROPERTY, \"arthas\");\n \n         if (location != null) {\n             if (!location.endsWith(\".properties\")) {\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n@@ -13,6 +13,7 @@\n import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.core.bytecode.TestHelper;\n import com.taobao.arthas.core.config.Configure;\n+import com.taobao.arthas.core.env.ArthasEnvironment;\n \n import net.bytebuddy.agent.ByteBuddyAgent;\n \n@@ -60,4 +61,43 @@ public void test() throws Exception {\n         System.err.println(loadClass);\n \n     }\n+\n+    @Test\n+    public void testConfigLocationNull() throws Exception {\n+        ArthasEnvironment arthasEnvironment = new ArthasEnvironment();\n+        String location = ArthasBootstrap.reslove(arthasEnvironment, ArthasBootstrap.CONFIG_LOCATION_PROPERTY, null);\n+        assertThat(location).isEqualTo(null);\n+    }\n+\n+    @Test\n+    public void testConfigLocation() throws Exception {\n+        ArthasEnvironment arthasEnvironment = new ArthasEnvironment();\n+\n+        System.setProperty(\"hhhh\", \"fff\");\n+        System.setProperty(ArthasBootstrap.CONFIG_LOCATION_PROPERTY, \"test${hhhh}\");\n+\n+        String location = ArthasBootstrap.reslove(arthasEnvironment, ArthasBootstrap.CONFIG_LOCATION_PROPERTY, null);\n+        System.clearProperty(\"hhhh\");\n+        System.clearProperty(ArthasBootstrap.CONFIG_LOCATION_PROPERTY);\n+\n+        assertThat(location).isEqualTo(\"test\" + \"fff\");\n+    }\n+\n+    @Test\n+    public void testConfigNameDefault() throws Exception {\n+        ArthasEnvironment arthasEnvironment = new ArthasEnvironment();\n+\n+        String configName = ArthasBootstrap.reslove(arthasEnvironment, ArthasBootstrap.CONFIG_NAME_PROPERTY, \"arthas\");\n+        assertThat(configName).isEqualTo(\"arthas\");\n+    }\n+\n+    @Test\n+    public void testConfigName() throws Exception {\n+        ArthasEnvironment arthasEnvironment = new ArthasEnvironment();\n+\n+        System.setProperty(ArthasBootstrap.CONFIG_NAME_PROPERTY, \"testName\");\n+        String configName = ArthasBootstrap.reslove(arthasEnvironment, ArthasBootstrap.CONFIG_NAME_PROPERTY, \"arthas\");\n+        System.clearProperty(ArthasBootstrap.CONFIG_NAME_PROPERTY);\n+        assertThat(configName).isEqualTo(\"testName\");\n+    }\n }",
    "output": "polish #1852"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -299,7 +299,7 @@ private void tryToLoadArthasProperties() throws IOException {\n         String location = null;\n \n         if (arthasEnvironment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n-            location = arthasEnvironment.resolvePlaceholders(CONFIG_LOCATION_PROPERTY);\n+            location = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_LOCATION_PROPERTY));\n         }\n \n         if (location == null) {\n@@ -308,7 +308,7 @@ private void tryToLoadArthasProperties() throws IOException {\n \n         String configName = \"arthas\";\n         if (arthasEnvironment.containsProperty(CONFIG_NAME_PROPERTY)) {\n-            configName = arthasEnvironment.resolvePlaceholders(CONFIG_NAME_PROPERTY);\n+            configName = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_NAME_PROPERTY));\n         }\n \n         if (location != null) {",
    "output": "fix ArthasBootstrap load arthas.properties with arthas.config.location/arthas.config.name config (#1852)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n@@ -31,6 +31,9 @@ public static Set<Class<?>> searchClass(Instrumentation inst, Matcher<String> cl\n         }\n         final Set<Class<?>> matches = new HashSet<Class<?>>();\n         for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            if (clazz == null) {\n+                continue;   \n+            }\n             if (classNameMatcher.matching(clazz.getName())) {\n                 matches.add(clazz);\n             }\n@@ -107,6 +110,9 @@ public static Matcher<String> classNameMatcher(String classPattern, boolean isRe\n     public static Set<Class<?>> searchSubClass(Instrumentation inst, Set<Class<?>> classSet) {\n         final Set<Class<?>> matches = new HashSet<Class<?>>();\n         for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            if (clazz == null) {\n+                continue;   \n+            }\n             for (Class<?> superClass : classSet) {\n                 if (superClass.isAssignableFrom(clazz)) {\n                     matches.add(clazz);",
    "output": "fix: inst#getAllLoadedClasses() may cause NullPointerException when search class(IBM jvm 1.7) (#1840)"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n@@ -2,6 +2,7 @@\n \n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -80,6 +81,28 @@ public Map<String, AgentClusterInfo> tunnelAgentIds(@RequestParam(value = \"app\",\n         return Collections.emptyMap();\n     }\n \n+    /**\n+     * check if agentId exists\n+     * @param agentId\n+     * @return\n+     */\n+    @RequestMapping(\"/api/tunnelAgents\")\n+    @ResponseBody\n+    public Map<String, Object> tunnelAgentIds(@RequestParam(value = \"agentId\", required = true) String agentId) {\n+        Map<String, Object> result = new HashMap<String, Object>();\n+        boolean success = false;\n+        try {\n+            AgentClusterInfo info = tunnelClusterStore.findAgent(agentId);\n+            if (info != null) {\n+                success = true;\n+            }\n+        } catch (Throwable e) {\n+            logger.error(\"try to find agentId error, id: {}\", agentId, e);\n+        }\n+        result.put(\"success\", success);\n+        return result;\n+    }\n+\n     private static String findAppNameFromAgentId(String id) {\n         int index = id.indexOf('_');\n         if (index < 0 || index >= id.length()) {",
    "output": "add /api/tunnelAgents?agentId API. #1839"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -119,7 +119,7 @@ public void process(CommandProcess process) {\n         if (this.name != null && this.level != null) {\n             level(process);\n         } else {\n-            loggers(process, name);\n+            loggers(process);\n         }\n     }\n \n@@ -160,7 +160,7 @@ public void level(CommandProcess process) {\n         }\n     }\n \n-    public void loggers(CommandProcess process, String name) {\n+    public void loggers(CommandProcess process) {\n         Map<ClassLoader, LoggerTypes> classLoaderLoggerMap = new LinkedHashMap<ClassLoader, LoggerTypes>();\n \n         for (Class<?> clazz : process.session().getInstrumentation().getAllLoadedClasses()) {",
    "output": "delete useless parameter \"name\" (#1822)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.2"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -1,5 +1,9 @@\n package com.taobao.arthas.core.command;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.taobao.arthas.core.command.basic1000.AuthCommand;\n import com.taobao.arthas.core.command.basic1000.Base64Command;\n import com.taobao.arthas.core.command.basic1000.CatCommand;\n import com.taobao.arthas.core.command.basic1000.ClsCommand;\n@@ -9,12 +13,9 @@\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n import com.taobao.arthas.core.command.basic1000.KeymapCommand;\n import com.taobao.arthas.core.command.basic1000.OptionsCommand;\n-import com.alibaba.bytekit.utils.AnnotationUtils;\n-import com.taobao.arthas.core.command.basic1000.AuthCommand;\n import com.taobao.arthas.core.command.basic1000.PwdCommand;\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n-import com.taobao.arthas.core.command.basic1000.ShutdownCommand;\n import com.taobao.arthas.core.command.basic1000.StopCommand;\n import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n@@ -52,9 +53,6 @@\n import com.taobao.arthas.core.shell.command.CommandResolver;\n import com.taobao.middleware.cli.annotations.Name;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n /**\n  * TODO automatically discover the built-in commands.\n  * @author beiwei30 on 17/11/2016.\n@@ -119,7 +117,6 @@ private void initCommands(List<String> disabledCommands) {\n         commandClassList.add(TeeCommand.class);\n         commandClassList.add(ProfilerCommand.class);\n         commandClassList.add(VmToolCommand.class);\n-        commandClassList.add(ShutdownCommand.class);\n         commandClassList.add(StopCommand.class);\n \n         for (Class<? extends AnnotatedCommand> clazz : commandClassList) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n@@ -1,50 +0,0 @@\n-package com.taobao.arthas.core.command.basic1000;\n-\n-import com.alibaba.arthas.deps.org.slf4j.Logger;\n-import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n-import com.taobao.arthas.core.command.model.MessageModel;\n-import com.taobao.arthas.core.command.model.ResetModel;\n-import com.taobao.arthas.core.command.model.ShutdownModel;\n-import com.taobao.arthas.core.server.ArthasBootstrap;\n-import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n-import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.arthas.core.util.affect.EnhancerAffect;\n-import com.taobao.middleware.cli.annotations.Hidden;\n-import com.taobao.middleware.cli.annotations.Name;\n-import com.taobao.middleware.cli.annotations.Summary;\n-\n-/**\n- * 关闭命令\n- *\n- * @author vlinux on 14/10/23.\n- * @see StopCommand\n- */\n-@Name(\"shutdown\")\n-@Summary(\"Shutdown Arthas server and exit the console\")\n-@Hidden\n-public class ShutdownCommand extends AnnotatedCommand {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(ShutdownCommand.class);\n-\n-    @Override\n-    public void process(CommandProcess process) {\n-        shutdown(process);\n-    }\n-\n-    public static void shutdown(CommandProcess process) {\n-        ArthasBootstrap arthasBootstrap = ArthasBootstrap.getInstance();\n-        try {\n-            // 退出之前需要重置所有的增强类\n-            process.appendResult(new MessageModel(\"Resetting all enhanced classes ...\"));\n-            EnhancerAffect enhancerAffect = arthasBootstrap.reset();\n-            process.appendResult(new ResetModel(enhancerAffect));\n-            process.appendResult(new ShutdownModel(true, \"Arthas Server is going to shut down...\"));\n-        } catch (Throwable e) {\n-            logger.error(\"An error occurred when stopping arthas server.\", e);\n-            process.appendResult(new ShutdownModel(false, \"An error occurred when stopping arthas server.\"));\n-        } finally {\n-            process.end();\n-            arthasBootstrap.destroy();\n-        }\n-    }\n-}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n@@ -1,20 +1,42 @@\n package com.taobao.arthas.core.command.basic1000;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.core.command.model.MessageModel;\n+import com.taobao.arthas.core.command.model.ResetModel;\n+import com.taobao.arthas.core.command.model.ShutdownModel;\n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Summary;\n \n /**\n- * Alias for ShutdownCommand\n  * @author hengyunabc 2019-07-05\n- * @see ShutdownCommand\n  */\n @Name(\"stop\")\n @Summary(\"Stop/Shutdown Arthas server and exit the console.\")\n public class StopCommand extends AnnotatedCommand {\n+    private static final Logger logger = LoggerFactory.getLogger(StopCommand.class);\n     @Override\n     public void process(CommandProcess process) {\n-        ShutdownCommand.shutdown(process);\n+        shutdown(process);\n+    }\n+    private static void shutdown(CommandProcess process) {\n+        ArthasBootstrap arthasBootstrap = ArthasBootstrap.getInstance();\n+        try {\n+            // 退出之前需要重置所有的增强类\n+            process.appendResult(new MessageModel(\"Resetting all enhanced classes ...\"));\n+            EnhancerAffect enhancerAffect = arthasBootstrap.reset();\n+            process.appendResult(new ResetModel(enhancerAffect));\n+            process.appendResult(new ShutdownModel(true, \"Arthas Server is going to shutdown...\"));\n+        } catch (Throwable e) {\n+            logger.error(\"An error occurred when stopping arthas server.\", e);\n+            process.appendResult(new ShutdownModel(false, \"An error occurred when stopping arthas server.\"));\n+        } finally {\n+            process.end();\n+            arthasBootstrap.destroy();\n+        }\n     }\n }",
    "output": "remove shutdown command. close #1799"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -9,6 +9,7 @@\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n import com.taobao.arthas.core.command.basic1000.KeymapCommand;\n import com.taobao.arthas.core.command.basic1000.OptionsCommand;\n+import com.alibaba.bytekit.utils.AnnotationUtils;\n import com.taobao.arthas.core.command.basic1000.AuthCommand;\n import com.taobao.arthas.core.command.basic1000.PwdCommand;\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n@@ -46,8 +47,10 @@\n import com.taobao.arthas.core.command.monitor200.TraceCommand;\n import com.taobao.arthas.core.command.monitor200.VmToolCommand;\n import com.taobao.arthas.core.command.monitor200.WatchCommand;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.Command;\n import com.taobao.arthas.core.shell.command.CommandResolver;\n+import com.taobao.middleware.cli.annotations.Name;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -58,64 +61,75 @@\n  */\n public class BuiltinCommandPack implements CommandResolver {\n \n-    private static List<Command> commands = new ArrayList<Command>();\n+    private List<Command> commands = new ArrayList<Command>();\n \n-    static {\n-        initCommands();\n+    public BuiltinCommandPack(List<String> disabledCommands) {\n+        initCommands(disabledCommands);\n     }\n \n     @Override\n     public List<Command> commands() {\n         return commands;\n     }\n \n-    private static void initCommands() {\n-        commands.add(Command.create(HelpCommand.class));\n-        commands.add(Command.create(AuthCommand.class));\n-        commands.add(Command.create(KeymapCommand.class));\n-        commands.add(Command.create(SearchClassCommand.class));\n-        commands.add(Command.create(SearchMethodCommand.class));\n-        commands.add(Command.create(ClassLoaderCommand.class));\n-        commands.add(Command.create(JadCommand.class));\n-        commands.add(Command.create(GetStaticCommand.class));\n-        commands.add(Command.create(MonitorCommand.class));\n-        commands.add(Command.create(StackCommand.class));\n-        commands.add(Command.create(ThreadCommand.class));\n-        commands.add(Command.create(TraceCommand.class));\n-        commands.add(Command.create(WatchCommand.class));\n-        commands.add(Command.create(TimeTunnelCommand.class));\n-        commands.add(Command.create(JvmCommand.class));\n-        commands.add(Command.create(PerfCounterCommand.class));\n-        // commands.add(Command.create(GroovyScriptCommand.class));\n-        commands.add(Command.create(OgnlCommand.class));\n-        commands.add(Command.create(MemoryCompilerCommand.class));\n-        commands.add(Command.create(RedefineCommand.class));\n-        commands.add(Command.create(RetransformCommand.class));\n-        commands.add(Command.create(DashboardCommand.class));\n-        commands.add(Command.create(DumpClassCommand.class));\n-        commands.add(Command.create(HeapDumpCommand.class));\n-        commands.add(Command.create(JulyCommand.class));\n-        commands.add(Command.create(ThanksCommand.class));\n-        commands.add(Command.create(OptionsCommand.class));\n-        commands.add(Command.create(ClsCommand.class));\n-        commands.add(Command.create(ResetCommand.class));\n-        commands.add(Command.create(VersionCommand.class));\n-        commands.add(Command.create(SessionCommand.class));\n-        commands.add(Command.create(SystemPropertyCommand.class));\n-        commands.add(Command.create(SystemEnvCommand.class));\n-        commands.add(Command.create(VMOptionCommand.class));\n-        commands.add(Command.create(LoggerCommand.class));\n-        commands.add(Command.create(HistoryCommand.class));\n-        commands.add(Command.create(CatCommand.class));\n-        commands.add(Command.create(Base64Command.class));\n-        commands.add(Command.create(EchoCommand.class));\n-        commands.add(Command.create(PwdCommand.class));\n-        commands.add(Command.create(MBeanCommand.class));\n-        commands.add(Command.create(GrepCommand.class));\n-        commands.add(Command.create(TeeCommand.class));\n-        commands.add(Command.create(ProfilerCommand.class));\n-        commands.add(Command.create(VmToolCommand.class));\n-        commands.add(Command.create(ShutdownCommand.class));\n-        commands.add(Command.create(StopCommand.class));\n+    private void initCommands(List<String> disabledCommands) {\n+        List<Class<? extends AnnotatedCommand>> commandClassList = new ArrayList<Class<? extends AnnotatedCommand>>(32);\n+        commandClassList.add(HelpCommand.class);\n+        commandClassList.add(AuthCommand.class);\n+        commandClassList.add(KeymapCommand.class);\n+        commandClassList.add(SearchClassCommand.class);\n+        commandClassList.add(SearchMethodCommand.class);\n+        commandClassList.add(ClassLoaderCommand.class);\n+        commandClassList.add(JadCommand.class);\n+        commandClassList.add(GetStaticCommand.class);\n+        commandClassList.add(MonitorCommand.class);\n+        commandClassList.add(StackCommand.class);\n+        commandClassList.add(ThreadCommand.class);\n+        commandClassList.add(TraceCommand.class);\n+        commandClassList.add(WatchCommand.class);\n+        commandClassList.add(TimeTunnelCommand.class);\n+        commandClassList.add(JvmCommand.class);\n+        commandClassList.add(PerfCounterCommand.class);\n+        // commandClassList.add(GroovyScriptCommand.class);\n+        commandClassList.add(OgnlCommand.class);\n+        commandClassList.add(MemoryCompilerCommand.class);\n+        commandClassList.add(RedefineCommand.class);\n+        commandClassList.add(RetransformCommand.class);\n+        commandClassList.add(DashboardCommand.class);\n+        commandClassList.add(DumpClassCommand.class);\n+        commandClassList.add(HeapDumpCommand.class);\n+        commandClassList.add(JulyCommand.class);\n+        commandClassList.add(ThanksCommand.class);\n+        commandClassList.add(OptionsCommand.class);\n+        commandClassList.add(ClsCommand.class);\n+        commandClassList.add(ResetCommand.class);\n+        commandClassList.add(VersionCommand.class);\n+        commandClassList.add(SessionCommand.class);\n+        commandClassList.add(SystemPropertyCommand.class);\n+        commandClassList.add(SystemEnvCommand.class);\n+        commandClassList.add(VMOptionCommand.class);\n+        commandClassList.add(LoggerCommand.class);\n+        commandClassList.add(HistoryCommand.class);\n+        commandClassList.add(CatCommand.class);\n+        commandClassList.add(Base64Command.class);\n+        commandClassList.add(EchoCommand.class);\n+        commandClassList.add(PwdCommand.class);\n+        commandClassList.add(MBeanCommand.class);\n+        commandClassList.add(GrepCommand.class);\n+        commandClassList.add(TeeCommand.class);\n+        commandClassList.add(ProfilerCommand.class);\n+        commandClassList.add(VmToolCommand.class);\n+        commandClassList.add(ShutdownCommand.class);\n+        commandClassList.add(StopCommand.class);\n+\n+        for (Class<? extends AnnotatedCommand> clazz : commandClassList) {\n+            Name name = clazz.getAnnotation(Name.class);\n+            if (name != null && name.value() != null) {\n+                if (disabledCommands.contains(name.value())) {\n+                    continue;\n+                }\n+            }\n+            commands.add(Command.create(clazz));\n+        }\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -70,6 +70,7 @@\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.UserStatUtil;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n@@ -393,7 +394,17 @@ private void bind(Configure configure) throws Throwable {\n             this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n \n             shellServer = new ShellServerImpl(options);\n-            BuiltinCommandPack builtinCommands = new BuiltinCommandPack();\n+\n+            List<String> disabledCommands = new ArrayList<String>();\n+            if (configure.getDisabledCommands() != null) {\n+                String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n+                if (strings != null) {\n+                    for (String s : strings) {\n+                        disabledCommands.add(s);\n+                    }\n+                }\n+            }\n+            BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n             List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n             resolvers.add(builtinCommands);\n ",
    "output": "support disabledCommands part 2. #1729"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n@@ -34,6 +34,10 @@ public class ArthasProperties {\n \t * when arthas agent init error will throw exception by default.\n \t */\n \tprivate boolean slientInit = false;\n+\t/**\n+\t * disabled commands，default disable stop command\n+\t */\n+\tprivate String disabledCommands = \"stop\";\n \n \tpublic String getHome() {\n \t\treturn home;\n@@ -115,4 +119,11 @@ public void setAppName(String appName) {\n         this.appName = appName;\n     }\n \n+\tpublic String getDisabledCommands() {\n+\t\treturn disabledCommands;\n+\t}\n+\n+\tpublic void setDisabledCommands(String disabledCommands) {\n+\t\tthis.disabledCommands = disabledCommands;\n+\t}\n }\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -1,5 +1,8 @@\n package com.taobao.arthas.boot;\n \n+import static com.taobao.arthas.boot.ProcessUtils.STATUS_EXEC_ERROR;\n+import static com.taobao.arthas.boot.ProcessUtils.STATUS_EXEC_TIMEOUT;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n@@ -11,12 +14,12 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.InputMismatchException;\n import java.util.List;\n import java.util.Scanner;\n import java.util.TimeZone;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n-import java.util.InputMismatchException;\n \n import javax.xml.parsers.ParserConfigurationException;\n \n@@ -36,9 +39,6 @@\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n \n-import static com.taobao.arthas.boot.ProcessUtils.STATUS_EXEC_ERROR;\n-import static com.taobao.arthas.boot.ProcessUtils.STATUS_EXEC_TIMEOUT;\n-\n /**\n  * @author hengyunabc 2018-10-26\n  *\n@@ -57,6 +57,7 @@\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n+                + \"  java -jar arthas-boot.jar --disabled-commands stop,dump\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"\n                 + \"  https://arthas.aliyun.com/doc\\n\")\n public class Bootstrap {\n@@ -128,6 +129,8 @@ public class Bootstrap {\n \n     private String select;\n \n+    private String disabledCommands;\n+\n \tstatic {\n         ARTHAS_LIB_DIR = new File(\n                 System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n@@ -293,6 +296,12 @@ public void setSelect(String select) {\n         this.select = select;\n     }\n \n+    @Option(longName = \"disabled-commands\")\n+    @Description(\"disable some commands \")\n+    public void setDisabledCommands(String disabledCommands) {\n+        this.disabledCommands = disabledCommands;\n+    }\n+\n     public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException,\n                     ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException,\n                     IllegalArgumentException, InvocationTargetException {\n@@ -547,6 +556,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                 attachArgs.add(bootstrap.getStatUrl());\n             }\n \n+            if (bootstrap.getDisabledCommands() != null){\n+                attachArgs.add(\"-disabled-commands\");\n+                attachArgs.add(bootstrap.getDisabledCommands());\n+            }\n+\n             AnsiLog.info(\"Try to attach process \" + pid);\n             AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n             ProcessUtils.startArthasCore(pid, attachArgs);\n@@ -849,4 +863,8 @@ public String getUsername() {\n     public String getPassword() {\n         return password;\n     }\n+\n+    public String getDisabledCommands() {\n+        return disabledCommands;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -46,11 +46,12 @@ private Configure parse(String[] args) {\n         Option appName = new TypedOption<String>().setType(String.class).setShortName(ArthasConstants.APP_NAME);\n \n         Option statUrl = new TypedOption<String>().setType(String.class).setShortName(\"stat-url\");\n+        Option disabledCommands = new TypedOption<String>().setType(String.class).setShortName(\"disabled-commands\");\n \n         CLI cli = CLIs.create(\"arthas\").addOption(pid).addOption(core).addOption(agent).addOption(target)\n                 .addOption(telnetPort).addOption(httpPort).addOption(sessionTimeout)\n                 .addOption(username).addOption(password)\n-                .addOption(tunnelServer).addOption(agentId).addOption(appName).addOption(statUrl);\n+                .addOption(tunnelServer).addOption(agentId).addOption(appName).addOption(statUrl).addOption(disabledCommands);\n         CommandLine commandLine = cli.parse(Arrays.asList(args));\n \n         Configure configure = new Configure();\n@@ -78,6 +79,7 @@ private Configure parse(String[] args) {\n         configure.setTunnelServer((String) commandLine.getOptionValue(\"tunnel-server\"));\n         configure.setAgentId((String) commandLine.getOptionValue(\"agent-id\"));\n         configure.setStatUrl((String) commandLine.getOptionValue(\"stat-url\"));\n+        configure.setDisabledCommands((String) commandLine.getOptionValue(\"disabled-commands\"));\n         configure.setAppName((String) commandLine.getOptionValue(ArthasConstants.APP_NAME));\n         return configure;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -60,6 +60,11 @@ public class Configure {\n      */\n     private Long sessionTimeout;\n \n+    /**\n+     * disabled commands\n+     */\n+    private String disabledCommands;\n+\n     public String getIp() {\n         return ip;\n     }\n@@ -180,6 +185,14 @@ public void setPassword(String password) {\n         this.password = password;\n     }\n \n+    public String getDisabledCommands() {\n+        return disabledCommands;\n+    }\n+\n+    public void setDisabledCommands(String disabledCommands) {\n+        this.disabledCommands = disabledCommands;\n+    }\n+\n     /**\n      * 序列化成字符串\n      *",
    "output": "support disabledCommands part 1. #1729"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n@@ -81,8 +81,11 @@ public TraceCommand getCommand() {\n     private void finishing(ClassLoader loader, Advice advice) {\n         // 本次调用的耗时\n         TraceEntity traceEntity = threadLocalTraceEntity(loader);\n-        double cost = threadLocalWatch.costInMillis();\n-        if (--traceEntity.deep == 0) {\n+        if (traceEntity.deep >= 1) { // #1817 防止deep为负数\n+            traceEntity.deep--;\n+        }\n+        if (traceEntity.deep == 0) {\n+            double cost = threadLocalWatch.costInMillis();\n             try {\n                 boolean conditionResult = isConditionMet(command.getConditionExpress(), advice, cost);\n                 if (this.isVerbose()) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n@@ -18,14 +18,6 @@ public TraceEntity(ClassLoader loader) {\n         this.deep = 0;\n     }\n \n-    public int getDeep() {\n-        return deep;\n-    }\n-\n-    public void setDeep(int deep) {\n-        this.deep = deep;\n-    }\n-\n     private TraceTree createTraceTree(ClassLoader loader) {\n         return new TraceTree(ThreadUtil.getThreadNode(loader, Thread.currentThread()));\n     }",
    "output": "fix trace command may not print result problem. #1817"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n@@ -71,6 +71,22 @@ public Session getSession(String sessionId) {\n \n     @Override\n     public Session removeSession(String sessionId) {\n+        Session session = sessions.get(sessionId);\n+        if (session == null) {\n+            return null;\n+        }\n+\n+        //interrupt foreground job\n+        Job job = session.getForegroundJob();\n+        if (job != null) {\n+            job.interrupt();\n+        }\n+\n+        SharingResultDistributor resultDistributor = session.getResultDistributor();\n+        if (resultDistributor != null) {\n+            resultDistributor.close();\n+        }\n+\n         return sessions.remove(sessionId);\n     }\n \n@@ -92,7 +108,6 @@ public void close() {\n             SharingResultDistributor resultDistributor = session.getResultDistributor();\n             if (resultDistributor != null) {\n                 resultDistributor.appendResult(new MessageModel(\"arthas server is going to shutdown.\"));\n-                resultDistributor.close();\n             }\n             logger.info(\"Removing session before shutdown: {}, last access time: {}\", session.getSessionId(), session.getLastAccessTime());\n             this.removeSession(session.getSessionId());",
    "output": "Close ResultDistributor and foreground job when close session #1808"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -313,8 +313,8 @@ public static int startArthasClient(String arthasHomeDir, List<String> telnetArg\n         // find arthas-client.jar\n         URLClassLoader classLoader = new URLClassLoader(\n                 new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n-        Class<?> telnetConsoleClas = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n-        Method processMethod = telnetConsoleClas.getMethod(\"process\", String[].class);\n+        Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n+        Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n \n         //redirect System.out/System.err\n         PrintStream originSysOut = System.out;",
    "output": "fix typo (#1815)"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n@@ -25,7 +25,7 @@ public class ArthasProperties {\n     /**\n      * supoort apps.html/agents.html\n      */\n-    private boolean enableDetatilPages = false;\n+    private boolean enableDetailPages = false;\n \n     public Server getServer() {\n         return server;\n@@ -43,12 +43,12 @@ public void setEmbeddedRedis(EmbeddedRedis embeddedRedis) {\n         this.embeddedRedis = embeddedRedis;\n     }\n \n-    public boolean isEnableDetatilPages() {\n-        return enableDetatilPages;\n+    public boolean isEnableDetailPages() {\n+        return enableDetailPages;\n     }\n \n-    public void setEnableDetatilPages(boolean enableDetatilPages) {\n-        this.enableDetatilPages = enableDetatilPages;\n+    public void setEnableDetailPages(boolean enableDetailPages) {\n+        this.enableDetailPages = enableDetailPages;\n     }\n \n     public static class Server {\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java\n@@ -40,7 +40,7 @@ public class DetailAPIController {\n     @RequestMapping(\"/api/tunnelApps\")\n     @ResponseBody\n     public Set<String> tunnelApps(HttpServletRequest request, Model model) {\n-        if (!arthasProperties.isEnableDetatilPages()) {\n+        if (!arthasProperties.isEnableDetailPages()) {\n             throw new IllegalAccessError(\"not allow\");\n         }\n \n@@ -67,7 +67,7 @@ public Set<String> tunnelApps(HttpServletRequest request, Model model) {\n     @ResponseBody\n     public Map<String, AgentClusterInfo> tunnelAgentIds(@RequestParam(value = \"app\", required = true) String appName,\n             HttpServletRequest request, Model model) {\n-        if (!arthasProperties.isEnableDetatilPages()) {\n+        if (!arthasProperties.isEnableDetailPages()) {\n             throw new IllegalAccessError(\"not allow\");\n         }\n ",
    "output": "fix typo (#1807)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/Constants.java b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n@@ -43,6 +43,7 @@ public interface Constants {\n                                 \"  TRUE  : true\\n\" +\n                                 \"  FALSE : false\\n\" +\n                                 \"  TRUE  : 'params.length>=0'\\n\" +\n-                                \"  FALSE : 1==2\\n\";\n+                                \"  FALSE : 1==2\\n\" +\n+                                \"  '#cost>100'\\n\";\n \n }",
    "output": "update condition express example"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -192,7 +192,7 @@ public void process(final CommandProcess process) {\n                     process.end(-1, \"Can not find class by class name: \" + className + \".\");\n                     return;\n                 } else if (matchedClassSize > 1) {\n-                    process.end(-1, \"Found more than one class: \" + matchedClasses + \".\");\n+                    process.end(-1, \"Found more than one class: \" + matchedClasses + \", please specify classloader with '-c <classloader hash>'\");\n                     return;\n                 } else {\n                     Object[] instances = vmToolInstance().getInstances(matchedClasses.get(0), limit);\n@@ -318,4 +318,4 @@ public boolean complete(Completion completion) {\n         super.complete(completion);\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix vmtool command tip when matches multiple classes (#1798)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.5.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.1"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -36,11 +36,6 @@ public static synchronized VmTool getInstance(String libPath) {\n         return instance;\n     }\n \n-    /**\n-     * 检测jni-lib是否正常，如果正常，应该输出OK\n-     */\n-    private static native String check0();\n-\n     private static synchronized native void forceGc0();\n \n     /**\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/package-info.java b/arthas-vmtool/src/main/java/arthas/package-info.java\n--- a/arthas-vmtool/src/main/java/arthas/package-info.java\n+++ b/arthas-vmtool/src/main/java/arthas/package-info.java\n@@ -1,6 +1,2 @@\n-/**\n- * <pre>\n- * 修改后要同步到 spy/src/main/java 。\n- * </pre>\n- */\n+\n package arthas;\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -10,12 +10,16 @@\n \n import com.taobao.arthas.common.VmToolUtils;\n \n-import arthas.VmToolTest.LimitTest;\n-\n /**\n  * 以下本地测试的jvm参数均为：-Xms128m -Xmx128m\n  */\n public class VmToolTest {\n+    private VmTool initVmTool() {\n+        File path = new File(VmTool.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParentFile();\n+\n+        String libPath = new File(path, VmToolUtils.detectLibName()).getAbsolutePath();\n+        return VmTool.getInstance(libPath);\n+    }\n \n     /**\n      * macbook上运行结果如下\n@@ -57,14 +61,6 @@ public void testIsSnapshot() {\n         }\n     }\n \n-    private VmTool initVmTool() {\n-        String path = VmTool.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n-        System.err.println(path);\n-\n-        String libPath = new File(path, VmToolUtils.detectLibName()).getAbsolutePath();\n-        return VmTool.getInstance(libPath);\n-    }\n-\n     @Test\n     public void testGetInstancesMemoryLeak() {\n         //这里睡20s是为了方便用jprofiler连接上进程\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -1,6 +1,8 @@\n package com.taobao.arthas.core.command.monitor200;\n \n import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n import java.lang.instrument.Instrumentation;\n import java.security.CodeSource;\n import java.util.ArrayList;\n@@ -11,6 +13,7 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.common.IOUtils;\n import com.taobao.arthas.common.VmToolUtils;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.express.Express;\n@@ -246,6 +249,25 @@ private VmTool vmToolInstance() {\n             if (libPath == null) {\n                 libPath = defaultLibPath;\n             }\n+\n+            // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n+            FileOutputStream tmpLibOutputStream = null;\n+            FileInputStream libInputStream = null;\n+            try {\n+                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n+                tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n+                libInputStream = new FileInputStream(new File(libPath));\n+\n+                IOUtils.copy(libInputStream, tmpLibOutputStream);\n+                libPath = tmpLibFile.getAbsolutePath();\n+                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n+            } catch (Throwable e) {\n+                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n+            } finally {\n+                IOUtils.close(libInputStream);\n+                IOUtils.close(tmpLibOutputStream);\n+            }\n+\n             vmTool = VmTool.getInstance(libPath);\n         }\n         return vmTool;\n\ndiff --git a/spy/src/main/java/arthas/VmTool.java b/spy/src/main/java/arthas/VmTool.java\n--- a/spy/src/main/java/arthas/VmTool.java\n+++ b/spy/src/main/java/arthas/VmTool.java\n@@ -1,111 +0,0 @@\n-package arthas;\n-\n-/**\n- * @author ZhangZiCheng 2021-02-12\n- * @author hengyunabc 2021-04-26\n- * @since 3.5.1\n- */\n-public class VmTool implements VmToolMXBean {\n-\n-    /**\n-     * 不要修改jni-lib的名称\n-     */\n-    public final static String JNI_LIBRARY_NAME = \"ArthasJniLibrary\";\n-\n-    private static VmTool instance;\n-\n-    private VmTool() {\n-    }\n-\n-    public static VmTool getInstance() {\n-        return getInstance(null);\n-    }\n-\n-    public static synchronized VmTool getInstance(String libPath) {\n-        if (instance != null) {\n-            return instance;\n-        }\n-\n-        if (libPath == null) {\n-            System.loadLibrary(JNI_LIBRARY_NAME);\n-        } else {\n-            System.load(libPath);\n-        }\n-\n-        instance = new VmTool();\n-        return instance;\n-    }\n-\n-    /**\n-     * 检测jni-lib是否正常，如果正常，应该输出OK\n-     */\n-    private static native String check0();\n-\n-    private static synchronized native void forceGc0();\n-\n-    /**\n-     * 获取某个class在jvm中当前所有存活实例\n-     */\n-    private static synchronized native <T> T[] getInstances0(Class<T> klass, int limit);\n-\n-    /**\n-     * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n-     */\n-    private static synchronized native long sumInstanceSize0(Class<?> klass);\n-\n-    /**\n-     * 获取某个实例的占用内存，单位：Byte\n-     */\n-    private static native long getInstanceSize0(Object instance);\n-\n-    /**\n-     * 统计某个class在jvm中当前所有存活实例的总个数\n-     */\n-    private static synchronized native long countInstances0(Class<?> klass);\n-\n-    /**\n-     * 获取所有已加载的类\n-     * @param klass 这个参数必须是 Class.class\n-     * @return\n-     */\n-    private static synchronized native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n-\n-    @Override\n-    public void forceGc() {\n-        forceGc0();\n-    }\n-\n-    @Override\n-    public <T> T[] getInstances(Class<T> klass) {\n-        return getInstances0(klass, -1);\n-    }\n-\n-    @Override\n-    public <T> T[] getInstances(Class<T> klass, int limit) {\n-        if (limit == 0) {\n-            throw new IllegalArgumentException(\"limit can not be 0\");\n-        }\n-        return getInstances0(klass, limit);\n-    }\n-\n-    @Override\n-    public long sumInstanceSize(Class<?> klass) {\n-        return sumInstanceSize0(klass);\n-    }\n-\n-    @Override\n-    public long getInstanceSize(Object instance) {\n-        return getInstanceSize0(instance);\n-    }\n-\n-    @Override\n-    public long countInstances(Class<?> klass) {\n-        return countInstances0(klass);\n-    }\n-\n-    @Override\n-    public Class<?>[] getAllLoadedClasses() {\n-        return getAllLoadedClasses0(Class.class);\n-    }\n-\n-}\n\ndiff --git a/spy/src/main/java/arthas/VmToolMXBean.java b/spy/src/main/java/arthas/VmToolMXBean.java\n--- a/spy/src/main/java/arthas/VmToolMXBean.java\n+++ b/spy/src/main/java/arthas/VmToolMXBean.java\n@@ -1,53 +0,0 @@\n-package arthas;\n-\n-/**\n- * VmTool interface for JMX server. How to register VmTool MBean:\n- *\n- * <pre>\n- * {@code\n- *     ManagementFactory.getPlatformMBeanServer().registerMBean(\n- *             VmTool.getInstance(),\n- *             new ObjectName(\"arthas:type=VmTool\")\n- *     );\n- * }\n- * </pre>\n- * @author hengyunabc 2021-04-26\n- */\n-public interface VmToolMXBean {\n-\n-    /**\n-     * https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#ForceGarbageCollection\n-     */\n-    public void forceGc();\n-\n-    public <T> T[] getInstances(Class<T> klass);\n-\n-    /**\n-     * 获取某个class在jvm中当前所有存活实例\n-     * @param <T>\n-     * @param klass\n-     * @param limit 如果小于 0 ，则不限制\n-     * @return\n-     */\n-    public <T> T[] getInstances(Class<T> klass, int limit);\n-\n-    /**\n-     * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n-     */\n-    public long sumInstanceSize(Class<?> klass);\n-\n-    /**\n-     * 获取某个实例的占用内存，单位：Byte\n-     */\n-    public long getInstanceSize(Object instance);\n-\n-    /**\n-     * 统计某个class在jvm中当前所有存活实例的总个数\n-     */\n-    public long countInstances(Class<?> klass);\n-\n-    /**\n-     * 获取所有已加载的类\n-     */\n-    public Class<?>[] getAllLoadedClasses();\n-}\n\ndiff --git a/spy/src/main/java/arthas/package-info.java b/spy/src/main/java/arthas/package-info.java\n--- a/spy/src/main/java/arthas/package-info.java\n+++ b/spy/src/main/java/arthas/package-info.java\n@@ -1,8 +0,0 @@\n-/**\n- * <pre>\n- * copy from arthas-vmtool/src/main/java 。\n- * 因为动态链接库只能被加载一次，只能使用一份代码。放在spy jar里保证只有一份。\n- * TODO 当arthas本身版本升级时，已append 到bootstrap classloader的spy jar不能升级，VmTool的接口可以会调用失败。\n- * </pre>\n- */\n-package arthas;",
    "output": "vmtool lib support reload/reattach."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -48,7 +48,9 @@\n         + \"  vmtool --action getInstances --className demo.MathGame\\n\"\n         + \"  vmtool --action getInstances --className demo.MathGame --express 'instances.length'\\n\"\n         + \"  vmtool --action getInstances --className demo.MathGame --express 'instances[0]'\\n\"\n+        + \"  vmtool --action getInstances --className demo.MathGame -x 2\\n\"\n         + \"  vmtool --action getInstances --className java.lang.String --limit 10\\n\"\n+        + \"  vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext\\n\"\n         + \"  vmtool --action forceGc\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"vmtool\")\n //@formatter:on\n@@ -62,7 +64,7 @@ public class VmToolCommand extends AnnotatedCommand {\n     private String hashCode = null;\n     private String classLoaderClass;\n     /**\n-     * default value 2\n+     * default value 1\n      */\n     private int expand;\n \n@@ -107,8 +109,8 @@ public void setClassName(String className) {\n     }\n \n     @Option(shortName = \"x\", longName = \"expand\")\n-    @Description(\"Expand level of object (2 by default)\")\n-    @DefaultValue(\"2\")\n+    @Description(\"Expand level of object (1 by default)\")\n+    @DefaultValue(\"1\")\n     public void setExpand(int expand) {\n         this.expand = expand;\n     }\n@@ -154,6 +156,10 @@ public void process(final CommandProcess process) {\n             Instrumentation inst = process.session().getInstrumentation();\n \n             if (VmToolAction.getInstances.equals(action)) {\n+                if (className == null) {\n+                    process.end(-1, \"The className option cannot be empty!\");\n+                    return;\n+                }\n                 ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n                 if (hashCode == null && classLoaderClass != null) {\n                     List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst,\n@@ -177,7 +183,7 @@ public void process(final CommandProcess process) {\n                 }\n \n                 List<Class<?>> matchedClasses = new ArrayList<Class<?>>(\n-                        SearchUtils.searchClass(inst, className, false, hashCode));\n+                        SearchUtils.searchClassOnly(inst, className, false, hashCode));\n                 int matchedClassSize = matchedClasses.size();\n                 if (matchedClassSize == 0) {\n                     process.end(-1, \"Can not find class by class name: \" + className + \".\");",
    "output": "improve vmtool search class."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -71,7 +71,8 @@ public class VmToolCommand extends AnnotatedCommand {\n      */\n     private int limit;\n \n-    private static String libPath;\n+    private String libPath;\n+    private static String defaultLibPath;\n     private static VmTool vmTool = null;\n \n     static {\n@@ -83,7 +84,7 @@ public class VmToolCommand extends AnnotatedCommand {\n                     File bootJarPath = new File(codeSource.getLocation().toURI().getSchemeSpecificPart());\n                     File soFile = new File(bootJarPath.getParentFile(), \"lib\" + File.separator + libName);\n                     if (soFile.exists()) {\n-                        libPath = soFile.getAbsolutePath();\n+                        defaultLibPath = soFile.getAbsolutePath();\n                     }\n                 } catch (Throwable e) {\n                     logger.error(\"can not find VmTool so\", e);\n@@ -131,14 +132,20 @@ public void setLimit(int limit) {\n         this.limit = limit;\n     }\n \n+    @Option(longName = \"libPath\")\n+    @Description(\"The specify lib path.\")\n+    public void setLibPath(String path) {\n+        libPath = path;\n+    }\n+\n     @Option(longName = \"express\", required = false)\n     @Description(\"The ognl expression, default valueis `instances`.\")\n     public void setExpress(String express) {\n         this.express = express;\n     }\n \n     public enum VmToolAction {\n-        getInstances, forceGc, load\n+        getInstances, forceGc\n     }\n \n     @Override\n@@ -230,6 +237,9 @@ private VmTool vmToolInstance() {\n         if (vmTool != null) {\n             return vmTool;\n         } else {\n+            if (libPath == null) {\n+                libPath = defaultLibPath;\n+            }\n             vmTool = VmTool.getInstance(libPath);\n         }\n         return vmTool;",
    "output": "vmtool command support libPath"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -46,12 +46,12 @@ public static synchronized VmTool getInstance(String libPath) {\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n-    private static synchronized native <T> T[] getInstances0(Class<T> klass);\n+    private static synchronized native <T> T[] getInstances0(Class<T> klass, int limit);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n      */\n-    private static native long sumInstanceSize0(Class<?> klass);\n+    private static synchronized native long sumInstanceSize0(Class<?> klass);\n \n     /**\n      * 获取某个实例的占用内存，单位：Byte\n@@ -77,7 +77,15 @@ public void forceGc() {\n \n     @Override\n     public <T> T[] getInstances(Class<T> klass) {\n-        return getInstances0(klass);\n+        return getInstances0(klass, -1);\n+    }\n+\n+    @Override\n+    public <T> T[] getInstances(Class<T> klass, int limit) {\n+        if (limit == 0) {\n+            throw new IllegalArgumentException(\"limit can not be 0\");\n+        }\n+        return getInstances0(klass, limit);\n     }\n \n     @Override\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -20,10 +20,16 @@ public interface VmToolMXBean {\n      */\n     public void forceGc();\n \n+    public <T> T[] getInstances(Class<T> klass);\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n+     * @param <T>\n+     * @param klass\n+     * @param limit 如果小于 0 ，则不限制\n+     * @return\n      */\n-    public <T> T[] getInstances(Class<T> klass);\n+    public <T> T[] getInstances(Class<T> klass, int limit);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -2,13 +2,16 @@\n \n import java.io.File;\n import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n import com.taobao.arthas.common.VmToolUtils;\n \n+import arthas.VmToolTest.LimitTest;\n+\n /**\n  * 以下本地测试的jvm参数均为：-Xms128m -Xmx128m\n  */\n@@ -146,6 +149,25 @@ public void testGetAllLoadedClassesMemoryLeak() {\n         }\n     }\n \n+    class LimitTest {\n+    }\n+\n+    @Test\n+    public void test_getInstances_lmiit() {\n+        VmTool vmtool = initVmTool();\n+\n+        ArrayList<LimitTest> list = new ArrayList<LimitTest>();\n+        for (int i = 0; i < 10; ++i) {\n+            list.add(new LimitTest());\n+        }\n+        LimitTest[] instances = vmtool.getInstances(LimitTest.class, 5);\n+        Assertions.assertThat(instances).hasSize(5);\n+        LimitTest[] instances2 = vmtool.getInstances(LimitTest.class, -1);\n+        Assertions.assertThat(instances2).hasSize(10);\n+        LimitTest[] instances3 = vmtool.getInstances(LimitTest.class, 1);\n+        Assertions.assertThat(instances3).hasSize(1);\n+    }\n+\n     interface III {\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -47,6 +47,8 @@\n @Description(Constants.EXAMPLE\n         + \"  vmtool --action getInstances --className demo.MathGame\\n\"\n         + \"  vmtool --action getInstances --className demo.MathGame --express 'instances.length'\\n\"\n+        + \"  vmtool --action getInstances --className demo.MathGame --express 'instances[0]'\\n\"\n+        + \"  vmtool --action getInstances --className java.lang.String --limit 10\\n\"\n         + \"  vmtool --action forceGc\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"vmtool\")\n //@formatter:on\n@@ -64,6 +66,11 @@ public class VmToolCommand extends AnnotatedCommand {\n      */\n     private int expand;\n \n+    /**\n+     * default value 10\n+     */\n+    private int limit;\n+\n     private static String libPath;\n     private static VmTool vmTool = null;\n \n@@ -117,6 +124,13 @@ public void setClassLoaderClass(String classLoaderClass) {\n         this.classLoaderClass = classLoaderClass;\n     }\n \n+    @Option(shortName = \"l\", longName = \"limit\")\n+    @Description(\"Set the limit value of the getInstances action, default value is 10, set to -1 is unlimited\")\n+    @DefaultValue(\"10\")\n+    public void setLimit(int limit) {\n+        this.limit = limit;\n+    }\n+\n     @Option(longName = \"express\", required = false)\n     @Description(\"The ognl expression, default valueis `instances`.\")\n     public void setExpress(String express) {\n@@ -165,7 +179,7 @@ public void process(final CommandProcess process) {\n                     process.end(-1, \"Found more than one class: \" + matchedClasses + \".\");\n                     return;\n                 } else {\n-                    Object[] instances = vmToolInstance().getInstances(matchedClasses.get(0));\n+                    Object[] instances = vmToolInstance().getInstances(matchedClasses.get(0), limit);\n                     Object value = instances;\n                     if (express != null) {\n                         Express unpooledExpress = ExpressFactory.unpooledExpress(classLoader);\n\ndiff --git a/spy/src/main/java/arthas/VmTool.java b/spy/src/main/java/arthas/VmTool.java\n--- a/spy/src/main/java/arthas/VmTool.java\n+++ b/spy/src/main/java/arthas/VmTool.java\n@@ -41,17 +41,17 @@ public static synchronized VmTool getInstance(String libPath) {\n      */\n     private static native String check0();\n \n-    private static native void forceGc0();\n+    private static synchronized native void forceGc0();\n \n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n-    private static native <T> T[] getInstances0(Class<T> klass);\n+    private static synchronized native <T> T[] getInstances0(Class<T> klass, int limit);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n      */\n-    private static native long sumInstanceSize0(Class<?> klass);\n+    private static synchronized native long sumInstanceSize0(Class<?> klass);\n \n     /**\n      * 获取某个实例的占用内存，单位：Byte\n@@ -61,24 +61,14 @@ public static synchronized VmTool getInstance(String libPath) {\n     /**\n      * 统计某个class在jvm中当前所有存活实例的总个数\n      */\n-    private static native long countInstances0(Class<?> klass);\n+    private static synchronized native long countInstances0(Class<?> klass);\n \n     /**\n      * 获取所有已加载的类\n+     * @param klass 这个参数必须是 Class.class\n+     * @return\n      */\n-    private static native Class<?>[] getAllLoadedClasses0();\n-\n-    /**\n-     * 包括小类型(如int)\n-     */\n-    public static Class<?>[] getAllClasses() {\n-        return getInstances0(Class.class);\n-    }\n-\n-    @Override\n-    public String check() {\n-        return check0();\n-    }\n+    private static synchronized native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n \n     @Override\n     public void forceGc() {\n@@ -87,7 +77,15 @@ public void forceGc() {\n \n     @Override\n     public <T> T[] getInstances(Class<T> klass) {\n-        return getInstances0(klass);\n+        return getInstances0(klass, -1);\n+    }\n+\n+    @Override\n+    public <T> T[] getInstances(Class<T> klass, int limit) {\n+        if (limit == 0) {\n+            throw new IllegalArgumentException(\"limit can not be 0\");\n+        }\n+        return getInstances0(klass, limit);\n     }\n \n     @Override\n@@ -107,7 +105,7 @@ public long countInstances(Class<?> klass) {\n \n     @Override\n     public Class<?>[] getAllLoadedClasses() {\n-        return getAllLoadedClasses0();\n+        return getAllLoadedClasses0(Class.class);\n     }\n \n }\n\ndiff --git a/spy/src/main/java/arthas/VmToolMXBean.java b/spy/src/main/java/arthas/VmToolMXBean.java\n--- a/spy/src/main/java/arthas/VmToolMXBean.java\n+++ b/spy/src/main/java/arthas/VmToolMXBean.java\n@@ -14,20 +14,22 @@\n  * @author hengyunabc 2021-04-26\n  */\n public interface VmToolMXBean {\n-    /**\n-     * 检测jni-lib是否正常，如果正常，应该输出OK\n-     */\n-    public String check();\n \n     /**\n      * https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#ForceGarbageCollection\n      */\n     public void forceGc();\n \n+    public <T> T[] getInstances(Class<T> klass);\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n+     * @param <T>\n+     * @param klass\n+     * @param limit 如果小于 0 ，则不限制\n+     * @return\n      */\n-    public <T> T[] getInstances(Class<T> klass);\n+    public <T> T[] getInstances(Class<T> klass, int limit);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte",
    "output": "vmtool support limit option. #1781"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -1,17 +1,14 @@\n package arthas;\n \n+import java.io.File;\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n import com.taobao.arthas.common.VmToolUtils;\n \n-import arthas.VmToolTest.AAA;\n-import arthas.VmToolTest.III;\n-\n-import java.io.File;\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.atomic.AtomicLong;\n-\n /**\n  * 以下本地测试的jvm参数均为：-Xms128m -Xmx128m\n  */",
    "output": "fix jni method return type"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -1,9 +1,13 @@\n package arthas;\n \n+import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n import com.taobao.arthas.common.VmToolUtils;\n \n+import arthas.VmToolTest.AAA;\n+import arthas.VmToolTest.III;\n+\n import java.io.File;\n import java.lang.ref.WeakReference;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -144,4 +148,23 @@ public void testGetAllLoadedClassesMemoryLeak() {\n             allLoadedClasses = null;\n         }\n     }\n+\n+    interface III {\n+    }\n+\n+    class AAA implements III {\n+    }\n+\n+    @Test\n+    public void test_getInstances_interface() {\n+        AAA aaa = new AAA();\n+        VmTool vmtool = initVmTool();\n+        III[] interfaceInstances = vmtool.getInstances(III.class);\n+        Assertions.assertThat(interfaceInstances.length).isEqualTo(1);\n+\n+        AAA[] ObjectInstances = vmtool.getInstances(AAA.class);\n+        Assertions.assertThat(ObjectInstances.length).isEqualTo(1);\n+\n+        Assertions.assertThat(interfaceInstances[0]).isEqualTo(ObjectInstances[0]);\n+    }\n }",
    "output": "add getInstances interface test"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -70,11 +70,6 @@ public static synchronized VmTool getInstance(String libPath) {\n      */\n     private static synchronized native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n \n-    @Override\n-    public String check() {\n-        return check0();\n-    }\n-\n     @Override\n     public void forceGc() {\n         forceGc0();\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -14,10 +14,6 @@\n  * @author hengyunabc 2021-04-26\n  */\n public interface VmToolMXBean {\n-    /**\n-     * 检测jni-lib是否正常，如果正常，应该输出OK\n-     */\n-    public String check();\n \n     /**\n      * https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#ForceGarbageCollection",
    "output": "remove useless code."
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -41,12 +41,12 @@ public static synchronized VmTool getInstance(String libPath) {\n      */\n     private static native String check0();\n \n-    private static native void forceGc0();\n+    private static synchronized native void forceGc0();\n \n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n-    private static native <T> T[] getInstances0(Class<T> klass);\n+    private static synchronized native <T> T[] getInstances0(Class<T> klass);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n@@ -61,14 +61,14 @@ public static synchronized VmTool getInstance(String libPath) {\n     /**\n      * 统计某个class在jvm中当前所有存活实例的总个数\n      */\n-    private static native long countInstances0(Class<?> klass);\n+    private static synchronized native long countInstances0(Class<?> klass);\n \n     /**\n      * 获取所有已加载的类\n      * @param klass 这个参数必须是 Class.class\n      * @return\n      */\n-    private static native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n+    private static synchronized native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n \n     @Override\n     public String check() {",
    "output": "simplify tag generation mechanism"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -65,15 +65,10 @@ public static synchronized VmTool getInstance(String libPath) {\n \n     /**\n      * 获取所有已加载的类\n+     * @param klass 这个参数必须是 Class.class\n+     * @return\n      */\n-    private static native Class<?>[] getAllLoadedClasses0();\n-\n-    /**\n-     * 包括小类型(如int)\n-     */\n-    public static Class<?>[] getAllClasses() {\n-        return getInstances0(Class.class);\n-    }\n+    private static native Class<?>[] getAllLoadedClasses0(Class<?> klass);\n \n     @Override\n     public String check() {\n@@ -107,7 +102,7 @@ public long countInstances(Class<?> klass) {\n \n     @Override\n     public Class<?>[] getAllLoadedClasses() {\n-        return getAllLoadedClasses0();\n+        return getAllLoadedClasses0(Class.class);\n     }\n \n }",
    "output": "improve vmtool getAllLoadedClasses0"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -41,6 +41,8 @@ public static synchronized VmTool getInstance(String libPath) {\n      */\n     private static native String check0();\n \n+    private static native void forceGc0();\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n@@ -78,6 +80,11 @@ public String check() {\n         return check0();\n     }\n \n+    @Override\n+    public void forceGc() {\n+        forceGc0();\n+    }\n+\n     @Override\n     public <T> T[] getInstances(Class<T> klass) {\n         return getInstances0(klass);\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -19,6 +19,11 @@ public interface VmToolMXBean {\n      */\n     public String check();\n \n+    /**\n+     * https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#ForceGarbageCollection\n+     */\n+    public void forceGc();\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -43,7 +43,7 @@ public void testIsSnapshot() {\n             System.out.println(\"sum size->\" + vmtool.sumInstanceSize(VmTool.class));\n             beforeInstances = null;\n \n-            System.gc();\n+            vmtool.forceGc();\n             Thread.sleep(100);\n             System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n             VmTool[] afterInstances = vmtool.getInstances(VmTool.class);\n@@ -80,7 +80,7 @@ public void testGetInstancesMemoryLeak() {\n             totalTime.addAndGet(cost);\n             System.out.println(i + \" instance size:\" + (instances == null ? 0 : instances.length) + \", cost \" + cost + \"ms avgCost \" + totalTime.doubleValue() / i + \"ms\");\n             instances = null;\n-            System.gc();\n+            vmtool.forceGc();\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java\n@@ -46,7 +46,8 @@\n @Summary(\"jvm tool\")\n @Description(Constants.EXAMPLE\n         + \"  vmtool --action getInstances --className demo.MathGame\\n\"\n-        + \"  vmtool --action getInstances --className demo.MathGame --express 'instances.size()'\\n\"\n+        + \"  vmtool --action getInstances --className demo.MathGame --express 'instances.length'\\n\"\n+        + \"  vmtool --action forceGc\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"vmtool\")\n //@formatter:on\n public class VmToolCommand extends AnnotatedCommand {\n@@ -123,7 +124,7 @@ public void setExpress(String express) {\n     }\n \n     public enum VmToolAction {\n-        getInstances, load\n+        getInstances, forceGc, load\n     }\n \n     @Override\n@@ -178,8 +179,14 @@ public void process(final CommandProcess process) {\n                     }\n \n                     process.write(new ObjectView(value, this.expand).draw());\n+                    process.write(\"\\n\");\n                     process.end();\n                 }\n+            } else if (VmToolAction.forceGc.equals(action)) {\n+                vmToolInstance().forceGc();\n+                process.write(\"\\n\");\n+                process.end();\n+                return;\n             }\n \n             process.end();\n\ndiff --git a/spy/src/main/java/arthas/VmTool.java b/spy/src/main/java/arthas/VmTool.java\n--- a/spy/src/main/java/arthas/VmTool.java\n+++ b/spy/src/main/java/arthas/VmTool.java\n@@ -41,6 +41,8 @@ public static synchronized VmTool getInstance(String libPath) {\n      */\n     private static native String check0();\n \n+    private static native void forceGc0();\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n@@ -78,6 +80,11 @@ public String check() {\n         return check0();\n     }\n \n+    @Override\n+    public void forceGc() {\n+        forceGc0();\n+    }\n+\n     @Override\n     public <T> T[] getInstances(Class<T> klass) {\n         return getInstances0(klass);\n\ndiff --git a/spy/src/main/java/arthas/VmToolMXBean.java b/spy/src/main/java/arthas/VmToolMXBean.java\n--- a/spy/src/main/java/arthas/VmToolMXBean.java\n+++ b/spy/src/main/java/arthas/VmToolMXBean.java\n@@ -19,6 +19,11 @@ public interface VmToolMXBean {\n      */\n     public String check();\n \n+    /**\n+     * https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#ForceGarbageCollection\n+     */\n+    public void forceGc();\n+\n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */",
    "output": "vmtool command support forceGc action. #1781"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -442,16 +442,8 @@ public static synchronized EnhancerAffect reset(final Instrumentation inst, fina\n             }\n         }\n \n-        final ClassFileTransformer resetClassFileTransformer = new ClassFileTransformer() {\n-            @Override\n-            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n-                    ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n-                return null;\n-            }\n-        };\n-\n         try {\n-            enhance(inst, resetClassFileTransformer, enhanceClassSet);\n+            enhance(inst, enhanceClassSet);\n             logger.info(\"Success to reset classes: \" + enhanceClassSet);\n         } finally {\n             for (Class<?> resetClass : enhanceClassSet) {\n@@ -464,18 +456,13 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein\n     }\n \n     // 批量增强\n-    private static void enhance(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes)\n+    private static void enhance(Instrumentation inst, Set<Class<?>> classes)\n             throws UnmodifiableClassException {\n-        try {\n-            inst.addTransformer(transformer, true);\n-            int size = classes.size();\n-            Class<?>[] classArray = new Class<?>[size];\n-            arraycopy(classes.toArray(), 0, classArray, 0, size);\n-            if (classArray.length > 0) {\n-                inst.retransformClasses(classArray);\n-            }\n-        } finally {\n-            inst.removeTransformer(transformer);\n+        int size = classes.size();\n+        Class<?>[] classArray = new Class<?>[size];\n+        arraycopy(classes.toArray(), 0, classArray, 0, size);\n+        if (classArray.length > 0) {\n+            inst.retransformClasses(classArray);\n         }\n     }\n }",
    "output": "Remove the useless resetClassFileTransformer in Enhancer (#1786)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -355,4 +355,47 @@ public static boolean shouldCompleteOption(Completion completion, String option)\n         }\n         return false;\n     }\n+\n+    public static boolean completeOptions(Completion completion, List<OptionCompleteHandler> handlers) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        /**\n+         * <pre>\n+         * 比如 ` --name a`，这样子的tokens\n+         * </pre>\n+         */\n+        if (tokens.size() >= 3) {\n+            CliToken cliToken_2 = tokens.get(tokens.size() - 2);\n+            CliToken cliToken_3 = tokens.get(tokens.size() - 3);\n+\n+            if (cliToken_2.isBlank()) {\n+                String token_3 = cliToken_3.value();\n+\n+                for (OptionCompleteHandler handler : handlers) {\n+                    if (handler.matchName(token_3)) {\n+                        return handler.complete(completion);\n+                    }\n+                }\n+            }\n+        }\n+\n+        /**\n+         * <pre>\n+         * 比如 ` --name `，这样子的tokens\n+         * </pre>\n+         */\n+        if (tokens.size() >= 2) {\n+            CliToken cliToken_1 = tokens.get(tokens.size() - 1);\n+            CliToken cliToken_2 = tokens.get(tokens.size() - 2);\n+            if (cliToken_1.isBlank()) {\n+                String token_2 = cliToken_2.value();\n+                for (OptionCompleteHandler handler : handlers) {\n+                    if (handler.matchName(token_2)) {\n+                        return handler.complete(completion);\n+                    }\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/OptionCompleteHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/OptionCompleteHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/OptionCompleteHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/OptionCompleteHandler.java\n@@ -0,0 +1,12 @@\n+package com.taobao.arthas.core.shell.cli;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-04-29\n+ *\n+ */\n+public interface OptionCompleteHandler {\n+    boolean matchName(String token);\n+\n+    boolean complete(Completion completion);\n+}",
    "output": "add OptionCompleteHandler, better complete option"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VmTool.java b/arthas-vmtool/src/main/java/arthas/VmTool.java\n--- a/arthas-vmtool/src/main/java/arthas/VmTool.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmTool.java\n@@ -9,7 +9,7 @@\n  * @author hengyunabc 2021-04-26\n  * @since 3.5.1\n  */\n-public class Vmtool implements VMtoolMXBean {\n+public class VmTool implements VmToolMXBean {\n \n     /**\n      * 不要修改jni-lib的名称\n@@ -34,16 +34,16 @@ public class Vmtool implements VMtoolMXBean {\n         }\n     }\n \n-    private static Vmtool instance;\n+    private static VmTool instance;\n \n-    private Vmtool() {\n+    private VmTool() {\n     }\n \n-    public static Vmtool getInstance() {\n+    public static VmTool getInstance() {\n         return getInstance(null);\n     }\n \n-    public static synchronized Vmtool getInstance(String libPath) {\n+    public static synchronized VmTool getInstance(String libPath) {\n         if (instance != null) {\n             return instance;\n         }\n@@ -54,7 +54,7 @@ public static synchronized Vmtool getInstance(String libPath) {\n             System.load(libPath);\n         }\n \n-        instance = new Vmtool();\n+        instance = new VmTool();\n         return instance;\n     }\n \n\ndiff --git a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VmToolMXBean.java\n@@ -3,19 +3,19 @@\n import java.util.ArrayList;\n \n /**\n- * VMtool interface for JMX server. How to register VMtool MBean:\n+ * VmTool interface for JMX server. How to register VmTool MBean:\n  *\n  * <pre>\n  * {@code\n  *     ManagementFactory.getPlatformMBeanServer().registerMBean(\n- *             VMtool.getInstance(),\n- *             new ObjectName(\"arthas:type=VMtool\")\n+ *             VmTool.getInstance(),\n+ *             new ObjectName(\"arthas:type=VmTool\")\n  *     );\n  * }\n  * </pre>\n  * @author hengyunabc 2021-04-26\n  */\n-public interface VMtoolMXBean {\n+public interface VmToolMXBean {\n     /**\n      * 检测jni-lib是否正常，如果正常，应该输出OK\n      */\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmToolTest.java b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmToolTest.java\n@@ -2,19 +2,17 @@\n \n import org.junit.Test;\n \n-import arthas.Vmtool;\n-\n import java.io.File;\n import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n \n-public class VmtoolTest {\n+public class VmToolTest {\n \n     /**\n-     * 在我的macbook上运行结果如下\n+     * macbook上运行结果如下\n      * allLoadedClasses->1050\n-     * arthas.JvmUtils@5bb21b69 arthas.JvmUtils@6b9651f3\n-     * before instances->[arthas.JvmUtils@5bb21b69, arthas.JvmUtils@6b9651f3]\n+     * arthas.VmTool@5bb21b69 arthas.VmTool@6b9651f3\n+     * before instances->[arthas.VmTool@5bb21b69, arthas.VmTool@6b9651f3]\n      * size->16\n      * count->2\n      * sum size->32\n@@ -24,31 +22,31 @@ public class VmtoolTest {\n     @Test\n     public void test01() {\n         try {\n-            String path = Vmtool.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n+            String path = VmTool.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n             System.err.println(path);\n \n-            String libPath = new File(path, Vmtool.detectLibName()).getAbsolutePath();\n-            Vmtool vmtool = Vmtool.getInstance(libPath);\n+            String libPath = new File(path, VmTool.detectLibName()).getAbsolutePath();\n+            VmTool vmtool = VmTool.getInstance(libPath);\n \n             //调用native方法，获取已加载的类，不包括小类型(如int)\n             ArrayList<Class<?>> allLoadedClasses = vmtool.getAllLoadedClasses();\n             System.out.println(\"allLoadedClasses->\" + allLoadedClasses.size());\n \n             //通过下面的例子，可以看到getInstances(Class<T> klass)拿到的是当前存活的所有对象\n-            WeakReference<VmtoolTest> weakReference1 = new WeakReference<VmtoolTest>(new VmtoolTest());\n-            WeakReference<VmtoolTest> weakReference2 = new WeakReference<VmtoolTest>(new VmtoolTest());\n+            WeakReference<VmToolTest> weakReference1 = new WeakReference<VmToolTest>(new VmToolTest());\n+            WeakReference<VmToolTest> weakReference2 = new WeakReference<VmToolTest>(new VmToolTest());\n             System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<Vmtool> beforeInstances = vmtool.getInstances(Vmtool.class);\n+            ArrayList<VmTool> beforeInstances = vmtool.getInstances(VmTool.class);\n             System.out.println(\"before instances->\" + beforeInstances);\n             System.out.println(\"size->\" + vmtool.getInstanceSize(weakReference1.get()));\n-            System.out.println(\"count->\" + vmtool.countInstances(Vmtool.class));\n-            System.out.println(\"sum size->\" + vmtool.sumInstanceSize(Vmtool.class));\n+            System.out.println(\"count->\" + vmtool.countInstances(VmTool.class));\n+            System.out.println(\"sum size->\" + vmtool.sumInstanceSize(VmTool.class));\n             beforeInstances = null;\n \n             System.gc();\n             Thread.sleep(100);\n             System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<Vmtool> afterInstances = vmtool.getInstances(Vmtool.class);\n+            ArrayList<VmTool> afterInstances = vmtool.getInstances(VmTool.class);\n             System.out.println(\"after instances->\" + afterInstances);\n         } catch (Exception e) {\n             e.printStackTrace();",
    "output": "rename"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/Vmtool.java b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n--- a/arthas-vmtool/src/main/java/arthas/Vmtool.java\n+++ b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n@@ -2,6 +2,8 @@\n \n import java.util.ArrayList;\n \n+import com.taobao.arthas.common.OSUtils;\n+\n /**\n  * @author ZhangZiCheng 2021-02-12\n  * @author hengyunabc 2021-04-26\n@@ -14,6 +16,24 @@ public class Vmtool implements VMtoolMXBean {\n      */\n     public final static String JNI_LIBRARY_NAME = \"ArthasJniLibrary\";\n \n+    private static String libName = null;\n+    static {\n+        if (OSUtils.isMac()) {\n+            libName = \"libArthasJniLibrary-x64.dylib\";\n+        }\n+        if (OSUtils.isLinux()) {\n+            libName = \"libArthasJniLibrary-x64.so\";\n+            if (OSUtils.isArm32()) {\n+                libName = \"libArthasJniLibrary-arm.so\";\n+            } else if (OSUtils.isArm64()) {\n+                libName = \"libArthasJniLibrary-aarch64.so\";\n+            }\n+        }\n+        if (OSUtils.isWindows()) {\n+            libName = \"libArthasJniLibrary-x64.dll\";\n+        }\n+    }\n+\n     private static Vmtool instance;\n \n     private Vmtool() {\n@@ -38,6 +58,10 @@ public static synchronized Vmtool getInstance(String libPath) {\n         return instance;\n     }\n \n+    public static String detectLibName() {\n+        return libName;\n+    }\n+\n     /**\n      * 检测jni-lib是否正常，如果正常，应该输出OK\n      */\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n@@ -27,7 +27,7 @@ public void test01() {\n             String path = Vmtool.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n             System.err.println(path);\n \n-            String libPath = new File(path, System.mapLibraryName(Vmtool.JNI_LIBRARY_NAME)).getAbsolutePath();\n+            String libPath = new File(path, Vmtool.detectLibName()).getAbsolutePath();\n             Vmtool vmtool = Vmtool.getInstance(libPath);\n \n             //调用native方法，获取已加载的类，不包括小类型(如int)",
    "output": "update lib name"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java b/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/LogUtilTest.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.core.util;\n \n import java.io.File;\n+import java.io.IOException;\n import java.net.URISyntaxException;\n import java.util.Iterator;\n import java.util.Properties;\n@@ -72,11 +73,10 @@ public void testLogConfig() throws URISyntaxException {\n     }\n \n     @Test\n-    public void test_DefaultLogFile() throws URISyntaxException {\n+    public void test_DefaultLogFile() throws URISyntaxException, IOException {\n         Properties properties1 = new Properties();\n         properties1.put(\"arthas.home\", testResourcesDir);\n-\n-        String logFile = new File(System.getProperty(\"user.home\"), \"logs/arthas/arthas.log\").getAbsolutePath();\n+        String logFile = new File(System.getProperty(\"user.home\"), \"logs/arthas/arthas.log\").getCanonicalPath();\n \n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n \n@@ -95,19 +95,19 @@ public void test_DefaultLogFile() throws URISyntaxException {\n             if (appender instanceof RollingFileAppender) {\n                 RollingFileAppender fileAppender = (RollingFileAppender) appender;\n                 String file = fileAppender.getFile();\n-                Assertions.assertThat(file).isEqualTo(logFile);\n+                Assertions.assertThat(new File(file).getCanonicalPath()).isEqualTo(logFile);\n                 foundFileAppender = true;\n             }\n         }\n         Assertions.assertThat(foundFileAppender).isEqualTo(true);\n     }\n \n     @Test\n-    public void test_ARTHAS_LOG_FILE() throws URISyntaxException {\n+    public void test_ARTHAS_LOG_FILE() throws URISyntaxException, IOException {\n         Properties properties1 = new Properties();\n         properties1.put(\"arthas.home\", testResourcesDir);\n \n-        String logFile = new File(tempFolder.getRoot().getAbsoluteFile(), \"test.log\").getAbsolutePath();\n+        String logFile = new File(tempFolder.getRoot().getAbsoluteFile(), \"test.log\").getCanonicalPath();\n \n         properties1.put(LogUtil.FILE_NAME_PROPERTY, logFile);\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n@@ -127,19 +127,19 @@ public void test_ARTHAS_LOG_FILE() throws URISyntaxException {\n             if (appender instanceof RollingFileAppender) {\n                 RollingFileAppender fileAppender = (RollingFileAppender) appender;\n                 String file = fileAppender.getFile();\n-                Assertions.assertThat(file).isEqualTo(logFile);\n+                Assertions.assertThat(new File(file).getCanonicalPath()).isEqualTo(logFile);\n                 foundFileAppender = true;\n             }\n         }\n         Assertions.assertThat(foundFileAppender).isEqualTo(true);\n     }\n \n     @Test\n-    public void test_ARTHAS_LOG_PATH() throws URISyntaxException {\n+    public void test_ARTHAS_LOG_PATH() throws URISyntaxException, IOException {\n         Properties properties1 = new Properties();\n         properties1.put(\"arthas.home\", testResourcesDir);\n \n-        String logFile = new File(tempFolder.getRoot().getAbsoluteFile(), \"arthas.log\").getAbsolutePath();\n+        String logFile = new File(tempFolder.getRoot().getAbsoluteFile(), \"arthas.log\").getCanonicalPath();\n \n         properties1.put(LogUtil.FILE_PATH_PROPERTY, tempFolder.getRoot().getAbsolutePath());\n         arthasEnvironment.addLast(new PropertiesPropertySource(\"test1\", properties1));\n@@ -159,7 +159,7 @@ public void test_ARTHAS_LOG_PATH() throws URISyntaxException {\n             if (appender instanceof RollingFileAppender) {\n                 RollingFileAppender fileAppender = (RollingFileAppender) appender;\n                 String file = fileAppender.getFile();\n-                Assertions.assertThat(file).isEqualTo(logFile);\n+                Assertions.assertThat(new File(file).getCanonicalPath()).isEqualTo(logFile);\n                 foundFileAppender = true;\n             }\n         }",
    "output": "fix testcase in windows"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/VMtoolMXBean.java b/arthas-vmtool/src/main/java/arthas/VMtoolMXBean.java\n--- a/arthas-vmtool/src/main/java/arthas/VMtoolMXBean.java\n+++ b/arthas-vmtool/src/main/java/arthas/VMtoolMXBean.java\n@@ -0,0 +1,48 @@\n+package arthas;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * VMtool interface for JMX server. How to register VMtool MBean:\n+ *\n+ * <pre>\n+ * {@code\n+ *     ManagementFactory.getPlatformMBeanServer().registerMBean(\n+ *             VMtool.getInstance(),\n+ *             new ObjectName(\"arthas:type=VMtool\")\n+ *     );\n+ * }\n+ * </pre>\n+ * @author hengyunabc 2021-04-26\n+ */\n+public interface VMtoolMXBean {\n+    /**\n+     * 检测jni-lib是否正常，如果正常，应该输出OK\n+     */\n+    public String check();\n+\n+    /**\n+     * 获取某个class在jvm中当前所有存活实例\n+     */\n+    public <T> ArrayList<T> getInstances(Class<T> klass);\n+\n+    /**\n+     * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n+     */\n+    public long sumInstanceSize(Class<?> klass);\n+\n+    /**\n+     * 获取某个实例的占用内存，单位：Byte\n+     */\n+    public long getInstanceSize(Object instance);\n+\n+    /**\n+     * 统计某个class在jvm中当前所有存活实例的总个数\n+     */\n+    public long countInstances(Class<?> klass);\n+\n+    /**\n+     * 获取所有已加载的类\n+     */\n+    public ArrayList<Class<?>> getAllLoadedClasses();\n+}\n\ndiff --git a/arthas-vmtool/src/main/java/arthas/Vmtool.java b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n--- a/arthas-vmtool/src/main/java/arthas/Vmtool.java\n+++ b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n@@ -7,7 +7,7 @@\n  * @author hengyunabc 2021-04-26\n  * @since 3.5.1\n  */\n-public class Vmtool {\n+public class Vmtool implements VMtoolMXBean {\n \n     /**\n      * 不要修改jni-lib的名称\n@@ -41,39 +41,69 @@ public static synchronized Vmtool getInstance(String libPath) {\n     /**\n      * 检测jni-lib是否正常，如果正常，应该输出OK\n      */\n-    public static native String check();\n+    private static native String check0();\n \n     /**\n      * 获取某个class在jvm中当前所有存活实例\n      */\n-    public static native <T> ArrayList<T> getInstances(Class<T> klass);\n+    private static native <T> ArrayList<T> getInstances0(Class<T> klass);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n      */\n-    public static native long sumInstanceSize(Class<?> klass);\n+    private static native long sumInstanceSize0(Class<?> klass);\n \n     /**\n      * 获取某个实例的占用内存，单位：Byte\n      */\n-    public static native long getInstanceSize(Object instance);\n+    private static native long getInstanceSize0(Object instance);\n \n     /**\n      * 统计某个class在jvm中当前所有存活实例的总个数\n      */\n-    public static native long countInstances(Class<?> klass);\n+    private static native long countInstances0(Class<?> klass);\n \n     /**\n      * 获取所有已加载的类\n      */\n-    public static native ArrayList<Class<?>> getAllLoadedClasses();\n+    private static native ArrayList<Class<?>> getAllLoadedClasses0();\n \n     /**\n      * 包括小类型(如int)\n      */\n     @SuppressWarnings(\"all\")\n     public static ArrayList<Class> getAllClasses() {\n-        return getInstances(Class.class);\n+        return getInstances0(Class.class);\n+    }\n+\n+    @Override\n+    public String check() {\n+        return check0();\n+    }\n+\n+    @Override\n+    public <T> ArrayList<T> getInstances(Class<T> klass) {\n+        return getInstances0(klass);\n+    }\n+\n+    @Override\n+    public long sumInstanceSize(Class<?> klass) {\n+        return sumInstanceSize0(klass);\n+    }\n+\n+    @Override\n+    public long getInstanceSize(Object instance) {\n+        return getInstanceSize0(instance);\n+    }\n+\n+    @Override\n+    public long countInstances(Class<?> klass) {\n+        return countInstances0(klass);\n+    }\n+\n+    @Override\n+    public ArrayList<Class<?>> getAllLoadedClasses() {\n+        return getAllLoadedClasses0();\n     }\n \n }\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n@@ -28,27 +28,27 @@ public void test01() {\n             System.err.println(path);\n \n             String libPath = new File(path, System.mapLibraryName(Vmtool.JNI_LIBRARY_NAME)).getAbsolutePath();\n-            Vmtool.getInstance(libPath);\n+            Vmtool vmtool = Vmtool.getInstance(libPath);\n \n             //调用native方法，获取已加载的类，不包括小类型(如int)\n-            ArrayList<Class<?>> allLoadedClasses = Vmtool.getAllLoadedClasses();\n+            ArrayList<Class<?>> allLoadedClasses = vmtool.getAllLoadedClasses();\n             System.out.println(\"allLoadedClasses->\" + allLoadedClasses.size());\n \n             //通过下面的例子，可以看到getInstances(Class<T> klass)拿到的是当前存活的所有对象\n             WeakReference<VmtoolTest> weakReference1 = new WeakReference<VmtoolTest>(new VmtoolTest());\n             WeakReference<VmtoolTest> weakReference2 = new WeakReference<VmtoolTest>(new VmtoolTest());\n             System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<Vmtool> beforeInstances = Vmtool.getInstances(Vmtool.class);\n+            ArrayList<Vmtool> beforeInstances = vmtool.getInstances(Vmtool.class);\n             System.out.println(\"before instances->\" + beforeInstances);\n-            System.out.println(\"size->\" + Vmtool.getInstanceSize(weakReference1.get()));\n-            System.out.println(\"count->\" + Vmtool.countInstances(Vmtool.class));\n-            System.out.println(\"sum size->\" + Vmtool.sumInstanceSize(Vmtool.class));\n+            System.out.println(\"size->\" + vmtool.getInstanceSize(weakReference1.get()));\n+            System.out.println(\"count->\" + vmtool.countInstances(Vmtool.class));\n+            System.out.println(\"sum size->\" + vmtool.sumInstanceSize(Vmtool.class));\n             beforeInstances = null;\n \n             System.gc();\n             Thread.sleep(100);\n             System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<Vmtool> afterInstances = Vmtool.getInstances(Vmtool.class);\n+            ArrayList<Vmtool> afterInstances = vmtool.getInstances(Vmtool.class);\n             System.out.println(\"after instances->\" + afterInstances);\n         } catch (Exception e) {\n             e.printStackTrace();",
    "output": "refactor Vmtool, support singleton, support VMtoolMXBean. #1781"
  },
  {
    "input": "diff --git a/memorycompiler/src/test/java/com/taobao/arthas/compiler/DynamicCompilerTest.java b/memorycompiler/src/test/java/com/taobao/arthas/compiler/DynamicCompilerTest.java\n--- a/memorycompiler/src/test/java/com/taobao/arthas/compiler/DynamicCompilerTest.java\n+++ b/memorycompiler/src/test/java/com/taobao/arthas/compiler/DynamicCompilerTest.java\n@@ -1,14 +1,14 @@\n package com.taobao.arthas.compiler;\n \n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.net.URL;\n import java.net.URLClassLoader;\n-import java.nio.charset.Charset;\n import java.util.Map;\n \n-import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n import org.slf4j.LoggerFactory;\n@@ -33,13 +33,45 @@ public void test() throws IOException {\n         InputStream logger1Stream = DynamicCompilerTest.class.getClassLoader().getResourceAsStream(\"TestLogger1.java\");\n         InputStream logger2Stream = DynamicCompilerTest.class.getClassLoader().getResourceAsStream(\"TestLogger2.java\");\n \n-        dynamicCompiler.addSource(\"TestLogger2\", IOUtils.toString(logger2Stream, Charset.defaultCharset()));\n-        dynamicCompiler.addSource(\"TestLogger1\", IOUtils.toString(logger1Stream, Charset.defaultCharset()));\n+        dynamicCompiler.addSource(\"TestLogger2\", toString(logger2Stream));\n+        dynamicCompiler.addSource(\"TestLogger1\", toString(logger1Stream));\n \n         Map<String, byte[]> byteCodes = dynamicCompiler.buildByteCodes();\n \n         Assert.assertTrue(\"TestLogger1\", byteCodes.containsKey(\"com.test.TestLogger1\"));\n         Assert.assertTrue(\"TestLogger2\", byteCodes.containsKey(\"com.hello.TestLogger2\"));\n     }\n \n+    /**\n+     * Get the contents of an <code>InputStream</code> as a String\n+     * using the default character encoding of the platform.\n+     * <p>\n+     * This method buffers the input internally, so there is no need to use a\n+     * <code>BufferedInputStream</code>.\n+     *\n+     * @param input  the <code>InputStream</code> to read from\n+     * @return the requested String\n+     * @throws NullPointerException if the input is null\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static String toString(InputStream input) throws IOException {\n+        BufferedReader br = null;\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            br = new BufferedReader(new InputStreamReader(input));\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                sb.append(line).append(\"\\n\");\n+            }\n+            return sb.toString();\n+        } finally {\n+            if (br != null) {\n+                try {\n+                    br.close();\n+                } catch (IOException e) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n }",
    "output": "fix commons-io security problem. #1782"
  },
  {
    "input": "diff --git a/arthas-vmtool/src/main/java/arthas/Vmtool.java b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n--- a/arthas-vmtool/src/main/java/arthas/Vmtool.java\n+++ b/arthas-vmtool/src/main/java/arthas/Vmtool.java\n@@ -1,28 +1,41 @@\n-package com.vdian.vclub;\n-\n-import com.taobao.arthas.common.AnsiLog;\n-import org.scijava.nativelib.NativeLoader;\n+package arthas;\n \n import java.util.ArrayList;\n \n /**\n  * @author ZhangZiCheng 2021-02-12\n+ * @author hengyunabc 2021-04-26\n  * @since 3.5.1\n  */\n-public class JvmUtils {\n+public class Vmtool {\n \n     /**\n      * 不要修改jni-lib的名称\n      */\n-    private final static String JNI_LIBRARY_NAME = \"ArthasJniLibrary\";\n-\n-    static {\n-        try {\n-            NativeLoader.loadLibrary(JNI_LIBRARY_NAME);\n-            AnsiLog.warn(\"checkResult->\" + check() + \", jni-lib available !\");\n-        } catch (Throwable t) {\n-            AnsiLog.error(\"load jni-lib failed:\" + t.getMessage(), t);\n+    public final static String JNI_LIBRARY_NAME = \"ArthasJniLibrary\";\n+\n+    private static Vmtool instance;\n+\n+    private Vmtool() {\n+    }\n+\n+    public static Vmtool getInstance() {\n+        return getInstance(null);\n+    }\n+\n+    public static synchronized Vmtool getInstance(String libPath) {\n+        if (instance != null) {\n+            return instance;\n         }\n+\n+        if (libPath == null) {\n+            System.loadLibrary(JNI_LIBRARY_NAME);\n+        } else {\n+            System.load(libPath);\n+        }\n+\n+        instance = new Vmtool();\n+        return instance;\n     }\n \n     /**\n\ndiff --git a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n--- a/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n+++ b/arthas-vmtool/src/test/java/arthas/VmtoolTest.java\n@@ -0,0 +1,57 @@\n+package arthas;\n+\n+import org.junit.Test;\n+\n+import arthas.Vmtool;\n+\n+import java.io.File;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+\n+public class VmtoolTest {\n+\n+    /**\n+     * 在我的macbook上运行结果如下\n+     * allLoadedClasses->1050\n+     * arthas.JvmUtils@5bb21b69 arthas.JvmUtils@6b9651f3\n+     * before instances->[arthas.JvmUtils@5bb21b69, arthas.JvmUtils@6b9651f3]\n+     * size->16\n+     * count->2\n+     * sum size->32\n+     * null null\n+     * after instances->[]\n+     */\n+    @Test\n+    public void test01() {\n+        try {\n+            String path = Vmtool.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n+            System.err.println(path);\n+\n+            String libPath = new File(path, System.mapLibraryName(Vmtool.JNI_LIBRARY_NAME)).getAbsolutePath();\n+            Vmtool.getInstance(libPath);\n+\n+            //调用native方法，获取已加载的类，不包括小类型(如int)\n+            ArrayList<Class<?>> allLoadedClasses = Vmtool.getAllLoadedClasses();\n+            System.out.println(\"allLoadedClasses->\" + allLoadedClasses.size());\n+\n+            //通过下面的例子，可以看到getInstances(Class<T> klass)拿到的是当前存活的所有对象\n+            WeakReference<VmtoolTest> weakReference1 = new WeakReference<VmtoolTest>(new VmtoolTest());\n+            WeakReference<VmtoolTest> weakReference2 = new WeakReference<VmtoolTest>(new VmtoolTest());\n+            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n+            ArrayList<Vmtool> beforeInstances = Vmtool.getInstances(Vmtool.class);\n+            System.out.println(\"before instances->\" + beforeInstances);\n+            System.out.println(\"size->\" + Vmtool.getInstanceSize(weakReference1.get()));\n+            System.out.println(\"count->\" + Vmtool.countInstances(Vmtool.class));\n+            System.out.println(\"sum size->\" + Vmtool.sumInstanceSize(Vmtool.class));\n+            beforeInstances = null;\n+\n+            System.gc();\n+            Thread.sleep(100);\n+            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n+            ArrayList<Vmtool> afterInstances = Vmtool.getInstances(Vmtool.class);\n+            System.out.println(\"after instances->\" + afterInstances);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\ndiff --git a/arthas-vmtool/src/test/java/com/vdian/vclub/JvmUtilsTest.java b/arthas-vmtool/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n--- a/arthas-vmtool/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n+++ b/arthas-vmtool/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n@@ -1,48 +0,0 @@\n-package com.vdian.vclub;\n-\n-import org.junit.Test;\n-\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-\n-public class JvmUtilsTest {\n-\n-    /**\n-     * 在我的macbook上运行结果如下\n-     * allLoadedClasses->1050\n-     * com.vdian.vclub.JvmUtils@5bb21b69 com.vdian.vclub.JvmUtils@6b9651f3\n-     * before instances->[com.vdian.vclub.JvmUtils@5bb21b69, com.vdian.vclub.JvmUtils@6b9651f3]\n-     * size->16\n-     * count->2\n-     * sum size->32\n-     * null null\n-     * after instances->[]\n-     */\n-    @Test\n-    public void test01() {\n-        try {\n-            //调用native方法，获取已加载的类，不包括小类型(如int)\n-            ArrayList<Class<?>> allLoadedClasses = JvmUtils.getAllLoadedClasses();\n-            System.out.println(\"allLoadedClasses->\" + allLoadedClasses.size());\n-\n-            //通过下面的例子，可以看到getInstances(Class<T> klass)拿到的是当前存活的所有对象\n-            WeakReference<JvmUtils> weakReference1 = new WeakReference<JvmUtils>(new JvmUtils());\n-            WeakReference<JvmUtils> weakReference2 = new WeakReference<JvmUtils>(new JvmUtils());\n-            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<JvmUtils> beforeInstances = JvmUtils.getInstances(JvmUtils.class);\n-            System.out.println(\"before instances->\" + beforeInstances);\n-            System.out.println(\"size->\" + JvmUtils.getInstanceSize(weakReference1.get()));\n-            System.out.println(\"count->\" + JvmUtils.countInstances(JvmUtils.class));\n-            System.out.println(\"sum size->\" + JvmUtils.sumInstanceSize(JvmUtils.class));\n-            beforeInstances = null;\n-\n-            System.gc();\n-            Thread.sleep(100);\n-            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n-            ArrayList<JvmUtils> afterInstances = JvmUtils.getInstances(JvmUtils.class);\n-            System.out.println(\"after instances->\" + afterInstances);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}",
    "output": "rename JvmUtils to Vmtool. #1781"
  },
  {
    "input": "diff --git a/arthas-beans/src/main/java/com/vdian/vclub/JvmUtils.java b/arthas-beans/src/main/java/com/vdian/vclub/JvmUtils.java\n--- a/arthas-beans/src/main/java/com/vdian/vclub/JvmUtils.java\n+++ b/arthas-beans/src/main/java/com/vdian/vclub/JvmUtils.java\n@@ -0,0 +1,66 @@\n+package com.vdian.vclub;\n+\n+import com.taobao.arthas.common.AnsiLog;\n+import org.scijava.nativelib.NativeLoader;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * @author ZhangZiCheng 2021-02-12\n+ * @since 3.5.1\n+ */\n+public class JvmUtils {\n+\n+    /**\n+     * 不要修改jni-lib的名称\n+     */\n+    private final static String JNI_LIBRARY_NAME = \"ArthasJniLibrary\";\n+\n+    static {\n+        try {\n+            NativeLoader.loadLibrary(JNI_LIBRARY_NAME);\n+            AnsiLog.warn(\"checkResult->\" + check() + \", jni-lib available !\");\n+        } catch (Throwable t) {\n+            AnsiLog.error(\"load jni-lib failed:\" + t.getMessage(), t);\n+        }\n+    }\n+\n+    /**\n+     * 检测jni-lib是否正常，如果正常，应该输出OK\n+     */\n+    public static native String check();\n+\n+    /**\n+     * 获取某个class在jvm中当前所有存活实例\n+     */\n+    public static native <T> ArrayList<T> getInstances(Class<T> klass);\n+\n+    /**\n+     * 统计某个class在jvm中当前所有存活实例的总占用内存，单位：Byte\n+     */\n+    public static native long sumInstanceSize(Class<?> klass);\n+\n+    /**\n+     * 获取某个实例的占用内存，单位：Byte\n+     */\n+    public static native long getInstanceSize(Object instance);\n+\n+    /**\n+     * 统计某个class在jvm中当前所有存活实例的总个数\n+     */\n+    public static native long countInstances(Class<?> klass);\n+\n+    /**\n+     * 获取所有已加载的类\n+     */\n+    public static native ArrayList<Class<?>> getAllLoadedClasses();\n+\n+    /**\n+     * 包括小类型(如int)\n+     */\n+    @SuppressWarnings(\"all\")\n+    public static ArrayList<Class> getAllClasses() {\n+        return getInstances(Class.class);\n+    }\n+\n+}\n\ndiff --git a/arthas-beans/src/test/java/com/vdian/vclub/JvmUtilsTest.java b/arthas-beans/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n--- a/arthas-beans/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n+++ b/arthas-beans/src/test/java/com/vdian/vclub/JvmUtilsTest.java\n@@ -0,0 +1,48 @@\n+package com.vdian.vclub;\n+\n+import org.junit.Test;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+\n+public class JvmUtilsTest {\n+\n+    /**\n+     * 在我的macbook上运行结果如下\n+     * allLoadedClasses->1050\n+     * com.vdian.vclub.JvmUtils@5bb21b69 com.vdian.vclub.JvmUtils@6b9651f3\n+     * before instances->[com.vdian.vclub.JvmUtils@5bb21b69, com.vdian.vclub.JvmUtils@6b9651f3]\n+     * size->16\n+     * count->2\n+     * sum size->32\n+     * null null\n+     * after instances->[]\n+     */\n+    @Test\n+    public void test01() {\n+        try {\n+            //调用native方法，获取已加载的类，不包括小类型(如int)\n+            ArrayList<Class<?>> allLoadedClasses = JvmUtils.getAllLoadedClasses();\n+            System.out.println(\"allLoadedClasses->\" + allLoadedClasses.size());\n+\n+            //通过下面的例子，可以看到getInstances(Class<T> klass)拿到的是当前存活的所有对象\n+            WeakReference<JvmUtils> weakReference1 = new WeakReference<JvmUtils>(new JvmUtils());\n+            WeakReference<JvmUtils> weakReference2 = new WeakReference<JvmUtils>(new JvmUtils());\n+            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n+            ArrayList<JvmUtils> beforeInstances = JvmUtils.getInstances(JvmUtils.class);\n+            System.out.println(\"before instances->\" + beforeInstances);\n+            System.out.println(\"size->\" + JvmUtils.getInstanceSize(weakReference1.get()));\n+            System.out.println(\"count->\" + JvmUtils.countInstances(JvmUtils.class));\n+            System.out.println(\"sum size->\" + JvmUtils.sumInstanceSize(JvmUtils.class));\n+            beforeInstances = null;\n+\n+            System.gc();\n+            Thread.sleep(100);\n+            System.out.println(weakReference1.get() + \" \" + weakReference2.get());\n+            ArrayList<JvmUtils> afterInstances = JvmUtils.getInstances(JvmUtils.class);\n+            System.out.println(\"after instances->\" + afterInstances);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}",
    "output": "add basic vmtools code. #1698"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n@@ -82,38 +82,37 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request)\n                 }\n \n                 //handle webui requests\n-                if (path.equals(\"/ui\")){\n+                if (path.equals(\"/ui\")) {\n                     response = createRedirectResponse(request, \"/ui/\");\n                 }\n                 if (path.equals(\"/ui/\")) {\n                     path += \"index.html\";\n                 }\n \n                 //try classpath resource first\n-                if (response == null){\n+                if (response == null) {\n                     response = readFileFromResource(request, path);\n                 }\n \n                 //try output dir later, avoid overlay classpath resources files\n-                if (response == null){\n-                    response = DirectoryBrowser.directView(dir, path, request,ctx);\n+                if (response == null) {\n+                    response = DirectoryBrowser.directView(dir, path, request, ctx);\n                     isFileResponseFinished = (response == null) ? false : true;\n                 }\n \n                 //not found\n-                if (response == null){\n+                if (response == null) {\n                     response = createResponse(request, HttpResponseStatus.NOT_FOUND, \"Not found\");\n                 }\n             } catch (Throwable e) {\n                 logger.error(\"arthas process http request error: \" + request.uri(), e);\n             } finally {\n                 //If it is null, an error may occur\n-                if (response == null){\n+                if (response == null) {\n                     response = createResponse(request, HttpResponseStatus.INTERNAL_SERVER_ERROR, \"Server error\");\n                 }\n-                if(!isFileResponseFinished) {\n-                    ctx.write(response);\n-                    ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                if (!isFileResponseFinished) {\n+                    ChannelFuture future = writeResponse(ctx, response);\n                     future.addListener(ChannelFutureListener.CLOSE);\n                     //reuse http api response buf\n                     if (isHttpApiResponse && response instanceof DefaultFullHttpResponse) {\n@@ -130,14 +129,28 @@ public void operationComplete(ChannelFuture future) throws Exception {\n         }\n     }\n \n+    private ChannelFuture writeResponse(ChannelHandlerContext ctx, HttpResponse response) {\n+        // try to add content-length header for DefaultFullHttpResponse\n+        if (!HttpUtil.isTransferEncodingChunked(response)\n+            && response instanceof DefaultFullHttpResponse) {\n+            response.headers().set(HttpHeaderNames.CONTENT_LENGTH,\n+                ((DefaultFullHttpResponse) response).content().readableBytes());\n+            return ctx.writeAndFlush(response);\n+        }\n+\n+        //chunk response\n+        ctx.write(response);\n+        return ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+    }\n+\n     private HttpResponse readFileFromResource(FullHttpRequest request, String path) throws IOException {\n         DefaultFullHttpResponse fullResp = null;\n         InputStream in = null;\n         try {\n             URL res = HttpTtyConnection.class.getResource(\"/com/taobao/arthas/core/http\" + path);\n             if (res != null) {\n                 fullResp = new DefaultFullHttpResponse(request.protocolVersion(),\n-                        HttpResponseStatus.OK);\n+                    HttpResponseStatus.OK);\n                 in = res.openStream();\n                 byte[] tmp = new byte[256];\n                 for (int l = 0; l != -1; l = in.read(tmp)) {",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n@@ -82,38 +82,37 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request)\n                 }\n \n                 //handle webui requests\n-                if (path.equals(\"/ui\")){\n+                if (path.equals(\"/ui\")) {\n                     response = createRedirectResponse(request, \"/ui/\");\n                 }\n                 if (path.equals(\"/ui/\")) {\n                     path += \"index.html\";\n                 }\n \n                 //try classpath resource first\n-                if (response == null){\n+                if (response == null) {\n                     response = readFileFromResource(request, path);\n                 }\n \n                 //try output dir later, avoid overlay classpath resources files\n-                if (response == null){\n-                    response = DirectoryBrowser.directView(dir, path, request,ctx);\n+                if (response == null) {\n+                    response = DirectoryBrowser.directView(dir, path, request, ctx);\n                     isFileResponseFinished = (response == null) ? false : true;\n                 }\n \n                 //not found\n-                if (response == null){\n+                if (response == null) {\n                     response = createResponse(request, HttpResponseStatus.NOT_FOUND, \"Not found\");\n                 }\n             } catch (Throwable e) {\n                 logger.error(\"arthas process http request error: \" + request.uri(), e);\n             } finally {\n                 //If it is null, an error may occur\n-                if (response == null){\n+                if (response == null) {\n                     response = createResponse(request, HttpResponseStatus.INTERNAL_SERVER_ERROR, \"Server error\");\n                 }\n-                if(!isFileResponseFinished) {\n-                    ctx.write(response);\n-                    ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+                if (!isFileResponseFinished) {\n+                    ChannelFuture future = writeResponse(ctx, response);\n                     future.addListener(ChannelFutureListener.CLOSE);\n                     //reuse http api response buf\n                     if (isHttpApiResponse && response instanceof DefaultFullHttpResponse) {\n@@ -130,14 +129,28 @@ public void operationComplete(ChannelFuture future) throws Exception {\n         }\n     }\n \n+    private ChannelFuture writeResponse(ChannelHandlerContext ctx, HttpResponse response) {\n+        // try to add content-length header for DefaultFullHttpResponse\n+        if (!HttpUtil.isTransferEncodingChunked(response)\n+            && response instanceof DefaultFullHttpResponse) {\n+            response.headers().set(HttpHeaderNames.CONTENT_LENGTH,\n+                ((DefaultFullHttpResponse) response).content().readableBytes());\n+            return ctx.writeAndFlush(response);\n+        }\n+\n+        //chunk response\n+        ctx.write(response);\n+        return ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n+    }\n+\n     private HttpResponse readFileFromResource(FullHttpRequest request, String path) throws IOException {\n         DefaultFullHttpResponse fullResp = null;\n         InputStream in = null;\n         try {\n             URL res = HttpTtyConnection.class.getResource(\"/com/taobao/arthas/core/http\" + path);\n             if (res != null) {\n                 fullResp = new DefaultFullHttpResponse(request.protocolVersion(),\n-                        HttpResponseStatus.OK);\n+                    HttpResponseStatus.OK);\n                 in = res.openStream();\n                 byte[] tmp = new byte[256];\n                 for (int l = 0; l != -1; l = in.read(tmp)) {",
    "output": "set content-length header for DefaultFullHttpResponse (#1779)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n@@ -115,6 +115,9 @@ private void addClassLoading(JvmModel jvmModel) {\n     }\n \n     private void addCompilation(JvmModel jvmModel) {\n+        if (compilationMXBean == null) {\n+            return;\n+        }\n         String group = \"COMPILATION\";\n         jvmModel.addItem(group, \"NAME\", compilationMXBean.getName());\n         if (compilationMXBean.isCompilationTimeMonitoringSupported()) {",
    "output": "fix CompilationMXBean may null problem. #1772"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/JadView.java b/core/src/main/java/com/taobao/arthas/core/command/view/JadView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/JadView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/JadView.java\n@@ -26,19 +26,20 @@ public void draw(CommandProcess process, JadModel result) {\n             return;\n         }\n \n+        int width = process.width();\n         if (result.getMatchedClasses() != null) {\n             Element table = ClassUtils.renderMatchedClasses(result.getMatchedClasses());\n-            process.write(RenderUtil.render(table)).write(\"\\n\");\n+            process.write(RenderUtil.render(table, width)).write(\"\\n\");\n         } else {\n             ClassVO classInfo = result.getClassInfo();\n             if (classInfo != null) {\n                 process.write(\"\\n\");\n-                process.write(RenderUtil.render(new LabelElement(\"ClassLoader: \").style(Decoration.bold.fg(Color.red)), process.width()));\n-                process.write(RenderUtil.render(TypeRenderUtils.drawClassLoader(classInfo), process.width()) + \"\\n\");\n+                process.write(RenderUtil.render(new LabelElement(\"ClassLoader: \").style(Decoration.bold.fg(Color.red)), width));\n+                process.write(RenderUtil.render(TypeRenderUtils.drawClassLoader(classInfo), width) + \"\\n\");\n             }\n             if (result.getLocation() != null) {\n-                process.write(RenderUtil.render(new LabelElement(\"Location: \").style(Decoration.bold.fg(Color.red)), process.width()));\n-                process.write(RenderUtil.render(new LabelElement(result.getLocation()).style(Decoration.bold.fg(Color.blue)), process.width()) + \"\\n\");\n+                process.write(RenderUtil.render(new LabelElement(\"Location: \").style(Decoration.bold.fg(Color.red)), width));\n+                process.write(RenderUtil.render(new LabelElement(result.getLocation()).style(Decoration.bold.fg(Color.blue)), width) + \"\\n\");\n             }\n             process.write(LangRenderUtil.render(result.getSource()) + \"\\n\");\n             process.write(com.taobao.arthas.core.util.Constants.EMPTY_STRING);",
    "output": "fix jad command render table width problem. #1767"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -23,9 +23,14 @@\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.Matcher;\n+import com.taobao.arthas.core.view.Ansi;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.text.Color;\n+import com.taobao.text.Decoration;\n+import com.taobao.text.ui.LabelElement;\n+import com.taobao.text.util.RenderUtil;\n \n /**\n  * @author beiwei30 on 29/11/2016.\n@@ -173,11 +178,19 @@ protected void enhance(CommandProcess process) {\n                 // no class effected\n                 // might be method code too large\n                 process.appendResult(new EnhancerModel(effect, false, \"No class or method is affected\"));\n+\n+                String smCommand = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"sm CLASS_NAME METHOD_NAME\").reset().toString();\n+                String optionsCommand = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"options unsafe true\").reset().toString();\n+                String javaPackage = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"java.*\").reset().toString();\n+                String resetCommand = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"reset CLASS_NAME\").reset().toString();\n+                String logStr = Ansi.ansi().fg(Ansi.Color.GREEN).a(LogUtil.loggingFile()).reset().toString();\n+                String issueStr = Ansi.ansi().fg(Ansi.Color.GREEN).a(\"https://github.com/alibaba/arthas/issues/47\").reset().toString();\n                 String msg = \"No class or method is affected, try:\\n\"\n-                        + \"1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n-                        + \"2. reset CLASS_NAME and try again, your method body might be too large.\\n\"\n-                        + \"3. check arthas log: \" + LogUtil.loggingFile() + \"\\n\"\n-                        + \"4. visit https://github.com/alibaba/arthas/issues/47 for more details.\";\n+                        + \"1. Execute `\" + smCommand + \"` to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n+                        + \"2. Execute `\" + optionsCommand + \"`, if you want to enhance the classes under the `\" + javaPackage + \"` package.\\n\"\n+                        + \"3. Execute `\" + resetCommand + \"` and try again, your method body might be too large.\\n\"\n+                        + \"4. Check arthas log: \" + logStr + \"\\n\"\n+                        + \"5. Visit \" + issueStr + \" for more details.\";\n                 process.end(-1, msg);\n                 return;\n             }",
    "output": "improve the prompt message when enhance failure."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -188,7 +188,14 @@ private ExitStatus processTopBusyThreads(CommandProcess process) {\n         List<ThreadVO> threadStats = threadSampler.sample(ThreadUtil.getThreads());\n \n         int limit = Math.min(threadStats.size(), topNBusy);\n-        List<ThreadVO> topNThreads = threadStats.subList(0, limit);\n+\n+        List<ThreadVO> topNThreads = null;\n+        if (limit > 0) {\n+            topNThreads = threadStats.subList(0, limit);\n+        } else { // -1 for all threads\n+            topNThreads = threadStats;\n+        }\n+\n         List<Long> tids = new ArrayList<Long>(topNThreads.size());\n         for (ThreadVO thread : topNThreads) {\n             if (thread.getId() > 0) {",
    "output": "fix thread -n -1. #1755"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -65,7 +65,7 @@ public static long select(boolean v, long telnetPortPid, String select) throws I\n         }\n \n         if (processMap.isEmpty()) {\n-            AnsiLog.info(\"Can not find java process. Try to pass <pid> in command line.\");\n+            AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n             return -1;\n         }\n ",
    "output": "update help message when can not find java process. close #1748"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -12,7 +12,11 @@\n import java.util.StringTokenizer;\n import java.util.TreeSet;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+\n public abstract class StringUtils {\n+    private static final Logger logger = LoggerFactory.getLogger(StringUtils.class);\n     private static final String AB = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n \n     /**\n@@ -41,7 +45,10 @@ public static String objectToString(Object obj) {\n         try {\n             return obj.toString();\n         } catch (Throwable t) {\n-            return \"ERROR DATA!!! Method toString() throw exception. obj class: \" + obj.getClass() + \", exception message: \" + t.getMessage();\n+            logger.error(\"objectToString error, obj class: {}\", obj.getClass(), t);\n+            return \"ERROR DATA!!! Method toString() throw exception. obj class: \" + obj.getClass()\n+                    + \", exception class: \" + t.getClass()\n+                    + \", exception message: \" + t.getMessage();\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -1,5 +1,7 @@\n package com.taobao.arthas.core.view;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.alibaba.fastjson.JSON;\n import com.alibaba.fastjson.serializer.SerializerFeature;\n import com.taobao.arthas.core.GlobalOptions;\n@@ -18,7 +20,7 @@\n  * Created by vlinux on 15/5/20.\n  */\n public class ObjectView implements View {\n-\n+    private static final Logger logger = LoggerFactory.getLogger(ObjectView.class);\n     private final static int MAX_OBJECT_LENGTH = 10 * 1024 * 1024; // 10M\n \n     private final Object object;\n@@ -50,7 +52,9 @@ public String draw() {\n                     .append(\", try to specify -M size_limit in your command, check the help command for more.\");\n             return buf.toString();\n         } catch (Throwable t) {\n-            return \"ERROR DATA!!! exception message: \" + t.getMessage();\n+            logger.error(\"ObjectView draw error, object class: {}\", object.getClass(), t);\n+            return \"ERROR DATA!!! object class: \" + object.getClass() + \", exception class: \" + t.getClass()\n+                    + \", exception message: \" + t.getMessage();\n         }\n     }\n \n@@ -583,7 +587,7 @@ else if (object instanceof Enum<?>) {\n                 } else {\n                     appendStringBuilder(buf, format(\"@%s[\", className));\n                     List<Field> fields = new ArrayList<Field>();\n-                    Class objClass = obj.getClass();\n+                    Class<?> objClass = obj.getClass();\n                     if (GlobalOptions.printParentFields) {\n                         // 当父类为null的时候说明到达了最上层的父类(Object类).\n                         while (objClass != null) {",
    "output": "print more detail when render object throw exception. #1740"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -55,7 +55,7 @@\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar --use-version 3.5.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n-                + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n+                + \"  java -jar arthas-boot.jar --select math-game\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"\n                 + \"  https://arthas.aliyun.com/doc\\n\")",
    "output": "rename arthas-demo to math-game. #1738"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -402,12 +402,14 @@ private void bind(Configure configure) throws Throwable {\n \n             // TODO: discover user provided command resolver\n             if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n+                logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n                 shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                         options.getConnectionTimeout(), workerGroup, httpSessionManager));\n             } else {\n                 logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n             }\n             if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n+                logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n                 shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                         options.getConnectionTimeout(), workerGroup, httpSessionManager));\n             } else {\n@@ -425,7 +427,9 @@ private void bind(Configure configure) throws Throwable {\n \n             shellServer.listen(new BindHandler(isBindRef));\n             if (!isBind()) {\n-                throw new IllegalStateException(\"Arthas failed to bind telnet or http port.\");\n+                throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n+                        + String.valueOf(configure.getTelnetPort()) + \", http port: \"\n+                        + String.valueOf(configure.getHttpPort()));\n             }\n \n             //http api session manager",
    "output": "print more info when failed to bind server. #1737"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,7 +53,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.8\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.5.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.5.0"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -520,6 +520,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                 attachArgs.add(\"\" + bootstrap.getSessionTimeout());\n             }\n \n+            if (bootstrap.getAppName() != null) {\n+                attachArgs.add(\"-app-name\");\n+                attachArgs.add(bootstrap.getAppName());\n+            }\n+\n             if (bootstrap.getUsername() != null) {\n                 attachArgs.add(\"-username\");\n                 attachArgs.add(bootstrap.getUsername());",
    "output": "fix arthas-boot --app-name option support. #1725"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -56,6 +56,7 @@\n public class HttpApiHandler {\n \n     private static final Logger logger = LoggerFactory.getLogger(HttpApiHandler.class);\n+    private static final String ONETIME_SESSION_KEY = \"oneTimeSession\";\n     public static final int DEFAULT_EXEC_TIMEOUT = 30000;\n     private final SessionManager sessionManager;\n     private final InternalCommandManager commandManager;\n@@ -228,6 +229,12 @@ private ApiResponse processRequest(ChannelHandlerContext ctx, ApiRequest apiRequ\n                 sessionManager.updateAccessTime(session);\n             }\n \n+            // 标记所谓的一次性session\n+            if (session == null) {\n+                session = sessionManager.createSession();\n+                session.put(ONETIME_SESSION_KEY, new Object());\n+            }\n+\n             // 请求到达这里，如果有需要鉴权，则已经在前面的handler里处理过了\n             // 如果有鉴权取到的 Subject，则传递到 arthas的session里\n             HttpSession httpSession = HttpSessionManager.getHttpSessionFromContext(ctx);\n@@ -376,9 +383,8 @@ private ApiResponse processCloseSessionRequest(ApiRequest apiRequest, Session se\n      */\n     private ApiResponse processExecRequest(ApiRequest apiRequest, Session session) {\n         boolean oneTimeAccess = false;\n-        if (session == null) {\n+        if (session.get(ONETIME_SESSION_KEY) != null) {\n             oneTimeAccess = true;\n-            session = sessionManager.createSession();\n         }\n \n         try {",
    "output": "fix one time http api support. #1655"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n@@ -164,9 +164,10 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n+        logger.error(\"TunnelClient error, tunnel server url: \" + tunnelClient.getTunnelServerUrl(), cause);\n         if (!registerPromise.isDone()) {\n             registerPromise.setFailure(cause);\n         }\n-        ctx.fireExceptionCaught(cause);\n+        ctx.close();\n     }\n }",
    "output": "tunnel client close ctx in exceptionCaught. #1720"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -258,6 +258,7 @@ private void agentRegister(ChannelHandlerContext ctx, HandshakeComplete handshak\n                 info.setPort(inetSocketAddress.getPort());\n             }\n         } else {\n+            info.setHost(host);\n             Integer port = HttpUtils.findClientPort(headers);\n             if (port != null) {\n                 info.setPort(port);",
    "output": "read cleint ip from X-Forwarded-For header. #1714"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/PidUtils.java b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.common;\n \n import java.lang.management.ManagementFactory;\n+import java.util.Map;\n \n /**\n  *\n@@ -11,6 +12,8 @@ public class PidUtils {\n     private static String PID = \"-1\";\n     private static long pid = -1;\n \n+    private static String MAIN_CLASS = \"\";\n+\n     static {\n         // https://stackoverflow.com/a/7690178\n         try {\n@@ -24,6 +27,16 @@ public class PidUtils {\n         } catch (Throwable e) {\n             // ignore\n         }\n+\n+        try {\n+            for (final Map.Entry<String, String> entry : System.getenv().entrySet()) {\n+                if (entry.getKey().startsWith(\"JAVA_MAIN_CLASS\")) // like JAVA_MAIN_CLASS_13328\n+                    MAIN_CLASS = entry.getValue();\n+            }\n+        } catch (Throwable e) {\n+            // ignore\n+        }\n+\n     }\n \n     private PidUtils() {\n@@ -36,4 +49,8 @@ public static String currentPid() {\n     public static long currentLongPid() {\n         return pid;\n     }\n+\n+    public static String mainClass() {\n+        return MAIN_CLASS;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/WelcomeModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/WelcomeModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/WelcomeModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/WelcomeModel.java\n@@ -10,6 +10,7 @@ public class WelcomeModel extends ResultModel {\n     private String version;\n     private String wiki;\n     private String tutorials;\n+    private String mainClass;\n \n     public WelcomeModel() {\n     }\n@@ -58,4 +59,12 @@ public String getTutorials() {\n     public void setTutorials(String tutorials) {\n         this.tutorials = tutorials;\n     }\n+\n+    public String getMainClass() {\n+        return mainClass;\n+    }\n+\n+    public void setMainClass(String mainClass) {\n+        this.mainClass = mainClass;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -286,6 +286,7 @@ private ApiResponse processInitSessionRequest(ApiRequest apiRequest) throws ApiE\n             welcomeModel.setVersion(ArthasBanner.version());\n             welcomeModel.setWiki(ArthasBanner.wiki());\n             welcomeModel.setTutorials(ArthasBanner.tutorials());\n+            welcomeModel.setMainClass(PidUtils.mainClass());\n             welcomeModel.setPid(PidUtils.currentPid());\n             welcomeModel.setTime(DateUtils.getCurrentDate());\n             resultDistributor.appendResult(welcomeModel);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -114,6 +114,7 @@ public static String welcome(Map<String, String> infos) {\n                         .row(\"wiki\", wiki())\n                         .row(\"tutorials\", tutorials())\n                         .row(\"version\", version())\n+                        .row(\"main_class\", PidUtils.mainClass())\n                         .row(\"pid\", PidUtils.currentPid())\n                         .row(\"time\", DateUtils.getCurrentDate());\n         for (Entry<String, String> entry : infos.entrySet()) {",
    "output": "print main class in welcome message. #1719"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/LocalFrameHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/LocalFrameHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/LocalFrameHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/LocalFrameHandler.java\n@@ -1,13 +1,16 @@\n package com.alibaba.arthas.tunnel.client;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelPromise;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler.ClientHandshakeStateEvent;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n \n public class LocalFrameHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n-\n+    private final static Logger logger = LoggerFactory.getLogger(LocalFrameHandler.class);\n     private ChannelPromise handshakeFuture;\n \n     public LocalFrameHandler() {\n@@ -34,7 +37,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n-        cause.printStackTrace();\n+        logger.error(\"LocalFrameHandler error\", cause);\n         if (!handshakeFuture.isDone()) {\n             handshakeFuture.setFailure(cause);\n         }\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/RelayHandler.java\n@@ -1,13 +1,16 @@\n package com.alibaba.arthas.tunnel.client;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import io.netty.buffer.Unpooled;\n import io.netty.channel.Channel;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInboundHandlerAdapter;\n import io.netty.util.ReferenceCountUtil;\n \n public final class RelayHandler extends ChannelInboundHandlerAdapter {\n-\n+    private final static Logger logger = LoggerFactory.getLogger(RelayHandler.class);\n     private final Channel relayChannel;\n \n     public RelayHandler(Channel relayChannel) {\n@@ -37,7 +40,7 @@ public void channelInactive(ChannelHandlerContext ctx) {\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n-        cause.printStackTrace();\n+        logger.error(\"RelayHandler error\", cause);\n         ctx.close();\n     }\n }\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n@@ -25,7 +25,6 @@\n import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n-import io.netty.handler.timeout.IdleState;\n import io.netty.handler.timeout.IdleStateEvent;\n import io.netty.util.CharsetUtil;\n ",
    "output": "fix print exception #1717"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -22,6 +22,7 @@\n import com.alibaba.arthas.tunnel.common.MethodConstants;\n import com.alibaba.arthas.tunnel.common.SimpleHttpResponse;\n import com.alibaba.arthas.tunnel.common.URIConstans;\n+import com.alibaba.arthas.tunnel.server.utils.HttpUtils;\n \n import io.netty.channel.Channel;\n import io.netty.channel.ChannelHandlerContext;\n@@ -62,15 +63,15 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n             logger.info(\"websocket handshake complete, uri: {}\", uri);\n \n             MultiValueMap<String, String> parameters = UriComponentsBuilder.fromUriString(uri).build().getQueryParams();\n-            String method = parameters.getFirst(\"method\");\n+            String method = parameters.getFirst(URIConstans.METHOD);\n \n             if (MethodConstants.CONNECT_ARTHAS.equals(method)) { // form browser\n                 connectArthas(ctx, parameters);\n             } else if (MethodConstants.AGENT_REGISTER.equals(method)) { // form arthas agent, register\n                 agentRegister(ctx, handshake, uri);\n             }\n             if (MethodConstants.OPEN_TUNNEL.equals(method)) { // from arthas agent open tunnel\n-                String clientConnectionId = parameters.getFirst(\"clientConnectionId\");\n+                String clientConnectionId = parameters.getFirst(URIConstans.CLIENT_CONNECTION_ID);\n                 openTunnel(ctx, clientConnectionId);\n             }\n         } else {\n@@ -247,8 +248,7 @@ private void agentRegister(ChannelHandlerContext ctx, HandshakeComplete handshak\n \n         // 前面可能有nginx代理\n         HttpHeaders headers = handshake.requestHeaders();\n-        String host = headers.get(\"X-Real-IP\");\n-        String portStr = headers.get(\"X-Real-Port\");\n+        String host = HttpUtils.findClientIP(headers);\n \n         if (host == null) {\n             SocketAddress remoteAddress = ctx.channel().remoteAddress();\n@@ -258,14 +258,9 @@ private void agentRegister(ChannelHandlerContext ctx, HandshakeComplete handshak\n                 info.setPort(inetSocketAddress.getPort());\n             }\n         } else {\n-            info.setHost(host);\n-            try {\n-                if (portStr != null) {\n-                    int port = Integer.parseInt(portStr);\n-                    info.setPort(port);\n-                }\n-            } catch (Throwable e) {\n-                // ignore\n+            Integer port = HttpUtils.findClientPort(headers);\n+            if (port != null) {\n+                info.setPort(port);\n             }\n         }\n \n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/utils/HttpUtils.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/utils/HttpUtils.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/utils/HttpUtils.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/utils/HttpUtils.java\n@@ -0,0 +1,31 @@\n+package com.alibaba.arthas.tunnel.server.utils;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-02-26\n+ *\n+ */\n+public class HttpUtils {\n+\n+    public static String findClientIP(HttpHeaders headers) {\n+        String hostStr = headers.get(\"X-Forwarded-For\");\n+        if (hostStr == null) {\n+            return null;\n+        }\n+        int index = hostStr.indexOf(',');\n+        if (index > 0) {\n+            hostStr = hostStr.substring(0, index);\n+        }\n+        return hostStr;\n+    }\n+\n+    public static Integer findClientPort(HttpHeaders headers) {\n+        String portStr = headers.get(\"X-Real-Port\");\n+        if (portStr != null) {\n+            return Integer.parseInt(portStr);\n+        }\n+        return null;\n+    }\n+}\n\ndiff --git a/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/utils/HttpUtilsTest.java b/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/utils/HttpUtilsTest.java\n--- a/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/utils/HttpUtilsTest.java\n+++ b/tunnel-server/src/test/java/com/alibaba/arthas/tunnel/server/utils/HttpUtilsTest.java\n@@ -0,0 +1,47 @@\n+package com.alibaba.arthas.tunnel.server.utils;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-02-26\n+ *\n+ */\n+public class HttpUtilsTest {\n+\n+    @Test\n+    public void test1() {\n+        HttpHeaders headers = Mockito.mock(HttpHeaders.class);\n+        Mockito.when(headers.get(\"X-Forwarded-For\")).thenReturn(\"30.25.233.172, 11.162.179.161\");\n+\n+        String ip = HttpUtils.findClientIP(headers);\n+\n+        Assertions.assertThat(ip).isEqualTo(\"30.25.233.172\");\n+    }\n+\n+    @Test\n+    public void test2() {\n+        HttpHeaders headers = Mockito.mock(HttpHeaders.class);\n+        Mockito.when(headers.get(\"X-Forwarded-For\")).thenReturn(\"30.25.233.172\");\n+\n+        String ip = HttpUtils.findClientIP(headers);\n+\n+        Assertions.assertThat(ip).isEqualTo(\"30.25.233.172\");\n+\n+    }\n+\n+    @Test\n+    public void test3() {\n+        HttpHeaders headers = Mockito.mock(HttpHeaders.class);\n+        Mockito.when(headers.get(\"X-Forwarded-For\")).thenReturn(null);\n+\n+        String ip = HttpUtils.findClientIP(headers);\n+\n+        Assertions.assertThat(ip).isEqualTo(null);\n+\n+    }\n+}",
    "output": "read cleint ip from X-Forwarded-For header. #1714"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java\n@@ -63,7 +63,12 @@ public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod meth\n     @Override\n     public void afterThrowing(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,\n                               Throwable throwable) throws Throwable {\n-        int lineNumber = throwable.getStackTrace()[0].getLineNumber();\n+        int lineNumber = -1;\n+        StackTraceElement[] stackTrace = throwable.getStackTrace();\n+        if (stackTrace.length != 0) {\n+            lineNumber = stackTrace[0].getLineNumber();\n+        }\n+\n         threadLocalTraceEntity(loader).tree.end(throwable, lineNumber);\n         final Advice advice = Advice.newForAfterThrowing(loader, clazz, method, target, args, throwable);\n         finishing(loader, advice);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -208,8 +208,7 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l\n         }\n         sb.append('\\n');\n         int i = 0;\n-        for (; i < threadInfo.getStackTrace().length; i++) {\n-            StackTraceElement ste = threadInfo.getStackTrace()[i];\n+        for (StackTraceElement ste : threadInfo.getStackTrace()) {\n             sb.append(\"\\tat \").append(ste.toString());\n             sb.append('\\n');\n             if (i == 0 && threadInfo.getLockInfo() != null) {\n@@ -242,6 +241,7 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l\n                     sb.append('\\n');\n                 }\n             }\n+            ++i;\n         }\n         if (i < threadInfo.getStackTrace().length) {\n             sb.append(\"\\t...\");",
    "output": "fix AbstractTraceAdviceListener may throw ArrayIndexOutOfBoundsException problem. #1712"
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -1,34 +1,31 @@\n /*\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n-*/\n-\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n import java.net.*;\n import java.io.*;\n import java.nio.channels.*;\n import java.util.Properties;\n \n public class MavenWrapperDownloader {\n \n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n     /**\n      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n      */\n-    private static final String DEFAULT_DOWNLOAD_URL =\n-            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\";\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n \n     /**\n      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n@@ -76,13 +73,13 @@ public static void main(String args[]) {\n                 }\n             }\n         }\n-        System.out.println(\"- Downloading from: : \" + url);\n+        System.out.println(\"- Downloading from: \" + url);\n \n         File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n         if(!outputFile.getParentFile().exists()) {\n             if(!outputFile.getParentFile().mkdirs()) {\n                 System.out.println(\n-                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n             }\n         }\n         System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n@@ -98,6 +95,16 @@ public static void main(String args[]) {\n     }\n \n     private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n+            String username = System.getenv(\"MVNW_USERNAME\");\n+            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n+            Authenticator.setDefault(new Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                    return new PasswordAuthentication(username, password);\n+                }\n+            });\n+        }\n         URL website = new URL(urlString);\n         ReadableByteChannel rbc;\n         rbc = Channels.newChannel(website.openStream());",
    "output": "upgrade mvnw, use maven 3.6.3 (#1713)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.7\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.8\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.4.8"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -113,7 +113,8 @@ private static String addLineNumber(String src, Map<Integer, Integer> lineMappin\n         String emptyStr = \"       \";\n \n         StringBuilder sb = new StringBuilder();\n-        String[] lines = src.split(\"\\\\R\");\n+\n+        List<String> lines = StringUtils.toLines(src);\n \n         if (maxLineNumber >= 100) {\n             formatStr = \"/*%3d*/ \";\n@@ -122,14 +123,17 @@ private static String addLineNumber(String src, Map<Integer, Integer> lineMappin\n             formatStr = \"/*%4d*/ \";\n             emptyStr = \"         \";\n         }\n-        for (int i = 0; i < lines.length; ++i) {\n-            Integer srcLineNumber = lineMapping.get(i + 1);\n+\n+        int index = 0;\n+        for (String line : lines) {\n+            Integer srcLineNumber = lineMapping.get(index + 1);\n             if (srcLineNumber != null) {\n                 sb.append(String.format(formatStr, srcLineNumber));\n             } else {\n                 sb.append(emptyStr);\n             }\n-            sb.append(lines[i]).append(\"\\n\");\n+            sb.append(line).append(\"\\n\");\n+            index++;\n         }\n \n         return sb.toString();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -1,8 +1,12 @@\n package com.taobao.arthas.core.util;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n import java.util.StringTokenizer;\n@@ -885,4 +889,27 @@ public static String humanReadableByteCount(long bytes) {\n                 : bytes < 0xfffccccccccccccL ? String.format(\"%.1f PiB\", (bytes >> 10) / 0x1p40)\n                 : String.format(\"%.1f EiB\", (bytes >> 20) / 0x1p40);\n     }\n+\n+    public static List<String> toLines(String text) {\n+        List<String> result = new ArrayList<String>();\n+        BufferedReader reader = new BufferedReader(new StringReader(text));\n+        try {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                result.add(line);\n+                line = reader.readLine();\n+            }\n+        } catch (IOException exc) {\n+            // quit\n+        } finally {\n+            if (reader != null) {\n+                try {\n+                    reader.close();\n+                } catch (IOException e) {\n+                    // ignore\n+                }\n+            }\n+        }\n+        return result;\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/DecompilerTest.java b/core/src/test/java/com/taobao/arthas/core/util/DecompilerTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/DecompilerTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/DecompilerTest.java\n@@ -0,0 +1,37 @@\n+package com.taobao.arthas.core.util;\n+\n+import java.io.File;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-02-09\n+ *\n+ */\n+public class DecompilerTest {\n+\n+    @Test\n+    public void test() {\n+        String dir = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();\n+\n+        File classFile = new File(dir, this.getClass().getName().replace('.', '/') + \".class\");\n+\n+        String code = Decompiler.decompile(classFile.getAbsolutePath(), null, true);\n+\n+        System.err.println(code);\n+\n+        Assertions.assertThat(code).contains(\"/*23*/         System.err.println(code);\").contains(\"/*32*/         int i = 0;\");\n+    }\n+\n+    public void aaa() {\n+\n+        int jjj = 0;\n+\n+        for (int i = 0; i < 100; ++i) {\n+            System.err.println(i);\n+        }\n+    }\n+\n+}",
    "output": "fix Decompiler jdk7 support . #1711"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.6\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.7\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.4.7"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -161,6 +161,15 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 }\n             }\n \n+            // https://github.com/alibaba/arthas/issues/1690\n+            if (AsmUtils.isEnhancerByCGLIB(className)) {\n+                for (MethodNode methodNode : matchedMethods) {\n+                    if (AsmUtils.isConstructor(methodNode)) {\n+                        AsmUtils.fixConstructorExceptionTable(methodNode);\n+                    }\n+                }\n+            }\n+\n             // 用于检查是否已插入了 spy函数，如果已有则不重复处理\n             GroupLocationFilter groupLocationFilter = new GroupLocationFilter();\n ",
    "output": "fix EnhancerByCGLIB class constructor exception table. #1690"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -179,7 +179,6 @@ private void initFastjson() {\n \n     private void initBeans() {\n         this.resultViewResolver = new ResultViewResolver();\n-\n         this.historyManager = new HistoryManagerImpl();\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n@@ -1,5 +1,7 @@\n package com.taobao.arthas.core.shell.history.impl;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.shell.history.HistoryManager;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.FileUtils;\n@@ -17,43 +19,52 @@ public class HistoryManagerImpl implements HistoryManager {\n      */\n     private static final int MAX_HISTORY_SIZE = 500;\n \n+    private static final Logger logger = LoggerFactory.getLogger(HistoryManagerImpl.class);\n+\n     private List<String> history = new ArrayList<String>();\n \n     public HistoryManagerImpl() {\n     }\n \n     @Override\n-    public void saveHistory() {\n-        FileUtils.saveCommandHistoryString(history, new File(Constants.CMD_HISTORY_FILE));\n+    public synchronized void saveHistory() {\n+        try {\n+            FileUtils.saveCommandHistoryString(history, new File(Constants.CMD_HISTORY_FILE));\n+        } catch (Throwable e) {\n+            logger.error(\"save command history failed\", e);\n+        }\n     }\n \n     @Override\n-    public void loadHistory() {\n-        history = FileUtils.loadCommandHistoryString(new File(Constants.CMD_HISTORY_FILE));\n+    public synchronized void loadHistory() {\n+        try {\n+            history = FileUtils.loadCommandHistoryString(new File(Constants.CMD_HISTORY_FILE));\n+        } catch (Throwable e) {\n+            logger.error(\"load command history failed\", e);\n+        }\n     }\n \n     @Override\n-    public void clearHistory() {\n+    public synchronized void clearHistory() {\n         this.history.clear();\n     }\n \n     @Override\n-    public void addHistory(String commandLine) {\n+    public synchronized void addHistory(String commandLine) {\n         while (history.size() >= MAX_HISTORY_SIZE) {\n             history.remove(0);\n         }\n         history.add(commandLine);\n     }\n \n     @Override\n-    public List<String> getHistory() {\n-        return history;\n+    public synchronized List<String> getHistory() {\n+        return new ArrayList<String>(history);\n     }\n \n     @Override\n-    public void setHistory(List<String> history) {\n+    public synchronized void setHistory(List<String> history) {\n         this.history = history;\n     }\n \n-\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -586,7 +586,6 @@ private synchronized Job createJob(List<CliToken> args, Session session, ResultD\n \n     private Job createJob(String line, Session session, ResultDistributor resultDistributor) {\n         historyManager.addHistory(line);\n-        historyManager.saveHistory();\n         return createJob(CliTokens.tokenize(line), session, resultDistributor);\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -158,8 +158,10 @@ public static void saveCommandHistoryString(List<String> history, File file) {\n         try {\n             out = new BufferedOutputStream(openOutputStream(file, false));\n             for (String command: history) {\n-                out.write(command.getBytes(\"utf-8\"));\n-                out.write('\\n');\n+                if (!StringUtils.isBlank(command)) {\n+                    out.write(command.getBytes(\"utf-8\"));\n+                    out.write('\\n');\n+                }\n             }\n         } catch (IOException e) {\n             // ignore\n@@ -181,7 +183,9 @@ public static List<String> loadCommandHistoryString(File file) {\n             br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n             String line;\n             while ((line = br.readLine()) != null) {\n-                history.add(line);\n+                if (!StringUtils.isBlank(line)) {\n+                    history.add(line);\n+                }\n             }\n         } catch (IOException e) {\n             // ignore",
    "output": "fix save command history npe, improve load/save history logic #1704 (#1705)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/Pair.java b/common/src/main/java/com/taobao/arthas/common/Pair.java\n--- a/common/src/main/java/com/taobao/arthas/common/Pair.java\n+++ b/common/src/main/java/com/taobao/arthas/common/Pair.java\n@@ -0,0 +1,64 @@\n+package com.taobao.arthas.common;\n+\n+public class Pair<X, Y> {\n+    private final X x;\n+    private final Y y;\n+\n+    public Pair(X x, Y y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public X getFirst() {\n+        return x;\n+    }\n+\n+    public Y getSecond() {\n+        return y;\n+    }\n+\n+    public static <A, B> Pair<A, B> make(A a, B b) {\n+        return new Pair<A, B>(a, b);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this)\n+            return true;\n+        if (!(o instanceof Pair))\n+            return false;\n+\n+        Pair other = (Pair) o;\n+\n+        if (x == null) {\n+            if (other.x != null)\n+                return false;\n+        } else {\n+            if (!x.equals(other.x))\n+                return false;\n+        }\n+        if (y == null) {\n+            if (other.y != null)\n+                return false;\n+        } else {\n+            if (!y.equals(other.y))\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hashCode = 1;\n+        if (x != null)\n+            hashCode = x.hashCode();\n+        if (y != null)\n+            hashCode = (hashCode * 31) + y.hashCode();\n+        return hashCode;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"P[\" + x + \",\" + y + \"]\";\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -2,6 +2,7 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.common.Pair;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.model.ClassVO;\n import com.taobao.arthas.core.command.model.ClassLoaderVO;\n@@ -32,6 +33,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.NavigableMap;\n import java.util.Set;\n import java.util.Collection;\n import java.util.regex.Pattern;\n@@ -177,7 +179,8 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n \n-            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName, hideUnicode, lineNumber);\n+            Pair<String,NavigableMap<Integer,Integer>> decompileResult = Decompiler.decompileWithMappings(classFile.getAbsolutePath(), methodName, hideUnicode, lineNumber);\n+            String source = decompileResult.getFirst();\n             if (source != null) {\n                 source = pattern.matcher(source).replaceAll(\"\");\n             } else {\n@@ -186,6 +189,7 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n \n             JadModel jadModel = new JadModel();\n             jadModel.setSource(source);\n+            jadModel.setMappings(decompileResult.getSecond());\n             if (!this.sourceOnly) {\n                 jadModel.setClassInfo(ClassUtils.createSimpleClassInfo(c));\n                 jadModel.setLocation(ClassUtils.getCodeSource(c.getProtectionDomain().getCodeSource()));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/JadModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/JadModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/JadModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/JadModel.java\n@@ -1,15 +1,17 @@\n package com.taobao.arthas.core.command.model;\n \n import java.util.Collection;\n-import java.util.List;\n+import java.util.NavigableMap;\n \n /**\n  * @author gongdewei 2020/4/22\n+ * @author hengyunabc 2021-02-23\n  */\n public class JadModel extends ResultModel {\n     private ClassVO classInfo;\n     private String location;\n     private String source;\n+    private NavigableMap<Integer,Integer> mappings;\n     private Collection<ClassLoaderVO> matchedClassLoaders;\n     private String classLoaderClass;\n \n@@ -48,6 +50,14 @@ public void setSource(String source) {\n         this.source = source;\n     }\n \n+    public NavigableMap<Integer, Integer> getMappings() {\n+        return mappings;\n+    }\n+\n+    public void setMappings(NavigableMap<Integer, Integer> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n     public Collection<ClassVO> getMatchedClasses() {\n         return matchedClasses;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -8,11 +8,14 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.NavigableMap;\n+import java.util.TreeMap;\n \n import org.benf.cfr.reader.api.CfrDriver;\n import org.benf.cfr.reader.api.OutputSinkFactory;\n import org.benf.cfr.reader.api.SinkReturns.LineNumberMapping;\n \n+import com.taobao.arthas.common.Pair;\n+\n /**\n  *\n  * @author hengyunabc 2018-11-16\n@@ -28,17 +31,11 @@ public static String decompile(String classFilePath, String methodName, boolean\n         return decompile(classFilePath, methodName, hideUnicode, true);\n     }\n \n-    /**\n-     * @param classFilePath\n-     * @param methodName\n-     * @param hideUnicode\n-     * @return\n-     */\n-    public static String decompile(String classFilePath, String methodName, boolean hideUnicode,\n-            boolean printLineNumber) {\n+    public static Pair<String, NavigableMap<Integer, Integer>> decompileWithMappings(String classFilePath,\n+            String methodName, boolean hideUnicode, boolean printLineNumber) {\n         final StringBuilder sb = new StringBuilder(8192);\n \n-        final Map<Integer, Integer> lineMapping = new HashMap<Integer, Integer>();\n+        final NavigableMap<Integer, Integer> lineMapping = new TreeMap<Integer, Integer>();\n \n         OutputSinkFactory mySink = new OutputSinkFactory() {\n             @Override\n@@ -59,7 +56,7 @@ public void write(T sinkable) {\n                         if (sinkType == SinkType.LINENUMBER) {\n                             LineNumberMapping mapping = (LineNumberMapping) sinkable;\n                             NavigableMap<Integer, Integer> classFileMappings = mapping.getClassFileMappings();\n-                            NavigableMap<Integer,Integer> mappings = mapping.getMappings();\n+                            NavigableMap<Integer, Integer> mappings = mapping.getMappings();\n                             if (classFileMappings != null && mappings != null) {\n                                 for (Entry<Integer, Integer> entry : mappings.entrySet()) {\n                                     Integer srcLineNumber = classFileMappings.get(entry.getKey());\n@@ -91,11 +88,17 @@ public void write(T sinkable) {\n         toAnalyse.add(classFilePath);\n         driver.analyse(toAnalyse);\n \n-        String result = sb.toString();\n+        String resultCode = sb.toString();\n         if (printLineNumber && !lineMapping.isEmpty()) {\n-            result = addLineNumber(result, lineMapping);\n+            resultCode = addLineNumber(resultCode, lineMapping);\n         }\n-        return result;\n+\n+        return Pair.make(resultCode, lineMapping);\n+    }\n+\n+    public static String decompile(String classFilePath, String methodName, boolean hideUnicode,\n+            boolean printLineNumber) {\n+        return decompileWithMappings(classFilePath, methodName, hideUnicode, printLineNumber).getFirst();\n     }\n \n     private static String addLineNumber(String src, Map<Integer, Integer> lineMapping) {",
    "output": "JadModel support line mappings. #1"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java b/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n--- a/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ArthasConstants.java\n@@ -24,4 +24,6 @@ public class ArthasConstants {\n     public static final String SPRING_APPLICATION_NAME = \"spring.application.name\";\n \n     public static final int TELNET_PORT = 3658;\n+\n+    public static final int WEBSOCKET_IDLE_SECONDS = 60;\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n@@ -8,6 +8,7 @@\n import io.netty.handler.codec.http.HttpServerCodec;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.stream.ChunkedWriteHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n import io.netty.util.concurrent.EventExecutorGroup;\n import io.termd.core.function.Consumer;\n import io.termd.core.tty.TtyConnection;\n@@ -43,6 +44,7 @@ protected void initChannel(LocalChannel ch) throws Exception {\n         pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n         pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n         pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n+        pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));\n         pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n@@ -8,6 +8,7 @@\n import io.netty.handler.codec.http.HttpServerCodec;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.stream.ChunkedWriteHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n import io.netty.util.concurrent.EventExecutorGroup;\n import io.termd.core.function.Consumer;\n import io.termd.core.tty.TtyConnection;\n@@ -41,6 +42,7 @@ protected void initChannel(SocketChannel ch) throws Exception {\n     pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n     pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n     pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n+    pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));\n     pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));\n   }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n@@ -21,8 +21,10 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.channel.group.ChannelGroup;\n+import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n+import io.netty.handler.timeout.IdleStateEvent;\n import io.termd.core.function.Consumer;\n import io.termd.core.http.HttpTtyConnection;\n import io.termd.core.tty.TtyConnection;\n@@ -87,6 +89,8 @@ public void close() {\n         }\n       };\n       handler.accept(conn);\n+    } else if (evt instanceof IdleStateEvent) {\n+      ctx.writeAndFlush(new PingWebSocketFrame());\n     } else {\n       super.userEventTriggered(ctx, evt);\n     }\n@@ -105,6 +109,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n     }\n   }\n \n+  @Override\n   public void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n     conn.writeToDecoder(msg.text());\n   }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n@@ -16,6 +16,7 @@\n import io.netty.handler.codec.http.HttpServerCodec;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.stream.ChunkedWriteHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n import io.netty.util.concurrent.EventExecutorGroup;\n import io.netty.util.concurrent.ScheduledFuture;\n import io.termd.core.function.Consumer;\n@@ -88,6 +89,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n             pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n             pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n             pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n+            pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));\n             pipeline.addLast(new TtyWebSocketFrameHandler(channelGroup, ttyConnectionFactory));\n             ctx.fireChannelActive();\n         }\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n@@ -34,6 +34,7 @@\n import io.netty.handler.ssl.SslContext;\n import io.netty.handler.ssl.SslContextBuilder;\n import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+import io.netty.handler.timeout.IdleStateHandler;\n import io.netty.util.concurrent.DefaultThreadFactory;\n \n /**\n@@ -129,6 +130,7 @@ protected void initChannel(SocketChannel ch) {\n                         }\n \n                         p.addLast(new HttpClientCodec(), new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH), websocketClientHandler,\n+                                new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS),\n                                 handler);\n                     }\n                 });\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n@@ -20,11 +20,13 @@\n import io.netty.channel.ChannelPromise;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.handler.codec.base64.Base64;\n-import io.netty.handler.codec.base64.Base64Encoder;\n import io.netty.handler.codec.http.QueryStringDecoder;\n import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.timeout.IdleState;\n+import io.netty.handler.timeout.IdleStateEvent;\n import io.netty.util.CharsetUtil;\n \n /**\n@@ -152,6 +154,15 @@ public void run() {\n         }, tunnelClient.getReconnectDelay(), TimeUnit.SECONDS);\n     }\n \n+    @Override\n+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+        if (evt instanceof IdleStateEvent) {\n+            ctx.writeAndFlush(new PingWebSocketFrame());\n+        } else {\n+            super.userEventTriggered(ctx, evt);\n+        }\n+    }\n+\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n         if (!registerPromise.isDone()) {",
    "output": "websocket support idle PingWebSocketFrame. #1573"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n@@ -22,6 +22,8 @@ public class NetUtils {\n     private static final int QOS_PORT = 12201;\n     private static final String QOS_RESPONSE_START_LINE = \"pandora>[QOS Response]\";\n     private static final int INTERNAL_SERVER_ERROR = 500;\n+    private static final int CONNECT_TIMEOUT = 1000;\n+    private static final int READ_TIMEOUT = 3000;\n \n     /**\n      * This implementation is based on Apache HttpClient.\n@@ -34,6 +36,8 @@ public static Response request(String urlString) {\n         try {\n             URL url = new URL(urlString);\n             urlConnection = (HttpURLConnection)url.openConnection();\n+            urlConnection.setConnectTimeout(CONNECT_TIMEOUT);\n+            urlConnection.setReadTimeout(READ_TIMEOUT);;\n             // prefer json to text\n             urlConnection.setRequestProperty(\"Accept\", \"application/json,text/plain;q=0.2\");\n             in = urlConnection.getInputStream();",
    "output": "fix dashboard command may block when try to read tomcat info. #1700"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/config/SecondConfig.java b/core/src/main/java/com/taobao/arthas/core/config/SecondConfig.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/SecondConfig.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/SecondConfig.java\n@@ -1,5 +0,0 @@\n-package com.taobao.arthas.core.config;\n-\n-public class SecondConfig {\n-\n-}",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -21,6 +21,7 @@\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n@@ -58,6 +59,7 @@ public class JadCommand extends AnnotatedCommand {\n     private String classLoaderClass;\n     private boolean isRegEx = false;\n     private boolean hideUnicode = false;\n+    private boolean lineNumber;\n \n     /**\n      * jad output source code only\n@@ -107,6 +109,13 @@ public void setSourceOnly(boolean sourceOnly) {\n         this.sourceOnly = sourceOnly;\n     }\n \n+    @Option(longName = \"lineNumber\")\n+    @DefaultValue(\"true\")\n+    @Description(\"Output source code contins line number, default value true\")\n+    public void setLineNumber(boolean lineNumber) {\n+        this.lineNumber = lineNumber;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect affect = new RowAffect();\n@@ -168,7 +177,7 @@ private ExitStatus processExactMatch(CommandProcess process, RowAffect affect, I\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n \n-            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName, hideUnicode);\n+            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName, hideUnicode, lineNumber);\n             if (source != null) {\n                 source = pattern.matcher(source).replaceAll(\"\");\n             } else {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -5,9 +5,13 @@\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.NavigableMap;\n \n import org.benf.cfr.reader.api.CfrDriver;\n import org.benf.cfr.reader.api.OutputSinkFactory;\n+import org.benf.cfr.reader.api.SinkReturns.LineNumberMapping;\n \n /**\n  *\n@@ -20,32 +24,51 @@ public static String decompile(String classFilePath, String methodName) {\n         return decompile(classFilePath, methodName, false);\n     }\n \n+    public static String decompile(String classFilePath, String methodName, boolean hideUnicode) {\n+        return decompile(classFilePath, methodName, hideUnicode, true);\n+    }\n+\n     /**\n      * @param classFilePath\n      * @param methodName\n      * @param hideUnicode\n      * @return\n      */\n-    public static String decompile(String classFilePath, String methodName, boolean hideUnicode) {\n-        final StringBuilder result = new StringBuilder(8192);\n+    public static String decompile(String classFilePath, String methodName, boolean hideUnicode,\n+            boolean printLineNumber) {\n+        final StringBuilder sb = new StringBuilder(8192);\n+\n+        final Map<Integer, Integer> lineMapping = new HashMap<Integer, Integer>();\n \n         OutputSinkFactory mySink = new OutputSinkFactory() {\n             @Override\n             public List<SinkClass> getSupportedSinks(SinkType sinkType, Collection<SinkClass> collection) {\n                 return Arrays.asList(SinkClass.STRING, SinkClass.DECOMPILED, SinkClass.DECOMPILED_MULTIVER,\n-                                SinkClass.EXCEPTION_MESSAGE);\n+                        SinkClass.EXCEPTION_MESSAGE, SinkClass.LINE_NUMBER_MAPPING);\n             }\n \n             @Override\n-            public <T> Sink<T> getSink(final SinkType sinkType, SinkClass sinkClass) {\n+            public <T> Sink<T> getSink(final SinkType sinkType, final SinkClass sinkClass) {\n                 return new Sink<T>() {\n                     @Override\n                     public void write(T sinkable) {\n                         // skip message like: Analysing type demo.MathGame\n                         if (sinkType == SinkType.PROGRESS) {\n                             return;\n                         }\n-                        result.append(sinkable);\n+                        if (sinkType == SinkType.LINENUMBER) {\n+                            LineNumberMapping mapping = (LineNumberMapping) sinkable;\n+                            NavigableMap<Integer, Integer> classFileMappings = mapping.getClassFileMappings();\n+                            NavigableMap<Integer,Integer> mappings = mapping.getMappings();\n+                            if (classFileMappings != null && mappings != null) {\n+                                for (Entry<Integer, Integer> entry : mappings.entrySet()) {\n+                                    Integer srcLineNumber = classFileMappings.get(entry.getKey());\n+                                    lineMapping.put(entry.getValue(), srcLineNumber);\n+                                }\n+                            }\n+                            return;\n+                        }\n+                        sb.append(sinkable);\n                     }\n                 };\n             }\n@@ -58,6 +81,7 @@ public void write(T sinkable) {\n          */\n         options.put(\"showversion\", \"false\");\n         options.put(\"hideutf\", String.valueOf(hideUnicode));\n+        options.put(\"trackbytecodeloc\", \"true\");\n         if (!StringUtils.isBlank(methodName)) {\n             options.put(\"methodname\", methodName);\n         }\n@@ -67,7 +91,45 @@ public void write(T sinkable) {\n         toAnalyse.add(classFilePath);\n         driver.analyse(toAnalyse);\n \n-        return result.toString();\n+        String result = sb.toString();\n+        if (printLineNumber && !lineMapping.isEmpty()) {\n+            result = addLineNumber(result, lineMapping);\n+        }\n+        return result;\n+    }\n+\n+    private static String addLineNumber(String src, Map<Integer, Integer> lineMapping) {\n+        int maxLineNumber = 0;\n+        for (Integer value : lineMapping.values()) {\n+            if (value != null && value > maxLineNumber) {\n+                maxLineNumber = value;\n+            }\n+        }\n+\n+        String formatStr = \"/*%2d*/ \";\n+        String emptyStr = \"       \";\n+\n+        StringBuilder sb = new StringBuilder();\n+        String[] lines = src.split(\"\\\\R\");\n+\n+        if (maxLineNumber >= 100) {\n+            formatStr = \"/*%3d*/ \";\n+            emptyStr = \"        \";\n+        } else if (maxLineNumber >= 1000) {\n+            formatStr = \"/*%4d*/ \";\n+            emptyStr = \"         \";\n+        }\n+        for (int i = 0; i < lines.length; ++i) {\n+            Integer srcLineNumber = lineMapping.get(i + 1);\n+            if (srcLineNumber != null) {\n+                sb.append(String.format(formatStr, srcLineNumber));\n+            } else {\n+                sb.append(emptyStr);\n+            }\n+            sb.append(lines[i]).append(\"\\n\");\n+        }\n+\n+        return sb.toString();\n     }\n \n }",
    "output": "jad command support print line numbers. #1 #1695"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n@@ -34,9 +34,4 @@ public RedisServer embeddedRedisServer(ArthasProperties arthasProperties) {\n         RedisServer redisServer = builder.build();\n         return redisServer;\n     }\n-\n-    public static void main(String[] args) {\n-        RedisServer redisServer = new RedisServer();\n-        redisServer.start();\n-    }\n }",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -321,7 +321,11 @@ public void run() {\n                 addRuntimeInfo(dashboardModel);\n \n                 //tomcat\n-                addTomcatInfo(dashboardModel);\n+                try {\n+                    addTomcatInfo(dashboardModel);\n+                } catch (Throwable e) {\n+                    logger.error(\"try to read tomcat info error\", e);\n+                }\n \n                 process.appendResult(dashboardModel);\n ",
    "output": "fix dashboard command may read tomcat info error. #1678"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n@@ -19,7 +19,6 @@\n public class StackAdviceListener extends AdviceListenerAdapter {\n     private static final Logger logger = LoggerFactory.getLogger(StackAdviceListener.class);\n \n-    private final ThreadLocal<StackModel> stackThreadLocal = new ThreadLocal<StackModel>();\n     private final ThreadLocalWatch threadLocalWatch = new ThreadLocalWatch();\n     private StackCommand command;\n     private CommandProcess process;\n@@ -33,7 +32,6 @@ public StackAdviceListener(StackCommand command, CommandProcess process, boolean\n     @Override\n     public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args)\n             throws Throwable {\n-        stackThreadLocal.set(ThreadUtil.getThreadStackModel(loader, Thread.currentThread()));\n         // 开始计算本次方法调用耗时\n         threadLocalWatch.start();\n     }\n@@ -62,8 +60,7 @@ private void finishing(Advice advice) {\n             }\n             if (conditionResult) {\n                 // TODO: concurrency issues for process.write\n-                // TODO: should clear stackThreadLocal?\n-                StackModel stackModel = stackThreadLocal.get();\n+                StackModel stackModel = ThreadUtil.getThreadStackModel(advice.getLoader(), Thread.currentThread());\n                 stackModel.setTs(new Date());\n                 process.appendResult(stackModel);\n                 process.times().incrementAndGet();",
    "output": "fix stack command NullPointerException. #1674"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -239,7 +239,7 @@ public static void startArthasCore(long targetPid, List<String> attachArgs) {\n                             \"Can not find java/java.exe executable file under java home: \" + javaHome);\n         }\n \n-        File toolsJar = findToolsJar();\n+        File toolsJar = findToolsJar(javaHome);\n \n         if (JavaVersionUtils.isLessThanJava9()) {\n             if (toolsJar == null || !toolsJar.exists()) {\n@@ -388,12 +388,11 @@ public int compare(File file1, File file2) {\n         return javaList.get(0);\n     }\n \n-    private static File findToolsJar() {\n+    private static File findToolsJar(String javaHome) {\n         if (JavaVersionUtils.isGreaterThanJava8()) {\n             return null;\n         }\n \n-        String javaHome = findJavaHome();\n         File toolsJar = new File(javaHome, \"lib/tools.jar\");\n         if (!toolsJar.exists()) {\n             toolsJar = new File(javaHome, \"../lib/tools.jar\");",
    "output": "avoid repeated calls of method findJavaHome (#1667)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -233,7 +233,7 @@ public static void startArthasCore(long targetPid, List<String> attachArgs) {\n         String javaHome = findJavaHome();\n \n         // find java/java.exe\n-        File javaPath = findJava();\n+        File javaPath = findJava(javaHome);\n         if (javaPath == null) {\n             throw new IllegalArgumentException(\n                             \"Can not find java/java.exe executable file under java home: \" + javaHome);\n@@ -354,8 +354,7 @@ public static int startArthasClient(String arthasHomeDir, List<String> telnetArg\n         }\n     }\n \n-    private static File findJava() {\n-        String javaHome = findJavaHome();\n+    private static File findJava(String javaHome) {\n         String[] paths = { \"bin/java\", \"bin/java.exe\", \"../bin/java\", \"../bin/java.exe\" };\n \n         List<File> javaList = new ArrayList<File>();",
    "output": "does not nessary invoke method findJavaHome() twice (#1666)"
  },
  {
    "input": "diff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -31,13 +31,16 @@ public void testReadAllVersions() {\n \n     @Test\n     public void testAliyunDownload() throws IOException {\n-        String version = \"3.3.7\";\n-        File folder = rootFolder.newFolder();\n-        System.err.println(folder.getAbsolutePath());\n-        DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n-\n-        File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n-        Assert.assertTrue(as.exists());\n+        // fix travis-ci failed problem\n+        if (TimeUnit.MILLISECONDS.toHours(TimeZone.getDefault().getOffset(System.currentTimeMillis())) == 8) {\n+            String version = \"3.3.7\";\n+            File folder = rootFolder.newFolder();\n+            System.err.println(folder.getAbsolutePath());\n+            DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n+\n+            File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n+            Assert.assertTrue(as.exists());\n+        }\n     }\n \n     @Test",
    "output": "Revert \"update DownloadUtilsTest\"\n\nThis reverts commit d9151ed4599c9e2a67eb14849c670ea841bc7f72."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.6\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.4.6"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -173,6 +173,8 @@ private void initFastjson() {\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask();\n         // add date format option for  fastjson\n         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();\n+        // ignore getter error #1661\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();\n     }\n \n     private void initBeans() {",
    "output": "fastjosn ignore getter error. #1661"
  },
  {
    "input": "diff --git a/demo/src/main/java/demo/MathGame.java b/demo/src/main/java/demo/MathGame.java\n--- a/demo/src/main/java/demo/MathGame.java\n+++ b/demo/src/main/java/demo/MathGame.java\n@@ -8,7 +8,7 @@\n public class MathGame {\n     private static Random random = new Random();\n \n-    public int illegalArgumentCount = 0;\n+    private int illegalArgumentCount = 0;\n \n     public static void main(String[] args) throws InterruptedException {\n         MathGame game = new MathGame();",
    "output": "update MathGame.java"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n@@ -90,8 +90,10 @@ public void close() {\n         ArrayList<Session> sessions = new ArrayList<Session>(this.sessions.values());\n         for (Session session : sessions) {\n             SharingResultDistributor resultDistributor = session.getResultDistributor();\n-            resultDistributor.appendResult(new MessageModel(\"arthas server is going to shutdown.\"));\n-            resultDistributor.close();\n+            if (resultDistributor != null) {\n+                resultDistributor.appendResult(new MessageModel(\"arthas server is going to shutdown.\"));\n+                resultDistributor.close();\n+            }\n             logger.info(\"Removing session before shutdown: {}, last access time: {}\", session.getSessionId(), session.getLastAccessTime());\n             this.removeSession(session.getSessionId());\n         }\n@@ -142,7 +144,10 @@ public void evictSessions() {\n             }\n             long timeOutInMinutes = sessionTimeoutMillis / 1000 / 60;\n             String reason = \"session is inactive for \" + timeOutInMinutes + \" min(s).\";\n-            session.getResultDistributor().appendResult(new MessageModel(reason));\n+            SharingResultDistributor resultDistributor = session.getResultDistributor();\n+            if (resultDistributor != null) {\n+                resultDistributor.appendResult(new MessageModel(reason));\n+            }\n             this.removeSession(session.getSessionId());\n             logger.info(\"Removing inactive session: {}, last access time: {}\", session.getSessionId(), session.getLastAccessTime());\n         }\n@@ -153,7 +158,7 @@ public void evictSessions() {\n      */\n     public void evictConsumers(Session session) {\n         SharingResultDistributor distributor = session.getResultDistributor();\n-        if (distributor instanceof SharingResultDistributor) {\n+        if (distributor != null && distributor instanceof SharingResultDistributor) {\n             SharingResultDistributor sharingResultDistributor = (SharingResultDistributor) distributor;\n             List<ResultConsumer> consumers = sharingResultDistributor.getConsumers();\n             //remove inactive consumer from session directly\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -321,7 +321,10 @@ private ApiResponse processJoinSessionRequest(ApiRequest apiRequest, Session ses\n         ResultConsumer resultConsumer = new ResultConsumerImpl();\n         //disable input and interrupt\n         resultConsumer.appendResult(new InputStatusModel(InputStatus.DISABLED));\n-        session.getResultDistributor().addConsumer(resultConsumer);\n+        SharingResultDistributor resultDistributor = session.getResultDistributor();\n+        if (resultDistributor != null) {\n+            resultDistributor.addConsumer(resultConsumer);\n+        }\n \n         ApiResponse response = new ApiResponse();\n         response.setSessionId(session.getSessionId())\n@@ -486,7 +489,10 @@ private ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session sessi\n             //add command before exec job\n             CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n             commandRequestModel.setJobId(job.id());\n-            session.getResultDistributor().appendResult(commandRequestModel);\n+            SharingResultDistributor resultDistributor = session.getResultDistributor();\n+            if (resultDistributor != null) {\n+                resultDistributor.appendResult(commandRequestModel);\n+            }\n             session.setForegroundJob(job);\n             updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n \n@@ -534,7 +540,11 @@ private ApiResponse processPullResultsRequest(ApiRequest apiRequest, Session ses\n         if (StringUtils.isBlank(consumerId)) {\n             throw new ApiException(\"'consumerId' is required\");\n         }\n-        ResultConsumer consumer = session.getResultDistributor().getConsumer(consumerId);\n+        ResultConsumer consumer = null;\n+        SharingResultDistributor resultDistributor = session.getResultDistributor();\n+        if (resultDistributor != null) {\n+            consumer = resultDistributor.getConsumer(consumerId);\n+        }\n         if (consumer == null) {\n             throw new ApiException(\"consumer not found: \" + consumerId);\n         }",
    "output": "fix session#getResultDistributor NullPointerException. #1579"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/WatchView.java b/core/src/main/java/com/taobao/arthas/core/command/view/WatchView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/WatchView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/WatchView.java\n@@ -18,7 +18,7 @@ public void draw(CommandProcess process, WatchModel model) {\n         Object value = model.getValue();\n         String result = StringUtils.objectToString(\n                 isNeedExpand(model) ? new ObjectView(value, model.getExpand(), model.getSizeLimit()).draw() : value);\n-        process.write(\"[\" + model.getAccessPoint() + \"]method=\" + model.getClassName() + \".\" + model.getMethodName() + \"\\n\");\n+        process.write(\"method=\" + model.getClassName() + \".\" + model.getMethodName() + \" location=\" + model.getAccessPoint() + \"\\n\");\n         process.write(\"ts=\" + DateUtils.formatDate(model.getTs()) + \"; [cost=\" + model.getCost() + \"ms] result=\" + result + \"\\n\");\n     }\n ",
    "output": "polish #1628"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java\n@@ -280,8 +280,6 @@ public void process(CommandProcess process) {\n                 classList.add(clazz);\n                 retransformModel.addRetransformClass(clazz.getName());\n \n-                addRetransformEntry(retransformEntry);\n-\n                 logger.info(\"Try retransform class name: {}, ClassLoader: {}\", clazz.getName(), clazz.getClassLoader());\n             }\n         }\n@@ -291,6 +289,7 @@ public void process(CommandProcess process) {\n                 process.end(-1, \"These classes are not found in the JVM and may not be loaded: \" + bytesMap.keySet());\n                 return;\n             }\n+            addRetransformEntry(retransformEntryList);\n \n             inst.retransformClasses(classList.toArray(new Class[0]));\n \n@@ -352,6 +351,10 @@ public RetransformEntry(String className, byte[] bytes, String hashCode, String\n             this.classLoaderClass = classLoaderClass;\n         }\n \n+        public void incTransformCount() {\n+            transformCount++;\n+        }\n+\n         public int getId() {\n             return id;\n         }\n@@ -401,10 +404,10 @@ public void setClassLoaderClass(String classLoaderClass) {\n         }\n     }\n \n-    public static synchronized void addRetransformEntry(RetransformEntry retransformEntry) {\n+    public static synchronized void addRetransformEntry(List<RetransformEntry> retransformEntryList) {\n         List<RetransformEntry> tmp = new ArrayList<RetransformEntry>();\n         tmp.addAll(retransformEntries);\n-        tmp.add(retransformEntry);\n+        tmp.addAll(retransformEntryList);\n         Collections.sort(tmp, new Comparator<RetransformEntry>() {\n             @Override\n             public int compare(RetransformEntry entry1, RetransformEntry entry2) {\n@@ -468,6 +471,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein\n                 if (updateFlag) {\n                     logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                             className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n+                    retransformEntry.incTransformCount();\n                     return retransformEntry.getBytes();\n                 }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/RetransformView.java b/core/src/main/java/com/taobao/arthas/core/command/view/RetransformView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/RetransformView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/RetransformView.java\n@@ -35,12 +35,12 @@ public void draw(CommandProcess process, RetransformModel result) {\n         // retransform -l\n         if (result.getRetransformEntries() != null) {\n             // header\n-            TableElement table = new TableElement(1, 1, 1, 1).rightCellPadding(1);\n-            table.add(new RowElement().style(Decoration.bold.bold()).add(\"Id\", \"ClassName\", \"LoaderHash\",\n+            TableElement table = new TableElement(1, 1, 1, 1, 1).rightCellPadding(1);\n+            table.add(new RowElement().style(Decoration.bold.bold()).add(\"Id\", \"ClassName\", \"TransformCount\", \"LoaderHash\",\n                     \"LoaderClassName\"));\n \n             for (RetransformEntry entry : result.getRetransformEntries()) {\n-                table.row(\"\" + entry.getId(), \"\" + entry.getClassName(), \"\" + entry.getHashCode(),\n+                table.row(\"\" + entry.getId(), \"\" + entry.getClassName(), \"\" + entry.getTransformCount(), \"\" + entry.getHashCode(),\n                         \"\" + entry.getClassLoaderClass());\n             }\n ",
    "output": "retransform command print transformCount. #1651"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n@@ -117,7 +117,7 @@ protected Matcher getClassNameMatcher() {\n \n     @Override\n     protected Matcher getClassNameExcludeMatcher() {\n-        if (classNameExcludeMatcher == null) {\n+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {\n             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());\n         }\n         return classNameExcludeMatcher;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n@@ -95,7 +95,7 @@ protected Matcher getClassNameMatcher() {\n \n     @Override\n     protected Matcher getClassNameExcludeMatcher() {\n-        if (classNameExcludeMatcher == null) {\n+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {\n             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());\n         }\n         return classNameExcludeMatcher;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -307,7 +307,7 @@ protected Matcher getClassNameMatcher() {\n \n     @Override\n     protected Matcher getClassNameExcludeMatcher() {\n-        if (classNameExcludeMatcher == null) {\n+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {\n             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());\n         }\n         return classNameExcludeMatcher;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -136,7 +136,7 @@ protected Matcher getClassNameMatcher() {\n \n     @Override\n     protected Matcher getClassNameExcludeMatcher() {\n-        if (classNameExcludeMatcher == null) {\n+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {\n             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());\n         }\n         return classNameExcludeMatcher;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -176,7 +176,7 @@ protected Matcher getClassNameMatcher() {\n \n     @Override\n     protected Matcher getClassNameExcludeMatcher() {\n-        if (classNameExcludeMatcher == null) {\n+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {\n             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());\n         }\n         return classNameExcludeMatcher;",
    "output": "fix watch/trace exclude class pattern #1638"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/Base64Model.java b/core/src/main/java/com/taobao/arthas/core/command/model/Base64Model.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/Base64Model.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/Base64Model.java\n@@ -0,0 +1,31 @@\n+package com.taobao.arthas.core.command.model;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-01-05\n+ *\n+ */\n+public class Base64Model extends ResultModel {\n+\n+    private String content;\n+\n+    public Base64Model() {\n+    }\n+\n+    public Base64Model(String content) {\n+        this.content = content;\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"base64\";\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(String content) {\n+        this.content = content;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/Base64View.java b/core/src/main/java/com/taobao/arthas/core/command/view/Base64View.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/Base64View.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/Base64View.java\n@@ -0,0 +1,22 @@\n+package com.taobao.arthas.core.command.view;\n+\n+import com.taobao.arthas.core.command.model.Base64Model;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-01-05\n+ *\n+ */\n+public class Base64View extends ResultView<Base64Model> {\n+\n+    @Override\n+    public void draw(CommandProcess process, Base64Model result) {\n+        String content = result.getContent();\n+        if (content != null) {\n+            process.write(content);\n+        }\n+        process.write(\"\\n\");\n+    }\n+\n+}",
    "output": "fix #1646"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -40,6 +40,7 @@\n @Description(Constants.EXAMPLE +\n                 \"  redefine /tmp/Test.class\\n\" +\n                 \"  redefine -c 327a647b /tmp/Test.class /tmp/Test\\\\$Inner.class \\n\" +\n+                \"  redefine --classLoaderClass 'sun.misc.Launcher$AppClassLoader' /tmp/Test.class \\n\" +\n                 Constants.WIKI + Constants.WIKI_HOME + \"redefine\")\n public class RedefineCommand extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(RedefineCommand.class);",
    "output": "update RedefineCommand.java"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.command;\n \n+import com.taobao.arthas.core.command.basic1000.Base64Command;\n import com.taobao.arthas.core.command.basic1000.CatCommand;\n import com.taobao.arthas.core.command.basic1000.ClsCommand;\n import com.taobao.arthas.core.command.basic1000.EchoCommand;\n@@ -101,6 +102,7 @@ private static void initCommands() {\n         commands.add(Command.create(LoggerCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n         commands.add(Command.create(CatCommand.class));\n+        commands.add(Command.create(Base64Command.class));\n         commands.add(Command.create(EchoCommand.class));\n         commands.add(Command.create(PwdCommand.class));\n         commands.add(Command.create(MBeanCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/Base64Command.java\n@@ -0,0 +1,170 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.common.IOUtils;\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.command.model.Base64Model;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n+import io.netty.util.CharsetUtil;\n+\n+/**\n+ * \n+ * @author hengyunabc 2021-01-05\n+ *\n+ */\n+@Name(\"base64\")\n+@Summary(\"Encode and decode using Base64 representation\")\n+@Description(Constants.EXAMPLE +\n+        \"  base64 /tmp/test.txt\\n\" +\n+        \"  base64 --input /tmp/test.txt --output /tmp/result.txt\\n\" +\n+        \"  base64 -d /tmp/result.txt\\n\"\n+        + Constants.WIKI + Constants.WIKI_HOME + \"base64\")\n+public class Base64Command extends AnnotatedCommand {\n+    private static final Logger logger = LoggerFactory.getLogger(Base64Command.class);\n+    private String file;\n+    private Integer sizeLimit = 128 * 1024;\n+    private int maxSizeLimit = 8 * 1024 * 1024;\n+\n+    private boolean decode;\n+\n+    private String input;\n+    private String output;\n+\n+    @Argument(argName = \"file\", index = 0, required = false)\n+    @Description(\"file\")\n+    public void setFiles(String file) {\n+        this.file = file;\n+    }\n+\n+    @Option(shortName = \"d\", longName = \"decode\", flag = true)\n+    @Description(\"decodes input\")\n+    public void setDecode(boolean decode) {\n+        this.decode = decode;\n+    }\n+\n+    @Option(shortName = \"i\", longName = \"input\")\n+    @Description(\"input file\")\n+    public void setInput(String input) {\n+        this.input = input;\n+    }\n+\n+    @Option(shortName = \"o\", longName = \"output\")\n+    @Description(\"output file\")\n+    public void setOutput(String output) {\n+        this.output = output;\n+    }\n+\n+    @Option(shortName = \"M\", longName = \"sizeLimit\")\n+    @Description(\"Upper size limit in bytes for the result (128 * 1024 by default, the maximum value is 8 * 1024 * 1024)\")\n+    public void setSizeLimit(Integer sizeLimit) {\n+        this.sizeLimit = sizeLimit;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        if (!verifyOptions(process)) {\n+            return;\n+        }\n+\n+        // 确认输入\n+        if (file == null && this.input != null) {\n+            file = input;\n+        }\n+\n+        File f = new File(file);\n+        if (!f.exists()) {\n+            process.end(-1, file + \": No such file or directory\");\n+            return;\n+        }\n+        if (f.isDirectory()) {\n+            process.end(-1, file + \": Is a directory\");\n+            return;\n+        }\n+\n+        if (f.length() > sizeLimit) {\n+            process.end(-1, file + \": Is too large, size: \" + f.length());\n+            return;\n+        }\n+\n+        InputStream input = null;\n+\n+        try {\n+            input = new FileInputStream(f);\n+            byte[] bytes = IOUtils.getBytes(input);\n+\n+            ByteBuf convertResult = null;\n+            if (this.decode) {\n+                convertResult = Base64.decode(Unpooled.wrappedBuffer(bytes));\n+            } else {\n+                convertResult = Base64.encode(Unpooled.wrappedBuffer(bytes));\n+            }\n+\n+            if (this.output != null) {\n+                int readableBytes = convertResult.readableBytes();\n+                OutputStream out = new FileOutputStream(this.output);\n+                convertResult.readBytes(out, readableBytes);\n+                process.appendResult(new Base64Model(null));\n+            } else {\n+                String base64Str = convertResult.toString(CharsetUtil.UTF_8);\n+                process.appendResult(new Base64Model(base64Str));\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"read file error. name: \" + file, e);\n+            process.end(1, \"read file error: \" + e.getMessage());\n+            return;\n+        } finally {\n+            IOUtils.close(input);\n+        }\n+\n+        process.end();\n+    }\n+\n+    private boolean verifyOptions(CommandProcess process) {\n+        if(this.file == null && this.input == null) {\n+            process.end(-1);\n+            return false;\n+        }\n+\n+        if (sizeLimit > maxSizeLimit) {\n+            process.end(-1, \"sizeLimit cannot be large than: \" + maxSizeLimit);\n+            return false;\n+        }\n+\n+        // 目前不支持过滤，限制http请求执行的文件大小\n+        int maxSizeLimitOfNonTty = 128 * 1024;\n+        if (!process.session().isTty() && sizeLimit > maxSizeLimitOfNonTty) {\n+            process.end(-1,\n+                    \"When executing in non-tty session, sizeLimit cannot be large than: \" + maxSizeLimitOfNonTty);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeFilePath(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n@@ -39,6 +39,7 @@ private void initResultViews() {\n             //registerView(HistoryView.class);\n             registerView(EchoView.class);\n             registerView(CatView.class);\n+            registerView(Base64View.class);\n             registerView(OptionsView.class);\n             registerView(SystemPropertyView.class);\n             registerView(SystemEnvView.class);",
    "output": "add base64 command. #1646"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -14,6 +14,7 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.common.ArthasConstants;\n import com.taobao.arthas.common.IOUtils;\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelFutureListener;\n@@ -47,7 +48,7 @@ public class DirectoryBrowser {\n \n     public static final String HTTP_DATE_FORMAT = \"EEE, dd MMM yyyy HH:mm:ss zzz\";\n     public static final String HTTP_DATE_GMT_TIMEZONE = \"GMT\";\n-    public static final long MIN_NETTY_DIRECT_SEND_SIZE = 10 * 1024 * 1024;\n+    public static final long MIN_NETTY_DIRECT_SEND_SIZE = ArthasConstants.MAX_HTTP_CONTENT_LENGTH;\n     private static final Logger logger = LoggerFactory.getLogger(DirectoryBrowser.class);\n     //@formatter:off\n     private static String pageHeader = \"<!DOCTYPE html>\\n\" + \n@@ -195,7 +196,7 @@ public static DefaultFullHttpResponse directView(File dir, String path, FullHttp\n                     future.addListener(ChannelFutureListener.CLOSE);\n                     return fullResp;\n                 }\n-                logger.info(\"file {} size bigger than 10MB, send by future.\",file.getName());\n+                logger.info(\"file {} size bigger than {}, send by future.\",file.getName(), MIN_NETTY_DIRECT_SEND_SIZE);\n                 HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);\n                 HttpUtil.setContentLength(response, fileLength);\n                 setContentTypeHeader(response, file);",
    "output": "polish #1642"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java b/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java\n@@ -204,7 +204,7 @@ private void drawDescriptorInfo(String title, DescriptorRead descriptorRead, Tab\n             table.row(new LabelElement(title).style(Decoration.bold.fg(Color.yellow)));\n             for (String fieldName : fieldNames) {\n                 Object fieldValue = descriptor.getFieldValue(fieldName);\n-                table.row(fieldName, fieldValue.toString());\n+                table.row(fieldName, fieldValue == null ? \"\" : fieldValue.toString());\n             }\n         }\n     }",
    "output": "fix NullPointerException in MBeanView. #1644 (#1645)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -433,10 +433,16 @@ private ProfilerModel processStop(AsyncProfiler asyncProfiler) throws IOExceptio\n         return profilerModel;\n     }\n \n-    private String outputFile() {\n+    private String outputFile() throws IOException {\n         if (this.file == null) {\n-            this.file = new File(\"arthas-output\",\n-                    new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + this.format).getAbsolutePath();\n+            File outputPath = ArthasBootstrap.getInstance().getOutputPath();\n+            if (outputPath != null) {\n+                this.file = new File(outputPath,\n+                        new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + this.format)\n+                                .getAbsolutePath();\n+            } else {\n+                this.file = File.createTempFile(\"arthas-output\", \".\" + this.format).getAbsolutePath();\n+            }\n         }\n         return file;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -28,6 +28,11 @@ public class Configure {\n     private String tunnelServer;\n     private String agentId;\n \n+    /**\n+     * @see com.taobao.arthas.common.ArthasConstants#ARTHAS_OUTPUT\n+     */\n+    private String outputPath;\n+\n     /**\n      * 需要被增强的ClassLoader的全类名，多个用英文 , 分隔\n      */\n@@ -148,6 +153,14 @@ public void setEnhanceLoaders(String enhanceLoaders) {\n         this.enhanceLoaders = enhanceLoaders;\n     }\n \n+    public String getOutputPath() {\n+        return outputPath;\n+    }\n+\n+    public void setOutputPath(String outputPath) {\n+        this.outputPath = outputPath;\n+    }\n+\n     /**\n      * 序列化成字符串\n      *\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -104,7 +104,7 @@ public class ArthasBootstrap {\n     private SessionManager sessionManager;\n     private TunnelClient tunnelClient;\n \n-    private File arthasOutputDir;\n+    private File outputPath;\n \n     private static LoggerContext loggerContext;\n     private EventExecutorGroup workerGroup;\n@@ -122,15 +122,20 @@ public class ArthasBootstrap {\n     private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> args) throws Throwable {\n         this.instrumentation = instrumentation;\n \n-        String outputPath = System.getProperty(\"arthas.output.dir\", \"arthas-output\");\n-        arthasOutputDir = new File(outputPath);\n-        arthasOutputDir.mkdirs();\n         initFastjson();\n \n         // 1. initSpy()\n         initSpy();\n         // 2. ArthasEnvironment\n         initArthasEnvironment(args);\n+\n+        String outputPathStr = configure.getOutputPath();\n+        if (outputPathStr == null) {\n+            outputPathStr = ArthasConstants.ARTHAS_OUTPUT;\n+        }\n+        outputPath = new File(outputPathStr);\n+        outputPath.mkdirs();\n+\n         // 3. init logger\n         loggerContext = LogUtil.initLooger(arthasEnvironment);\n \n@@ -622,4 +627,9 @@ public HistoryManager getHistoryManager() {\n     public HttpApiHandler getHttpApiHandler() {\n         return httpApiHandler;\n     }\n+\n+    public File getOutputPath() {\n+        return outputPath;\n+    }\n+\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -55,7 +55,7 @@ public class DirectoryBrowser {\n     private static String linePart1Str = \"<a href=\\\"%s\\\" title=\\\"%s\\\">\";\n     private static String linePart2Str = \"%-60s\";\n \n-    private static String renderDir(File dir) {\n+    static String renderDir(File dir) {\n         File[] listFiles = dir.listFiles();\n \n         StringBuilder sb = new StringBuilder(8192);\n@@ -112,7 +112,9 @@ public static DefaultFullHttpResponse view(File dir, String path, HttpVersion ve\n         if (path.startsWith(\"/\")) {\n             path = path.substring(1, path.length());\n         }\n-        File file = new File(path);\n+        // path maybe: arthas-output/20201225-203454.svg \n+        // 需要取 dir的parent来去掉前缀\n+        File file = new File(dir.getParent(), path);\n \n         if (isSubFile(dir, file)) {\n             DefaultFullHttpResponse fullResp = new DefaultFullHttpResponse(version, HttpResponseStatus.OK);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n@@ -46,6 +46,10 @@ public class HttpRequestHandler extends SimpleChannelInboundHandler<FullHttpRequ\n \n     private HttpApiHandler httpApiHandler;\n \n+    public HttpRequestHandler(String wsUri) {\n+        this(wsUri, ArthasBootstrap.getInstance().getOutputPath());\n+    }\n+\n     public HttpRequestHandler(String wsUri, File dir) {\n         this.wsUri = wsUri;\n         this.dir = dir;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java\n@@ -41,7 +41,7 @@ protected void initChannel(LocalChannel ch) throws Exception {\n         pipeline.addLast(new HttpServerCodec());\n         pipeline.addLast(new ChunkedWriteHandler());\n         pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n-        pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\", new File(ArthasConstants.ARTHAS_OUTPUT)));\n+        pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n         pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n         pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n@@ -39,7 +39,7 @@ protected void initChannel(SocketChannel ch) throws Exception {\n     pipeline.addLast(new HttpServerCodec());\n     pipeline.addLast(new ChunkedWriteHandler());\n     pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n-    pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\", new File(ArthasConstants.ARTHAS_OUTPUT)));\n+    pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n     pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n     pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));\n   }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n@@ -86,7 +86,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n             pipeline.addLast(new HttpServerCodec());\n             pipeline.addLast(new ChunkedWriteHandler());\n             pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));\n-            pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\", new File(ArthasConstants.ARTHAS_OUTPUT)));\n+            pipeline.addLast(workerGroup, \"HttpRequestHandler\", new HttpRequestHandler(\"/ws\"));\n             pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n             pipeline.addLast(new TtyWebSocketFrameHandler(channelGroup, ttyConnectionFactory));\n             ctx.fireChannelActive();",
    "output": "support arthas.outputPath config. #1641"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n@@ -2,23 +2,18 @@\n \n import java.arthas.SpyAPI;\n import java.lang.instrument.Instrumentation;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.jar.JarFile;\n \n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.zeroturnaround.zip.ZipUtil;\n \n+import com.alibaba.bytekit.utils.AsmUtils;\n+import com.alibaba.bytekit.utils.Decompiler;\n import com.alibaba.deps.org.objectweb.asm.Type;\n import com.alibaba.deps.org.objectweb.asm.tree.ClassNode;\n import com.alibaba.deps.org.objectweb.asm.tree.MethodNode;\n-import com.alibaba.bytekit.utils.AsmUtils;\n-import com.alibaba.bytekit.utils.Decompiler;\n import com.taobao.arthas.core.bytecode.TestHelper;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n-import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.EqualsMatcher;\n \n import demo.MathGame;\n@@ -44,7 +39,7 @@ public void test() throws Throwable {\n         EqualsMatcher<String> methodNameMatcher = new EqualsMatcher<String>(\"print\");\n         EqualsMatcher<String> classNameMatcher = new EqualsMatcher<String>(MathGame.class.getName());\n \n-        Enhancer enhancer = new Enhancer(listener, true, false, classNameMatcher, methodNameMatcher);\n+        Enhancer enhancer = new Enhancer(listener, true, false, classNameMatcher, null, methodNameMatcher);\n \n         ClassLoader inClassLoader = MathGame.class.getClassLoader();\n         String className = MathGame.class.getName();",
    "output": "fix test. #1638"
  },
  {
    "input": "diff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -31,16 +31,13 @@ public void testReadAllVersions() {\n \n     @Test\n     public void testAliyunDownload() throws IOException {\n-        // fix travis-ci failed problem\n-        if (TimeUnit.MILLISECONDS.toHours(TimeZone.getDefault().getOffset(System.currentTimeMillis())) == 8) {\n-            String version = \"3.3.7\";\n-            File folder = rootFolder.newFolder();\n-            System.err.println(folder.getAbsolutePath());\n-            DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n-\n-            File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n-            Assert.assertTrue(as.exists());\n-        }\n+        String version = \"3.3.7\";\n+        File folder = rootFolder.newFolder();\n+        System.err.println(folder.getAbsolutePath());\n+        DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n+\n+        File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n+        Assert.assertTrue(as.exists());\n     }\n \n     @Test",
    "output": "update DownloadUtilsTest"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n@@ -13,16 +13,18 @@ public class DateUtilsTest {\n     @Test\n     public void testGetCurrentDateWithCorrectFormat() {\n     \t\n-    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); //supported date format\n-    \tAssert.assertEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n-        \n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); // supported date format\n+        Date date = new Date();\n+        Assert.assertEquals(DateUtils.formatDate(date), dateFormat.format(date).toString());\n+\n     }\n     \n     @Test\n     public void testGetCurrentDateWithInCorrectFormat() {\n     \t\n-    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\"); // Not supported Date format\n-    \tAssert.assertNotEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n-        \n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\"); // Not supported Date format\n+        Date date = new Date();\n+        Assert.assertNotEquals(DateUtils.formatDate(date), dateFormat.format(date).toString());\n+\n     }\n  }\n\\ No newline at end of file",
    "output": "fix DateUtilsTest"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -54,4 +54,8 @@ public static boolean isGreaterThanJava7() {\n     public static boolean isGreaterThanJava8() {\n         return JAVA_VERSION > 1.8f;\n     }\n+\n+    public static boolean isGreaterThanJava11() {\n+        return JAVA_VERSION > 11.0f;\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n@@ -1,7 +1,10 @@\n package com.taobao.arthas.core.util;\n \n+import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n+import com.taobao.arthas.common.JavaVersionUtils;\n+\n import java.io.Serializable;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n@@ -26,7 +29,14 @@ public void anotherTestMethod() throws NullPointerException {\n \n     @Test\n     public void testDrawInterface() {\n-        assertThat(TypeRenderUtils.drawInterface(String.class), is(equalTo(\"java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\")));\n+        if (JavaVersionUtils.isGreaterThanJava11()) {\n+            Assertions.assertThat(TypeRenderUtils.drawInterface(String.class)).isEqualTo(\n+                    \"java.io.Serializable,java.lang.Comparable,java.lang.CharSequence,java.lang.constant.Constable,java.lang.constant.ConstantDesc\");\n+        } else {\n+            Assertions.assertThat(TypeRenderUtils.drawInterface(String.class))\n+                    .isEqualTo(\"java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\");\n+        }\n+        \n         assertThat(TypeRenderUtils.drawInterface(TestClass.class), is(equalTo(\"java.io.Serializable\")));\n         assertThat(TypeRenderUtils.drawInterface(Serializable.class), is(equalTo(\"\")));\n     }",
    "output": "add test ci/support jdk 12"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -125,9 +125,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         String outputPath = System.getProperty(\"arthas.output.dir\", \"arthas-output\");\n         arthasOutputDir = new File(outputPath);\n         arthasOutputDir.mkdirs();\n-\n-        // disable  fastjson circular reference feature\n-        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask();\n+        initFastjson();\n \n         // 1. initSpy()\n         initSpy();\n@@ -165,6 +163,13 @@ public void run() {\n         Runtime.getRuntime().addShutdownHook(shutdown);\n     }\n \n+    private void initFastjson() {\n+        // disable  fastjson circular reference feature\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask();\n+        // add date format option for  fastjson\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();\n+    }\n+\n     private void initBeans() {\n         this.resultViewResolver = new ResultViewResolver();\n ",
    "output": "Add dateformat option for fastjson (#1623)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -33,6 +33,8 @@\n import com.alibaba.bytekit.asm.matcher.SimpleClassMatcher;\n import com.alibaba.bytekit.utils.AsmUtils;\n import com.alibaba.bytekit.utils.IOUtils;\n+import com.alibaba.fastjson.JSON;\n+import com.alibaba.fastjson.serializer.SerializerFeature;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ArthasConstants;\n import com.taobao.arthas.common.PidUtils;\n@@ -65,7 +67,6 @@\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.LogUtil;\n-import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.UserStatUtil;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n@@ -125,6 +126,9 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         arthasOutputDir = new File(outputPath);\n         arthasOutputDir.mkdirs();\n \n+        // disable  fastjson circular reference feature\n+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask();\n+\n         // 1. initSpy()\n         initSpy();\n         // 2. ArthasEnvironment",
    "output": "disable fastjson circular reference feature. #1614"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/PidUtils.java b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n@@ -13,16 +13,16 @@ public class PidUtils {\n \n     static {\n         // https://stackoverflow.com/a/7690178\n-        String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n-        int index = jvmName.indexOf('@');\n+        try {\n+            String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n+            int index = jvmName.indexOf('@');\n \n-        if (index > 0) {\n-            try {\n+            if (index > 0) {\n                 PID = Long.toString(Long.parseLong(jvmName.substring(0, index)));\n                 pid = Long.parseLong(PID);\n-            } catch (Throwable e) {\n-                // ignore\n             }\n+        } catch (Throwable e) {\n+            // ignore\n         }\n     }\n ",
    "output": "fix NullPointerException in PidUtils. #1611"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n@@ -92,7 +92,6 @@ private void initMethod() {\n \n             if (\"<init>\".equals(this.methodName)) {\n                 this.constructor = clazz.getDeclaredConstructor(argsClasses);\n-                ;\n             } else {\n                 this.method = clazz.getDeclaredMethod(methodName, argsClasses);\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/env/MutablePropertySources.java b/core/src/main/java/com/taobao/arthas/core/env/MutablePropertySources.java\n--- a/core/src/main/java/com/taobao/arthas/core/env/MutablePropertySources.java\n+++ b/core/src/main/java/com/taobao/arthas/core/env/MutablePropertySources.java\n@@ -195,9 +195,7 @@ protected void assertLegalRelativeAddition(String relativePropertySourceName, Pr\n      * Remove the given property source if it is present.\n      */\n     protected void removeIfPresent(PropertySource<?> propertySource) {\n-        if (this.propertySourceList.contains(propertySource)) {\n-            this.propertySourceList.remove(propertySource);\n-        }\n+\t\tthis.propertySourceList.remove(propertySource);\n     }\n \n     /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n@@ -68,7 +68,6 @@ public static LoggerContext initLooger(ArthasEnvironment env) {\n             loggerContext.reset();\n \n             String fileName = env.getProperty(FILE_NAME_PROPERTY);\n-            ;\n             if (fileName != null) {\n                 loggerContext.putProperty(ARTHAS_LOG_FILE, fileName);\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ObjectUtils.java\n@@ -453,7 +453,7 @@ public static String nullSafeToString(Object[] array) {\n                         sb.append(\", \");\n                     }\n \n-                    sb.append(String.valueOf(array[i]));\n+                    sb.append(array[i]);\n                 }\n \n                 sb.append(\"}\");\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n@@ -59,8 +59,6 @@ public int bgBright() {\n         }\n     }\n \n-    ;\n-\n     public static enum Attribute {\n         RESET(0, \"RESET\"),\n         INTENSITY_BOLD(1, \"INTENSITY_BOLD\"),\n@@ -100,8 +98,6 @@ public int value() {\n \n     }\n \n-    ;\n-\n     public static enum Erase {\n         FORWARD(0, \"FORWARD\"),\n         BACKWARD(1, \"BACKWARD\"),\n@@ -125,8 +121,6 @@ public int value() {\n         }\n     }\n \n-    ;\n-\n     public static final String DISABLE = Ansi.class.getName() + \".disable\";\n \n     private static Callable<Boolean> detector = new Callable<Boolean>() {\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -123,7 +123,7 @@ private void connectArthas(ChannelHandlerContext tunnelSocketCtx, MultiValueMap<\n         List<String> agentId = parameters.getOrDefault(\"id\", Collections.emptyList());\n \n         if (agentId.isEmpty()) {\n-            logger.error(\"arthas agent id can not be null, parameters: \", parameters);\n+            logger.error(\"arthas agent id can not be null, parameters: {}\", parameters);\n             throw new IllegalArgumentException(\"arthas agent id can not be null\");\n         }\n ",
    "output": "Some code optimization (#1608)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -183,6 +183,11 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n             groupLocationFilter.addFilter(invokeExceptionFilter);\n \n             for (MethodNode methodNode : matchedMethods) {\n+                if (AsmUtils.isNative(methodNode)) {\n+                    logger.info(\"ignore native method: {}\",\n+                            AsmUtils.methodDeclaration(Type.getObjectType(classNode.name), methodNode));\n+                    continue;\n+                }\n                 // 先查找是否有 atBeforeInvoke 函数，如果有，则说明已经有trace了，则直接不再尝试增强，直接插入 listener\n                 if(AsmUtils.containsMethodInsnNode(methodNode, Type.getInternalName(SpyAPI.class), \"atBeforeInvoke\")) {\n                     for (AbstractInsnNode insnNode = methodNode.instructions.getFirst(); insnNode != null; insnNode = insnNode",
    "output": "ignore native method. #1565"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n@@ -5,10 +5,12 @@\n import java.lang.instrument.Instrumentation;\n \n import org.jboss.modules.ModuleClassLoader;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n+import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.core.bytecode.TestHelper;\n import com.taobao.arthas.core.config.Configure;\n \n@@ -20,6 +22,12 @@\n  *\n  */\n public class ArthasBootstrapTest {\n+    @Before\n+    public void beforeMethod() {\n+        // jboss modules need jdk8\n+        org.junit.Assume.assumeTrue(JavaVersionUtils.isGreaterThanJava7());\n+    }\n+\n     @Test\n     public void test() throws Exception {\n         Instrumentation instrumentation = ByteBuddyAgent.install();",
    "output": "fix ArthasBootstrapTest"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "update version string"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -29,7 +29,6 @@\n import com.alibaba.arthas.tunnel.client.TunnelClient;\n import com.alibaba.bytekit.asm.instrument.InstrumentConfig;\n import com.alibaba.bytekit.asm.instrument.InstrumentParseResult;\n-import com.alibaba.bytekit.asm.instrument.InstrumentTemplate;\n import com.alibaba.bytekit.asm.instrument.InstrumentTransformer;\n import com.alibaba.bytekit.asm.matcher.SimpleClassMatcher;\n import com.alibaba.bytekit.utils.AsmUtils;",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java b/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n@@ -12,7 +12,10 @@\n public abstract class ClassLoader_Instrument {\n     public Class<?> loadClass(String name) throws ClassNotFoundException {\n         if (name.startsWith(\"java.arthas.\")) {\n-            return ClassLoader.getSystemClassLoader().loadClass(name);\n+            ClassLoader extClassLoader = ClassLoader.getSystemClassLoader().getParent();\n+            if (extClassLoader != null) {\n+                return extClassLoader.loadClass(name);\n+            }\n         }\n \n         Class clazz = InstrumentApi.invokeOrigin();",
    "output": "use ext classloader to try load SpyAPI. #1596"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/RuntimeInfoVO.java b/core/src/main/java/com/taobao/arthas/core/command/model/RuntimeInfoVO.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/RuntimeInfoVO.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/RuntimeInfoVO.java\n@@ -13,6 +13,7 @@ public class RuntimeInfoVO {\n     private double systemLoadAverage;\n     private int processors;\n     private long uptime;\n+    private long timestamp;\n \n     public RuntimeInfoVO() {\n     }\n@@ -72,4 +73,12 @@ public long getUptime() {\n     public void setUptime(long uptime) {\n         this.uptime = uptime;\n     }\n+\n+    public long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimestamp(long timestamp) {\n+        this.timestamp = timestamp;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -32,6 +32,7 @@\n import java.lang.management.MemoryType;\n import java.lang.management.MemoryUsage;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -206,6 +207,7 @@ private static void addRuntimeInfo(DashboardModel dashboardModel) {\n         runtimeInfo.setSystemLoadAverage(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n         runtimeInfo.setProcessors(Runtime.getRuntime().availableProcessors());\n         runtimeInfo.setUptime(ManagementFactory.getRuntimeMXBean().getUptime() / 1000);\n+        runtimeInfo.setTimestamp(new Date().getTime());\n         dashboardModel.setRuntimeInfo(runtimeInfo);\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/DashboardView.java b/core/src/main/java/com/taobao/arthas/core/command/view/DashboardView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/DashboardView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/DashboardView.java\n@@ -10,6 +10,7 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.lang.management.MemoryUsage;\n+import java.util.Date;\n import java.util.List;\n import java.util.Map;\n \n@@ -155,7 +156,7 @@ private static TableElement drawRuntimeInfo(RuntimeInfoVO runtimeInfo) {\n         table.row(\"java.home\", runtimeInfo.getJavaHome());\n         table.row(\"systemload.average\", String.format(\"%.2f\", runtimeInfo.getSystemLoadAverage()));\n         table.row(\"processors\", \"\" + runtimeInfo.getProcessors());\n-        table.row(\"uptime\", \"\" + runtimeInfo.getUptime() + \"s\");\n+        table.row(\"timestamp/uptime\", new Date(runtimeInfo.getTimestamp()).toString() + \"/\" + runtimeInfo.getUptime() + \"s\");\n         return table;\n     }\n ",
    "output": "dashboard command print current timestamp. #1595"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplication.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplication.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplication.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/ArthasTunnelApplication.java\n@@ -2,9 +2,11 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cache.annotation.EnableCaching;\n \n @SpringBootApplication(scanBasePackages = { \"com.alibaba.arthas.tunnel.server.app\",\n         \"com.alibaba.arthas.tunnel.server.endpoint\" })\n+@EnableCaching\n public class ArthasTunnelApplication {\n \n     public static void main(String[] args) {\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/TunnelClusterStoreConfiguration.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/TunnelClusterStoreConfiguration.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/TunnelClusterStoreConfiguration.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/TunnelClusterStoreConfiguration.java\n@@ -2,14 +2,20 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n+import org.springframework.cache.Cache;\n+import org.springframework.cache.CacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.data.redis.core.StringRedisTemplate;\n \n+import com.alibaba.arthas.tunnel.server.app.configuration.TunnelClusterStoreConfiguration.RedisTunnelClusterStoreConfiguration;\n+import com.alibaba.arthas.tunnel.server.cluster.InMemoryClusterStore;\n import com.alibaba.arthas.tunnel.server.cluster.RedisTunnelClusterStore;\n import com.alibaba.arthas.tunnel.server.cluster.TunnelClusterStore;\n \n@@ -19,17 +25,31 @@\n  *\n  */\n @Configuration\n-@AutoConfigureAfter(RedisAutoConfiguration.class)\n+@AutoConfigureAfter(value = { RedisAutoConfiguration.class, CacheAutoConfiguration.class })\n+@Import(RedisTunnelClusterStoreConfiguration.class)\n public class TunnelClusterStoreConfiguration {\n+\n     @Bean\n-//  @ConditionalOnBean(StringRedisTemplate.class)\n-    @ConditionalOnClass(StringRedisTemplate.class)\n-    @ConditionalOnProperty(\"spring.redis.host\")\n     @ConditionalOnMissingBean\n-    public TunnelClusterStore tunnelClusterStore(@Autowired StringRedisTemplate redisTemplate) {\n-        RedisTunnelClusterStore redisTunnelClusterStore = new RedisTunnelClusterStore();\n-        redisTunnelClusterStore.setRedisTemplate(redisTemplate);\n-        return redisTunnelClusterStore;\n+    @ConditionalOnProperty(name = \"spring.cache.type\", havingValue = \"caffeine\")\n+    public TunnelClusterStore tunnelClusterStore(@Autowired CacheManager cacheManager) {\n+        Cache inMemoryClusterCache = cacheManager.getCache(\"inMemoryClusterCache\");\n+        InMemoryClusterStore inMemoryClusterStore = new InMemoryClusterStore();\n+        inMemoryClusterStore.setCache(inMemoryClusterCache);\n+        return inMemoryClusterStore;\n+    }\n+\n+    static class RedisTunnelClusterStoreConfiguration {\n+        @Bean\n+        // @ConditionalOnBean(StringRedisTemplate.class)\n+        @ConditionalOnClass(StringRedisTemplate.class)\n+        @ConditionalOnProperty(\"spring.redis.host\")\n+        @ConditionalOnMissingBean\n+        public TunnelClusterStore tunnelClusterStore(@Autowired StringRedisTemplate redisTemplate) {\n+            RedisTunnelClusterStore redisTunnelClusterStore = new RedisTunnelClusterStore();\n+            redisTunnelClusterStore.setRedisTemplate(redisTemplate);\n+            return redisTunnelClusterStore;\n+        }\n     }\n \n }\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/InMemoryClusterStore.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/InMemoryClusterStore.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/InMemoryClusterStore.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/InMemoryClusterStore.java\n@@ -0,0 +1,87 @@\n+package com.alibaba.arthas.tunnel.server.cluster;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cache.Cache;\n+import org.springframework.cache.Cache.ValueWrapper;\n+import org.springframework.cache.caffeine.CaffeineCache;\n+\n+import com.alibaba.arthas.tunnel.server.AgentClusterInfo;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-12-02\n+ *\n+ */\n+public class InMemoryClusterStore implements TunnelClusterStore {\n+    private final static Logger logger = LoggerFactory.getLogger(InMemoryClusterStore.class);\n+\n+    private Cache cache;\n+\n+    @Override\n+    public AgentClusterInfo findAgent(String agentId) {\n+\n+        ValueWrapper valueWrapper = cache.get(agentId);\n+        if (valueWrapper == null) {\n+            return null;\n+        }\n+\n+        AgentClusterInfo info = (AgentClusterInfo) valueWrapper.get();\n+        return info;\n+    }\n+\n+    @Override\n+    public void removeAgent(String agentId) {\n+        cache.evict(agentId);\n+    }\n+\n+    @Override\n+    public void addAgent(String agentId, AgentClusterInfo info, long timeout, TimeUnit timeUnit) {\n+        cache.put(agentId, info);\n+    }\n+\n+    @Override\n+    public Collection<String> allAgentIds() {\n+        CaffeineCache caffeineCache = (CaffeineCache) cache;\n+        com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCache = caffeineCache.getNativeCache();\n+        return (Collection<String>) (Collection<?>) nativeCache.asMap().keySet();\n+    }\n+\n+    @Override\n+    public Map<String, AgentClusterInfo> agentInfo(String appName) {\n+        CaffeineCache caffeineCache = (CaffeineCache) cache;\n+        com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCache = caffeineCache.getNativeCache();\n+\n+        ConcurrentMap<String, AgentClusterInfo> map = (ConcurrentMap<String, AgentClusterInfo>) (ConcurrentMap<?, ?>) nativeCache\n+                .asMap();\n+\n+        Map<String, AgentClusterInfo> result = new HashMap<String, AgentClusterInfo>();\n+\n+        String prefix = appName + \"_\";\n+        for (Entry<String, AgentClusterInfo> entry : map.entrySet()) {\n+            String agentId = entry.getKey();\n+            if (agentId.startsWith(prefix)) {\n+                result.put(agentId, entry.getValue());\n+            }\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    public Cache getCache() {\n+        return cache;\n+    }\n+\n+    public void setCache(Cache cache) {\n+        this.cache = cache;\n+    }\n+\n+}",
    "output": "tunnel server support InMemoryClusterStore. #1593"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/IOUtils.java b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n@@ -94,16 +94,24 @@ public static IOException close(final ZipFile zip) {\n         return null;\n     }\n \n+    public static boolean isSubFile(File parent, File child) throws IOException {\n+        return child.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separator);\n+    }\n+ \n+    public static boolean isSubFile(String parent, String child) throws IOException {\n+        return isSubFile(new File(parent), new File(child));\n+    }\n+\n     public static void unzip(String zipFile, String extractFolder) throws IOException {\n         File file = new File(zipFile);\n         ZipFile zip = null;\n         try {\n             int BUFFER = 1024 * 8;\n \n             zip = new ZipFile(file);\n-            String newPath = extractFolder;\n+            File newPath = new File(extractFolder);\n+            newPath.mkdirs();\n \n-            new File(newPath).mkdir();\n             Enumeration<? extends ZipEntry> zipFileEntries = zip.entries();\n \n             // Process each entry\n@@ -113,6 +121,10 @@ public static void unzip(String zipFile, String extractFolder) throws IOExceptio\n                 String currentEntry = entry.getName();\n \n                 File destFile = new File(newPath, currentEntry);\n+                if (!isSubFile(newPath, destFile)) {\n+                    throw new IOException(\"Bad zip entry: \" + currentEntry);\n+                }\n+\n                 // destFile = new File(newPath, destFile.getName());\n                 File destinationParent = destFile.getParentFile();\n ",
    "output": "fix IOUtils unzip security problem"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -114,7 +114,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 }\n             } catch (Throwable e) {\n                 logger.error(\"the classloader can not load SpyAPI, ignore it. classloader: {}, className: {}\",\n-                        inClassLoader.getClass().getName(), className);\n+                        inClassLoader.getClass().getName(), className, e);\n                 return null;\n             }\n ",
    "output": "Enhancer print error exception."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -28,6 +28,11 @@ public class Configure {\n     private String tunnelServer;\n     private String agentId;\n \n+    /**\n+     * 需要被增强的ClassLoader的全类名，多个用英文 , 分隔\n+     */\n+    private String enhanceLoaders;\n+\n     /**\n      * <pre>\n      * 1. 如果显式传入 arthas.agentId ，则直接使用\n@@ -135,6 +140,14 @@ public void setAppName(String appName) {\n         this.appName = appName;\n     }\n \n+    public String getEnhanceLoaders() {\n+        return enhanceLoaders;\n+    }\n+\n+    public void setEnhanceLoaders(String enhanceLoaders) {\n+        this.enhanceLoaders = enhanceLoaders;\n+    }\n+\n     /**\n      * 序列化成字符串\n      *\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -9,10 +9,12 @@\n import java.security.CodeSource;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.Timer;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n@@ -25,9 +27,12 @@\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.alibaba.arthas.tunnel.client.TunnelClient;\n+import com.alibaba.bytekit.asm.instrument.InstrumentConfig;\n import com.alibaba.bytekit.asm.instrument.InstrumentParseResult;\n import com.alibaba.bytekit.asm.instrument.InstrumentTemplate;\n import com.alibaba.bytekit.asm.instrument.InstrumentTransformer;\n+import com.alibaba.bytekit.asm.matcher.SimpleClassMatcher;\n+import com.alibaba.bytekit.utils.AsmUtils;\n import com.alibaba.bytekit.utils.IOUtils;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ArthasConstants;\n@@ -59,7 +64,9 @@\n import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n import com.taobao.arthas.core.util.ArthasBanner;\n import com.taobao.arthas.core.util.FileUtils;\n+import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.UserStatUtil;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n@@ -126,10 +133,12 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         // 3. init logger\n         loggerContext = LogUtil.initLooger(arthasEnvironment);\n \n-        // 4. init beans\n+        // 4. 增强ClassLoader\n+        enhanceClassLoader();\n+        // 5. init beans\n         initBeans();\n \n-        // 5. start agent server\n+        // 6. start agent server\n         bind(configure);\n \n         executorService = Executors.newScheduledThreadPool(1, new ThreadFactory() {\n@@ -182,19 +191,38 @@ private void initSpy() throws Throwable {\n                 throw new IllegalStateException(\"can not find \" + ARTHAS_SPY_JAR);\n             }\n         }\n+    }\n+\n+    void enhanceClassLoader() throws IOException, UnmodifiableClassException {\n+        if (configure.getEnhanceLoaders() == null) {\n+            return;\n+        }\n+        Set<String> loaders = new HashSet<String>();\n+        for (String s : configure.getEnhanceLoaders().split(\",\")) {\n+            loaders.add(s.trim());\n+        }\n \n         // 增强 ClassLoader#loadClsss ，解决一些ClassLoader加载不到 SpyAPI的问题\n         // https://github.com/alibaba/arthas/issues/1596\n-        InstrumentTemplate template = new InstrumentTemplate();\n         byte[] classBytes = IOUtils.getBytes(ArthasBootstrap.class.getClassLoader()\n                 .getResourceAsStream(ClassLoader_Instrument.class.getName().replace('.', '/') + \".class\"));\n-        template.addInstrumentClass(classBytes);\n \n-        InstrumentParseResult instrumentParseResult = template.build();\n+        SimpleClassMatcher matcher = new SimpleClassMatcher(loaders);\n+        InstrumentConfig instrumentConfig = new InstrumentConfig(AsmUtils.toClassNode(classBytes), matcher);\n+\n+        InstrumentParseResult instrumentParseResult = new InstrumentParseResult();\n+        instrumentParseResult.addInstrumentConfig(instrumentConfig);\n         classLoaderInstrumentTransformer = new InstrumentTransformer(instrumentParseResult);\n-        instrumentation.addTransformer(classLoaderInstrumentTransformer);\n-    }\n+        instrumentation.addTransformer(classLoaderInstrumentTransformer, true);\n \n+        if (loaders.size() == 1 && loaders.contains(ClassLoader.class.getName())) {\n+            // 如果只增强 java.lang.ClassLoader，可以减少查找过程\n+            instrumentation.retransformClasses(ClassLoader.class);\n+        } else {\n+            InstrumentationUtils.trigerRetransformClasses(instrumentation, loaders);\n+        }\n+    }\n+    \n     private void initArthasEnvironment(Map<String, String> argsMap) throws IOException {\n         if (arthasEnvironment == null) {\n             arthasEnvironment = new ArthasEnvironment();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n@@ -2,6 +2,7 @@\n \n import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.Instrumentation;\n+import java.util.Collection;\n import java.util.Set;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n@@ -38,4 +39,17 @@ public static void retransformClasses(Instrumentation inst, ClassFileTransformer\n             inst.removeTransformer(transformer);\n         }\n     }\n+\n+    public static void trigerRetransformClasses(Instrumentation inst, Collection<String> classes) {\n+        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            if (classes.contains(clazz.getName())) {\n+                try {\n+                    inst.retransformClasses(clazz);\n+                } catch (Throwable e) {\n+                    String errorMsg = \"retransformClasses class error, name: \" + clazz.getName();\n+                    logger.error(errorMsg, e);\n+                }\n+            }\n+        }\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/server/ArthasBootstrapTest.java\n@@ -0,0 +1,55 @@\n+package com.taobao.arthas.core.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.instrument.Instrumentation;\n+\n+import org.jboss.modules.ModuleClassLoader;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+\n+import com.taobao.arthas.core.bytecode.TestHelper;\n+import com.taobao.arthas.core.config.Configure;\n+\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-12-02\n+ *\n+ */\n+public class ArthasBootstrapTest {\n+    @Test\n+    public void test() throws Exception {\n+        Instrumentation instrumentation = ByteBuddyAgent.install();\n+        TestHelper.appendSpyJar(instrumentation);\n+\n+        ArthasBootstrap arthasBootstrap = Mockito.mock(ArthasBootstrap.class);\n+        Mockito.doCallRealMethod().when(arthasBootstrap).enhanceClassLoader();\n+\n+        Configure configure = Mockito.mock(Configure.class);\n+        Mockito.when(configure.getEnhanceLoaders())\n+                .thenReturn(\"java.lang.ClassLoader,org.jboss.modules.ConcurrentClassLoader\");\n+        FieldSetter.setField(arthasBootstrap, ArthasBootstrap.class.getDeclaredField(\"configure\"), configure);\n+        FieldSetter.setField(arthasBootstrap, ArthasBootstrap.class.getDeclaredField(\"instrumentation\"),\n+                instrumentation);\n+\n+        org.jboss.modules.ModuleClassLoader moduleClassLoader = Mockito.mock(ModuleClassLoader.class);\n+\n+        boolean flag = false;\n+        try {\n+            moduleClassLoader.loadClass(\"java.arthas.SpyAPI\");\n+        } catch (Exception e) {\n+            flag = true;\n+        }\n+        assertThat(flag).isTrue();\n+\n+        arthasBootstrap.enhanceClassLoader();\n+\n+        Class<?> loadClass = moduleClassLoader.loadClass(\"java.arthas.SpyAPI\");\n+\n+        System.err.println(loadClass);\n+\n+    }\n+}",
    "output": "support arthas.enhanceLoaders config/add jboss ModuleClassLoader testcase. #1596"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -25,6 +25,10 @@\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.alibaba.arthas.tunnel.client.TunnelClient;\n+import com.alibaba.bytekit.asm.instrument.InstrumentParseResult;\n+import com.alibaba.bytekit.asm.instrument.InstrumentTemplate;\n+import com.alibaba.bytekit.asm.instrument.InstrumentTransformer;\n+import com.alibaba.bytekit.utils.IOUtils;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ArthasConstants;\n import com.taobao.arthas.common.PidUtils;\n@@ -40,6 +44,7 @@\n import com.taobao.arthas.core.env.MapPropertySource;\n import com.taobao.arthas.core.env.PropertiesPropertySource;\n import com.taobao.arthas.core.env.PropertySource;\n+import com.taobao.arthas.core.server.instrument.ClassLoader_Instrument;\n import com.taobao.arthas.core.shell.ShellServer;\n import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.arthas.core.shell.command.CommandResolver;\n@@ -85,6 +90,7 @@ public class ArthasBootstrap {\n \n     private AtomicBoolean isBindRef = new AtomicBoolean(false);\n     private Instrumentation instrumentation;\n+    private InstrumentTransformer classLoaderInstrumentTransformer;\n     private Thread shutdown;\n     private ShellServer shellServer;\n     private ScheduledExecutorService executorService;\n@@ -114,7 +120,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         arthasOutputDir.mkdirs();\n \n         // 1. initSpy()\n-        initSpy(instrumentation);\n+        initSpy();\n         // 2. ArthasEnvironment\n         initArthasEnvironment(args);\n         // 3. init logger\n@@ -153,7 +159,7 @@ private void initBeans() {\n         this.historyManager = new HistoryManagerImpl();\n     }\n \n-    private static void initSpy(Instrumentation instrumentation) throws Throwable {\n+    private void initSpy() throws Throwable {\n         // TODO init SpyImpl ?\n \n         // 将Spy添加到BootstrapClassLoader\n@@ -176,6 +182,17 @@ private static void initSpy(Instrumentation instrumentation) throws Throwable {\n                 throw new IllegalStateException(\"can not find \" + ARTHAS_SPY_JAR);\n             }\n         }\n+\n+        // 增强 ClassLoader#loadClsss ，解决一些ClassLoader加载不到 SpyAPI的问题\n+        // https://github.com/alibaba/arthas/issues/1596\n+        InstrumentTemplate template = new InstrumentTemplate();\n+        byte[] classBytes = IOUtils.getBytes(ArthasBootstrap.class.getClassLoader()\n+                .getResourceAsStream(ClassLoader_Instrument.class.getName().replace('.', '/') + \".class\"));\n+        template.addInstrumentClass(classBytes);\n+\n+        InstrumentParseResult instrumentParseResult = template.build();\n+        classLoaderInstrumentTransformer = new InstrumentTransformer(instrumentParseResult);\n+        instrumentation.addTransformer(classLoaderInstrumentTransformer);\n     }\n \n     private void initArthasEnvironment(Map<String, String> argsMap) throws IOException {\n@@ -437,6 +454,9 @@ public void destroy() {\n         if (transformerManager != null) {\n             transformerManager.destroy();\n         }\n+        if (classLoaderInstrumentTransformer != null) {\n+            instrumentation.removeTransformer(classLoaderInstrumentTransformer);\n+        }\n         // clear the reference in Spy class.\n         cleanUpSpyReference();\n         shutdownWorkGroup();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java b/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/instrument/ClassLoader_Instrument.java\n@@ -0,0 +1,21 @@\n+package com.taobao.arthas.core.server.instrument;\n+\n+import com.alibaba.bytekit.agent.inst.Instrument;\n+import com.alibaba.bytekit.agent.inst.InstrumentApi;\n+\n+/**\n+ * @see java.lang.ClassLoader#loadClass(String)\n+ * @author hengyunabc 2020-11-30\n+ *\n+ */\n+@Instrument(Class = \"java.lang.ClassLoader\")\n+public abstract class ClassLoader_Instrument {\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        if (name.startsWith(\"java.arthas.\")) {\n+            return ClassLoader.getSystemClassLoader().loadClass(name);\n+        }\n+\n+        Class clazz = InstrumentApi.invokeOrigin();\n+        return clazz;\n+    }\n+}",
    "output": "enhance ClassLoader#loadClass to reslove the classloader can not load SpyAPI problem. #1596"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/ArthasProperties.java\n@@ -1,5 +1,8 @@\n package com.alibaba.arthas.tunnel.server.app.configuration;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n \n@@ -114,6 +117,7 @@ public static class EmbeddedRedis {\n         private boolean enabled = false;\n         private String host = \"127.0.0.1\";\n         private int port = 6379;\n+        private List<String> settings = new ArrayList<String>();\n \n         public boolean isEnabled() {\n             return enabled;\n@@ -138,6 +142,14 @@ public int getPort() {\n         public void setPort(int port) {\n             this.port = port;\n         }\n+\n+        public List<String> getSettings() {\n+            return settings;\n+        }\n+\n+        public void setSettings(List<String> settings) {\n+            this.settings = settings;\n+        }\n     }\n \n }\n\ndiff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/configuration/EmbeddedRedisConfiguration.java\n@@ -9,6 +9,7 @@\n import com.alibaba.arthas.tunnel.server.app.configuration.ArthasProperties.EmbeddedRedis;\n \n import redis.embedded.RedisServer;\n+import redis.embedded.RedisServerBuilder;\n \n /**\n  * \n@@ -25,10 +26,13 @@ public class EmbeddedRedisConfiguration {\n     public RedisServer embeddedRedisServer(ArthasProperties arthasProperties) {\n         EmbeddedRedis embeddedRedis = arthasProperties.getEmbeddedRedis();\n \n-        RedisServer redisServer = RedisServer.builder().port(embeddedRedis.getPort()).bind(embeddedRedis.getHost())\n-                .build();\n-        return redisServer;\n+        RedisServerBuilder builder = RedisServer.builder().port(embeddedRedis.getPort()).bind(embeddedRedis.getHost());\n \n+        for (String setting : embeddedRedis.getSettings()) {\n+            builder.setting(setting);\n+        }\n+        RedisServer redisServer = builder.build();\n+        return redisServer;\n     }\n \n     public static void main(String[] args) {",
    "output": "tunnel server embedded redis support settgins. #1592"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n@@ -100,7 +100,7 @@ public void run() {\n         }, 3, 3, TimeUnit.SECONDS);\n     }\n \n-    static private ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager> adviceListenerMap = new ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager>();\n+    private static final ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager> adviceListenerMap = new ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager>();\n \n     static class ClassLoaderAdviceListenerManager {\n         private ConcurrentHashMap<String, List<AdviceListener>> map = new ConcurrentHashMap<String, List<AdviceListener>>();",
    "output": "improve"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/express/ExpressFactory.java b/core/src/main/java/com/taobao/arthas/core/command/express/ExpressFactory.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/ExpressFactory.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/ExpressFactory.java\n@@ -24,6 +24,9 @@ public static Express threadLocalExpress(Object object) {\n     }\n \n     public static Express unpooledExpress(ClassLoader classloader) {\n+        if (classloader == null) {\n+            classloader = ClassLoader.getSystemClassLoader();\n+        }\n         return new OgnlExpress(new ClassLoaderClassResolver(classloader));\n     }\n }\n\\ No newline at end of file",
    "output": "polish #1586"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -354,7 +354,8 @@ private void processWatch(CommandProcess process) {\n             }\n \n             Advice advice = tf.getAdvice();\n-            Object value = ExpressFactory.threadLocalExpress(advice).get(watchExpress);\n+\n+\t\t\tObject value = ExpressFactory.unpooledExpress(advice.getLoader()).bind(advice).get(watchExpress);\n             TimeTunnelModel timeTunnelModel = new TimeTunnelModel()\n                     .setWatchValue(value)\n                     .setExpand(expand)",
    "output": "use advise's classloader to avoid NPE when the class is not loaded by current thread (#1586)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n@@ -35,6 +35,7 @@ public void process(CommandProcess process) {\n                 result.setAgentId(id);\n             }\n             result.setTunnelServer(tunnelClient.getTunnelServerUrl());\n+            result.setTunnelConnected(tunnelClient.isConnected());\n         }\n \n         //statUrl\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/SessionModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/SessionModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/SessionModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/SessionModel.java\n@@ -13,6 +13,8 @@ public class SessionModel extends ResultModel {\n     private String tunnelServer;\n     private String statUrl;\n \n+    private boolean tunnelConnected;\n+\n     @Override\n     public String getType() {\n         return \"session\";\n@@ -57,4 +59,12 @@ public String getStatUrl() {\n     public void setStatUrl(String statUrl) {\n         this.statUrl = statUrl;\n     }\n+\n+    public boolean isTunnelConnected() {\n+        return tunnelConnected;\n+    }\n+\n+    public void setTunnelConnected(boolean tunnelConnected) {\n+        this.tunnelConnected = tunnelConnected;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/SessionView.java b/core/src/main/java/com/taobao/arthas/core/command/view/SessionView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/SessionView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/SessionView.java\n@@ -26,6 +26,7 @@ public void draw(CommandProcess process, SessionModel result) {\n         }\n         if (result.getTunnelServer() != null) {\n             table.row(\"TUNNEL_SERVER\", \"\" + result.getTunnelServer());\n+            table.row(\"TUNNEL_CONNECTED\", \"\" + result.isTunnelConnected());\n         }\n         if (result.getStatUrl() != null) {\n             table.row(\"STAT_URL\", result.getStatUrl());\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n@@ -61,6 +61,8 @@ public class TunnelClient {\n      */\n     private String version = \"unknown\";\n \n+    private volatile boolean connected = false;\n+\n     public ChannelFuture start() throws IOException, InterruptedException, URISyntaxException {\n         return connect(false);\n     }\n@@ -190,4 +192,12 @@ public String getAppName() {\n     public void setAppName(String appName) {\n         this.appName = appName;\n     }\n+\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    public void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n }\n\ndiff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java\n@@ -72,6 +72,7 @@ public void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) throws\n                 if (idList != null && !idList.isEmpty()) {\n                     this.tunnelClient.setId(idList.get(0));\n                 }\n+                tunnelClient.setConnected(true);\n                 registerPromise.setSuccess();\n             }\n \n@@ -137,6 +138,7 @@ public void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) throws\n \n     @Override\n     public void channelUnregistered(final ChannelHandlerContext ctx) throws Exception {\n+        tunnelClient.setConnected(false);\n         ctx.channel().eventLoop().schedule(new Runnable() {\n             @Override\n             public void run() {",
    "output": "session command print tunnel client connect status. #1576"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -301,7 +301,6 @@ private void bind(Configure configure) throws Throwable {\n                     System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n         }\n \n-        String agentId = null;\n         try {\n             if (configure.getTunnelServer() != null) {\n                 tunnelClient = new TunnelClient();\n@@ -311,9 +310,6 @@ private void bind(Configure configure) throws Throwable {\n                 tunnelClient.setVersion(ArthasBanner.version());\n                 ChannelFuture channelFuture = tunnelClient.start();\n                 channelFuture.await(10, TimeUnit.SECONDS);\n-                if(channelFuture.isSuccess()) {\n-                    agentId = tunnelClient.getId();\n-                }\n             }\n         } catch (Throwable t) {\n             logger().error(\"start tunnel client error\", t);\n@@ -322,17 +318,12 @@ private void bind(Configure configure) throws Throwable {\n         try {\n             ShellServerOptions options = new ShellServerOptions()\n                             .setInstrumentation(instrumentation)\n-                            .setPid(PidUtils.currentLongPid());\n+                            .setPid(PidUtils.currentLongPid())\n+                            .setWelcomeMessage(ArthasBanner.welcome());\n             if (configure.getSessionTimeout() != null) {\n                 options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n             }\n \n-            if (agentId != null) {\n-                Map<String, String> welcomeInfos = new HashMap<String, String>();\n-                welcomeInfos.put(\"id\", agentId);\n-                options.setWelcomeMessage(ArthasBanner.welcome(welcomeInfos));\n-            }\n-\n             shellServer = new ShellServerImpl(options);\n             BuiltinCommandPack builtinCommands = new BuiltinCommandPack();\n             List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n@@ -2,6 +2,7 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.alibaba.arthas.tunnel.client.TunnelClient;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.Shell;\n import com.taobao.arthas.core.shell.ShellServer;\n@@ -19,10 +20,12 @@\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.shell.term.TermServer;\n+import com.taobao.arthas.core.util.ArthasBanner;\n \n import java.lang.instrument.Instrumentation;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -93,13 +96,26 @@ public void handleTerm(Term term) {\n         }\n \n         ShellImpl session = createShell(term);\n+        tryUpdateWelcomeMessage();\n         session.setWelcome(welcomeMessage);\n         session.closedFuture.setHandler(new SessionClosedHandler(this, session));\n         session.init();\n         sessions.put(session.id, session); // Put after init so the close handler on the connection is set\n         session.readline(); // Now readline\n     }\n \n+    private void tryUpdateWelcomeMessage() {\n+        TunnelClient tunnelClient = ArthasBootstrap.getInstance().getTunnelClient();\n+        if (tunnelClient != null) {\n+            String id = tunnelClient.getId();\n+            if (id != null) {\n+                Map<String, String> welcomeInfos = new HashMap<String, String>();\n+                welcomeInfos.put(\"id\", id);\n+                this.welcomeMessage = ArthasBanner.welcome(welcomeInfos);\n+            }\n+        }\n+    }\n+\n     @Override\n     public ShellServer listen(final Handler<Future<Void>> listenHandler) {\n         final List<TermServer> toStart;",
    "output": "improve print agentId in welcome message. #1575"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "release 3.4.4"
  },
  {
    "input": "diff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -3,6 +3,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n+import java.util.TimeZone;\n+import java.util.concurrent.TimeUnit;\n \n import org.junit.Assert;\n import org.junit.Rule;\n@@ -29,13 +31,16 @@ public void testReadAllVersions() {\n \n     @Test\n     public void testAliyunDownload() throws IOException {\n-        String version = \"3.3.7\";\n-        File folder = rootFolder.newFolder();\n-        System.err.println(folder.getAbsolutePath());\n-        DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n-\n-        File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n-        Assert.assertTrue(as.exists());\n+        // fix travis-ci failed problem\n+        if (TimeUnit.MILLISECONDS.toHours(TimeZone.getDefault().getOffset(System.currentTimeMillis())) == 8) {\n+            String version = \"3.3.7\";\n+            File folder = rootFolder.newFolder();\n+            System.err.println(folder.getAbsolutePath());\n+            DownloadUtils.downArthasPackaging(\"aliyun\", false, version, folder.getAbsolutePath());\n+\n+            File as = new File(folder, version + File.separator + \"arthas\" + File.separator + \"as.sh\");\n+            Assert.assertTrue(as.exists());\n+        }\n     }\n \n     @Test",
    "output": "fix travis-ci failed problem."
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n@@ -12,6 +12,7 @@\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.core.env.ConfigurableEnvironment;\n \n import com.taobao.arthas.agent.attach.ArthasAgent;\n \n@@ -25,6 +26,9 @@\n public class ArthasConfiguration {\n \tprivate static final Logger logger = LoggerFactory.getLogger(ArthasConfiguration.class);\n \n+\t@Autowired\n+\tConfigurableEnvironment environment;\n+\n \t@ConfigurationProperties(prefix = \"arthas\")\n \t@ConditionalOnMissingBean\n \t@Bean\n@@ -36,7 +40,16 @@ public HashMap<String, String> arthasConfigMap() {\n \t@Bean\n \tpublic ArthasAgent arthasAgent(@Autowired Map<String, String> arthasConfigMap,\n \t\t\t@Autowired ArthasProperties arthasProperties) throws Throwable {\n-\t\tarthasConfigMap = StringUtils.removeDashKey(arthasConfigMap);\n+        arthasConfigMap = StringUtils.removeDashKey(arthasConfigMap);\n+\n+        /**\n+         * @see org.springframework.boot.context.ContextIdApplicationContextInitializer#getApplicationId(ConfigurableEnvironment)\n+         */\n+        String appName = environment.getProperty(\"spring.application.name\");\n+        if (arthasConfigMap.get(\"appName\") == null && appName != null) {\n+            arthasConfigMap.put(\"appName\", appName);\n+        }\n+\n \t\t// 给配置全加上前缀\n \t\tMap<String, String> mapWithPrefix = new HashMap<String, String>(arthasConfigMap.size());\n \t\tfor (Entry<String, String> entry : arthasConfigMap.entrySet()) {\n\ndiff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n@@ -16,6 +16,8 @@ public class ArthasProperties {\n \tprivate String tunnelServer;\n \tprivate String agentId;\n \n+\tprivate String appName;\n+\n \t/**\n \t * report executed command\n \t */\n@@ -105,4 +107,12 @@ public void setSessionTimeout(long sessionTimeout) {\n \t\tthis.sessionTimeout = sessionTimeout;\n \t}\n \n+    public String getAppName() {\n+        return appName;\n+    }\n+\n+    public void setAppName(String appName) {\n+        this.appName = appName;\n+    }\n+\n }",
    "output": "arthas-spring-boot-starter support appName. #1562"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -342,13 +342,13 @@ private void bind(Configure configure) throws Throwable {\n             workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n \n             // TODO: discover user provided command resolver\n-            if (configure.getTelnetPort() > 0) {\n+            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n                 shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                         options.getConnectionTimeout(), workerGroup));\n             } else {\n                 logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n             }\n-            if (configure.getHttpPort() > 0) {\n+            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n                 shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                         options.getConnectionTimeout(), workerGroup));\n             } else {",
    "output": "fix testcase. #1561"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/CodeLock.java b/core/src/main/java/com/taobao/arthas/core/advisor/CodeLock.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/CodeLock.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/CodeLock.java\n@@ -1,43 +0,0 @@\n-package com.taobao.arthas.core.advisor;\n-\n-/**\n- * 代码锁<br/>\n- * 什么叫代码锁?代码锁的出现是由于在字节码中，我们无法用简单的if语句来判定这段代码是生成的还是原有的。\n- * 这会导致一些监控逻辑的混乱，比如trace命令如果不使用代码锁保护，将能看到Arthas所植入的代码并进行跟踪\n- * Created by vlinux on 15/5/28.\n- */\n-public interface CodeLock {\n-\n-    /**\n-     * 根据字节码流锁或解锁代码<br/>\n-     * 通过对字节码流的判断，决定当前代码是锁定和解锁\n-     *\n-     * @param opcode 字节码\n-     */\n-    void code(int opcode);\n-\n-    /**\n-     * 判断当前代码是否还在锁定中\n-     *\n-     * @return true/false\n-     */\n-    boolean isLock();\n-\n-    /**\n-     * 将一个代码块纳入代码锁保护范围\n-     *\n-     * @param block 代码块\n-     */\n-    void lock(Block block);\n-\n-    /**\n-     * 代码块\n-     */\n-    interface Block {\n-        /**\n-         * 代码\n-         */\n-        void code();\n-    }\n-\n-}",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n@@ -4,7 +4,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.deps.org.objectweb.asm.Type;\n import com.taobao.arthas.core.util.StringUtils;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -21,27 +21,27 @@\n import java.util.Set;\n import java.util.WeakHashMap;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n-import com.alibaba.arthas.deps.org.objectweb.asm.Opcodes;\n-import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.AbstractInsnNode;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodInsnNode;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodNode;\n+import com.alibaba.deps.org.objectweb.asm.ClassReader;\n+import com.alibaba.deps.org.objectweb.asm.Opcodes;\n+import com.alibaba.deps.org.objectweb.asm.Type;\n+import com.alibaba.deps.org.objectweb.asm.tree.AbstractInsnNode;\n+import com.alibaba.deps.org.objectweb.asm.tree.ClassNode;\n+import com.alibaba.deps.org.objectweb.asm.tree.MethodInsnNode;\n+import com.alibaba.deps.org.objectweb.asm.tree.MethodNode;\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n-import com.taobao.arthas.bytekit.asm.MethodProcessor;\n-import com.taobao.arthas.bytekit.asm.interceptor.InterceptorProcessor;\n-import com.taobao.arthas.bytekit.asm.interceptor.parser.DefaultInterceptorClassParser;\n-import com.taobao.arthas.bytekit.asm.location.Location;\n-import com.taobao.arthas.bytekit.asm.location.LocationType;\n-import com.taobao.arthas.bytekit.asm.location.MethodInsnNodeWare;\n-import com.taobao.arthas.bytekit.asm.location.filter.GroupLocationFilter;\n-import com.taobao.arthas.bytekit.asm.location.filter.InvokeCheckLocationFilter;\n-import com.taobao.arthas.bytekit.asm.location.filter.InvokeContainLocationFilter;\n-import com.taobao.arthas.bytekit.asm.location.filter.LocationFilter;\n-import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n-import com.taobao.arthas.bytekit.utils.AsmUtils;\n+import com.alibaba.bytekit.asm.MethodProcessor;\n+import com.alibaba.bytekit.asm.interceptor.InterceptorProcessor;\n+import com.alibaba.bytekit.asm.interceptor.parser.DefaultInterceptorClassParser;\n+import com.alibaba.bytekit.asm.location.Location;\n+import com.alibaba.bytekit.asm.location.LocationType;\n+import com.alibaba.bytekit.asm.location.MethodInsnNodeWare;\n+import com.alibaba.bytekit.asm.location.filter.GroupLocationFilter;\n+import com.alibaba.bytekit.asm.location.filter.InvokeCheckLocationFilter;\n+import com.alibaba.bytekit.asm.location.filter.InvokeContainLocationFilter;\n+import com.alibaba.bytekit.asm.location.filter.LocationFilter;\n+import com.alibaba.bytekit.utils.AsmOpUtils;\n+import com.alibaba.bytekit.utils.AsmUtils;\n import com.taobao.arthas.core.GlobalOptions;\n import com.taobao.arthas.core.advisor.SpyInterceptors.SpyInterceptor1;\n import com.taobao.arthas.core.advisor.SpyInterceptors.SpyInterceptor2;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/SpyInterceptors.java b/core/src/main/java/com/taobao/arthas/core/advisor/SpyInterceptors.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/SpyInterceptors.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/SpyInterceptors.java\n@@ -2,12 +2,12 @@\n \n import java.arthas.SpyAPI;\n \n-import com.taobao.arthas.bytekit.asm.binding.Binding;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtEnter;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExceptionExit;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExit;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtInvoke;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtInvokeException;\n+import com.alibaba.bytekit.asm.binding.Binding;\n+import com.alibaba.bytekit.asm.interceptor.annotation.AtEnter;\n+import com.alibaba.bytekit.asm.interceptor.annotation.AtExceptionExit;\n+import com.alibaba.bytekit.asm.interceptor.annotation.AtExit;\n+import com.alibaba.bytekit.asm.interceptor.annotation.AtInvoke;\n+import com.alibaba.bytekit.asm.interceptor.annotation.AtInvokeException;\n \n /**\n  * \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -11,7 +11,7 @@\n import java.util.Map;\n import java.util.Collection;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n+import com.alibaba.deps.org.objectweb.asm.ClassReader;\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.command.Constants;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java b/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n@@ -1,10 +1,10 @@\n package com.taobao.arthas.core.command.logger;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n-import com.alibaba.arthas.deps.org.objectweb.asm.ClassVisitor;\n-import com.alibaba.arthas.deps.org.objectweb.asm.ClassWriter;\n-import com.alibaba.arthas.deps.org.objectweb.asm.commons.ClassRemapper;\n-import com.alibaba.arthas.deps.org.objectweb.asm.commons.SimpleRemapper;\n+import com.alibaba.deps.org.objectweb.asm.ClassReader;\n+import com.alibaba.deps.org.objectweb.asm.ClassVisitor;\n+import com.alibaba.deps.org.objectweb.asm.ClassWriter;\n+import com.alibaba.deps.org.objectweb.asm.commons.ClassRemapper;\n+import com.alibaba.deps.org.objectweb.asm.commons.SimpleRemapper;\n \n /**\n  * \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n@@ -10,7 +10,7 @@\n import java.util.List;\n import java.util.Set;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.deps.org.objectweb.asm.Type;\n import com.taobao.arthas.core.command.model.ClassDetailVO;\n import com.taobao.arthas.core.command.model.ClassLoaderVO;\n import com.taobao.arthas.core.command.model.ClassVO;\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n@@ -11,11 +11,11 @@\n import org.mockito.Mockito;\n import org.zeroturnaround.zip.ZipUtil;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodNode;\n-import com.taobao.arthas.bytekit.utils.AsmUtils;\n-import com.taobao.arthas.bytekit.utils.Decompiler;\n+import com.alibaba.deps.org.objectweb.asm.Type;\n+import com.alibaba.deps.org.objectweb.asm.tree.ClassNode;\n+import com.alibaba.deps.org.objectweb.asm.tree.MethodNode;\n+import com.alibaba.bytekit.utils.AsmUtils;\n+import com.alibaba.bytekit.utils.Decompiler;\n import com.taobao.arthas.core.bytecode.TestHelper;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/bytecode/TestHelper.java b/core/src/test/java/com/taobao/arthas/core/bytecode/TestHelper.java\n--- a/core/src/test/java/com/taobao/arthas/core/bytecode/TestHelper.java\n+++ b/core/src/test/java/com/taobao/arthas/core/bytecode/TestHelper.java\n@@ -9,16 +9,16 @@\n \n import org.zeroturnaround.zip.ZipUtil;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n-import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodNode;\n-\n-import com.taobao.arthas.bytekit.asm.MethodProcessor;\n-import com.taobao.arthas.bytekit.asm.interceptor.InterceptorProcessor;\n-import com.taobao.arthas.bytekit.asm.interceptor.parser.DefaultInterceptorClassParser;\n-import com.taobao.arthas.bytekit.utils.AgentUtils;\n-import com.taobao.arthas.bytekit.utils.AsmUtils;\n-import com.taobao.arthas.bytekit.utils.MatchUtils;\n-import com.taobao.arthas.bytekit.utils.VerifyUtils;\n+import com.alibaba.deps.org.objectweb.asm.tree.ClassNode;\n+import com.alibaba.deps.org.objectweb.asm.tree.MethodNode;\n+\n+import com.alibaba.bytekit.asm.MethodProcessor;\n+import com.alibaba.bytekit.asm.interceptor.InterceptorProcessor;\n+import com.alibaba.bytekit.asm.interceptor.parser.DefaultInterceptorClassParser;\n+import com.alibaba.bytekit.utils.AgentUtils;\n+import com.alibaba.bytekit.utils.AsmUtils;\n+import com.alibaba.bytekit.utils.MatchUtils;\n+import com.alibaba.bytekit.utils.VerifyUtils;\n \n /**\n  * ",
    "output": "upgrade bytekit to 0.0.2. #1545"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -11,7 +11,6 @@\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n \n-import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.tomcat.util.codec.binary.Base64;\n import org.slf4j.Logger;\n@@ -26,7 +25,9 @@\n import io.netty.channel.Channel;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.QueryStringDecoder;\n+import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n@@ -65,7 +66,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n             if (MethodConstants.CONNECT_ARTHAS.equals(method)) { // form browser\n                 connectArthas(ctx, parameters);\n             } else if (MethodConstants.AGENT_REGISTER.equals(method)) { // form arthas agent, register\n-                agentRegister(ctx, uri);\n+                agentRegister(ctx, handshake, uri);\n             }\n             if (MethodConstants.OPEN_TUNNEL.equals(method)) { // from arthas agent open tunnel\n                 String clientConnectionId = parameters.getFirst(\"clientConnectionId\");\n@@ -204,7 +205,7 @@ public void operationComplete(Future<? super Void> future) throws Exception {\n         }\n     }\n \n-    private void agentRegister(ChannelHandlerContext ctx, String requestUri) throws URISyntaxException {\n+    private void agentRegister(ChannelHandlerContext ctx, HandshakeComplete handshake, String requestUri) throws URISyntaxException {\n         // generate a random agent id\n         String id = RandomStringUtils.random(20, true, true).toUpperCase();\n \n@@ -228,12 +229,31 @@ private void agentRegister(ChannelHandlerContext ctx, String requestUri) throws\n                 .encode().toUri();\n \n         AgentInfo info = new AgentInfo();\n-        SocketAddress remoteAddress = ctx.channel().remoteAddress();\n-        if (remoteAddress instanceof InetSocketAddress) {\n-            InetSocketAddress inetSocketAddress = (InetSocketAddress) remoteAddress;\n-            info.setHost(inetSocketAddress.getHostString());\n-            info.setPort(inetSocketAddress.getPort());\n+\n+        // 前面可能有nginx代理\n+        HttpHeaders headers = handshake.requestHeaders();\n+        String host = headers.get(\"X-Real-IP\");\n+        String portStr = headers.get(\"X-Real-Port\");\n+\n+        if (host == null) {\n+            SocketAddress remoteAddress = ctx.channel().remoteAddress();\n+            if (remoteAddress instanceof InetSocketAddress) {\n+                InetSocketAddress inetSocketAddress = (InetSocketAddress) remoteAddress;\n+                info.setHost(inetSocketAddress.getHostString());\n+                info.setPort(inetSocketAddress.getPort());\n+            }\n+        } else {\n+            info.setHost(host);\n+            try {\n+                if (portStr != null) {\n+                    int port = Integer.parseInt(portStr);\n+                    info.setPort(port);\n+                }\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n         }\n+\n         info.setChannelHandlerContext(ctx);\n         if (arthasVersion != null) {\n             info.setArthasVersion(arthasVersion);",
    "output": "tunnel server support X-Real-IP/X-Real-Port. #1558"
  },
  {
    "input": "diff --git a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n--- a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n+++ b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n@@ -45,7 +45,10 @@ public ArthasAgent(String arthasHome) {\n \n     public ArthasAgent(Map<String, String> configMap, String arthasHome, boolean slientInit,\n             Instrumentation instrumentation) {\n-        this.configMap = configMap;\n+        if (configMap != null) {\n+            this.configMap = configMap;\n+        }\n+\n         this.arthasHome = arthasHome;\n         this.slientInit = slientInit;\n         this.instrumentation = instrumentation;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -189,7 +189,10 @@ private void initArthasEnvironment(Map<String, String> argsMap) throws IOExcepti\n          * https://github.com/alibaba/arthas/issues/986\n          * </pre>\n          */\n-        Map<String, String> copyMap = new HashMap<String, String>(argsMap);\n+        Map<String, String> copyMap = new HashMap<String, String>();\n+        if (argsMap != null) {\n+            copyMap.putAll(argsMap);\n+        }\n         // 添加 arthas.home\n         if (!copyMap.containsKey(ARTHAS_HOME_PROPERTY)) {\n             copyMap.put(ARTHAS_HOME_PROPERTY, arthasHome());",
    "output": "fix ArthasAgent NullPointerException. #1546"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -59,10 +59,14 @@ public static String arch() {\n \t\treturn arch;\n \t}\n \n-\tpublic static boolean isArm() {\n+\tpublic static boolean isArm32() {\n \t\treturn \"arm_32\".equals(arch);\n \t}\n \n+\tpublic static boolean isArm64() {\n+\t\treturn \"aarch_64\".equals(arch);\n+\t}\n+\n \tprivate static String normalizeArch(String value) {\n \t\tvalue = normalize(value);\n \t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -125,8 +125,10 @@ public class ProfilerCommand extends AnnotatedCommand {\n         }\n         if (OSUtils.isLinux()) {\n             profierSoPath = \"async-profiler/libasyncProfiler-linux-x64.so\";\n-            if (OSUtils.isArm()) {\n+            if (OSUtils.isArm32()) {\n                 profierSoPath = \"async-profiler/libasyncProfiler-linux-arm.so\";\n+            } else if (OSUtils.isArm64()) {\n+                profierSoPath = \"async-profiler/libasyncProfiler-linux-aarch64.so\";\n             }\n         }\n ",
    "output": "Support profiler command on arm64. (#1259)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -306,8 +306,8 @@ public void run() {\n                 DashboardModel dashboardModel = new DashboardModel();\n \n                 //thread sample\n-                Map<String, ThreadVO> threads = ThreadUtil.getThreads();\n-                dashboardModel.setThreads(threadSampler.sample(threads.values()));\n+                List<ThreadVO> threads = ThreadUtil.getThreads();\n+                dashboardModel.setThreads(threadSampler.sample(threads));\n \n                 //memory\n                 addMemoryInfo(dashboardModel);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -129,15 +129,15 @@ public void process(CommandProcess process) {\n     }\n \n     private ExitStatus processAllThreads(CommandProcess process) {\n-        Map<String, ThreadVO> threads = ThreadUtil.getThreads();\n+        List<ThreadVO> threads = ThreadUtil.getThreads();\n \n         // 统计各种线程状态\n         Map<State, Integer> stateCountMap = new LinkedHashMap<State, Integer>();\n         for (State s : State.values()) {\n             stateCountMap.put(s, 0);\n         }\n \n-        for (ThreadVO thread : threads.values()) {\n+        for (ThreadVO thread : threads) {\n             State threadState = thread.getState();\n             Integer count = stateCountMap.get(threadState);\n             stateCountMap.put(threadState, count + 1);\n@@ -149,7 +149,7 @@ private ExitStatus processAllThreads(CommandProcess process) {\n             this.state = this.state.toUpperCase();\n             if (states.contains(this.state)) {\n                 includeInternalThreads = false;\n-                for (ThreadVO thread : threads.values()) {\n+                for (ThreadVO thread : threads) {\n                     if (thread.getState() != null && state.equals(thread.getState().name())) {\n                         resultThreads.add(thread);\n                     }\n@@ -158,7 +158,7 @@ private ExitStatus processAllThreads(CommandProcess process) {\n                 return ExitStatus.failure(1, \"Illegal argument, state should be one of \" + states);\n             }\n         } else {\n-            resultThreads = threads.values();\n+            resultThreads = threads;\n         }\n \n         //thread stats\n@@ -183,9 +183,9 @@ private ExitStatus processBlockingThread(CommandProcess process) {\n \n     private ExitStatus processTopBusyThreads(CommandProcess process) {\n         ThreadSampler threadSampler = new ThreadSampler();\n-        threadSampler.sample(ThreadUtil.getThreads().values());\n+        threadSampler.sample(ThreadUtil.getThreads());\n         threadSampler.pause(sampleInterval);\n-        List<ThreadVO> threadStats = threadSampler.sample(ThreadUtil.getThreads().values());\n+        List<ThreadVO> threadStats = threadSampler.sample(ThreadUtil.getThreads());\n \n         int limit = Math.min(threadStats.size(), topNBusy);\n         List<ThreadVO> topNThreads = threadStats.subList(0, limit);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ViewRenderUtil.java\n@@ -123,6 +123,7 @@ public static String drawThreadInfo(List<ThreadVO> threads, int width, int heigh\n                 )\n         );\n \n+        int count = 0;\n         for (ThreadVO thread : threads) {\n             Color color = colorMapping.get(thread.getState());\n             String time = formatTimeMills(thread.getTime());\n@@ -151,6 +152,9 @@ public static String drawThreadInfo(List<ThreadVO> threads, int width, int heigh\n                     new LabelElement(thread.isInterrupted()),\n                     daemonLabel\n             );\n+            if (++count >= height) {\n+                break;\n+            }\n         }\n         return RenderUtil.render(table, width, height);\n     }\n@@ -159,13 +163,33 @@ private static String formatTimeMills(long timeMills) {\n         long seconds = timeMills / 1000;\n         long mills = timeMills % 1000;\n         long min = seconds / 60;\n-        //return min + \":\" + (seconds % 60);\n-        return String.format(\"%d:%d.%03d\", min, seconds, mills);\n+        seconds = seconds % 60;\n+\n+        //return String.format(\"%d:%d.%03d\", min, seconds, mills);\n+        String str;\n+        if (mills >= 100) {\n+            str = min + \":\" + seconds + \".\" + mills;\n+        } else if (mills >= 10) {\n+            str = min + \":\" + seconds + \".0\" + mills;\n+        } else {\n+            str = min + \":\" + seconds + \".00\" + mills;\n+        }\n+        return str;\n     }\n \n     private static String formatTimeMillsToSeconds(long timeMills) {\n         long seconds = timeMills / 1000;\n         long mills = timeMills % 1000;\n-        return String.format(\"%d.%03d\", seconds, mills);\n+\n+        //return String.format(\"%d.%03d\", seconds, mills);\n+        String str;\n+        if (mills >= 100) {\n+            str = seconds + \".\" + mills;\n+        } else if (mills >= 10) {\n+            str = seconds + \".0\" + mills;\n+        } else {\n+            str = seconds + \".00\" + mills;\n+        }\n+        return str;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -449,10 +449,14 @@ public static int countOccurrencesOf(String str, String sub) {\n \n     public static String replace(String inString, String oldPattern, String newPattern) {\n         if(hasLength(inString) && hasLength(oldPattern) && newPattern != null) {\n-            StringBuilder sb = new StringBuilder();\n             int pos = 0;\n             int index = inString.indexOf(oldPattern);\n+            if (index < 0) {\n+                //no need to replace\n+                return inString;\n+            }\n \n+            StringBuilder sb = new StringBuilder();\n             for(int patLen = oldPattern.length(); index >= 0; index = inString.indexOf(oldPattern, pos)) {\n                 sb.append(inString.substring(pos, index));\n                 sb.append(newPattern);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -36,29 +36,22 @@ public static ThreadGroup getRoot() {\n     }\n \n     /**\n-     * 获取所有线程Map，以线程Name-ID为key\n-     * \n-     * @return\n+     * 获取所有线程\n      */\n-    public static Map<String, ThreadVO> getThreads() {\n+    public static List<ThreadVO> getThreads() {\n         ThreadGroup root = getRoot();\n         Thread[] threads = new Thread[root.activeCount()];\n         while (root.enumerate(threads, true) == threads.length) {\n             threads = new Thread[threads.length * 2];\n         }\n-        SortedMap<String, ThreadVO> map = new TreeMap<String, ThreadVO>(new Comparator<String>() {\n-            @Override\n-            public int compare(String o1, String o2) {\n-                return o1.compareTo(o2);\n-            }\n-        });\n+        List<ThreadVO> list = new ArrayList<ThreadVO>(threads.length);\n         for (Thread thread : threads) {\n             if (thread != null) {\n                 ThreadVO threadVO = createThreadVO(thread);\n-                map.put(thread.getName() + \"-\" + thread.getId(), threadVO);\n+                list.add(threadVO);\n             }\n         }\n-        return map;\n+        return list;\n     }\n \n     private static ThreadVO createThreadVO(Thread thread) {",
    "output": "Reduce small objects generated by dashboard commands (#1533) #1542"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.4.3"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -54,6 +54,7 @@\n import com.taobao.arthas.core.advisor.SpyInterceptors.SpyTraceInterceptor3;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.util.ArthasCheckUtils;\n+import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n@@ -331,7 +332,7 @@ private static boolean isUnsafeClass(Class<?> clazz) {\n      */\n     private static boolean isUnsupportedClass(Class<?> clazz) {\n         return clazz.isArray() || (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod) || clazz.isEnum()\n-                || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class);\n+                || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class) || ClassUtils.isLambdaClass(clazz);\n     }\n \n     /**",
    "output": "avoid retransform lambda class. #1512"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n@@ -21,13 +21,16 @@ public static void retransformClasses(Instrumentation inst, ClassFileTransformer\n             inst.addTransformer(transformer, true);\n \n             for (Class<?> clazz : classes) {\n+                if (ClassUtils.isLambdaClass(clazz)) {\n+                    logger.info(\n+                            \"ignore lambda class: {}, because jdk do not support retransform lambda class: https://github.com/alibaba/arthas/issues/1512.\",\n+                            clazz.getName());\n+                    continue;\n+                }\n                 try {\n                     inst.retransformClasses(clazz);\n                 } catch (Throwable e) {\n                     String errorMsg = \"retransformClasses class error, name: \" + clazz.getName();\n-                    if (ClassUtils.isLambdaClass(clazz) && e instanceof VerifyError) {\n-                        errorMsg += \", Please ignore lambda class VerifyError: https://github.com/alibaba/arthas/issues/675\";\n-                    }\n                     logger.error(errorMsg, e);\n                 }\n             }",
    "output": "avoid retransform lambda class. #1512"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -314,7 +314,7 @@ public void actionPerformed(ActionEvent e) {\n             }\n \n             if (cmds.isEmpty()) {\n-                IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,\n+                IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),\n                         consoleReader.getOutput());\n             } else {\n                 try {",
    "output": "fix arthas-client windows cmd shortcuts support. #616"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n@@ -17,7 +17,7 @@ public class InliningAdapter extends LocalVariablesSorter {\n     private LocalVariablesSorter lvs;\n \n     public InliningAdapter(LocalVariablesSorter mv, int access, String desc, Label end) {\n-        super(Opcodes.ASM8, access, desc, mv);\n+        super(Opcodes.ASM9, access, desc, mv);\n         this.end = end;\n         this.lvs = mv;\n \n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n@@ -37,7 +37,7 @@ public CatchBlock(Label start, Label end, Label handler, String type) {\n \n \tpublic MethodCallInliner(int access, String name, String desc, MethodVisitor mv,\n \t\t\tMethodNode toBeInlined) {\n-\t\tsuper(Opcodes.ASM8, mv, access, name, desc);\n+\t\tsuper(Opcodes.ASM9, mv, access, name, desc);\n \t\tthis.toBeInlined = toBeInlined;\n \t}\n \n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -50,7 +50,7 @@ public static ClassNode loadClass(Class<?> clazz) throws IOException {\n \n \tpublic static ClassNode toClassNode(byte[] classBytes) {\n \t\tClassReader reader = new ClassReader(classBytes);\n-\t\tClassNode result = new ClassNode(Opcodes.ASM8);\n+\t\tClassNode result = new ClassNode(Opcodes.ASM9);\n \t\treader.accept(result, ClassReader.SKIP_FRAMES);\n \t\treturn result;\n \t}\n@@ -158,7 +158,7 @@ public static String toASMCode(MethodNode methodNode) {\n \t}\n \n \tpublic static MethodNode newMethodNode(MethodNode source) {\n-\t\treturn new MethodNode(Opcodes.ASM8, source.access, source.name, source.desc, source.signature,\n+\t\treturn new MethodNode(Opcodes.ASM9, source.access, source.name, source.desc, source.signature,\n \t\t\t\tsource.exceptions.toArray(new String[source.exceptions.size()]));\n \t}\n \n@@ -171,8 +171,8 @@ public static MethodNode removeJSRInstructions(MethodNode subjectMethod) {\n \t}\n \n     public static ClassNode removeJSRInstructions(ClassNode classNode) {\n-        ClassNode result = new ClassNode(Opcodes.ASM8);\n-        classNode.accept(new ClassVisitor(Opcodes.ASM8, result) {\n+        ClassNode result = new ClassNode(Opcodes.ASM9);\n+        classNode.accept(new ClassVisitor(Opcodes.ASM9, result) {\n             @Override\n             public MethodVisitor visitMethod(int access, String name, String desc, String signature,\n                     String[] exceptions) {\n@@ -185,7 +185,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si\n \n \tpublic static MethodNode removeLineNumbers(MethodNode methodNode) {\n \t\tMethodNode result = newMethodNode(methodNode);\n-\t\tmethodNode.accept(new MethodVisitor(Opcodes.ASM8, result) {\n+\t\tmethodNode.accept(new MethodVisitor(Opcodes.ASM9, result) {\n \t\t\tpublic void visitLineNumber(int line, Label start) {\n \t\t\t}\n \t\t});\n@@ -379,8 +379,8 @@ public static MethodNode copy(MethodNode source) {\n     }\n \n     public static ClassNode copy(ClassNode source) {\n-        ClassNode result = new ClassNode(Opcodes.ASM8);\n-        source.accept(new ClassVisitor(Opcodes.ASM8, result) {\n+        ClassNode result = new ClassNode(Opcodes.ASM9);\n+        source.accept(new ClassVisitor(Opcodes.ASM9, result) {\n             @Override\n             public MethodVisitor visitMethod(int access, String name, String desc, String signature,\n                             String[] exceptions) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -124,7 +124,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n             }\n \n             //keep origin class reader for bytecode optimizations, avoiding JVM metaspace OOM.\n-            ClassNode classNode = new ClassNode(Opcodes.ASM8);\n+            ClassNode classNode = new ClassNode(Opcodes.ASM9);\n             ClassReader classReader = AsmUtils.toClassNode(classfileBuffer, classNode);\n             // remove JSR https://github.com/alibaba/arthas/issues/1304\n             classNode = AsmUtils.removeJSRInstructions(classNode);",
    "output": "Upgrade asm to 9.0 #1527"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -561,6 +561,26 @@ private static String cleanClassName(String className) {\n \t    return new String(charArray);\n \t}\n \n+    /**\n+     * Java ClassFile versions (the minor version is stored in the 16 most\n+     * significant bits, and the major version in the 16 least significant bits).\n+     * @see com.alibaba.arthas.deps.org.objectweb.asm.Opcodes#V_PREVIEW\n+     * @param version\n+     * @return\n+     */\n+    public static int getMajorVersion(int version) {\n+        return 0x0000FFFF & version;\n+    }\n \n+    /**\n+     * 替换掉完整 version里的 major version\n+     * \n+     * @param version\n+     * @param majorVersion\n+     * @return\n+     */\n+    public static int setMajorVersion(int version, int majorVersion) {\n+        return (version & 0xFFFF0000) | majorVersion;\n+    }\n \n }\n\ndiff --git a/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmUtilsTest.java b/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmUtilsTest.java\n--- a/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmUtilsTest.java\n+++ b/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmUtilsTest.java\n@@ -141,4 +141,36 @@ public void testRenameClass() throws Exception {\n     \tAssertions.assertThat(object.getClass().getName()).isEqualTo(\"com.test.Test.XXX\");\n     }\n \n+    @Test\n+    public void testGetMajorVersion() throws Exception {\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_1)).isEqualTo(45);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_2)).isEqualTo(46);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_3)).isEqualTo(47);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_4)).isEqualTo(48);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_5)).isEqualTo(49);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_6)).isEqualTo(50);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_7)).isEqualTo(51);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V1_8)).isEqualTo(52);\n+\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V9)).isEqualTo(53);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V10)).isEqualTo(54);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V11)).isEqualTo(55);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V12)).isEqualTo(56);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V13)).isEqualTo(57);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V14)).isEqualTo(58);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V15)).isEqualTo(59);\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V16)).isEqualTo(60);\n+\n+        Assertions.assertThat(AsmUtils.getMajorVersion(Opcodes.V16 | Opcodes.V_PREVIEW)).isEqualTo(60);\n+    }\n+\n+    @Test\n+    public void testSetMajorVersion() throws Exception {\n+        int version = Opcodes.V16 | Opcodes.V_PREVIEW;\n+        int newVersion = AsmUtils.setMajorVersion(version, 58);\n+\n+        AsmUtils.getMajorVersion(newVersion);\n+\n+        Assertions.assertThat(AsmUtils.getMajorVersion(newVersion)).isEqualTo(58);\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -228,9 +228,9 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);\n             }\n \n-            // https://github.com/alibaba/arthas/issues/1223\n-            if (classNode.version < Opcodes.V1_5) {\n-                classNode.version = Opcodes.V1_5;\n+            // https://github.com/alibaba/arthas/issues/1223 , V1_5 的major version是49\n+            if (AsmUtils.getMajorVersion(classNode.version) < 49) {\n+                classNode.version = AsmUtils.setMajorVersion(classNode.version, 49);\n             }\n \n             byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader, classReader);",
    "output": "Fix the problem that when the --enable-preview feature is enabled, set the wrong java version in watch/trace. #1526 #1223"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.4.2"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n@@ -71,7 +71,7 @@ public static void agentmain(String args, Instrumentation inst) {\n     /**\n      * 让下次再次启动时有机会重新加载\n      */\n-    public synchronized static void resetArthasClassLoader() {\n+    public static void resetArthasClassLoader() {\n         arthasClassLoader = null;\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -352,6 +352,9 @@ private void bind(Configure configure) throws Throwable {\n             }\n \n             shellServer.listen(new BindHandler(isBindRef));\n+            if (!isBind()) {\n+                throw new IllegalStateException(\"Arthas failed to bind telnet or http port.\");\n+            }\n \n             //http api session manager\n             sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n@@ -376,14 +379,8 @@ private void bind(Configure configure) throws Throwable {\n \n             logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n         } catch (Throwable e) {\n-            logger().error(\"Error during bind to port \" + configure.getTelnetPort(), e);\n-            if (shellServer != null) {\n-                shellServer.close();\n-            }\n-            if (sessionManager != null){\n-                sessionManager.close();\n-            }\n-            shutdownWorkGroup();\n+            logger().error(\"Error during start as-server\", e);\n+            destroy();\n             throw e;\n         }\n     }\n@@ -412,49 +409,45 @@ public EnhancerAffect reset() throws UnmodifiableClassException {\n      * call reset() before destroy()\n      */\n     public void destroy() {\n-        timer.cancel();\n+        if (shellServer != null) {\n+            shellServer.close();\n+            shellServer = null;\n+        }\n+        if (sessionManager != null) {\n+            sessionManager.close();\n+            sessionManager = null;\n+        }\n+        if (timer != null) {\n+            timer.cancel();\n+        }\n         if (this.tunnelClient != null) {\n             try {\n                 tunnelClient.stop();\n             } catch (Throwable e) {\n                 logger().error(\"stop tunnel client error\", e);\n             }\n         }\n-        transformerManager.destroy();\n-        UserStatUtil.destroy();\n+        if (executorService != null) {\n+            executorService.shutdownNow();\n+        }\n+        if (transformerManager != null) {\n+            transformerManager.destroy();\n+        }\n         // clear the reference in Spy class.\n         cleanUpSpyReference();\n-        try {\n-            Runtime.getRuntime().removeShutdownHook(shutdown);\n-        } catch (Throwable t) {\n-            // ignore\n+        shutdownWorkGroup();\n+        UserStatUtil.destroy();\n+        if (shutdown != null) {\n+            try {\n+                Runtime.getRuntime().removeShutdownHook(shutdown);\n+            } catch (Throwable t) {\n+                // ignore\n+            }\n         }\n         logger().info(\"as-server destroy completed.\");\n         if (loggerContext != null) {\n             loggerContext.stop();\n         }\n-\n-        if (sessionManager != null){\n-            try {\n-                sessionManager.close();\n-            } catch (Throwable e) {\n-                logger().error(\"close session manager failure\", e);\n-            }\n-        }\n-\n-        if (shellServer != null) {\n-            try {\n-                shellServer.close();\n-            } catch (Throwable e) {\n-                logger().error(\"close shell server failure\", e);\n-            }\n-        }\n-\n-        shellServer = null;\n-        sessionManager = null;\n-\n-        executorService.shutdownNow();\n-        shutdownWorkGroup();\n     }\n \n     /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n@@ -104,7 +104,7 @@ private synchronized void setEvictTimer() {\n             scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n                 @Override\n                 public Thread newThread(Runnable r) {\n-                    final Thread t = new Thread(r, \"arthas-shell-server\");\n+                    final Thread t = new Thread(r, \"arthas-session-manager\");\n                     t.setDaemon(true);\n                     return t;\n                 }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n@@ -37,7 +37,7 @@ public void test() throws Throwable {\n \n         TestHelper.appendSpyJar(instrumentation);\n \n-        ArthasBootstrap.getInstance(instrumentation, \"\");\n+        ArthasBootstrap.getInstance(instrumentation, \"ip=127.0.0.1\");\n \n         AdviceListener listener = Mockito.mock(AdviceListener.class);\n ",
    "output": "Improve arthas stop logic (#1513, #1514) (#1517)"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -55,9 +55,24 @@ public static ClassNode toClassNode(byte[] classBytes) {\n \t\treturn result;\n \t}\n \n-    public static byte[] toBytes(ClassNode classNode, ClassLoader classLoader) {\n-        ClassWriter writer = new ClassLoaderAwareClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS,\n-                classLoader);\n+\tpublic static ClassReader toClassNode(byte[] classBytes, ClassNode classNode) {\n+\t\tClassReader reader = new ClassReader(classBytes);\n+\t\treader.accept(classNode, ClassReader.SKIP_FRAMES);\n+\t\treturn reader;\n+\t}\n+\n+\t/**\n+\t * Generate class bytes from class node.\n+\t * <br>\n+\t * <B>NOTE: must pass origin classReader for bytecode optimizations, avoiding JVM metaspace OOM.</B>\n+\t * @param classNode\n+\t * @param classLoader\n+\t * @param classReader  origin class reader\n+\t * @return\n+\t */\n+    public static byte[] toBytes(ClassNode classNode, ClassLoader classLoader, ClassReader classReader) {\n+\t\tint flags = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n+\t\tClassWriter writer = new ClassLoaderAwareClassWriter(classReader, flags, classLoader);\n         classNode.accept(writer);\n         return writer.toByteArray();\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -21,6 +21,7 @@\n import java.util.Set;\n import java.util.WeakHashMap;\n \n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n import com.alibaba.arthas.deps.org.objectweb.asm.Opcodes;\n import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.AbstractInsnNode;\n@@ -122,7 +123,9 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 return null;\n             }\n \n-            ClassNode classNode = AsmUtils.toClassNode(classfileBuffer);\n+            //keep origin class reader for bytecode optimizations, avoiding JVM metaspace OOM.\n+            ClassNode classNode = new ClassNode(Opcodes.ASM8);\n+            ClassReader classReader = AsmUtils.toClassNode(classfileBuffer, classNode);\n             // remove JSR https://github.com/alibaba/arthas/issues/1304\n             classNode = AsmUtils.removeJSRInstructions(classNode);\n \n@@ -230,7 +233,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 classNode.version = Opcodes.V1_5;\n             }\n \n-            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader);\n+            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader, classReader);\n \n             // 增强成功，记录类\n             classBytesCache.put(classBeingRedefined, new Object());",
    "output": "Fix metaspace OOM problem when trace large method (#1511)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -9,7 +9,12 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n+import java.io.IOException;\n import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n import java.util.Collections;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -25,6 +30,9 @@ public class ArthasBanner {\n     private static final String VERSION_LOCATION = \"/com/taobao/arthas/core/res/version\";\n     private static final String WIKI = \"https://arthas.aliyun.com/doc\";\n     private static final String TUTORIALS = \"https://arthas.aliyun.com/doc/arthas-tutorials.html\";\n+    private static final String ARTHAS_LATEST_VERSIONS_URL = \"https://arthas.aliyun.com/api/latest_version\";\n+\n+    private static final int CONNECTION_TIMEOUT = 1000;\n \n     private static String LOGO = \"Welcome to Arthas\";\n     private static String VERSION = \"unknown\";\n@@ -101,7 +109,7 @@ public static String welcome() {\n     }\n \n     public static String welcome(Map<String, String> infos) {\n-        logger.info(\"arthas version: \" + version());\n+        logger.info(\"Current arthas version: {}, recommend latest version: {}\", version(), latestVersion());\n         TableElement table = new TableElement().rightCellPadding(1)\n                         .row(\"wiki\", wiki())\n                         .row(\"tutorials\", tutorials())\n@@ -114,4 +122,41 @@ public static String welcome(Map<String, String> infos) {\n \n         return logo() + \"\\n\" + RenderUtil.render(table);\n     }\n+\n+    static String latestVersion() {\n+        try {\n+            URLConnection urlConnection = openURLConnection(ARTHAS_LATEST_VERSIONS_URL);\n+            InputStream inputStream = urlConnection.getInputStream();\n+            return com.taobao.arthas.common.IOUtils.toString(inputStream).trim();\n+        } catch (Throwable e) {\n+            // ignore\n+        }\n+        return \"\";\n+    }\n+\n+    /**\n+     * support redirect\n+     *\n+     * @param url\n+     * @return\n+     * @throws MalformedURLException\n+     * @throws IOException\n+     */\n+    private static URLConnection openURLConnection(String url) throws MalformedURLException, IOException {\n+        URLConnection connection = new URL(url).openConnection();\n+        if (connection instanceof HttpURLConnection) {\n+            connection.setConnectTimeout(CONNECTION_TIMEOUT);\n+            // normally, 3xx is redirect\n+            int status = ((HttpURLConnection) connection).getResponseCode();\n+            if (status != HttpURLConnection.HTTP_OK) {\n+                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM\n+                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    String newUrl = connection.getHeaderField(\"Location\");\n+                    logger.debug(\"Try to open url: {}, redirect to: {}\", url, newUrl);\n+                    return openURLConnection(newUrl);\n+                }\n+            }\n+        }\n+        return connection;\n+    }\n }",
    "output": "Print recommend latest version #1509"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.4.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.4.1"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -50,6 +50,7 @@\n         + \"  profiler stop --format svg   # output file format, support svg,html,jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n         + \"  profiler stop --threads \\n\"\n+        + \"  profiler start --include 'java/*' --include 'demo/*' --exclude '*Unsafe.park*'\\n\"\n         + \"  profiler status\\n\"\n         + \"  profiler resume              # Start or resume profiling without resetting collected data.\\n\"\n         + \"  profiler getSamples          # Get the number of samples collected during the profiling session\\n\"\n@@ -104,6 +105,16 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private Long duration;\n \n+    /**\n+     * include stack traces containing PATTERN\n+     */\n+    private List<String> includes;\n+\n+    /**\n+     * exclude stack traces containing PATTERN\n+     */\n+    private List<String> excludes;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -206,6 +217,18 @@ public void setDuration(long duration) {\n         this.duration = duration;\n     }\n \n+    @Option(longName = \"include\")\n+    @Description(\"include stack traces containing PATTERN, for example: 'java/*'\")\n+    public void setInclude(List<String> includes) {\n+        this.includes = includes;\n+    }\n+\n+    @Option(longName = \"exclude\")\n+    @Description(\"exclude stack traces containing PATTERN, for example: '*Unsafe.park*'\")\n+    public void setExclude(List<String> excludes) {\n+        this.excludes = excludes;\n+    }\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n@@ -271,6 +294,16 @@ private String executeArgs(ProfilerAction action) {\n         if (this.alluser) {\n             sb.append(\"alluser\").append(',');\n         }\n+        if (this.includes != null) {\n+            for (String include : includes) {\n+                sb.append(\"include=\").append(include).append(',');\n+            }\n+        }\n+        if (this.excludes != null) {\n+            for (String exclude : excludes) {\n+                sb.append(\"exclude=\").append(exclude).append(',');\n+            }\n+        }\n \n         return sb.toString();\n     }",
    "output": "profiler command support include/exclude options. #1479"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -56,7 +56,7 @@\n         + \"  profiler dumpFlat            # Dump flat profile, i.e. the histogram of the hottest methods\\n\"\n         + \"  profiler dumpCollapsed       # Dump profile in 'collapsed stacktraces' format\\n\"\n         + \"  profiler dumpTraces          # Dump collected stack traces\\n\"\n-        + \"  profiler execute 'start'                       # Execute an agent-compatible profiling command\\n\"\n+        + \"  profiler execute 'start,framebuf=5000000'      # Execute an agent-compatible profiling command\\n\"\n         + \"  profiler execute 'stop,file=/tmp/result.svg'   # Execute an agent-compatible profiling command\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"profiler\")\n //@formatter:on\n@@ -79,6 +79,11 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private Long interval;\n \n+    /**\n+     * size of the buffer for stack frames (default: 1'000'000)\n+     */\n+    private Long framebuf;\n+\n     /**\n      * profile different threads separately\n      */\n@@ -150,6 +155,13 @@ public void setInterval(long interval) {\n         this.interval = interval;\n     }\n \n+    @Option(shortName = \"b\", longName = \"framebuf\")\n+    @Description(\"size of the buffer for stack frames (default: 1'000'000)\")\n+    @DefaultValue(\"1000000\")\n+    public void setFramebuf(long framebuf) {\n+        this.framebuf = framebuf;\n+    }\n+\n     @Option(shortName = \"f\", longName = \"file\")\n     @Description(\"dump output to <filename>\")\n     public void setFile(String file) {\n@@ -247,6 +259,9 @@ private String executeArgs(ProfilerAction action) {\n         if (this.interval != null) {\n             sb.append(\"interval=\").append(this.interval).append(',');\n         }\n+        if (this.framebuf != null) {\n+            sb.append(\"framebuf=\").append(this.framebuf).append(',');\n+        }\n         if (this.threads) {\n             sb.append(\"threads\").append(',');\n         }",
    "output": "profiler command support framebuf option. #1476"
  },
  {
    "input": "diff --git a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n--- a/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n+++ b/arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java\n@@ -32,7 +32,15 @@ public class ArthasAgent {\n     private Instrumentation instrumentation;\n \n     public ArthasAgent() {\n+        this(null, null, false, null);\n+    }\n+\n+    public ArthasAgent(Map<String, String> configMap) {\n+        this(configMap, null, false, null);\n+    }\n \n+    public ArthasAgent(String arthasHome) {\n+        this(null, arthasHome, false, null);\n     }\n \n     public ArthasAgent(Map<String, String> configMap, String arthasHome, boolean slientInit,\n@@ -47,6 +55,22 @@ public static void attach() {\n         new ArthasAgent().init();\n     }\n \n+    /**\n+     * @see https://arthas.aliyun.com/doc/arthas-properties.html\n+     * @param configMap\n+     */\n+    public static void attach(Map<String, String> configMap) {\n+        new ArthasAgent(configMap).init();\n+    }\n+\n+    /**\n+     * use the specified arthas\n+     * @param arthasHome arthas directory\n+     */\n+    public static void attach(String arthasHome) {\n+        new ArthasAgent().init();\n+    }\n+\n     public void init() throws IllegalStateException {\n         // 尝试判断arthas是否已在运行，如果是的话，直接就退出\n         try {",
    "output": "improve ArthasAgent API. #1471"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.9\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.4.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.4.0"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n@@ -546,14 +546,15 @@ public CommandProcess foregroundHandler(Handler<Void> handler) {\n         }\n \n         @Override\n-        public void register(AdviceListener listener, ClassFileTransformer transformer) {\n-            if (listener instanceof ProcessAware) {\n-                ProcessAware processAware = (ProcessAware) listener;\n+        public void register(AdviceListener adviceListener, ClassFileTransformer transformer) {\n+            if (adviceListener instanceof ProcessAware) {\n+                ProcessAware processAware = (ProcessAware) adviceListener;\n                 // listener 有可能是其它 command 创建的\n                 if(processAware.getProcess() == null) {\n                     processAware.setProcess(this.process);\n                 }\n             }\n+            this.listener = adviceListener;\n             AdviceWeaver.reg(listener);\n             \n             this.transformer = transformer;",
    "output": "fix do not unReg listener error. #1468"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n@@ -3,17 +3,31 @@\n import java.net.InetAddress;\n import java.net.ServerSocket;\n import java.util.List;\n+import java.util.Random;\n \n import javax.net.ServerSocketFactory;\n \n-\n /**\n  *\n  * @author hengyunabc 2018-11-07\n  *\n  */\n public class SocketUtils {\n \n+    /**\n+     * The default minimum value for port ranges used when finding an available\n+     * socket port.\n+     */\n+    public static final int PORT_RANGE_MIN = 1024;\n+\n+    /**\n+     * The default maximum value for port ranges used when finding an available\n+     * socket port.\n+     */\n+    public static final int PORT_RANGE_MAX = 65535;\n+\n+    private static final Random random = new Random(System.currentTimeMillis());\n+\n     private SocketUtils() {\n     }\n \n@@ -51,12 +65,87 @@ public static long findTcpListenProcess(int port) {\n     public static boolean isTcpPortAvailable(int port) {\n         try {\n             ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1,\n-                            InetAddress.getByName(\"localhost\"));\n+                    InetAddress.getByName(\"localhost\"));\n             serverSocket.close();\n             return true;\n         } catch (Exception ex) {\n             return false;\n         }\n     }\n \n+    /**\n+     * Find an available TCP port randomly selected from the range\n+     * [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].\n+     * \n+     * @return an available TCP port number\n+     * @throws IllegalStateException if no available port could be found\n+     */\n+    public static int findAvailableTcpPort() {\n+        return findAvailableTcpPort(PORT_RANGE_MIN);\n+    }\n+\n+    /**\n+     * Find an available TCP port randomly selected from the range [{@code minPort},\n+     * {@value #PORT_RANGE_MAX}].\n+     * \n+     * @param minPort the minimum port number\n+     * @return an available TCP port number\n+     * @throws IllegalStateException if no available port could be found\n+     */\n+    public static int findAvailableTcpPort(int minPort) {\n+        return findAvailableTcpPort(minPort, PORT_RANGE_MAX);\n+    }\n+\n+    /**\n+     * Find an available TCP port randomly selected from the range [{@code minPort},\n+     * {@code maxPort}].\n+     * \n+     * @param minPort the minimum port number\n+     * @param maxPort the maximum port number\n+     * @return an available TCP port number\n+     * @throws IllegalStateException if no available port could be found\n+     */\n+    public static int findAvailableTcpPort(int minPort, int maxPort) {\n+        return findAvailablePort(minPort, maxPort);\n+    }\n+\n+    /**\n+     * Find an available port for this {@code SocketType}, randomly selected from\n+     * the range [{@code minPort}, {@code maxPort}].\n+     * \n+     * @param minPort the minimum port number\n+     * @param maxPort the maximum port number\n+     * @return an available port number for this socket type\n+     * @throws IllegalStateException if no available port could be found\n+     */\n+    private static int findAvailablePort(int minPort, int maxPort) {\n+\n+        int portRange = maxPort - minPort;\n+        int candidatePort;\n+        int searchCounter = 0;\n+        do {\n+            if (searchCounter > portRange) {\n+                throw new IllegalStateException(\n+                        String.format(\"Could not find an available tcp port in the range [%d, %d] after %d attempts\",\n+                                minPort, maxPort, searchCounter));\n+            }\n+            candidatePort = findRandomPort(minPort, maxPort);\n+            searchCounter++;\n+        } while (!isTcpPortAvailable(candidatePort));\n+\n+        return candidatePort;\n+    }\n+\n+    /**\n+     * Find a pseudo-random port number within the range [{@code minPort},\n+     * {@code maxPort}].\n+     * \n+     * @param minPort the minimum port number\n+     * @param maxPort the maximum port number\n+     * @return a random port number within the specified range\n+     */\n+    private static int findRandomPort(int minPort, int maxPort) {\n+        int portRange = maxPort - minPort;\n+        return minPort + random.nextInt(portRange + 1);\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -27,6 +27,7 @@\n import com.alibaba.arthas.tunnel.client.TunnelClient;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.PidUtils;\n+import com.taobao.arthas.common.SocketUtils;\n import com.taobao.arthas.core.advisor.TransformerManager;\n import com.taobao.arthas.core.command.BuiltinCommandPack;\n import com.taobao.arthas.core.command.view.ResultViewResolver;\n@@ -274,6 +275,18 @@ private void bind(Configure configure) throws Throwable {\n             throw new IllegalStateException(\"already bind\");\n         }\n \n+        // init random port\n+        if (configure.getTelnetPort() == 0) {\n+            int newTelnetPort = SocketUtils.findAvailableTcpPort();\n+            configure.setTelnetPort(newTelnetPort);\n+            logger().info(\"generate random telnet port: \" + newTelnetPort);\n+        }\n+        if (configure.getHttpPort() == 0) {\n+            int newHttpPort = SocketUtils.findAvailableTcpPort();\n+            configure.setHttpPort(newHttpPort);\n+            logger().info(\"generate random http port: \" + newHttpPort);\n+        }\n+\n         String agentId = null;\n         try {\n             if (configure.getTunnelServer() != null && configure.getHttpPort() > 0) {",
    "output": "support listen random port. #524"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -1,9 +1,14 @@\n package com.taobao.arthas.core.command.monitor200;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.AdviceListenerAdapter;\n+import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.command.model.MonitorModel;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n \n import java.util.ArrayList;\n@@ -65,9 +70,16 @@\n class MonitorAdviceListener extends AdviceListenerAdapter {\n     // 输出定时任务\n     private Timer timer;\n+    private static final Logger logger = LoggerFactory.getLogger(MonitorAdviceListener.class);\n     // 监控数据\n     private ConcurrentHashMap<Key, AtomicReference<MonitorData>> monitorData = new ConcurrentHashMap<Key, AtomicReference<MonitorData>>();\n     private final ThreadLocalWatch threadLocalWatch = new ThreadLocalWatch();\n+    private final ThreadLocal<Boolean> conditionResult = new ThreadLocal<Boolean>() {\n+        @Override\n+        protected Boolean initialValue() {\n+            return true;\n+        }\n+    };\n     private MonitorCommand command;\n     private CommandProcess process;\n \n@@ -98,22 +110,47 @@ public synchronized void destroy() {\n     public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args)\n             throws Throwable {\n         threadLocalWatch.start();\n+        if (!StringUtils.isEmpty(this.command.getConditionExpress()) && command.isBefore()) {\n+            Advice advice = Advice.newForBefore(loader, clazz, method, target, args);\n+            long cost = threadLocalWatch.cost();\n+            this.conditionResult.set(isConditionMet(this.command.getConditionExpress(), advice, cost));\n+            //重新计算执行方法的耗时(排除执行condition-express耗时)\n+            threadLocalWatch.start();\n+        }\n     }\n \n     @Override\n     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target,\n                                Object[] args, Object returnObject) throws Throwable {\n-        finishing(clazz, method, false);\n+        finishing(clazz, method, false, Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject));\n     }\n \n     @Override\n     public void afterThrowing(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target,\n                               Object[] args, Throwable throwable) {\n-        finishing(clazz, method, true);\n+        finishing(clazz, method, true, Advice.newForAfterThrowing(loader, clazz, method, target, args, throwable));\n     }\n \n-    private void finishing(Class<?> clazz, ArthasMethod method, boolean isThrowing) {\n+    private void finishing(Class<?> clazz, ArthasMethod method, boolean isThrowing, Advice advice) {\n         double cost = threadLocalWatch.costInMillis();\n+\n+        if (command.isBefore()) {\n+            if (!this.conditionResult.get()) {\n+                return;\n+            }\n+        } else {\n+            try {\n+                //不满足condition-express的不纳入统计\n+                if (!isConditionMet(this.command.getConditionExpress(), advice, cost)) {\n+                    return;\n+                }\n+            } catch (ExpressException e) {\n+                //condition-express执行错误的不纳入统计\n+                logger.warn(\"monitor execute condition-express failed.\", e);\n+                return;\n+            }\n+        }\n+\n         final Key key = new Key(clazz.getName(), method.getName());\n \n         while (true) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n@@ -23,15 +23,19 @@\n @Description(\"\\nExamples:\\n\" +\n         \"  monitor org.apache.commons.lang.StringUtils isBlank\\n\" +\n         \"  monitor org.apache.commons.lang.StringUtils isBlank -c 5\\n\" +\n+        \"  monitor org.apache.commons.lang.StringUtils isBlank params[0]!=null\\n\" +\n+        \"  monitor -b org.apache.commons.lang.StringUtils isBlank params[0]!=null\\n\" +\n         \"  monitor -E org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"monitor\")\n public class MonitorCommand extends EnhancerCommand {\n \n     private String classPattern;\n     private String methodPattern;\n+    private String conditionExpress;\n     private int cycle = 60;\n     private boolean isRegEx = false;\n     private int numberOfLimit = 100;\n+    private boolean isBefore = false;\n \n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Path and classname of Pattern Matching\")\n@@ -45,6 +49,12 @@ public void setMethodPattern(String methodPattern) {\n         this.methodPattern = methodPattern;\n     }\n \n+    @Argument(argName = \"condition-express\", index = 2, required = false)\n+    @Description(Constants.CONDITION_EXPRESS)\n+    public void setConditionExpress(String conditionExpress) {\n+        this.conditionExpress = conditionExpress;\n+    }\n+\n     @Option(shortName = \"c\", longName = \"cycle\")\n     @Description(\"The monitor interval (in seconds), 60 seconds by default\")\n     public void setCycle(int cycle) {\n@@ -63,6 +73,12 @@ public void setNumberOfLimit(int numberOfLimit) {\n         this.numberOfLimit = numberOfLimit;\n     }\n \n+    @Option(shortName = \"b\", longName = \"before\", flag = true)\n+    @Description(\"Evaluate the condition-express before method invoke\")\n+    public void setBefore(boolean before) {\n+        isBefore = before;\n+    }\n+\n     public String getClassPattern() {\n         return classPattern;\n     }\n@@ -71,6 +87,10 @@ public String getMethodPattern() {\n         return methodPattern;\n     }\n \n+    public String getConditionExpress() {\n+        return conditionExpress;\n+    }\n+\n     public int getCycle() {\n         return cycle;\n     }\n@@ -83,6 +103,10 @@ public int getNumberOfLimit() {\n         return numberOfLimit;\n     }\n \n+    public boolean isBefore() {\n+        return isBefore;\n+    }\n+\n     @Override\n     protected Matcher getClassNameMatcher() {\n         if (classNameMatcher == null) {",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -1,9 +1,14 @@\n package com.taobao.arthas.core.command.monitor200;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.AdviceListenerAdapter;\n+import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.command.model.MonitorModel;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n \n import java.util.ArrayList;\n@@ -65,9 +70,16 @@\n class MonitorAdviceListener extends AdviceListenerAdapter {\n     // 输出定时任务\n     private Timer timer;\n+    private static final Logger logger = LoggerFactory.getLogger(MonitorAdviceListener.class);\n     // 监控数据\n     private ConcurrentHashMap<Key, AtomicReference<MonitorData>> monitorData = new ConcurrentHashMap<Key, AtomicReference<MonitorData>>();\n     private final ThreadLocalWatch threadLocalWatch = new ThreadLocalWatch();\n+    private final ThreadLocal<Boolean> conditionResult = new ThreadLocal<Boolean>() {\n+        @Override\n+        protected Boolean initialValue() {\n+            return true;\n+        }\n+    };\n     private MonitorCommand command;\n     private CommandProcess process;\n \n@@ -98,22 +110,47 @@ public synchronized void destroy() {\n     public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args)\n             throws Throwable {\n         threadLocalWatch.start();\n+        if (!StringUtils.isEmpty(this.command.getConditionExpress()) && command.isBefore()) {\n+            Advice advice = Advice.newForBefore(loader, clazz, method, target, args);\n+            long cost = threadLocalWatch.cost();\n+            this.conditionResult.set(isConditionMet(this.command.getConditionExpress(), advice, cost));\n+            //重新计算执行方法的耗时(排除执行condition-express耗时)\n+            threadLocalWatch.start();\n+        }\n     }\n \n     @Override\n     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target,\n                                Object[] args, Object returnObject) throws Throwable {\n-        finishing(clazz, method, false);\n+        finishing(clazz, method, false, Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject));\n     }\n \n     @Override\n     public void afterThrowing(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target,\n                               Object[] args, Throwable throwable) {\n-        finishing(clazz, method, true);\n+        finishing(clazz, method, true, Advice.newForAfterThrowing(loader, clazz, method, target, args, throwable));\n     }\n \n-    private void finishing(Class<?> clazz, ArthasMethod method, boolean isThrowing) {\n+    private void finishing(Class<?> clazz, ArthasMethod method, boolean isThrowing, Advice advice) {\n         double cost = threadLocalWatch.costInMillis();\n+\n+        if (command.isBefore()) {\n+            if (!this.conditionResult.get()) {\n+                return;\n+            }\n+        } else {\n+            try {\n+                //不满足condition-express的不纳入统计\n+                if (!isConditionMet(this.command.getConditionExpress(), advice, cost)) {\n+                    return;\n+                }\n+            } catch (ExpressException e) {\n+                //condition-express执行错误的不纳入统计\n+                logger.warn(\"monitor execute condition-express failed.\", e);\n+                return;\n+            }\n+        }\n+\n         final Key key = new Key(clazz.getName(), method.getName());\n \n         while (true) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java\n@@ -23,15 +23,19 @@\n @Description(\"\\nExamples:\\n\" +\n         \"  monitor org.apache.commons.lang.StringUtils isBlank\\n\" +\n         \"  monitor org.apache.commons.lang.StringUtils isBlank -c 5\\n\" +\n+        \"  monitor org.apache.commons.lang.StringUtils isBlank params[0]!=null\\n\" +\n+        \"  monitor -b org.apache.commons.lang.StringUtils isBlank params[0]!=null\\n\" +\n         \"  monitor -E org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"monitor\")\n public class MonitorCommand extends EnhancerCommand {\n \n     private String classPattern;\n     private String methodPattern;\n+    private String conditionExpress;\n     private int cycle = 60;\n     private boolean isRegEx = false;\n     private int numberOfLimit = 100;\n+    private boolean isBefore = false;\n \n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Path and classname of Pattern Matching\")\n@@ -45,6 +49,12 @@ public void setMethodPattern(String methodPattern) {\n         this.methodPattern = methodPattern;\n     }\n \n+    @Argument(argName = \"condition-express\", index = 2, required = false)\n+    @Description(Constants.CONDITION_EXPRESS)\n+    public void setConditionExpress(String conditionExpress) {\n+        this.conditionExpress = conditionExpress;\n+    }\n+\n     @Option(shortName = \"c\", longName = \"cycle\")\n     @Description(\"The monitor interval (in seconds), 60 seconds by default\")\n     public void setCycle(int cycle) {\n@@ -63,6 +73,12 @@ public void setNumberOfLimit(int numberOfLimit) {\n         this.numberOfLimit = numberOfLimit;\n     }\n \n+    @Option(shortName = \"b\", longName = \"before\", flag = true)\n+    @Description(\"Evaluate the condition-express before method invoke\")\n+    public void setBefore(boolean before) {\n+        isBefore = before;\n+    }\n+\n     public String getClassPattern() {\n         return classPattern;\n     }\n@@ -71,6 +87,10 @@ public String getMethodPattern() {\n         return methodPattern;\n     }\n \n+    public String getConditionExpress() {\n+        return conditionExpress;\n+    }\n+\n     public int getCycle() {\n         return cycle;\n     }\n@@ -83,6 +103,10 @@ public int getNumberOfLimit() {\n         return numberOfLimit;\n     }\n \n+    public boolean isBefore() {\n+        return isBefore;\n+    }\n+\n     @Override\n     protected Matcher getClassNameMatcher() {\n         if (classNameMatcher == null) {",
    "output": "Add condition-express param to monitor command (#1420)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -20,8 +20,10 @@\n import com.taobao.arthas.common.ReflectUtils;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.model.LoggerModel;\n+import com.taobao.arthas.core.command.model.ClassLoaderVO;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.ClassLoaderUtils;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.middleware.cli.annotations.Description;\n@@ -72,6 +74,7 @@ public class LoggerCommand extends AnnotatedCommand {\n     private String name;\n \n     private String hashCode;\n+    private String classLoaderClass;\n \n     private String level;\n \n@@ -92,6 +95,12 @@ public void setHashCode(String hashCode) {\n         this.hashCode = hashCode;\n     }\n \n+    @Option(longName = \"classLoaderClass\")\n+    @Description(\"The class name of the special class's classLoader.\")\n+    public void setClassLoaderClass(String classLoaderClass) {\n+        this.classLoaderClass = classLoaderClass;\n+    }\n+\n     @Option(shortName = \"l\", longName = \"level\")\n     @Description(\"set logger level\")\n     public void setLevel(String level) {\n@@ -158,6 +167,25 @@ public void loggers(CommandProcess process, String name) {\n             String className = clazz.getName();\n             ClassLoader classLoader = clazz.getClassLoader();\n \n+        if (hashCode == null && classLoaderClass != null) {\n+            Instrumentation inst = process.session().getInstrumentation();\n+            List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst, classLoaderClass);\n+            if (matchedClassLoaders.size() == 1) {\n+                hashCode = Integer.toHexString(matchedClassLoaders.get(0).hashCode());\n+            } else if (matchedClassLoaders.size() > 1) {\n+                Collection<ClassLoaderVO> classLoaderVOList = ClassUtils.createClassLoaderVOList(matchedClassLoaders);\n+                LoggerModel loggerModel = new LoggerModel()\n+                        .setClassLoaderClass(classLoaderClass)\n+                        .setMatchedClassLoaders(classLoaderVOList);\n+                process.appendResult(loggerModel);\n+                process.end(-1, \"Found more than one classloader by class name, please specify classloader with '-c <classloader hash>'\");\n+                return;\n+            } else {\n+                process.end(-1, \"Can not find classloader by class name: \" + classLoaderClass + \".\");\n+                return;\n+            }\n+        }\n+\n             // if special classloader\n             if (this.hashCode != null && !this.hashCode.equals(StringUtils.classLoaderHash(clazz))) {\n                 continue;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/LoggerModel.java\n@@ -1,5 +1,7 @@\n package com.taobao.arthas.core.command.model;\n \n+import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -10,6 +12,8 @@\n public class LoggerModel extends ResultModel {\n \n     private Map<String, Map<String, Object>> loggerInfoMap;\n+    private Collection<ClassLoaderVO> matchedClassLoaders;\n+    private String classLoaderClass;\n \n     public LoggerModel() {\n     }\n@@ -26,6 +30,24 @@ public void setLoggerInfoMap(Map<String, Map<String, Object>> loggerInfoMap) {\n         this.loggerInfoMap = loggerInfoMap;\n     }\n \n+    public String getClassLoaderClass() {\n+        return classLoaderClass;\n+    }\n+\n+    public LoggerModel setClassLoaderClass(String classLoaderClass) {\n+        this.classLoaderClass = classLoaderClass;\n+        return this;\n+    }\n+\n+    public Collection<ClassLoaderVO> getMatchedClassLoaders() {\n+        return matchedClassLoaders;\n+    }\n+\n+    public LoggerModel setMatchedClassLoaders(Collection<ClassLoaderVO> matchedClassLoaders) {\n+        this.matchedClassLoaders = matchedClassLoaders;\n+        return this;\n+    }\n+\n     @Override\n     public String getType() {\n         return \"logger\";\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java b/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/LoggerView.java\n@@ -22,6 +22,12 @@ public class LoggerView extends ResultView<LoggerModel> {\n \n     @Override\n     public void draw(CommandProcess process, LoggerModel result) {\n+        if (result.getMatchedClassLoaders() != null) {\n+            process.write(\"Matched classloaders: \\n\");\n+            ClassLoaderView.drawClassLoaders(process, result.getMatchedClassLoaders(), false);\n+            process.write(\"\\n\");\n+            return;\n+        }\n         process.write(renderLoggerInfo(result.getLoggerInfoMap(), process.width()));\n     }\n ",
    "output": "Add --classLoaderClass for logger (#1445)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n@@ -30,7 +30,7 @@\n  * @author hengyunabc 2020-02-16\n  */\n @Name(\"perfcounter\")\n-@Summary(\"Display the perf counter infornation.\")\n+@Summary(\"Display the perf counter information.\")\n @Description(\"\\nExamples:\\n\" +\n         \"  perfcounter\\n\" +\n         \"  perfcounter -d\\n\" +",
    "output": "fix typo (#1458)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -119,13 +119,27 @@ public void setLoadClass(String className) {\n     public void process(CommandProcess process) {\n         // ctrl-C support\n         process.interruptHandler(new ClassLoaderInterruptHandler(this));\n+        ClassLoader targetClassLoader = null;\n+        boolean classLoaderSpecified = false;\n \n         Instrumentation inst = process.session().getInstrumentation();\n         \n-        if (!all && hashCode == null && classLoaderClass != null) {\n+        if (hashCode != null || classLoaderClass != null) {\n+            classLoaderSpecified = true;\n+        }\n+        \n+        if (hashCode != null) {\n+            Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n+            for (ClassLoader cl : allClassLoader) {\n+                if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n+                    targetClassLoader = cl;\n+                    break;\n+                }\n+            }\n+        } else if (targetClassLoader == null && classLoaderClass != null) {\n             List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst, classLoaderClass);\n             if (matchedClassLoaders.size() == 1) {\n-                hashCode = \"\" + Integer.toHexString(matchedClassLoaders.get(0).hashCode());\n+                targetClassLoader = matchedClassLoaders.get(0);\n             } else if (matchedClassLoaders.size() > 1) {\n                 Collection<ClassLoaderVO> classLoaderVOList = ClassUtils.createClassLoaderVOList(matchedClassLoaders);\n                 ClassLoaderModel classloaderModel = new ClassLoaderModel()\n@@ -142,12 +156,12 @@ public void process(CommandProcess process) {\n \n         if (all) {\n             processAllClasses(process, inst);\n-        } else if (hashCode != null && resource != null) {\n-            processResources(process, inst);\n-        } else if (hashCode != null && this.loadClass != null) {\n-            processLoadClass(process, inst);\n-        } else if (hashCode != null) {\n-            processClassLoader(process, inst);\n+        } else if (classLoaderSpecified && resource != null) {\n+            processResources(process, inst, targetClassLoader);\n+        } else if (classLoaderSpecified && this.loadClass != null) {\n+            processLoadClass(process, inst, targetClassLoader);\n+        } else if (classLoaderSpecified) {\n+            processClassLoader(process, inst, targetClassLoader);\n         } else if (listClassLoader || isTree){\n             processClassLoaders(process, inst);\n         } else {\n@@ -208,49 +222,42 @@ private void processClassLoaders(CommandProcess process, Instrumentation inst) {\n         process.end();\n     }\n \n-    // 根据 hashCode 来打印URLClassLoader的urls\n-    private void processClassLoader(CommandProcess process, Instrumentation inst) {\n+    // 根据 ClassLoader 来打印URLClassLoader的urls\n+    private void processClassLoader(CommandProcess process, Instrumentation inst, ClassLoader targetClassLoader) {\n         RowAffect affect = new RowAffect();\n-        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n-        for (ClassLoader cl : allClassLoader) {\n-            if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n-                if (cl instanceof URLClassLoader) {\n-                    List<String> classLoaderUrls = getClassLoaderUrls(cl);\n-                    affect.rCnt(classLoaderUrls.size());\n-                    if (classLoaderUrls.isEmpty()) {\n-                        process.appendResult(new MessageModel(\"urls is empty.\"));\n-                    } else {\n-                        process.appendResult(new ClassLoaderModel().setUrls(classLoaderUrls));\n-                        affect.rCnt(classLoaderUrls.size());\n-                    }\n+        if (targetClassLoader != null) {\n+            if (targetClassLoader instanceof URLClassLoader) {\n+                List<String> classLoaderUrls = getClassLoaderUrls(targetClassLoader);\n+                affect.rCnt(classLoaderUrls.size());\n+                if (classLoaderUrls.isEmpty()) {\n+                    process.appendResult(new MessageModel(\"urls is empty.\"));\n                 } else {\n-                    process.appendResult(new MessageModel(\"not a URLClassLoader.\"));\n+                    process.appendResult(new ClassLoaderModel().setUrls(classLoaderUrls));\n+                    affect.rCnt(classLoaderUrls.size());\n                 }\n-                break;\n+            } else {\n+                process.appendResult(new MessageModel(\"not a URLClassLoader.\"));\n             }\n         }\n         process.appendResult(new RowAffectModel(affect));\n         process.end();\n     }\n \n     // 使用ClassLoader去getResources\n-    private void processResources(CommandProcess process, Instrumentation inst) {\n+    private void processResources(CommandProcess process, Instrumentation inst, ClassLoader targetClassLoader) {\n         RowAffect affect = new RowAffect();\n         int rowCount = 0;\n-        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n         List<String> resources = new ArrayList<String>();\n-        for (ClassLoader cl : allClassLoader) {\n-            if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n-                try {\n-                    Enumeration<URL> urls = cl.getResources(resource);\n-                    while (urls.hasMoreElements()) {\n-                        URL url = urls.nextElement();\n-                        resources.add(url.toString());\n-                        rowCount++;\n-                    }\n-                } catch (Throwable e) {\n-                    logger.warn(\"get resource failed, resource: {}\", resource, e);\n+        if (targetClassLoader != null) {\n+            try {\n+                Enumeration<URL> urls = targetClassLoader.getResources(resource);\n+                while (urls.hasMoreElements()) {\n+                    URL url = urls.nextElement();\n+                    resources.add(url.toString());\n+                    rowCount++;\n                 }\n+            } catch (Throwable e) {\n+                logger.warn(\"get resource failed, resource: {}\", resource, e);\n             }\n         }\n         affect.rCnt(rowCount);\n@@ -261,21 +268,18 @@ private void processResources(CommandProcess process, Instrumentation inst) {\n     }\n \n     // Use ClassLoader to loadClass\n-    private void processLoadClass(CommandProcess process, Instrumentation inst) {\n-        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n-        for (ClassLoader cl : allClassLoader) {\n-            if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n-                try {\n-                    Class<?> clazz = cl.loadClass(this.loadClass);\n-                    process.appendResult(new MessageModel(\"load class success.\"));\n-                    ClassDetailVO classInfo = ClassUtils.createClassInfo(clazz, false);\n-                    process.appendResult(new ClassLoaderModel().setLoadClass(classInfo));\n-\n-                } catch (Throwable e) {\n-                    logger.warn(\"load class error, class: {}\", this.loadClass, e);\n-                    process.end(-1, \"load class error, class: \"+this.loadClass+\", error: \"+e.toString());\n-                    return;\n-                }\n+    private void processLoadClass(CommandProcess process, Instrumentation inst, ClassLoader targetClassLoader) {\n+        if (targetClassLoader != null) {\n+            try {\n+                Class<?> clazz = targetClassLoader.loadClass(this.loadClass);\n+                process.appendResult(new MessageModel(\"load class success.\"));\n+                ClassDetailVO classInfo = ClassUtils.createClassInfo(clazz, false);\n+                process.appendResult(new ClassLoaderModel().setLoadClass(classInfo));\n+\n+            } catch (Throwable e) {\n+                logger.warn(\"load class error, class: {}\", this.loadClass, e);\n+                process.end(-1, \"load class error, class: \"+this.loadClass+\", error: \"+e.toString());\n+                return;\n             }\n         }\n         process.end();",
    "output": "Optimize --classLoaderClass #1428 (#1431)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -13,6 +13,7 @@\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.util.ClassUtils;\n+import com.taobao.arthas.core.util.ClassLoaderUtils;\n import com.taobao.arthas.core.util.ResultUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Description;\n@@ -56,6 +57,7 @@ public class ClassLoaderCommand extends AnnotatedCommand {\n     private Logger logger = LoggerFactory.getLogger(ClassLoaderCommand.class);\n     private boolean isTree = false;\n     private String hashCode;\n+    private String classLoaderClass;\n     private boolean all = false;\n     private String resource;\n     private boolean includeReflectionClassLoader = true;\n@@ -70,6 +72,12 @@ public class ClassLoaderCommand extends AnnotatedCommand {\n     public void setTree(boolean tree) {\n         isTree = tree;\n     }\n+    \n+    @Option(longName = \"classLoaderClass\")\n+    @Description(\"The class name of the special class's classLoader.\")\n+    public void setClassLoaderClass(String classLoaderClass) {\n+        this.classLoaderClass = classLoaderClass;\n+    }\n \n     @Option(shortName = \"c\", longName = \"classloader\")\n     @Description(\"The hash code of the special ClassLoader\")\n@@ -113,6 +121,25 @@ public void process(CommandProcess process) {\n         process.interruptHandler(new ClassLoaderInterruptHandler(this));\n \n         Instrumentation inst = process.session().getInstrumentation();\n+        \n+        if (!all && hashCode == null && classLoaderClass != null) {\n+            List<ClassLoader> matchedClassLoaders = ClassLoaderUtils.getClassLoaderByClassName(inst, classLoaderClass);\n+            if (matchedClassLoaders.size() == 1) {\n+                hashCode = \"\" + Integer.toHexString(matchedClassLoaders.get(0).hashCode());\n+            } else if (matchedClassLoaders.size() > 1) {\n+                Collection<ClassLoaderVO> classLoaderVOList = ClassUtils.createClassLoaderVOList(matchedClassLoaders);\n+                ClassLoaderModel classloaderModel = new ClassLoaderModel()\n+                        .setClassLoaderClass(classLoaderClass)\n+                        .setMatchedClassLoaders(classLoaderVOList);\n+                process.appendResult(classloaderModel);\n+                process.end(-1, \"Found more than one classloader by class name, please specify classloader with '-c <classloader hash>'\");\n+                return;\n+            } else {\n+                process.end(-1, \"Can not find classloader by class name: \" + classLoaderClass + \".\");\n+                return;\n+            }\n+        }\n+\n         if (all) {\n             processAllClasses(process, inst);\n         } else if (hashCode != null && resource != null) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/ClassLoaderModel.java\n@@ -4,6 +4,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Collection;\n \n /**\n  * @author gongdewei 2020/4/21\n@@ -20,6 +21,9 @@ public class ClassLoaderModel extends ResultModel {\n \n     private Map<String, ClassLoaderStat> classLoaderStats;\n \n+    private Collection<ClassLoaderVO> matchedClassLoaders;\n+    private String classLoaderClass;\n+\n     public ClassLoaderModel() {\n     }\n \n@@ -90,4 +94,22 @@ public ClassLoaderModel setClassLoaderStats(Map<String, ClassLoaderStat> classLo\n         this.classLoaderStats = classLoaderStats;\n         return this;\n     }\n+\n+    public String getClassLoaderClass() {\n+        return classLoaderClass;\n+    }\n+\n+    public ClassLoaderModel setClassLoaderClass(String classLoaderClass) {\n+        this.classLoaderClass = classLoaderClass;\n+        return this;\n+    }\n+\n+    public Collection<ClassLoaderVO> getMatchedClassLoaders() {\n+        return matchedClassLoaders;\n+    }\n+\n+    public ClassLoaderModel setMatchedClassLoaders(Collection<ClassLoaderVO> matchedClassLoaders) {\n+        this.matchedClassLoaders = matchedClassLoaders;\n+        return this;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java b/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ClassLoaderView.java\n@@ -22,6 +22,12 @@ public class ClassLoaderView extends ResultView<ClassLoaderModel> {\n \n     @Override\n     public void draw(CommandProcess process, ClassLoaderModel result) {\n+        if (result.getMatchedClassLoaders() != null) {\n+            process.write(\"Matched classloaders: \\n\");\n+            drawClassLoaders(process, result.getMatchedClassLoaders(), false);\n+            process.write(\"\\n\");\n+            return;\n+        }\n         if (result.getClassSet() != null) {\n             drawAllClasses(process, result.getClassSet());\n         }",
    "output": "Classloader support matching classloader by class name. (#1428)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.8\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.9\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.9"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -337,7 +337,7 @@ public void actionPerformed(ActionEvent e) {\n             //reset terminal setting, fix https://github.com/alibaba/arthas/issues/1412\n             try {\n                 terminal.restore();\n-            } catch (Exception e) {\n+            } catch (Throwable e) {\n                 System.out.println(\"Restore terminal settings failure: \"+e.getMessage());\n                 e.printStackTrace();\n             }",
    "output": "polish pr #1412 (#1415)"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -335,9 +335,11 @@ public void actionPerformed(ActionEvent e) {\n             return STATUS_OK;\n         } finally {\n             //reset terminal setting, fix https://github.com/alibaba/arthas/issues/1412\n-            terminal.enableInterruptCharacter();\n-            if (terminal instanceof UnixTerminal) {\n-                ((UnixTerminal) terminal).enableLitteralNextCharacter();\n+            try {\n+                terminal.restore();\n+            } catch (Exception e) {\n+                System.out.println(\"Restore terminal settings failure: \"+e.getMessage());\n+                e.printStackTrace();\n             }\n         }\n ",
    "output": "restore terminal flags, fix hanging issue #1412 (#1415)"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -240,101 +240,107 @@ public static int process(String[] args, ActionListener eotEventCallback) throws\n         consoleReader.setHandleUserInterrupt(true);\n         Terminal terminal = consoleReader.getTerminal();\n \n-        if (terminal instanceof TerminalSupport) {\n-            ((TerminalSupport) terminal).disableInterruptCharacter();\n-        }\n-\n         // support catch ctrl+c event\n         terminal.disableInterruptCharacter();\n         if (terminal instanceof UnixTerminal) {\n             ((UnixTerminal) terminal).disableLitteralNextCharacter();\n         }\n \n-        int width = TerminalSupport.DEFAULT_WIDTH;\n-        int height = TerminalSupport.DEFAULT_HEIGHT;\n+        try {\n+            int width = TerminalSupport.DEFAULT_WIDTH;\n+            int height = TerminalSupport.DEFAULT_HEIGHT;\n \n-        if (!cmds.isEmpty()) {\n-            // batch mode\n-            if (telnetConsole.getWidth() != null) {\n-                width = telnetConsole.getWidth();\n-            }\n-            if (telnetConsole.getheight() != null) {\n-                height = telnetConsole.getheight();\n-            }\n-        } else {\n-            // normal telnet client, get current terminal size\n-            if (telnetConsole.getWidth() != null) {\n-                width = telnetConsole.getWidth();\n-            } else {\n-                width = terminal.getWidth();\n-                // hack for windows dos\n-                if (OSUtils.isWindows()) {\n-                    width--;\n+            if (!cmds.isEmpty()) {\n+                // batch mode\n+                if (telnetConsole.getWidth() != null) {\n+                    width = telnetConsole.getWidth();\n+                }\n+                if (telnetConsole.getheight() != null) {\n+                    height = telnetConsole.getheight();\n                 }\n-            }\n-            if (telnetConsole.getheight() != null) {\n-                height = telnetConsole.getheight();\n             } else {\n-                height = terminal.getHeight();\n+                // normal telnet client, get current terminal size\n+                if (telnetConsole.getWidth() != null) {\n+                    width = telnetConsole.getWidth();\n+                } else {\n+                    width = terminal.getWidth();\n+                    // hack for windows dos\n+                    if (OSUtils.isWindows()) {\n+                        width--;\n+                    }\n+                }\n+                if (telnetConsole.getheight() != null) {\n+                    height = telnetConsole.getheight();\n+                } else {\n+                    height = terminal.getHeight();\n+                }\n             }\n-        }\n-\n-        final TelnetClient telnet = new TelnetClient();\n-        telnet.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);\n \n-        // send init terminal size\n-        TelnetOptionHandler sizeOpt = new WindowSizeOptionHandler(width, height, true, true, false, false);\n-        try {\n-            telnet.addOptionHandler(sizeOpt);\n-        } catch (InvalidTelnetOptionException e) {\n-            // ignore\n-        }\n+            final TelnetClient telnet = new TelnetClient();\n+            telnet.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);\n \n-        // ctrl + c event callback\n-        consoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                try {\n-                    consoleReader.getCursorBuffer().clear(); // clear current line\n-                    telnet.getOutputStream().write(CTRL_C);\n-                    telnet.getOutputStream().flush();\n-                } catch (Exception e1) {\n-                    e1.printStackTrace();\n-                }\n+            // send init terminal size\n+            TelnetOptionHandler sizeOpt = new WindowSizeOptionHandler(width, height, true, true, false, false);\n+            try {\n+                telnet.addOptionHandler(sizeOpt);\n+            } catch (InvalidTelnetOptionException e) {\n+                // ignore\n             }\n \n-        });\n+            // ctrl + c event callback\n+            consoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {\n+                @Override\n+                public void actionPerformed(ActionEvent e) {\n+                    try {\n+                        consoleReader.getCursorBuffer().clear(); // clear current line\n+                        telnet.getOutputStream().write(CTRL_C);\n+                        telnet.getOutputStream().flush();\n+                    } catch (Exception e1) {\n+                        e1.printStackTrace();\n+                    }\n+                }\n \n-        // ctrl + d event call back\n-        consoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), eotEventCallback);\n+            });\n \n-        try {\n-            telnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n-        } catch (IOException e) {\n-            System.out.println(\"Connect to telnet server error: \" + telnetConsole.getTargetIp() + \" \"\n-                    + telnetConsole.getPort());\n-            throw e;\n-        }\n+            // ctrl + d event call back\n+            consoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), eotEventCallback);\n \n-        if (cmds.isEmpty()) {\n-            IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,\n-                    consoleReader.getOutput());\n-        } else {\n             try {\n-                return batchModeRun(telnet, cmds, telnetConsole.getExecutionTimeout());\n-            } catch (Throwable e) {\n-                System.out.println(\"Execute commands error: \" + e.getMessage());\n-                e.printStackTrace();\n-                return STATUS_EXEC_ERROR;\n-            } finally {\n+                telnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n+            } catch (IOException e) {\n+                System.out.println(\"Connect to telnet server error: \" + telnetConsole.getTargetIp() + \" \"\n+                        + telnetConsole.getPort());\n+                throw e;\n+            }\n+\n+            if (cmds.isEmpty()) {\n+                IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,\n+                        consoleReader.getOutput());\n+            } else {\n                 try {\n-                    telnet.disconnect();\n-                } catch (IOException e) {\n-                    //ignore ex\n+                    return batchModeRun(telnet, cmds, telnetConsole.getExecutionTimeout());\n+                } catch (Throwable e) {\n+                    System.out.println(\"Execute commands error: \" + e.getMessage());\n+                    e.printStackTrace();\n+                    return STATUS_EXEC_ERROR;\n+                } finally {\n+                    try {\n+                        telnet.disconnect();\n+                    } catch (IOException e) {\n+                        //ignore ex\n+                    }\n                 }\n             }\n+\n+            return STATUS_OK;\n+        } finally {\n+            //reset terminal setting, fix https://github.com/alibaba/arthas/issues/1412\n+            terminal.enableInterruptCharacter();\n+            if (terminal instanceof UnixTerminal) {\n+                ((UnixTerminal) terminal).enableLitteralNextCharacter();\n+            }\n         }\n-        return STATUS_OK;\n+\n     }\n \n     private static int batchModeRun(TelnetClient telnet, List<String> commands, final int executionTimeout)",
    "output": "fix terminal hanging #1412 (#1413)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.7\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.8\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.8"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -290,6 +290,10 @@ public void process(final CommandProcess process) {\n                 String result = execute(asyncProfiler, this.actionArg);\n                 appendExecuteResult(process, result);\n             } else if (ProfilerAction.start.equals(profilerAction)) {\n+                //jfr录制，必须在start的时候就指定文件路径\n+                if (this.file == null && \"jfr\".equals(format)) {\n+                    this.file = outputFile();\n+                }\n                 String executeArgs = executeArgs(ProfilerAction.start);\n                 String result = execute(asyncProfiler, executeArgs);\n                 ProfilerModel profilerModel = createProfilerModel(result);",
    "output": "fix profiler command --format jfr support(#1406)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -57,7 +57,7 @@\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"\n-                + \"  https://alibaba.github.io/arthas\\n\")\n+                + \"  https://arthas.aliyun.com/doc\\n\")\n public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -57,7 +57,7 @@ private Configure parse(String[] args) {\n         if (commandLine.getOptionValue(\"target-ip\") == null) {\n             throw new IllegalStateException(\"as.sh is too old to support web console, \" +\n                     \"please run the following command to upgrade to latest version:\" +\n-                    \"\\ncurl -sLk https://alibaba.github.io/arthas/install.sh | sh\");\n+                    \"\\ncurl -sLk https://arthas.aliyun.com/install.sh | sh\");\n         }\n         configure.setIp((String) commandLine.getOptionValue(\"target-ip\"));\n         configure.setTelnetPort((Integer) commandLine.getOptionValue(\"telnet-port\"));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/Constants.java b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n@@ -25,7 +25,7 @@ public interface Constants {\n \n     String WIKI = \"\\nWIKI:\\n\";\n \n-    String WIKI_HOME = \"  https://alibaba.github.io/arthas/\";\n+    String WIKI_HOME = \"  https://arthas.aliyun.com/doc/\";\n \n     String EXPRESS_EXAMPLES =   \"Examples:\\n\" +\n                                 \"  params\\n\" +\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -23,7 +23,7 @@ public class ArthasBanner {\n     private static final String LOGO_LOCATION = \"/com/taobao/arthas/core/res/logo.txt\";\n     private static final String CREDIT_LOCATION = \"/com/taobao/arthas/core/res/thanks.txt\";\n     private static final String VERSION_LOCATION = \"/com/taobao/arthas/core/res/version\";\n-    private static final String WIKI = \"https://alibaba.github.io/arthas\";\n+    private static final String WIKI = \"https://arthas.aliyun.com/doc\";\n     private static final String TUTORIALS = \"https://arthas.aliyun.com/doc/arthas-tutorials.html\";\n \n     private static String LOGO = \"Welcome to Arthas\";",
    "output": "update link to arthas.aliyun.com. #1411"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -24,7 +24,7 @@ public class ArthasBanner {\n     private static final String CREDIT_LOCATION = \"/com/taobao/arthas/core/res/thanks.txt\";\n     private static final String VERSION_LOCATION = \"/com/taobao/arthas/core/res/version\";\n     private static final String WIKI = \"https://alibaba.github.io/arthas\";\n-    private static final String TUTORIALS = \"https://alibaba.github.io/arthas/arthas-tutorials\";\n+    private static final String TUTORIALS = \"https://arthas.aliyun.com/doc/arthas-tutorials.html\";\n \n     private static String LOGO = \"Welcome to Arthas\";\n     private static String VERSION = \"unknown\";",
    "output": "update tutorial links"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -276,6 +276,7 @@ public void process(final CommandProcess process) {\n \n             if (ProfilerAction.actions.equals(profilerAction)) {\n                 process.appendResult(new ProfilerModel(actions()));\n+                process.end();\n                 return;\n             }\n ",
    "output": "fix `profiler actions` command does not end (#1403)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/Log4j2Helper.java b/core/src/main/java/com/taobao/arthas/core/command/logger/Log4j2Helper.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/Log4j2Helper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/Log4j2Helper.java\n@@ -19,8 +19,6 @@\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n \n-import com.taobao.arthas.core.util.StringUtils;\n-\n /**\n  * \n  * @author hengyunabc 2019-09-20\n@@ -96,7 +94,7 @@ public static Map<String, Map<String, Object>> getLoggers(String name, boolean i\n                 return loggerInfoMap;\n             }\n             // 排掉非root时，获取到root的logger config\n-            if (!name.equalsIgnoreCase(LoggerConfig.ROOT) && StringUtils.isEmpty(loggerConfig.getName())) {\n+            if (!name.equalsIgnoreCase(LoggerConfig.ROOT) && isEmpty(loggerConfig.getName())) {\n                 return loggerInfoMap;\n             }\n             loggerInfoMap.put(name, doGetLoggerInfo(loggerConfig));\n@@ -190,4 +188,7 @@ private static List<Map<String, Object>> doGetLoggerAppenders(LoggerConfig logge\n         return result;\n     }\n \n+    private static boolean isEmpty(Object str) {\n+        return str == null || \"\".equals(str);\n+    }\n }",
    "output": "fix logger command do not work with Log4j2. ##1394 #1395"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -462,6 +462,7 @@ public static TimeFragmentVO createTimeFragmentVO(Integer index, TimeFragment tf\n                 .setIndex(index)\n                 .setTimestamp(tf.getGmtCreate())\n                 .setCost(tf.getCost())\n+                .setParams(advice.getParams())\n                 .setReturn(advice.isAfterReturning())\n                 .setReturnObj(advice.getReturnObj())\n                 .setThrow(advice.isAfterThrowing())",
    "output": "fix tt show record missing params (#1387)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.6\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.7\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.7"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -122,7 +122,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         executorService = Executors.newScheduledThreadPool(1, new ThreadFactory() {\n             @Override\n             public Thread newThread(Runnable r) {\n-                final Thread t = new Thread(r, \"as-command-execute-daemon\");\n+                final Thread t = new Thread(r, \"arthas-command-execute\");\n                 t.setDaemon(true);\n                 return t;\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n@@ -153,6 +153,7 @@ public synchronized void setTimer() {\n                 @Override\n                 public Thread newThread(Runnable r) {\n                     final Thread t = new Thread(r, \"arthas-shell-server\");\n+                    t.setDaemon(true);\n                     return t;\n                 }\n             });\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n@@ -111,6 +111,7 @@ private synchronized void setEvictTimer() {\n                 @Override\n                 public Thread newThread(Runnable r) {\n                     final Thread t = new Thread(r, \"arthas-shell-server\");\n+                    t.setDaemon(true);\n                     return t;\n                 }\n             });\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -9,14 +9,22 @@\n import java.util.List;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n \n /**\n  * Arthas 使用情况统计\n  * <p/>\n  * Created by zhuyong on 15/11/12.\n  */\n public class UserStatUtil {\n-    private static final ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    private static final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {\n+        @Override\n+        public Thread newThread(Runnable r) {\n+            final Thread t = new Thread(r, \"arthas-UserStat\");\n+            t.setDaemon(true);\n+            return t;\n+        }\n+    });\n     private static final String ip = IPUtils.getLocalIP();\n \n     private static final String version = URLEncoder.encode(ArthasBanner.version().replace(\"\\n\", \"\"));",
    "output": "change arthas threads to be daemon #1346"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -55,6 +55,7 @@\n import com.taobao.arthas.core.util.UserStatUtil;\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n import io.netty.util.concurrent.EventExecutorGroup;\n \n \n@@ -314,7 +315,7 @@ private void bind(Configure configure) throws Throwable {\n             resolvers.add(builtinCommands);\n \n             //worker group\n-            workerGroup = new NioEventLoopGroup(8);\n+            workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n \n             // TODO: discover user provided command resolver\n             if (configure.getTelnetPort() > 0) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n@@ -10,6 +10,7 @@\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import io.netty.handler.logging.LogLevel;\n import io.netty.handler.logging.LoggingHandler;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n import io.netty.util.concurrent.EventExecutorGroup;\n import io.netty.util.concurrent.Future;\n import io.netty.util.concurrent.GenericFutureListener;\n@@ -58,7 +59,7 @@ public NettyWebsocketTtyBootstrap setPort(int port) {\n     }\n \n     public void start(Consumer<TtyConnection> handler, final Consumer<Throwable> doneHandler) {\n-        group = new NioEventLoopGroup();\n+        group = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-NettyWebsocketTtyBootstrap\", true));\n \n         ServerBootstrap b = new ServerBootstrap();\n         b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO))\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/NettyHttpTelnetBootstrap.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/NettyHttpTelnetBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/NettyHttpTelnetBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/NettyHttpTelnetBootstrap.java\n@@ -11,6 +11,7 @@\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import io.netty.handler.logging.LogLevel;\n import io.netty.handler.logging.LoggingHandler;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n import io.netty.util.concurrent.EventExecutorGroup;\n import io.netty.util.concurrent.Future;\n import io.netty.util.concurrent.GenericFutureListener;\n@@ -33,7 +34,7 @@ public class NettyHttpTelnetBootstrap extends TelnetBootstrap {\n \n     public NettyHttpTelnetBootstrap(EventExecutorGroup workerGroup) {\n         this.workerGroup = workerGroup;\n-        this.group = new NioEventLoopGroup();\n+        this.group = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-NettyHttpTelnetBootstrap\", true));\n         this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);\n     }\n ",
    "output": "arthas thread with name"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -155,6 +155,19 @@ public static MethodNode removeJSRInstructions(MethodNode subjectMethod) {\n \t\treturn result;\n \t}\n \n+    public static ClassNode removeJSRInstructions(ClassNode classNode) {\n+        ClassNode result = new ClassNode(Opcodes.ASM8);\n+        classNode.accept(new ClassVisitor(Opcodes.ASM8, result) {\n+            @Override\n+            public MethodVisitor visitMethod(int access, String name, String desc, String signature,\n+                    String[] exceptions) {\n+                MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n+                return new JSRInlinerAdapter(mv, access, name, desc, signature, exceptions);\n+            }\n+        });\n+        return result;\n+    }\n+\n \tpublic static MethodNode removeLineNumbers(MethodNode methodNode) {\n \t\tMethodNode result = newMethodNode(methodNode);\n \t\tmethodNode.accept(new MethodVisitor(Opcodes.ASM8, result) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -123,6 +123,8 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n             }\n \n             ClassNode classNode = AsmUtils.toClassNode(classfileBuffer);\n+            // remove JSR https://github.com/alibaba/arthas/issues/1304\n+            classNode = AsmUtils.removeJSRInstructions(classNode);\n \n             // 生成增强字节码\n             DefaultInterceptorClassParser defaultInterceptorClassParser = new DefaultInterceptorClassParser();",
    "output": "fix jsr problem. #1304"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -81,16 +81,6 @@ public class GlobalOptions {\n     )\n     public static volatile boolean isSupportDefaultMethod = true && JavaVersionUtils.isGreaterThanJava7();\n \n-    /**\n-     * 是否在asm中输出\n-     */\n-    @Option(level = 1,\n-            name = \"debug-for-asm\",\n-            summary = \"Option to print DEBUG message if ASM is involved\",\n-            description = \"This option enables to print DEBUG message of ASM for each method invocation.\"\n-    )\n-    public static volatile boolean isDebugForAsm = false;\n-\n     /**\n      * 是否日志中保存命令执行结果\n      */",
    "output": "clean code"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.6\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.6"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.5"
  },
  {
    "input": "diff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/main/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplication.java\n@@ -0,0 +1,18 @@\n+package com.example.arthasspringbootstarterexample;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class ArthasSpringBootStarterExampleApplication {\n+\n+\tpublic static void main(String[] args) throws InterruptedException {\n+\t\tSpringApplication.run(ArthasSpringBootStarterExampleApplication.class, args);\n+\t\tSystem.out.println(\"xxxxxxxxxxxxxxxxxx\");\n+\t\tTimeUnit.SECONDS.sleep(3);\n+\t\tSystem.exit(0);\n+\t}\n+\n+}\n\ndiff --git a/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java b/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n--- a/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n+++ b/arthas-spring-boot-starter/src/it/arthas-spring-boot-starter-example/src/test/java/com/example/arthasspringbootstarterexample/ArthasSpringBootStarterExampleApplicationTests.java\n@@ -0,0 +1,13 @@\n+package com.example.arthasspringbootstarterexample;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class ArthasSpringBootStarterExampleApplicationTests {\n+\n+\t@Test\n+\tvoid contextLoads() {\n+\t}\n+\n+}\n\ndiff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java\n@@ -46,24 +46,8 @@ public ArthasAgent arthasAgent(@Autowired Map<String, String> arthasConfigMap,\n \t\tfinal ArthasAgent arthasAgent = new ArthasAgent(mapWithPrefix, arthasProperties.getHome(),\n \t\t\t\tarthasProperties.isSlientInit(), null);\n \n-\t\tif (arthasProperties.isSyncInit()) {\n-\t\t\tarthasAgent.init();\n-\t\t\tlogger.info(\"Arthas agent start success.\");\n-\t\t} else {\n-\t\t\tThread thread = new Thread(new Runnable() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void run() {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tarthasAgent.init();\n-\t\t\t\t\t\tlogger.info(\"Arthas agent start success.\");\n-\t\t\t\t\t} catch (Throwable e) {\n-\t\t\t\t\t\tlogger.error(\"Arthas agent start error\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t});\n-\t\t\tthread.start();\n-\t\t}\n+\t\tarthasAgent.init();\n+\t\tlogger.info(\"Arthas agent start success.\");\n \t\treturn arthasAgent;\n \n \t}\n\ndiff --git a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n--- a/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n+++ b/arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasProperties.java\n@@ -33,11 +33,6 @@ public class ArthasProperties {\n \t */\n \tprivate boolean slientInit = false;\n \n-\t/**\n-\t * arthas agent init in a background thread by default.\n-\t */\n-\tprivate boolean syncInit = false;\n-\n \tpublic String getHome() {\n \t\treturn home;\n \t}\n@@ -54,14 +49,6 @@ public void setSlientInit(boolean slientInit) {\n \t\tthis.slientInit = slientInit;\n \t}\n \n-\tpublic boolean isSyncInit() {\n-\t\treturn syncInit;\n-\t}\n-\n-\tpublic void setSyncInit(boolean syncInit) {\n-\t\tthis.syncInit = syncInit;\n-\t}\n-\n \tpublic String getIp() {\n \t\treturn ip;\n \t}\n\ndiff --git a/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java b/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n--- a/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n+++ b/arthas-spring-boot-starter/src/test/java/com/alibaba/arthas/spring/StringUtilsTest.java\n@@ -1,7 +1,5 @@\n package com.alibaba.arthas.spring;\n \n-import static org.junit.Assert.fail;\n-\n import java.util.HashMap;\n import java.util.Map;\n ",
    "output": "arthas-spring-boot-starter add integration test"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent334/AgentBootstrap.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.agent332;\n+package com.taobao.arthas.agent334;\n \n import java.arthas.SpyAPI;\n import java.io.File;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -476,7 +476,7 @@ private void cleanUpSpyReference() {\n         }\n         // AgentBootstrap.resetArthasClassLoader();\n         try {\n-            Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"com.taobao.arthas.agent332.AgentBootstrap\");\n+            Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"com.taobao.arthas.agent334.AgentBootstrap\");\n             Method method = clazz.getDeclaredMethod(\"resetArthasClassLoader\");\n             method.invoke(null);\n         } catch (Throwable e) {",
    "output": "prepare release 3.3.4 ,change package"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.4"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodProcessor.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodProcessor.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodProcessor.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodProcessor.java\n@@ -13,6 +13,7 @@\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.AbstractInsnNode;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.FrameNode;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.IincInsnNode;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.InsnList;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.InsnNode;\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.IntInsnNode;\n@@ -717,10 +718,15 @@ public void inline(String owner, MethodNode toInlineMethodNode) {\n                             continue;\n                         }\n \n+                        //修改inline代码中的使用到局部变量的指令的var操作数(变量slot)\n                         if(abstractInsnNode instanceof  VarInsnNode) {\n                             VarInsnNode varInsnNode = (VarInsnNode) abstractInsnNode;\n                             varInsnNode.var += currentMaxLocals;\n+                        } else if (abstractInsnNode instanceof IincInsnNode) {\n+                            IincInsnNode iincInsnNode = (IincInsnNode) abstractInsnNode;\n+                            iincInsnNode.var += currentMaxLocals;\n                         }\n+\n                         int opcode = abstractInsnNode.getOpcode();\n                         if (opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) {\n //                            super.visitJumpInsn(Opcodes.GOTO, end);\n\ndiff --git a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/InlineWhileTest.java b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/InlineWhileTest.java\n--- a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/InlineWhileTest.java\n+++ b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/InlineWhileTest.java\n@@ -0,0 +1,142 @@\n+package com.taobao.arthas.bytekit.asm.interceptor;\n+\n+import com.taobao.arthas.bytekit.asm.binding.Binding;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtEnter;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExceptionExit;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExit;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.ExceptionHandler;\n+import com.taobao.arthas.bytekit.utils.Decompiler;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.springframework.boot.test.rule.OutputCapture;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * testcase for IINC\n+ */\n+public class InlineWhileTest {\n+\n+    @Rule\n+    public ExpectedException expectedEx = ExpectedException.none();\n+\n+    @Rule\n+    public OutputCapture capture = new OutputCapture();\n+\n+    public static class Sample {\n+\n+        public int hello(String str, boolean exception) {\n+            if (exception) {\n+                throw new RuntimeException(\"test exception\");\n+            }\n+            return str.length();\n+        }\n+    }\n+\n+    public static class TestPrintSuppressHandler {\n+\n+        @ExceptionHandler(inline = true)\n+        public static void onSuppress(@Binding.Throwable Throwable e, @Binding.Class Object clazz) {\n+            System.err.println(\"exception handler: \" + clazz);\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static class EnterInterceptor {\n+\n+        @AtEnter(inline = true,\n+                suppress = RuntimeException.class,\n+                suppressHandler = TestPrintSuppressHandler.class\n+                )\n+        public static long onEnter(\n+                @Binding.This Object object, @Binding.Class Object clazz,\n+               @Binding.MethodName String methodName,\n+               @Binding.MethodDesc String methodDesc\n+               ) {\n+            System.err.println(\"onEnter, object:\" + object);\n+            System.err.println(\"onEnter, methodName:\" + methodName);\n+            System.err.println(\"onEnter, methodDesc:\" + methodDesc);\n+\n+            int i=0;\n+            while (i++ < 3) {\n+                System.err.println(\"enter: \"+i);\n+            }\n+            return 123L;\n+        }\n+\n+        @AtExit(inline = true,\n+                suppress = RuntimeException.class,\n+                suppressHandler = TestPrintSuppressHandler.class\n+                )\n+        public static void onExit(\n+                @Binding.This Object object, @Binding.Class Object clazz,\n+               @Binding.MethodName String methodName,\n+               @Binding.MethodDesc String methodDesc\n+               ) {\n+            System.err.println(\"onExit, object:\" + object);\n+            System.err.println(\"onExit, methodName:\" + methodName);\n+            System.err.println(\"onExit, methodDesc:\" + methodDesc);\n+\n+            int i=0;\n+            while (i++ < 3) {\n+                System.err.println(\"exit: \"+i);\n+            }\n+        }\n+\n+        @AtExceptionExit\n+        public static void onException(@Binding.This Object object, @Binding.Class Object clazz,\n+                                       @Binding.MethodName String methodName,\n+                                       @Binding.MethodDesc String methodDesc,\n+                                       @Binding.Throwable Throwable ex) {\n+            System.err.println(\"onException: \"+ex);\n+            int i=0;\n+            i+=3;\n+            System.err.println(\"exception: \"+i);\n+        }\n+    }\n+\n+\n+\n+    @Test\n+    public void test1() throws Exception {\n+        TestHelper helper = TestHelper.builder().interceptorClass(EnterInterceptor.class).methodMatcher(\"hello\")\n+                .reTransform(true);\n+        byte[] bytes = helper.process(Sample.class);\n+\n+        System.err.println(Decompiler.decompile(bytes));\n+\n+        new Sample().hello(\"abc\", false);\n+\n+        String actual = capture.toString();\n+        assertThat(actual).contains(\"onEnter, object:\");\n+        assertThat(actual).contains(\"enter: 3\");\n+        assertThat(actual).contains(\"onExit, object:\");\n+        assertThat(actual).contains(\"exit: 3\");\n+\n+\n+    }\n+\n+    @Test\n+    public void test2() throws Exception {\n+        TestHelper helper = TestHelper.builder().interceptorClass(EnterInterceptor.class).methodMatcher(\"hello\")\n+                .reTransform(true);\n+        byte[] bytes = helper.process(Sample.class);\n+\n+        System.err.println(Decompiler.decompile(bytes));\n+\n+        try {\n+            new Sample().hello(\"abc\", true);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        String actual = capture.toString();\n+        assertThat(actual).contains(\"onEnter, object:\");\n+        assertThat(actual).contains(\"enter: 3\");\n+        assertThat(actual).contains(\"onException: java.lang.RuntimeException: test exception\");\n+        assertThat(actual).contains(\"exception: 3\");\n+\n+    }\n+\n+}",
    "output": "fix iinc inst var in inline method (#1262) (#1279)"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.agent332;\n \n+import java.arthas.SpyAPI;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.PrintStream;\n@@ -50,7 +51,13 @@ public class AgentBootstrap {\n         }\n     }\n \n-    // 全局持有classloader用于隔离 Arthas 实现\n+    /**\n+     * <pre>\n+     * 1. 全局持有classloader用于隔离 Arthas 实现，防止多次attach重复初始化\n+     * 2. ClassLoader在arthas停止时会被reset\n+     * 3. 如果ClassLoader一直没变，则 com.taobao.arthas.core.server.ArthasBootstrap#getInstance 返回结果一直是一样的\n+     * </pre>\n+     */\n     private static volatile ClassLoader arthasClassLoader;\n \n     public static void premain(String args, Instrumentation inst) {\n@@ -81,6 +88,17 @@ private static ClassLoader loadOrDefineClassLoader(File arthasCoreJarFile) throw\n     }\n \n     private static synchronized void main(String args, final Instrumentation inst) {\n+        // 尝试判断arthas是否已在运行，如果是的话，直接就退出\n+        try {\n+            Class.forName(\"java.arthas.SpyAPI\"); // 加载不到会抛异常\n+            if (SpyAPI.isInited()) {\n+                ps.println(\"Arthas server already stared, skip attach.\");\n+                ps.flush();\n+                return;\n+            }\n+        } catch (Throwable e) {\n+            // ignore\n+        }\n         try {\n             ps.println(\"Arthas server agent start...\");\n             // 传递的args参数分两个部分:arthasCoreJar路径和agentArgs, 分别是Agent的JAR包路径和期望传递到服务端的参数\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -331,6 +331,12 @@ private void bind(Configure configure) throws Throwable {\n             UserStatUtil.setStatUrl(configure.getStatUrl());\n             UserStatUtil.arthasStart();\n \n+            try {\n+                SpyAPI.init();\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+\n             logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n         } catch (Throwable e) {\n             logger().error(\"Error during bind to port \" + configure.getTelnetPort(), e);\n@@ -442,7 +448,12 @@ public void execute(Runnable command) {\n      * 清除SpyAPI里的引用\n      */\n     private void cleanUpSpyReference() {\n-        SpyAPI.setNopSpy();\n+        try {\n+            SpyAPI.setNopSpy();\n+            SpyAPI.destroy();\n+        } catch (Throwable e) {\n+            // ignore\n+        }\n         // AgentBootstrap.resetArthasClassLoader();\n         try {\n             Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"com.taobao.arthas.agent332.AgentBootstrap\");\n\ndiff --git a/spy/src/main/java/java/arthas/SpyAPI.java b/spy/src/main/java/java/arthas/SpyAPI.java\n--- a/spy/src/main/java/java/arthas/SpyAPI.java\n+++ b/spy/src/main/java/java/arthas/SpyAPI.java\n@@ -21,8 +21,10 @@\n  *\n  */\n public class SpyAPI {\n-    private static final AbstractSpy NOPSPY = new NopSpy();\n-    private static volatile AbstractSpy spyInstance = new NopSpy();\n+    public static final AbstractSpy NOPSPY = new NopSpy();\n+    private static volatile AbstractSpy spyInstance = NOPSPY;\n+\n+    public static volatile boolean INITED;\n \n     public static AbstractSpy getSpy() {\n         return spyInstance;\n@@ -31,11 +33,28 @@ public static AbstractSpy getSpy() {\n     public static void setSpy(AbstractSpy spy) {\n         spyInstance = spy;\n     }\n-    \n+\n     public static void setNopSpy() {\n         setSpy(NOPSPY);\n     }\n \n+    public static boolean isNopSpy() {\n+        return NOPSPY == spyInstance;\n+    }\n+\n+    public static void init() {\n+        INITED = true;\n+    }\n+\n+    public static boolean isInited() {\n+        return INITED;\n+    }\n+\n+    public static void destroy() {\n+        setNopSpy();\n+        INITED = false;\n+    }\n+\n     public static void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] args) {\n         spyInstance.atEnter(clazz, methodInfo, target, args);\n     }",
    "output": "Checking if arthas is started via SpyAPI"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -61,7 +61,7 @@\n public class ArthasBootstrap {\n     private static final String ARTHAS_SPY_JAR = \"arthas-spy.jar\";\n     public static final String ARTHAS_HOME_PROPERTY = \"arthas.home\";\n-    private static String ARTHAS_SHOME = null;\n+    private static String ARTHAS_HOME = null;\n \n     public static final String CONFIG_NAME_PROPERTY = \"arthas.config.name\";\n     public static final String CONFIG_LOCATION_PROPERTY = \"arthas.config.location\";\n@@ -164,14 +164,13 @@ private void initArthasEnvironment(Map<String, String> argsMap) throws IOExcepti\n          * https://github.com/alibaba/arthas/issues/986\n          * </pre>\n          */\n-        // 给配置全加上前缀\n-        Map<String, Object> mapWithPrefix = new HashMap<String, Object>(argsMap.size());\n-        for (Entry<String, String> entry : argsMap.entrySet()) {\n-            mapWithPrefix.put(\"arthas.\" + entry.getKey(), entry.getValue());\n+        Map<String, String> copyMap = new HashMap<String, String>(argsMap);\n+        // 添加 arthas.home\n+        if (!copyMap.containsKey(ARTHAS_HOME_PROPERTY)) {\n+            copyMap.put(ARTHAS_HOME_PROPERTY, arthasHome());\n         }\n-        mapWithPrefix.put(ARTHAS_HOME_PROPERTY, arthasHome());\n \n-        MapPropertySource mapPropertySource = new MapPropertySource(\"args\", mapWithPrefix);\n+        MapPropertySource mapPropertySource = new MapPropertySource(\"args\", (Map<String, Object>)(Object)copyMap);\n         arthasEnvironment.addFirst(mapPropertySource);\n \n         tryToLoadArthasProperties();\n@@ -180,22 +179,22 @@ private void initArthasEnvironment(Map<String, String> argsMap) throws IOExcepti\n         BinderUtils.inject(arthasEnvironment, configure);\n     }\n \n-    private String arthasHome() {\n-        if (ARTHAS_SHOME != null) {\n-            return ARTHAS_SHOME;\n+    private static String arthasHome() {\n+        if (ARTHAS_HOME != null) {\n+            return ARTHAS_HOME;\n         }\n         CodeSource codeSource = ArthasBootstrap.class.getProtectionDomain().getCodeSource();\n         if (codeSource != null) {\n             try {\n-                ARTHAS_SHOME = new File(codeSource.getLocation().toURI().getSchemeSpecificPart()).getParentFile().getAbsolutePath();\n+                ARTHAS_HOME = new File(codeSource.getLocation().toURI().getSchemeSpecificPart()).getParentFile().getAbsolutePath();\n             } catch (Throwable e) {\n-                AnsiLog.error(\"try to load arthas.properties error\", e);\n+                AnsiLog.error(\"try to find arthas.home from CodeSource error\", e);\n             }\n         }\n-        if (ARTHAS_SHOME == null) {\n-            ARTHAS_SHOME = new File(\"\").getAbsolutePath();\n+        if (ARTHAS_HOME == null) {\n+            ARTHAS_HOME = new File(\"\").getAbsolutePath();\n         }\n-        return ARTHAS_SHOME;\n+        return ARTHAS_HOME;\n     }\n \n     // try to load arthas.properties\n@@ -403,7 +402,12 @@ public synchronized static ArthasBootstrap getInstance(Instrumentation instrumen\n         }\n \n         Map<String, String> argsMap = FeatureCodec.DEFAULT_COMMANDLINE_CODEC.toMap(args);\n-        return getInstance(instrumentation, argsMap);\n+        // 给配置全加上前缀\n+        Map<String, String> mapWithPrefix = new HashMap<String, String>(argsMap.size());\n+        for (Entry<String, String> entry : argsMap.entrySet()) {\n+            mapWithPrefix.put(\"arthas.\" + entry.getKey(), entry.getValue());\n+        }\n+        return getInstance(instrumentation, mapWithPrefix);\n     }\n \n     /**",
    "output": "improve initArthasEnvironment"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n@@ -8,7 +8,6 @@\n import java.net.URL;\n import java.net.URLDecoder;\n import java.security.CodeSource;\n-import java.util.jar.JarFile;\n \n import com.taobao.arthas.agent.ArthasClassloader;\n \n@@ -18,7 +17,6 @@\n  * @author vlinux on 15/5/19.\n  */\n public class AgentBootstrap {\n-    private static final String ARTHAS_SPY_JAR = \"arthas-spy.jar\";\n     private static final String ARTHAS_CORE_JAR = \"arthas-core.jar\";\n     private static final String ARTHAS_BOOTSTRAP = \"com.taobao.arthas.core.server.ArthasBootstrap\";\n     private static final String GET_INSTANCE = \"getInstance\";\n@@ -70,21 +68,7 @@ public synchronized static void resetArthasClassLoader() {\n         arthasClassLoader = null;\n     }\n \n-    private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile, File arthasCoreJarFile) throws Throwable {\n-        // 将Spy添加到BootstrapClassLoader\n-        ClassLoader parent = ClassLoader.getSystemClassLoader().getParent();\n-        Class<?> spyClass = null;\n-        if (parent != null) {\n-            try {\n-                spyClass =parent.loadClass(\"java.arthas.SpyAPI\");\n-            } catch (Throwable e) {\n-                // ignore\n-            }\n-        }\n-        if (spyClass == null) {\n-            inst.appendToBootstrapClassLoaderSearch(new JarFile(spyJarFile));\n-        }\n-\n+    private static ClassLoader getClassLoader(Instrumentation inst, File arthasCoreJarFile) throws Throwable {\n         // 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀\n         return loadOrDefineClassLoader(arthasCoreJarFile);\n     }\n@@ -138,16 +122,10 @@ private static synchronized void main(String args, final Instrumentation inst) {\n                 return;\n             }\n \n-            File spyJarFile = new File(arthasCoreJarFile.getParentFile(), ARTHAS_SPY_JAR);\n-            if (!spyJarFile.exists()) {\n-                ps.println(\"Spy jar file does not exist: \" + spyJarFile);\n-                return;\n-            }\n-\n             /**\n              * Use a dedicated thread to run the binding logic to prevent possible memory leak. #195\n              */\n-            final ClassLoader agentLoader = getClassLoader(inst, spyJarFile, arthasCoreJarFile);\n+            final ClassLoader agentLoader = getClassLoader(inst, arthasCoreJarFile);\n \n             Thread bindingThread = new Thread() {\n                 @Override\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -19,6 +19,7 @@\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.jar.JarFile;\n \n import com.alibaba.arthas.deps.ch.qos.logback.classic.LoggerContext;\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n@@ -58,6 +59,7 @@\n  * @author gongdewei 2020-03-25\n  */\n public class ArthasBootstrap {\n+    private static final String ARTHAS_SPY_JAR = \"arthas-spy.jar\";\n     public static final String ARTHAS_HOME_PROPERTY = \"arthas.home\";\n     private static String ARTHAS_SHOME = null;\n \n@@ -95,7 +97,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg\n         arthasOutputDir.mkdirs();\n \n         // 1. initSpy()\n-        initSpy();\n+        initSpy(instrumentation);\n         // 2. ArthasEnvironment\n         initArthasEnvironment(args);\n         // 3. init logger\n@@ -125,8 +127,29 @@ public void run() {\n         Runtime.getRuntime().addShutdownHook(shutdown);\n     }\n \n-    private static void initSpy() {\n+    private static void initSpy(Instrumentation instrumentation) throws Throwable {\n         // TODO init SpyImpl ?\n+\n+        // 将Spy添加到BootstrapClassLoader\n+        ClassLoader parent = ClassLoader.getSystemClassLoader().getParent();\n+        Class<?> spyClass = null;\n+        if (parent != null) {\n+            try {\n+                spyClass =parent.loadClass(\"java.arthas.SpyAPI\");\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+        }\n+        if (spyClass == null) {\n+            CodeSource codeSource = ArthasBootstrap.class.getProtectionDomain().getCodeSource();\n+            if (codeSource != null) {\n+                File arthasCoreJarFile = new File(codeSource.getLocation().toURI().getSchemeSpecificPart());\n+                File spyJarFile = new File(arthasCoreJarFile.getParentFile(), ARTHAS_SPY_JAR);\n+                instrumentation.appendToBootstrapClassLoaderSearch(new JarFile(spyJarFile));\n+            } else {\n+                throw new IllegalStateException(\"can not find \" + ARTHAS_SPY_JAR);\n+            }\n+        }\n     }\n \n     private void initArthasEnvironment(Map<String, String> argsMap) throws IOException {",
    "output": "move init spy code to ArthasBootstrap"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n@@ -23,7 +23,6 @@ public class AgentBootstrap {\n     private static final String ARTHAS_BOOTSTRAP = \"com.taobao.arthas.core.server.ArthasBootstrap\";\n     private static final String GET_INSTANCE = \"getInstance\";\n     private static final String IS_BIND = \"isBind\";\n-    private static final String BIND = \"bind\";\n \n     private static PrintStream ps = System.err;\n     static {\n@@ -187,15 +186,9 @@ private static void bind(Instrumentation inst, ClassLoader agentLoader, String a\n         Object bootstrap = bootstrapClass.getMethod(GET_INSTANCE, Instrumentation.class, String.class).invoke(null, inst, args);\n         boolean isBind = (Boolean) bootstrapClass.getMethod(IS_BIND).invoke(bootstrap);\n         if (!isBind) {\n-            try {\n-                ps.println(\"Arthas start to bind...\");\n-                bootstrapClass.getMethod(BIND, String.class).invoke(bootstrap, args);\n-                ps.println(\"Arthas server bind success.\");\n-                return;\n-            } catch (Exception e) {\n-                ps.println(\"Arthas server port binding failed! Please check $HOME/logs/arthas/arthas.log for more details.\");\n-                throw e;\n-            }\n+            String errorMsg = \"Arthas server port binding failed! Please check $HOME/logs/arthas/arthas.log for more details.\";\n+            ps.println(errorMsg);\n+            throw new RuntimeException(errorMsg);\n         }\n         ps.println(\"Arthas server already bind.\");\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -225,7 +225,7 @@ private void tryToLoadArthasProperties() throws IOException {\n      * @param configure 配置信息\n      * @throws IOException 服务器启动失败\n      */\n-    public void bind(Configure configure) throws Throwable {\n+    private void bind(Configure configure) throws Throwable {\n \n         long start = System.currentTimeMillis();\n ",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -87,7 +87,7 @@ public class ArthasBootstrap {\n \n     private TransformerManager transformerManager;\n \n-    private ArthasBootstrap(Instrumentation instrumentation, String args) throws Throwable {\n+    private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> args) throws Throwable {\n         this.instrumentation = instrumentation;\n \n         String outputPath = System.getProperty(\"arthas.output.dir\", \"arthas-output\");\n@@ -129,7 +129,7 @@ private static void initSpy() {\n         // TODO init SpyImpl ?\n     }\n \n-    private void initArthasEnvironment(String args) throws IOException {\n+    private void initArthasEnvironment(Map<String, String> argsMap) throws IOException {\n         if (arthasEnvironment == null) {\n             arthasEnvironment = new ArthasEnvironment();\n         }\n@@ -141,7 +141,6 @@ private void initArthasEnvironment(String args) throws IOException {\n          * https://github.com/alibaba/arthas/issues/986\n          * </pre>\n          */\n-        Map<String, String> argsMap = FeatureCodec.DEFAULT_COMMANDLINE_CODEC.toMap(args);\n         // 给配置全加上前缀\n         Map<String, Object> mapWithPrefix = new HashMap<String, Object>(argsMap.size());\n         for (Entry<String, String> entry : argsMap.entrySet()) {\n@@ -376,6 +375,22 @@ public void destroy() {\n      * @throws Throwable\n      */\n     public synchronized static ArthasBootstrap getInstance(Instrumentation instrumentation, String args) throws Throwable {\n+        if (arthasBootstrap != null) {\n+            return arthasBootstrap;\n+        }\n+\n+        Map<String, String> argsMap = FeatureCodec.DEFAULT_COMMANDLINE_CODEC.toMap(args);\n+        return getInstance(instrumentation, argsMap);\n+    }\n+\n+    /**\n+     * 单例\n+     *\n+     * @param instrumentation JVM增强\n+     * @return ArthasServer单例\n+     * @throws Throwable\n+     */\n+    public synchronized static ArthasBootstrap getInstance(Instrumentation instrumentation, Map<String, String> args) throws Throwable {\n         if (arthasBootstrap == null) {\n             arthasBootstrap = new ArthasBootstrap(instrumentation, args);\n         }",
    "output": "ArthasBootstrap support map args"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ArgsBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ArgsBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ArgsBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ArgsBinding.java\n@@ -14,7 +14,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n \n     @Override\n     public Type getType(BindingContext bindingContext) {\n-        return Type.getType(Object[].class);\n+        return AsmOpUtils.OBJECT_ARRAY_TYPE;\n     }\n \n }\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeArgsBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeArgsBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeArgsBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeArgsBinding.java\n@@ -42,6 +42,6 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n \n     @Override\n     public Type getType(BindingContext bindingContext) {\n-        return Type.getType(Object[].class);\n+        return AsmOpUtils.OBJECT_ARRAY_TYPE;\n     }\n }\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n@@ -43,7 +43,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n \n     @Override\n     public Type getType(BindingContext bindingContext) {\n-        return Type.getType(Object[].class);\n+        return AsmOpUtils.OBJECT_ARRAY_TYPE;\n     }\n \n }",
    "output": "improve code"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java\n@@ -43,7 +43,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n \n     @Override\n     public Type getType(BindingContext bindingContext) {\n-        return AsmOpUtils.OBJECT_TYPE;\n+        return Type.getType(Object[].class);\n     }\n \n }",
    "output": "fix LocalVarsBinding type"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -16,11 +16,9 @@\n \n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.NodeList;\n-import org.xml.sax.SAXException;\n \n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.IOUtils;\n@@ -98,7 +96,7 @@ public static String readMavenMetaData(String repoMirror, boolean http) {\n \n     public static String getRepoUrl(String repoMirror, boolean http) {\n         repoMirror = repoMirror.trim();\n-        String repoUrl = \"\";\n+        String repoUrl;\n         if (repoMirror.equals(\"center\")) {\n             repoUrl = \"https://repo1.maven.org/maven2\";\n         } else if (repoMirror.equals(\"aliyun\")) {\n@@ -111,13 +109,13 @@ public static String getRepoUrl(String repoMirror, boolean http) {\n         }\n \n         if (http && repoUrl.startsWith(\"https\")) {\n-            repoUrl = \"http\" + repoUrl.substring(\"https\".length(), repoUrl.length());\n+            repoUrl = \"http\" + repoUrl.substring(\"https\".length());\n         }\n         return repoUrl;\n     }\n \n     public static void downArthasPackaging(String repoMirror, boolean http, String arthasVersion, String savePath)\n-                    throws ParserConfigurationException, SAXException, IOException {\n+            throws IOException {\n         String repoUrl = getRepoUrl(repoMirror, http);\n \n         File unzipDir = new File(savePath, arthasVersion + File.separator + \"arthas\");\n@@ -134,7 +132,7 @@ public static void downArthasPackaging(String repoMirror, boolean http, String a\n     }\n \n     public static void saveUrl(final String filename, final String urlString, boolean printProgress)\n-                    throws MalformedURLException, IOException {\n+            throws IOException {\n         BufferedInputStream in = null;\n         FileOutputStream fout = null;\n         try {\n@@ -143,7 +141,7 @@ public static void saveUrl(final String filename, final String urlString, boolea\n             List<String> values = connection.getHeaderFields().get(\"Content-Length\");\n             int fileSize = 0;\n             if (values != null && !values.isEmpty()) {\n-                String contentLength = (String) values.get(0);\n+                String contentLength = values.get(0);\n                 if (contentLength != null) {\n                     // parse the length into an integer...\n                     fileSize = Integer.parseInt(contentLength);\n@@ -152,7 +150,7 @@ public static void saveUrl(final String filename, final String urlString, boolea\n \n             fout = new FileOutputStream(filename);\n \n-            final byte data[] = new byte[1024 * 1024];\n+            final byte[] data = new byte[1024 * 1024];\n             int totalCount = 0;\n             int count;\n             long lastPrintTime = System.currentTimeMillis();\n@@ -162,7 +160,7 @@ public static void saveUrl(final String filename, final String urlString, boolea\n                     long now = System.currentTimeMillis();\n                     if (now - lastPrintTime > 1000) {\n                         AnsiLog.info(\"File size: {}, downloaded size: {}, downloading ...\", formatFileSize(fileSize),\n-                                        formatFileSize(totalCount));\n+                                formatFileSize(totalCount));\n                         lastPrintTime = now;\n                     }\n                 }\n@@ -212,13 +210,13 @@ static Document transformMavenMetaData(String mavenMetaData) throws Exception {\n     private static URLConnection openURLConnection(String url) throws MalformedURLException, IOException {\n         URLConnection connection = new URL(url).openConnection();\n         if (connection instanceof HttpURLConnection) {\n-            ((HttpURLConnection) connection).setConnectTimeout(CONNECTION_TIMEOUT);\n+            connection.setConnectTimeout(CONNECTION_TIMEOUT);\n             // normally, 3xx is redirect\n             int status = ((HttpURLConnection) connection).getResponseCode();\n             if (status != HttpURLConnection.HTTP_OK) {\n                 if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM\n-                                || status == HttpURLConnection.HTTP_SEE_OTHER) {\n-                    String newUrl = ((HttpURLConnection) connection).getHeaderField(\"Location\");\n+                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    String newUrl = connection.getHeaderField(\"Location\");\n                     AnsiLog.debug(\"Try to open url: {}, redirect to: {}\", url, newUrl);\n                     return openURLConnection(newUrl);\n                 }\n@@ -228,7 +226,7 @@ private static URLConnection openURLConnection(String url) throws MalformedURLEx\n     }\n \n     private static String formatFileSize(long size) {\n-        String hrSize = null;\n+        String hrSize;\n \n         double b = size;\n         double k = size / 1024.0;",
    "output": "remove redundant code (#1097)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -275,7 +275,7 @@ public void bind(Configure configure) throws Throwable {\n             resolvers.add(builtinCommands);\n \n             //worker group\n-            workerGroup = new NioEventLoopGroup(24);\n+            workerGroup = new NioEventLoopGroup(8);\n \n             // TODO: discover user provided command resolver\n             if (configure.getTelnetPort() > 0) {",
    "output": "change worker group threads to 8"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n@@ -18,7 +18,7 @@ public class ResultViewResolver {\n     private static final Logger logger = LoggerFactory.getLogger(ResultViewResolver.class);\n \n     // modelClass -> view\n-    private Map<String, ResultView> resultViewMap = new ConcurrentHashMap<String, ResultView>();\n+    private Map<Class, ResultView> resultViewMap = new ConcurrentHashMap<Class, ResultView>();\n \n     private static ResultViewResolver viewResolver;\n \n@@ -52,9 +52,13 @@ private void registerResultViews() {\n     private ResultViewResolver() {\n     }\n \n+    public ResultView getResultView(ResultModel model) {\n+        return resultViewMap.get(model.getClass());\n+    }\n+\n     public void registerView(Class modelClass, ResultView view) {\n         //TODO 检查model的type是否重复，减少复制代码带来的bug\n-        this.resultViewMap.put(modelClass.getName(), view);\n+        this.resultViewMap.put(modelClass, view);\n     }\n \n     public void registerView(ResultView view) {\n@@ -75,11 +79,6 @@ public void registerView(Class<? extends ResultView> viewClass) {\n         this.registerView(view);\n     }\n \n-    public ResultView getResultView(ResultModel model) {\n-        return resultViewMap.get(model.getClass().getName());\n-    }\n-\n-\n     /**\n      * Get model class of result view\n      *",
    "output": "change resultViewMap's key to model class"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/JsonUtils.java b/core/src/main/java/com/taobao/arthas/core/util/JsonUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/JsonUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/JsonUtils.java\n@@ -27,7 +27,7 @@ public static void setSerializeWriterBufferThreshold(int value) {\n             }\n             serializeWriterBufferThreshold.setAccessible(true);\n             serializeWriterBufferThreshold.set(null, value);\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n             logger.error(\"update SerializeWriter.BUFFER_THRESHOLD value failed\", e);\n         }\n     }\n@@ -59,7 +59,7 @@ public static void setSerializeWriterBufThreadLocal(int bufSize) {\n             if (bytesLocal == null || bytesLocal.length < bufSize) {\n                 bytesBufLocal.set(new byte[bufSize]);\n             }\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n             logger.error(\"update SerializeWriter.BUFFER_THRESHOLD value failed\", e);\n         }\n     }\n@@ -84,7 +84,7 @@ public static void setSerializeWriterBufThreadLocal(char[] charsBuf, byte[] byte\n             serializeWriterBytesBufLocal.setAccessible(true);\n             ThreadLocal<byte[]> bytesBufLocal = (ThreadLocal<byte[]>) serializeWriterBytesBufLocal.get(null);\n             bytesBufLocal.set(bytesBuf);\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n             logger.error(\"update SerializeWriter.BUFFER_THRESHOLD value failed\", e);\n         }\n     }",
    "output": "catch throwable"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n@@ -3,16 +3,21 @@\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.command.model.*;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n \n+import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n /**\n+ * Result view resolver for term\n+ *\n  * @author gongdewei 2020/3/27\n  */\n public class ResultViewResolver {\n     private static final Logger logger = LoggerFactory.getLogger(ResultViewResolver.class);\n \n+    // modelClass -> view\n     private Map<String, ResultView> resultViewMap = new ConcurrentHashMap<String, ResultView>();\n \n     private static ResultViewResolver viewResolver;\n@@ -32,13 +37,13 @@ public static ResultViewResolver getInstance() {\n \n     private void registerResultViews() {\n         try {\n-            registerView(new StatusModel(), new StatusView());\n-            registerView(new VersionModel(), new VersionView());\n-            registerView(new MessageModel(), new MessageView());\n-            registerView(new HelpModel(), new HelpView());\n-            //registerView(new HistoryModel(), new HistoryView());\n-            registerView(new EchoModel(), new EchoView());\n-            registerView(new CatModel(), new CatView());\n+            registerView(StatusView.class);\n+            registerView(VersionView.class);\n+            registerView(MessageView.class);\n+            registerView(HelpView.class);\n+            //registerView(HistoryView.class);\n+            registerView(EchoView.class);\n+            registerView(CatView.class);\n         } catch (Throwable e) {\n             logger.error(\"register result view failed\", e);\n         }\n@@ -47,20 +52,55 @@ private void registerResultViews() {\n     private ResultViewResolver() {\n     }\n \n-//    public void registerView(Class<? extends ExecResult> resultClass, ResultView view) throws IllegalAccessException, InstantiationException {\n-//        ExecResult instance = resultClass.newInstance();\n-//        this.registerView(instance.getType(), view);\n-//    }\n+    public void registerView(Class modelClass, ResultView view) {\n+        //TODO 检查model的type是否重复，减少复制代码带来的bug\n+        this.resultViewMap.put(modelClass.getName(), view);\n+    }\n \n-    public <T extends ResultModel> void registerView(T resultObject, ResultView view) {\n-        this.registerView(resultObject.getType(), view);\n+    public void registerView(ResultView view) {\n+        Class modelClass = getModelClass(view);\n+        if (modelClass == null) {\n+            throw new NullPointerException(\"model class is null\");\n+        }\n+        this.registerView(modelClass, view);\n+    }\n+\n+    public void registerView(Class<? extends ResultView> viewClass) {\n+        ResultView view = null;\n+        try {\n+            view = viewClass.newInstance();\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"create view instance failure, viewClass:\" + viewClass, e);\n+        }\n+        this.registerView(view);\n     }\n \n-    public void registerView(String resultType, ResultView view) {\n-        resultViewMap.put(resultType, view);\n+    public ResultView getResultView(ResultModel model) {\n+        return resultViewMap.get(model.getClass().getName());\n     }\n \n-    public ResultView getResultView(String resultType) {\n-        return resultViewMap.get(resultType);\n+\n+    /**\n+     * Get model class of result view\n+     *\n+     * @return\n+     */\n+    public static <V extends ResultView> Class getModelClass(V view) {\n+        //类反射获取子类的draw方法第二个参数的ResultModel具体类型\n+        Class<? extends ResultView> viewClass = view.getClass();\n+        Method[] declaredMethods = viewClass.getDeclaredMethods();\n+        for (int i = 0; i < declaredMethods.length; i++) {\n+            Method method = declaredMethods[i];\n+            if (method.getName().equals(\"draw\")) {\n+                Class<?>[] parameterTypes = method.getParameterTypes();\n+                if (parameterTypes.length == 2\n+                        && parameterTypes[0] == CommandProcess.class\n+                        && parameterTypes[1] != ResultModel.class\n+                        && ResultModel.class.isAssignableFrom(parameterTypes[1])) {\n+                    return parameterTypes[1];\n+                }\n+            }\n+        }\n+        return null;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/distribution/impl/TermResultDistributorImpl.java b/core/src/main/java/com/taobao/arthas/core/distribution/impl/TermResultDistributorImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/distribution/impl/TermResultDistributorImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/distribution/impl/TermResultDistributorImpl.java\n@@ -22,10 +22,10 @@ public TermResultDistributorImpl(CommandProcess commandProcess) {\n     }\n \n     @Override\n-    public void appendResult(ResultModel result) {\n-        ResultView resultView = resultViewResolver.getResultView(result.getType());\n+    public void appendResult(ResultModel model) {\n+        ResultView resultView = resultViewResolver.getResultView(model);\n         if (resultView != null) {\n-            resultView.draw(commandProcess, result);\n+            resultView.draw(commandProcess, model);\n         }\n     }\n ",
    "output": "register view by viewClass"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n@@ -5,6 +5,7 @@\n import java.nio.charset.Charset;\n import java.util.List;\n \n+import com.taobao.arthas.core.command.model.CatModel;\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.shell.cli.Completion;\n@@ -24,6 +25,8 @@ public class CatCommand extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(CatCommand.class);\n     private List<String> files;\n     private String encoding;\n+    private Integer sizeLimit = 128 * 1024;\n+    private int maxSizeLimit = 8 * 1024 * 1024;\n \n     @Argument(argName = \"files\", index = 0)\n     @Description(\"files\")\n@@ -37,44 +40,66 @@ public void setEncoding(String encoding) {\n         this.encoding = encoding;\n     }\n \n+    @Option(shortName = \"M\", longName = \"sizeLimit\")\n+    @Description(\"Upper size limit in bytes for the result (128 * 1024 by default, the maximum value is 8 * 1024 * 1024)\")\n+    public void setSizeLimit(Integer sizeLimit) {\n+        this.sizeLimit = sizeLimit;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n+        if (!verifyOptions(process)) {\n+            return;\n+        }\n+\n         for (String file : files) {\n             File f = new File(file);\n             if (!f.exists()) {\n-                process.write(\"cat \" + file + \": No such file or directory\\n\");\n-                process.end();\n+                process.end(-1, \"cat \" + file + \": No such file or directory\");\n                 return;\n             }\n             if (f.isDirectory()) {\n-                process.write(\"cat \" + file + \": Is a directory\\n\");\n-                process.end();\n+                process.end(-1, \"cat \" + file + \": Is a directory\");\n                 return;\n             }\n         }\n \n         for (String file : files) {\n             File f = new File(file);\n-            if (f.length() > 1024 * 1024 * 8) {\n-                process.write(\"cat \" + file + \": Is to large, size: \" + f.length() + '\\n');\n-                process.end();\n+            if (f.length() > sizeLimit) {\n+                process.end(-1, \"cat \" + file + \": Is too large, size: \" + f.length());\n                 return;\n             }\n             try {\n                 String fileToString = FileUtils.readFileToString(f,\n-                                encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n-                process.write(fileToString);\n+                        encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n+                process.appendResult(new CatModel(file, fileToString));\n             } catch (IOException e) {\n                 logger.error(\"cat read file error. name: \" + file, e);\n-                process.write(\"cat read file error: \" + e.getMessage() + '\\n');\n-                process.end(1);\n+                process.end(1, \"cat read file error: \" + e.getMessage());\n                 return;\n             }\n         }\n \n         process.end();\n     }\n \n+    private boolean verifyOptions(CommandProcess process) {\n+        if (sizeLimit > maxSizeLimit) {\n+            process.end(-1, \"sizeLimit cannot be large than: \" + maxSizeLimit);\n+            return false;\n+        }\n+\n+        //目前不支持过滤，限制http请求执行的文件大小\n+        int maxSizeLimitOfHttp = 128 * 1024;\n+        boolean isHttpApiRequest = !process.session().isTty();\n+        if (isHttpApiRequest && sizeLimit > maxSizeLimitOfHttp) {\n+            process.end(-1, \"When executing commands with http, sizeLimit cannot be large than: \" + maxSizeLimitOfHttp);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     @Override\n     public void complete(Completion completion) {\n         if (!CompletionUtils.completeFilePath(completion)) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/CatModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/CatModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/CatModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/CatModel.java\n@@ -0,0 +1,49 @@\n+package com.taobao.arthas.core.command.model;\n+\n+/**\n+ * Result model for CatCommand\n+ * @author gongdewei 2020/5/11\n+ */\n+public class CatModel extends ResultModel implements Countable {\n+\n+    private String file;\n+    private String content;\n+\n+    public CatModel() {\n+    }\n+\n+    public CatModel(String file, String content) {\n+        this.file = file;\n+        this.content = content;\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"cat\";\n+    }\n+\n+    public String getFile() {\n+        return file;\n+    }\n+\n+    public void setFile(String file) {\n+        this.file = file;\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(String content) {\n+        this.content = content;\n+    }\n+\n+    @Override\n+    public int size() {\n+        if (content != null) {\n+            //粗略计算行数作为item size\n+            return content.length()/100 + 1;\n+        }\n+        return 0;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/CatView.java b/core/src/main/java/com/taobao/arthas/core/command/view/CatView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/CatView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/CatView.java\n@@ -0,0 +1,17 @@\n+package com.taobao.arthas.core.command.view;\n+\n+import com.taobao.arthas.core.command.model.CatModel;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+\n+/**\n+ * Result view for CatCommand\n+ * @author gongdewei 2020/5/11\n+ */\n+public class CatView extends ResultView<CatModel> {\n+\n+    @Override\n+    public void draw(CommandProcess process, CatModel result) {\n+        process.write(result.getContent()).write(\"\\n\");\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/ResultViewResolver.java\n@@ -38,6 +38,7 @@ private void registerResultViews() {\n             registerView(new HelpModel(), new HelpView());\n             //registerView(new HistoryModel(), new HistoryView());\n             registerView(new EchoModel(), new EchoView());\n+            registerView(new CatModel(), new CatView());\n         } catch (Throwable e) {\n             logger.error(\"register result view failed\", e);\n         }",
    "output": "transform command: cat"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/Countable.java b/core/src/main/java/com/taobao/arthas/core/command/model/Countable.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/Countable.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/Countable.java\n@@ -0,0 +1,15 @@\n+package com.taobao.arthas.core.command.model;\n+\n+/**\n+ * Item countable for ResultModel\n+ * @author gongdewei 2020/6/8\n+ */\n+public interface Countable {\n+\n+    /**\n+     * Get item size of this result model, the value of size is greater than or equal to 1\n+     * @return item size of this result model\n+     */\n+    int size();\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java b/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n--- a/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.core.distribution;\n \n import com.alibaba.fastjson.JSON;\n+import com.taobao.arthas.core.command.model.Countable;\n import com.taobao.arthas.core.command.model.ResultModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -14,49 +15,56 @@\n import java.util.concurrent.ConcurrentHashMap;\n \n /**\n+ * 命令结果模型辅助类\n+ *\n  * @author gongdewei 2020/5/18\n  */\n public class ResultConsumerHelper {\n \n     private static final Logger logger = LoggerFactory.getLogger(ResultConsumerHelper.class);\n \n-    private static Map<String, List<Field>> modelFieldMap = new ConcurrentHashMap<String, List<Field>>();\n+    private static ConcurrentHashMap<String, List<Field>> modelFieldMap = new ConcurrentHashMap<String, List<Field>>();\n \n     /**\n-     * 估算命令执行结果的item数量\n-     * 注意：此方法调用频繁，不能产生内存碎片\n+     * 估算命令执行结果的item数量，目的是提供一个度量值，作为Consumer分发时进行切片的参考依据，避免单次发送大量数据。\n+     * 注意：此方法调用频繁，避免产生内存碎片\n+     *\n      * @param model\n      * @return\n      */\n     public static int getItemCount(ResultModel model) {\n-        int count = processSpecialCommand(model);\n-        if (count > 0) {\n-            return count;\n+        //如果实现Countable接口，则认为model自己统计元素数量\n+        if (model instanceof Countable) {\n+            return ((Countable) model).size();\n         }\n \n-        //TODO 抽取ItemSet/ItemGroup接口，解决ClassSetVO/mbean等分组的情况\n-\n+        //对于普通的Model，通过类反射统计容器类字段统计元素数量\n         //缓存Field对象，避免产生内存碎片\n         Class modelClass = model.getClass();\n         List<Field> fields = modelFieldMap.get(modelClass.getName());\n         if (fields == null) {\n             fields = new ArrayList<Field>();\n-            modelFieldMap.put(modelClass.getName(), fields);\n             Field[] declaredFields = modelClass.getDeclaredFields();\n             for (int i = 0; i < declaredFields.length; i++) {\n                 Field field = declaredFields[i];\n                 Class<?> fieldClass = field.getType();\n+                //如果是List/Map/Array/Countable类型的字段，则缓存起来后面统计数量\n                 if (Collection.class.isAssignableFrom(fieldClass)\n                         || Map.class.isAssignableFrom(fieldClass)\n-                        || fieldClass.isArray()\n-                       /* || fieldClass == ClassSetVO.class*/) {\n+                        || Countable.class.isAssignableFrom(fieldClass)\n+                        || fieldClass.isArray()) {\n                     field.setAccessible(true);\n                     fields.add(field);\n                 }\n             }\n+            List<Field> old_fields = modelFieldMap.putIfAbsent(modelClass.getName(), fields);\n+            if (old_fields != null) {\n+                fields = old_fields;\n+            }\n         }\n \n-        //获取item数量\n+        //统计Model对象的item数量\n+        int count = 0;\n         try {\n             for (int i = 0; i < fields.size(); i++) {\n                 Field field = fields.get(i);\n@@ -65,33 +73,22 @@ public static int getItemCount(ResultModel model) {\n                 }\n                 Object value = field.get(model);\n                 if (value != null) {\n-                    if (value instanceof  Collection) {\n-                        return ((Collection) value).size();\n+                    if (value instanceof Collection) {\n+                        count += ((Collection) value).size();\n                     } else if (value.getClass().isArray()) {\n-                        return Array.getLength(value);\n+                        count += Array.getLength(value);\n                     } else if (value instanceof Map) {\n-                        return ((Map) value).size();\n-//                    } else if (value.getClass() == ClassSetVO.class) {\n-//                        return ((ClassSetVO) value).getClasses().size();\n+                        count += ((Map) value).size();\n+                    } else if (value instanceof Countable) {\n+                        count += ((Countable) value).size();\n                     }\n                 }\n             }\n         } catch (Exception e) {\n             logger.error(\"get item count of result model failed, model: {}\", JSON.toJSONString(model), e);\n         }\n \n-        return 1;\n-    }\n-\n-    private static int processSpecialCommand(ResultModel model) {\n-//        if (model instanceof CatModel) {\n-//            //特殊处理cat\n-//            return ((CatModel) model).getContent().length()/100 + 1 ;\n-//        } else if (model instanceof TraceModel) {\n-//            //特殊处理trace\n-//            return ((TraceModel) model).getNodeCount();\n-//        }\n-        return 0;\n+        return count > 0 ? count : 1;\n     }\n \n }",
    "output": "Add Countable interface for result model"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/model/ResultModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/ResultModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/ResultModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/ResultModel.java\n@@ -7,7 +7,7 @@\n  */\n public abstract class ResultModel {\n \n-    private Integer jobId;\n+    private int jobId;\n \n     /**\n      * Command type (name)\n@@ -17,11 +17,11 @@ public abstract class ResultModel {\n     public abstract String getType();\n \n \n-    public Integer getJobId() {\n+    public int getJobId() {\n         return jobId;\n     }\n \n-    public void setJobId(Integer jobId) {\n+    public void setJobId(int jobId) {\n         this.jobId = jobId;\n     }\n }",
    "output": "change jobId field type to int"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.3"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java b/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/SpyImpl.java\n@@ -41,9 +41,7 @@ public void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] a\n                     }\n                     adviceListener.before(clazz, methodName, methodDesc, target, args);\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n-                    }\n+                    logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n                 }\n             }\n         }\n@@ -68,9 +66,7 @@ public void atExit(Class<?> clazz, String methodInfo, Object target, Object[] ar\n                     }\n                     adviceListener.afterReturning(clazz, methodName, methodDesc, target, args, returnObject);\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n-                    }\n+                    logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n                 }\n             }\n         }\n@@ -94,9 +90,7 @@ public void atExceptionExit(Class<?> clazz, String methodInfo, Object target, Ob\n                     }\n                     adviceListener.afterThrowing(clazz, methodName, methodDesc, target, args, throwable);\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n-                    }\n+                    logger.error(\"class: {}, methodInfo: {}\", clazz.getName(), methodInfo, e);\n                 }\n             }\n         }\n@@ -122,9 +116,7 @@ public void atBeforeInvoke(Class<?> clazz, String invokeInfo, Object target) {\n                     final InvokeTraceable listener = (InvokeTraceable) adviceListener;\n                     listener.invokeBeforeTracing(owner, methodName, methodDesc, Integer.parseInt(info[3]));\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n-                    }\n+                    logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n                 }\n             }\n         }\n@@ -149,9 +141,7 @@ public void atAfterInvoke(Class<?> clazz, String invokeInfo, Object target) {\n                     final InvokeTraceable listener = (InvokeTraceable) adviceListener;\n                     listener.invokeAfterTracing(owner, methodName, methodDesc, Integer.parseInt(info[3]));\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n-                    }\n+                    logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n                 }\n             }\n         }\n@@ -178,9 +168,7 @@ public void atInvokeException(Class<?> clazz, String invokeInfo, Object target,\n                     final InvokeTraceable listener = (InvokeTraceable) adviceListener;\n                     listener.invokeThrowTracing(owner, methodName, methodDesc, Integer.parseInt(info[3]));\n                 } catch (Throwable e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n-                    }\n+                    logger.error(\"class: {}, invokeInfo: {}\", clazz.getName(), invokeInfo, e);\n                 }\n             }\n         }",
    "output": "SpyImpl print error log"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -2,6 +2,7 @@\n \n import com.taobao.arthas.core.view.Ansi;\n \n+import java.arthas.SpyAPI;\n import java.lang.management.*;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n@@ -339,6 +340,35 @@ public static class BlockingLockInfo {\n \n     }\n \n+    /**\n+     * </pre>\n+     * java.lang.Thread.getStackTrace(Thread.java:1559),\n+     * com.taobao.arthas.core.util.ThreadUtil.getThreadStack(ThreadUtil.java:349),\n+     * com.taobao.arthas.core.command.monitor200.StackAdviceListener.before(StackAdviceListener.java:33),\n+     * com.taobao.arthas.core.advisor.AdviceListenerAdapter.before(AdviceListenerAdapter.java:49),\n+     * com.taobao.arthas.core.advisor.SpyImpl.atEnter(SpyImpl.java:42),\n+     * java.arthas.SpyAPI.atEnter(SpyAPI.java:40),\n+     * demo.MathGame.print(MathGame.java), demo.MathGame.run(MathGame.java:25),\n+     * demo.MathGame.main(MathGame.java:16)\n+     * </pre>\n+     */\n+    private static int MAGIC_STACK_DEPTH = 0;\n+\n+    private static int findTheSpyAPIDepth(StackTraceElement[] stackTraceElementArray) {\n+        if (MAGIC_STACK_DEPTH > 0) {\n+            return MAGIC_STACK_DEPTH;\n+        }\n+        if (MAGIC_STACK_DEPTH > stackTraceElementArray.length) {\n+            return 0;\n+        }\n+        for (int i = 0; i < stackTraceElementArray.length; ++i) {\n+            if (SpyAPI.class.getName().equals(stackTraceElementArray[i].getClassName())) {\n+                MAGIC_STACK_DEPTH = i + 1;\n+                break;\n+            }\n+        }\n+        return MAGIC_STACK_DEPTH;\n+    }\n \n     /**\n      * 获取方法执行堆栈信息\n@@ -347,15 +377,16 @@ public static class BlockingLockInfo {\n      */\n     public static String getThreadStack(Thread currentThread) {\n         StackTraceElement[] stackTraceElementArray = currentThread.getStackTrace();\n+        int magicStackDepth = findTheSpyAPIDepth(stackTraceElementArray);\n \n-        StackTraceElement locationStackTraceElement = stackTraceElementArray[10];\n+        StackTraceElement locationStackTraceElement = stackTraceElementArray[magicStackDepth];\n         String locationString = String.format(\"    @%s.%s()\", locationStackTraceElement.getClassName(),\n                 locationStackTraceElement.getMethodName());\n \n         StringBuilder builder = new StringBuilder();\n         builder.append(getThreadTitle(currentThread)).append(\"\\n\").append(locationString).append(\"\\n\");\n \n-        int skip = 11;\n+        int skip = magicStackDepth + 1;\n         for (int index = skip; index < stackTraceElementArray.length; index++) {\n             StackTraceElement ste = stackTraceElementArray[index];\n             builder.append(\"        at \")",
    "output": "fix stack command output null problem. #1231"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -373,7 +373,7 @@ private void cleanUpSpyReference() {\n         SpyAPI.setNopSpy();\n         // AgentBootstrap.resetArthasClassLoader();\n         try {\n-            Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"com.taobao.arthas.agent3.AgentBootstrap\");\n+            Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"com.taobao.arthas.agent332.AgentBootstrap\");\n             Method method = clazz.getDeclaredMethod(\"resetArthasClassLoader\");\n             method.invoke(null);\n         } catch (Throwable e) {",
    "output": "change package to com.taobao.arthas.agent332. #1219"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent332/AgentBootstrap.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.agent3;\n+package com.taobao.arthas.agent332;\n \n import java.io.File;\n import java.io.FileOutputStream;",
    "output": "change package to com.taobao.arthas.agent332. #1219"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.2"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -319,6 +319,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n             return enhanceClassByteArray;\n         } catch (Throwable t) {\n             logger.warn(\"transform loader[{}]:class[{}] failed.\", inClassLoader, className, t);\n+            affect.setThrowable(t);\n         }\n \n         return null;\n@@ -426,11 +427,12 @@ public synchronized EnhancerAffect enhance(final Instrumentation inst) throws Un\n         // 过滤掉无法被增强的类\n         filter(matchingClasses);\n \n+        logger.info(\"enhance matched classes: {}\", matchingClasses);\n+\n         affect.setTransformer(this);\n \n         try {\n             ArthasBootstrap.getInstance().getTransformerManager().addTransformer(this, isTracing);\n-            //inst.addTransformer(enhancer, true);\n \n             // 批量增强\n             if (GlobalOptions.isBatchReTransform) {\n@@ -459,8 +461,9 @@ public synchronized EnhancerAffect enhance(final Instrumentation inst) throws Un\n                     }\n                 }\n             }\n-        } finally {\n-            //inst.removeTransformer(enhancer);\n+        } catch (Throwable e) {\n+            logger.error(\"Enhancer error, matchingClasses: {}\", matchingClasses, e);\n+            affect.setThrowable(e);\n         }\n \n         return affect;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -134,6 +134,12 @@ protected void enhance(CommandProcess process) {\n             process.register(listener, enhancer);\n             EnhancerAffect effect = enhancer.enhance(inst);\n \n+            if (effect.getThrowable() != null) {\n+                process.write(effect.toString() + \", check arthas log: \" + LogUtil.loggingFile() + \"\\n\");\n+                process.end(1);\n+                return;\n+            }\n+\n             if (effect.cCnt() == 0 || effect.mCnt() == 0) {\n                 // no class effected\n                 // might be method code too large\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n@@ -16,13 +16,17 @@\n  * 增强影响范围<br/>\n  * 统计影响类/方法/耗时\n  * Created by vlinux on 15/5/19.\n+ * @author hengyunabc 2020-06-01\n  */\n public final class EnhancerAffect extends Affect {\n \n     private final AtomicInteger cCnt = new AtomicInteger();\n     private final AtomicInteger mCnt = new AtomicInteger();\n     private ClassFileTransformer transformer;\n     private long listenerId;\n+\n+    private Throwable throwable;\n+\n     /**\n      * dumpClass的文件存放集合\n      */\n@@ -101,6 +105,14 @@ public void setListenerId(long listenerId) {\n         this.listenerId = listenerId;\n     }\n \n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    public void setThrowable(Throwable throwable) {\n+        this.throwable = throwable;\n+    }\n+\n     @Override\n     public String toString() {\n         final StringBuilder infoSB = new StringBuilder();\n@@ -122,6 +134,9 @@ public String toString() {\n                 mCnt(),\n                 cost(),\n                 listenerId));\n+        if (this.throwable != null) {\n+            infoSB.append(\"\\nEnhance error! exception: \" + this.throwable);\n+        }\n         return infoSB.toString();\n     }\n ",
    "output": "EnhancerAffect save exception and print the exception message #1224"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -300,6 +300,11 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);\n             }\n \n+            // https://github.com/alibaba/arthas/issues/1223\n+            if (classNode.version < Opcodes.V1_5) {\n+                classNode.version = Opcodes.V1_5;\n+            }\n+\n             byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader);\n \n             // 增强成功，记录类",
    "output": "fix spring aop generated classes major version is 46, do not support ldc class problem. #1223"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.3.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.1"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/ClassLoaderAwareClassWriter.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/ClassLoaderAwareClassWriter.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/ClassLoaderAwareClassWriter.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/ClassLoaderAwareClassWriter.java\n@@ -0,0 +1,56 @@\n+package com.taobao.arthas.bytekit.asm;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassWriter;\n+\n+/**\n+ * @author vlinux\n+ * @author hengyunabc 2020-05-29\n+ *\n+ */\n+public class ClassLoaderAwareClassWriter extends ClassWriter {\n+    private ClassLoader classLoader;\n+\n+    public ClassLoaderAwareClassWriter(int flags, ClassLoader loader) {\n+        this(null, flags, loader);\n+    }\n+\n+    public ClassLoaderAwareClassWriter(ClassReader classReader, int flags, ClassLoader loader) {\n+        super(classReader, flags);\n+        this.classLoader = loader;\n+    }\n+\n+    /*\n+     * 注意，为了自动计算帧的大小，有时必须计算两个类共同的父类。\n+     * 缺省情况下，ClassWriter将会在getCommonSuperClass方法中计算这些，通过在加载这两个类进入虚拟机时，使用反射API来计算。\n+     * 但是，如果你将要生成的几个类相互之间引用，这将会带来问题，因为引用的类可能还不存在。\n+     * 在这种情况下，你可以重写getCommonSuperClass方法来解决这个问题。\n+     *\n+     * 通过重写 getCommonSuperClass() 方法，更正获取ClassLoader的方式，改成使用指定ClassLoader的方式进行。\n+     * 规避了原有代码采用Object.class.getClassLoader()的方式\n+     */\n+    @Override\n+    protected String getCommonSuperClass(String type1, String type2) {\n+        Class<?> c, d;\n+        try {\n+            c = Class.forName(type1.replace('/', '.'), false, classLoader);\n+            d = Class.forName(type2.replace('/', '.'), false, classLoader);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        if (c.isAssignableFrom(d)) {\n+            return type1;\n+        }\n+        if (d.isAssignableFrom(c)) {\n+            return type2;\n+        }\n+        if (c.isInterface() || d.isInterface()) {\n+            return \"java/lang/Object\";\n+        } else {\n+            do {\n+                c = c.getSuperclass();\n+            } while (!c.isAssignableFrom(d));\n+            return c.getName().replace('.', '/');\n+        }\n+    }\n+}\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -30,6 +30,7 @@\n import com.alibaba.arthas.deps.org.objectweb.asm.tree.TypeInsnNode;\n import com.alibaba.arthas.deps.org.objectweb.asm.util.ASMifier;\n import com.alibaba.arthas.deps.org.objectweb.asm.util.TraceClassVisitor;\n+import com.taobao.arthas.bytekit.asm.ClassLoaderAwareClassWriter;\n \n /**\n  * \n@@ -54,6 +55,13 @@ public static ClassNode toClassNode(byte[] classBytes) {\n \t\treturn result;\n \t}\n \n+    public static byte[] toBytes(ClassNode classNode, ClassLoader classLoader) {\n+        ClassWriter writer = new ClassLoaderAwareClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS,\n+                classLoader);\n+        classNode.accept(writer);\n+        return writer.toByteArray();\n+    }\n+\n \tpublic static byte[] toBytes(ClassNode classNode) {\n \t\tClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n \t\tclassNode.accept(writer);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -300,7 +300,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);\n             }\n \n-            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode);\n+            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader);\n \n             // 增强成功，记录类\n             classBytesCache.put(classBeingRedefined, new Object());",
    "output": "add ClassLoaderAwareClassWriter to fix getCommonSuperClass ClassNotFoundException problem. #1218"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -52,7 +52,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.2.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.3.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"",
    "output": "prepare release 3.3.0"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -113,7 +113,8 @@ public void process(CommandProcess process) {\n         List<ClassDefinition> definitions = new ArrayList<ClassDefinition>();\n         for (Class<?> clazz : inst.getAllLoadedClasses()) {\n             if (bytesMap.containsKey(clazz.getName())) {\n-                if (hashCode != null && !Integer.toHexString(clazz.getClassLoader().hashCode()).equals(hashCode)) {\n+                ClassLoader classLoader = clazz.getClassLoader();\n+                if (classLoader != null && hashCode != null && !Integer.toHexString(classLoader.hashCode()).equals(hashCode)) {\n                     continue;\n                 }\n                 definitions.add(new ClassDefinition(clazz, bytesMap.get(clazz.getName())));",
    "output": "fix redefine may throw NullPointerException problem. close #1215"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -84,13 +84,6 @@ public static long select(boolean v, long telnetPortPid, String select) throws I\n \t\t\t}\n \t\t}\n \n-\t\tif (processMap.size() == 1) {\n-\t\t\tEntry<Long, String> entry = processMap.entrySet().iterator().next();\n-\t\t\tif (entry.getValue().contains(select)) {\n-\t\t\t\treturn entry.getKey();\n-\t\t\t}\n-\t\t}\n-\n         AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n         // print list\n         int count = 1;",
    "output": "polish #1212"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -169,7 +169,7 @@ public void run() {\n                 return;\n             }\n \n-            TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n+            TableElement table = new TableElement(2, 3, 3, 1, 1, 1, 1, 1).leftCellPadding(1).rightCellPadding(1);\n             table.row(true, label(\"timestamp\").style(Decoration.bold.bold()),\n                     label(\"class\").style(Decoration.bold.bold()),\n                     label(\"method\").style(Decoration.bold.bold()),",
    "output": "fix monitor output problem. #1170"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/ArthasMethod.java\n@@ -4,8 +4,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-import org.objectweb.asm.Type;\n-\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n import com.taobao.arthas.core.util.StringUtils;\n \n /**\n@@ -31,7 +30,7 @@ private void initMethod() {\n \n         try {\n             ClassLoader loader = this.clazz.getClassLoader();\n-            final org.objectweb.asm.Type asmType = org.objectweb.asm.Type.getMethodType(methodDesc);\n+            final Type asmType = Type.getMethodType(methodDesc);\n \n             // to arg types\n             final Class<?>[] argsClasses = new Class<?>[asmType.getArgumentTypes().length];\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AsmCodeLock.java b/core/src/main/java/com/taobao/arthas/core/advisor/AsmCodeLock.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AsmCodeLock.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AsmCodeLock.java\n@@ -1,118 +0,0 @@\n-package com.taobao.arthas.core.advisor;\n-\n-import org.objectweb.asm.Opcodes;\n-import org.objectweb.asm.commons.AdviceAdapter;\n-\n-/**\n- * ASM代码锁<br/>\n- * Created by vlinux on 15/5/28.\n- */\n-public class AsmCodeLock implements CodeLock, Opcodes {\n-\n-    private final AdviceAdapter aa;\n-\n-    // 锁标记\n-    private boolean isLook;\n-\n-    // 代码块开始特征数组\n-    private final int[] beginCodeArray;\n-\n-    // 代码块结束特征数组\n-    private final int[] endCodeArray;\n-\n-    // 代码匹配索引\n-    private int index = 0;\n-\n-\n-    /**\n-     * 用ASM构建代码锁\n-     *\n-     * @param aa             ASM\n-     * @param beginCodeArray 代码块开始特征数组\n-     *                       字节码流要求不能破坏执行堆栈\n-     * @param endCodeArray   代码块结束特征数组\n-     *                       字节码流要求不能破坏执行堆栈\n-     */\n-    public AsmCodeLock(AdviceAdapter aa, int[] beginCodeArray, int[] endCodeArray) {\n-        if (null == beginCodeArray\n-                || null == endCodeArray\n-                || beginCodeArray.length != endCodeArray.length) {\n-            throw new IllegalArgumentException();\n-        }\n-\n-        this.aa = aa;\n-        this.beginCodeArray = beginCodeArray;\n-        this.endCodeArray = endCodeArray;\n-\n-    }\n-\n-    @Override\n-    public void code(int code) {\n-\n-        final int[] codes = isLock() ? endCodeArray : beginCodeArray;\n-\n-        if (index >= codes.length) {\n-            reset();\n-            return;\n-        }\n-\n-        if (codes[index] != code) {\n-            reset();\n-            return;\n-        }\n-\n-        if (++index == codes.length) {\n-            // 翻转锁状态\n-            isLook = !isLook;\n-            reset();\n-        }\n-\n-    }\n-\n-    /*\n-     * 重置索引<br/>\n-     * 一般在代码序列判断失败时，则会对索引进行重置，冲头开始匹配特征序列\n-     */\n-    private void reset() {\n-        index = 0;\n-    }\n-\n-\n-    private void asm(int opcode) {\n-        aa.visitInsn(opcode);\n-    }\n-\n-    /**\n-     * 锁定序列\n-     */\n-    private void lock() {\n-        for (int op : beginCodeArray) {\n-            asm(op);\n-        }\n-    }\n-\n-    /*\n-     * 解锁序列\n-     */\n-    private void unLock() {\n-        for (int op : endCodeArray) {\n-            asm(op);\n-        }\n-    }\n-\n-    @Override\n-    public boolean isLock() {\n-        return isLook;\n-    }\n-\n-    @Override\n-    public void lock(Block block) {\n-        lock();\n-        try {\n-            block.code();\n-        } finally {\n-            unLock();\n-        }\n-    }\n-\n-}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/TracingAsmCodeLock.java b/core/src/main/java/com/taobao/arthas/core/advisor/TracingAsmCodeLock.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/TracingAsmCodeLock.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/TracingAsmCodeLock.java\n@@ -1,22 +0,0 @@\n-package com.taobao.arthas.core.advisor;\n-\n-import org.objectweb.asm.commons.AdviceAdapter;\n-\n-/**\n- * 用于Tracing的代码锁\n- * @author ralf0131 2016-12-28 16:46.\n- */\n-public class TracingAsmCodeLock extends AsmCodeLock {\n-\n-    public TracingAsmCodeLock(AdviceAdapter aa) {\n-        super(\n-                aa,\n-                new int[]{\n-                        ACONST_NULL, ICONST_0, ICONST_1, SWAP, SWAP, POP2, POP\n-                },\n-                new int[]{\n-                        ICONST_1, ACONST_NULL, ICONST_0, SWAP, SWAP, POP, POP2\n-                }\n-        );\n-    }\n-}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -10,8 +10,7 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.objectweb.asm.ClassReader;\n-\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.command.Constants;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -97,7 +97,7 @@ public void process(CommandProcess process) {\n         for (Class<?> clazz : matchedClasses) {\n             try {\n                 for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n-                    String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(constructor).toString();\n+                    String methodNameWithDescriptor = com.alibaba.arthas.deps.org.objectweb.asm.commons.Method.getMethod(constructor).toString();\n                     if (!methodNameMatcher.matching(\"<init>\")) {\n                         continue;\n                     }\n@@ -112,7 +112,7 @@ public void process(CommandProcess process) {\n                 }\n \n                 for (Method method : clazz.getDeclaredMethods()) {\n-                    String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(method).toString();\n+                    String methodNameWithDescriptor = com.alibaba.arthas.deps.org.objectweb.asm.commons.Method.getMethod(method).toString();\n                     if (!methodNameMatcher.matching(method.getName())) {\n                         continue;\n                     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java b/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/AsmRenameUtil.java\n@@ -1,11 +1,10 @@\n package com.taobao.arthas.core.command.logger;\n \n-import org.objectweb.asm.ClassReader;\n-import org.objectweb.asm.ClassVisitor;\n-import org.objectweb.asm.ClassWriter;\n-import org.objectweb.asm.commons.ClassRemapper;\n-import org.objectweb.asm.commons.Remapper;\n-import org.objectweb.asm.commons.SimpleRemapper;\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassReader;\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassVisitor;\n+import com.alibaba.arthas.deps.org.objectweb.asm.ClassWriter;\n+import com.alibaba.arthas.deps.org.objectweb.asm.commons.ClassRemapper;\n+import com.alibaba.arthas.deps.org.objectweb.asm.commons.SimpleRemapper;\n \n /**\n  * ",
    "output": "clean unnecessarily asm dep"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java\n@@ -101,7 +101,7 @@ public ChannelFuture connect(boolean reconnect) throws SSLException, URISyntaxEx\n \n         Bootstrap bs = new Bootstrap();\n \n-        bs.group(eventLoopGroup).channel(NioSocketChannel.class).remoteAddress(agentRegisterURI.getHost(), port)\n+        bs.group(eventLoopGroup).channel(NioSocketChannel.class).remoteAddress(host, port)\n                 .handler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) {",
    "output": "fix TunnelClient host may null problem. #1060"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n@@ -1,6 +1,9 @@\n package com.taobao.arthas.core.command.basic1000;\n \n-import com.taobao.arthas.core.command.model.*;\n+import com.taobao.arthas.core.command.model.ArgumentVO;\n+import com.taobao.arthas.core.command.model.CommandOptionVO;\n+import com.taobao.arthas.core.command.model.CommandVO;\n+import com.taobao.arthas.core.command.model.HelpModel;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java b/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n--- a/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java\n@@ -1,13 +1,16 @@\n package com.taobao.arthas.core.distribution;\n \n import com.alibaba.fastjson.JSON;\n-import com.taobao.arthas.core.command.model.*;\n+import com.taobao.arthas.core.command.model.ResultModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -242,14 +242,14 @@ public void bind(Configure configure) throws Throwable {\n                 tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n                 // ws://127.0.0.1:8563/ws\n                 String host = \"127.0.0.1\";\n-                if (configure.getIp() != null) {\n+                if(configure.getIp() != null) {\n                     host = configure.getIp();\n                 }\n                 URI uri = new URI(\"ws\", null, host, configure.getHttpPort(), \"/ws\", null, null);\n                 tunnelClient.setLocalServerUrl(uri.toString());\n                 ChannelFuture channelFuture = tunnelClient.start();\n                 channelFuture.await(10, TimeUnit.SECONDS);\n-                if (channelFuture.isSuccess()) {\n+                if(channelFuture.isSuccess()) {\n                     agentId = tunnelClient.getId();\n                 }\n             }\n@@ -259,9 +259,9 @@ public void bind(Configure configure) throws Throwable {\n \n         try {\n             ShellServerOptions options = new ShellServerOptions()\n-                    .setInstrumentation(instrumentation)\n-                    .setPid(PidUtils.currentLongPid())\n-                    .setSessionTimeout(configure.getSessionTimeout() * 1000);\n+                            .setInstrumentation(instrumentation)\n+                            .setPid(PidUtils.currentLongPid())\n+                            .setSessionTimeout(configure.getSessionTimeout() * 1000);\n \n             if (agentId != null) {\n                 Map<String, String> welcomeInfos = new HashMap<String, String>();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n@@ -19,11 +19,19 @@\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.TokenUtils;\n+\n import io.termd.core.function.Function;\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n@@ -224,5 +232,4 @@ private void injectHandler(List<Function<String, String>> stdoutHandlerChain, Li\n     public void close() {\n         close(null);\n     }\n-\n }",
    "output": "correct java imports"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/SessionManager.java b/core/src/main/java/com/taobao/arthas/core/shell/session/SessionManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/SessionManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/SessionManager.java\n@@ -1,7 +1,7 @@\n package com.taobao.arthas.core.shell.session;\n \n+import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.system.impl.InternalCommandManager;\n-import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n \n import java.lang.instrument.Instrumentation;\n \n@@ -25,5 +25,5 @@ public interface SessionManager {\n \n     Instrumentation getInstrumentation();\n \n-    JobControllerImpl getJobController();\n+    JobController getJobController();\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/session/impl/SessionManagerImpl.java\n@@ -11,8 +11,8 @@\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.session.SessionManager;\n import com.taobao.arthas.core.shell.system.Job;\n+import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.system.impl.InternalCommandManager;\n-import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n \n import java.lang.instrument.Instrumentation;\n import java.util.*;\n@@ -28,7 +28,7 @@ public class SessionManagerImpl implements SessionManager {\n     private final ArthasBootstrap bootstrap;\n     private final InternalCommandManager commandManager;\n     private final Instrumentation instrumentation;\n-    private final JobControllerImpl jobController;\n+    private final JobController jobController;\n     private final long timeoutMillis;\n     private final long reaperInterval;\n     private final Map<String, Session> sessions;\n@@ -37,7 +37,7 @@ public class SessionManagerImpl implements SessionManager {\n     private ScheduledExecutorService scheduledExecutorService;\n \n     public SessionManagerImpl(ShellServerOptions options, ArthasBootstrap bootstrap, InternalCommandManager commandManager,\n-                              JobControllerImpl jobController) {\n+                              JobController jobController) {\n         this.bootstrap = bootstrap;\n         this.commandManager = commandManager;\n         this.jobController = jobController;\n@@ -187,7 +187,7 @@ public Instrumentation getInstrumentation() {\n     }\n \n     @Override\n-    public JobControllerImpl getJobController() {\n+    public JobController getJobController() {\n         return jobController;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java\n@@ -20,9 +20,9 @@\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.session.SessionManager;\n import com.taobao.arthas.core.shell.system.Job;\n+import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.system.JobListener;\n import com.taobao.arthas.core.shell.system.impl.InternalCommandManager;\n-import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n import com.taobao.arthas.core.shell.term.SignalHandler;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.ArthasBanner;\n@@ -58,7 +58,7 @@ public class HttpApiHandler {\n     private final AtomicInteger requestIdGenerator = new AtomicInteger(0);\n     private static HttpApiHandler instance;\n     private final InternalCommandManager commandManager;\n-    private final JobControllerImpl jobController;\n+    private final JobController jobController;\n     private final HistoryManager historyManager;\n \n     private int jsonBufferSize = 1024 * 256;",
    "output": "Replace JobControllerImpl with interface JobController"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -4,8 +4,11 @@\n import java.util.List;\n \n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.command.model.HistoryModel;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.shell.history.HistoryManager;\n+import com.taobao.arthas.core.shell.history.impl.HistoryManagerImpl;\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.term.impl.TermImpl;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -69,6 +72,14 @@ public void process(CommandProcess process) {\n \n                 process.write(sb.toString());\n             }\n+        } else {\n+            if (clear) {\n+                HistoryManagerImpl.getInstance().clearHistory();\n+            } else {\n+                //http api\n+                List<String> history = HistoryManagerImpl.getInstance().getHistory();\n+                process.appendResult(new HistoryModel(new ArrayList<String>(history)));\n+            }\n         }\n \n         process.end();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/HistoryModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/HistoryModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/HistoryModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/HistoryModel.java\n@@ -0,0 +1,27 @@\n+package com.taobao.arthas.core.command.model;\n+\n+import java.util.List;\n+\n+/**\n+ * @author gongdewei 2020/4/8\n+ */\n+public class HistoryModel extends ResultModel {\n+\n+    private List<String> history;\n+\n+    public HistoryModel() {\n+    }\n+\n+    public HistoryModel(List<String> history) {\n+        this.history = history;\n+    }\n+\n+    public List<String> getHistory() {\n+        return history;\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"history\";\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/history/HistoryManager.java b/core/src/main/java/com/taobao/arthas/core/shell/history/HistoryManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/history/HistoryManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/history/HistoryManager.java\n@@ -0,0 +1,21 @@\n+package com.taobao.arthas.core.shell.history;\n+\n+import java.util.List;\n+\n+/**\n+ * @author gongdewei 2020/4/8\n+ */\n+public interface HistoryManager {\n+\n+    void addHistory(String commandLine);\n+\n+    List<String> getHistory();\n+\n+    void setHistory(List<String> history);\n+\n+    void saveHistory();\n+\n+    void loadHistory();\n+\n+    void clearHistory();\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/history/impl/HistoryManagerImpl.java\n@@ -0,0 +1,70 @@\n+package com.taobao.arthas.core.shell.history.impl;\n+\n+import com.taobao.arthas.core.shell.history.HistoryManager;\n+import com.taobao.arthas.core.util.Constants;\n+import com.taobao.arthas.core.util.FileUtils;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author gongdewei 2020/4/8\n+ */\n+public class HistoryManagerImpl implements HistoryManager {\n+    /**\n+     * The max number of history item that will be saved in memory.\n+     */\n+    private static final int MAX_HISTORY_SIZE = 500;\n+\n+    private List<String> history = new ArrayList<String>();\n+\n+    private static HistoryManager instance;\n+\n+    public static HistoryManager getInstance() {\n+        if (instance == null) {\n+            synchronized (HistoryManagerImpl.class) {\n+                instance = new HistoryManagerImpl();\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    private HistoryManagerImpl() {\n+    }\n+\n+    @Override\n+    public void saveHistory() {\n+        FileUtils.saveCommandHistoryString(history, new File(Constants.CMD_HISTORY_FILE));\n+    }\n+\n+    @Override\n+    public void loadHistory() {\n+        history = FileUtils.loadCommandHistoryString(new File(Constants.CMD_HISTORY_FILE));\n+    }\n+\n+    @Override\n+    public void clearHistory() {\n+        this.history.clear();\n+    }\n+\n+    @Override\n+    public void addHistory(String commandLine) {\n+        while (history.size() >= MAX_HISTORY_SIZE) {\n+            history.remove(0);\n+        }\n+        history.add(commandLine);\n+    }\n+\n+    @Override\n+    public List<String> getHistory() {\n+        return history;\n+    }\n+\n+    @Override\n+    public void setHistory(List<String> history) {\n+        this.history = history;\n+    }\n+\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -148,6 +148,55 @@ public static List<int[]> loadCommandHistory(File file) {\n         return history;\n     }\n \n+    /**\n+     * save the command history to the given file, data will be overridden.\n+     * @param history the command history\n+     * @param file the file to save the history\n+     */\n+    public static void saveCommandHistoryString(List<String> history, File file) {\n+        OutputStream out = null;\n+        try {\n+            out = new BufferedOutputStream(openOutputStream(file, false));\n+            for (String command: history) {\n+                out.write(command.getBytes(\"utf-8\"));\n+                out.write('\\n');\n+            }\n+        } catch (IOException e) {\n+            // ignore\n+        } finally {\n+            try {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            } catch (IOException ioe) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n+    public static List<String> loadCommandHistoryString(File file) {\n+        BufferedReader br = null;\n+        List<String> history = new ArrayList<String>();\n+        try {\n+            br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                history.add(line);\n+            }\n+        } catch (IOException e) {\n+            // ignore\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ioe) {\n+                // ignore\n+            }\n+        }\n+        return history;\n+    }\n+\n     public static String readFileToString(File file, Charset encoding) throws IOException {\n         FileInputStream stream = new FileInputStream(file);\n         try {",
    "output": "transform command: history"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n@@ -1,6 +1,8 @@\n package com.taobao.arthas.core.command.basic1000;\n \n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.command.model.EchoModel;\n+import com.taobao.arthas.core.command.model.MessageModel;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -30,8 +32,7 @@ public void setMessage(String message) {\n     @Override\n     public void process(CommandProcess process) {\n         if (message != null) {\n-            process.write(message);\n-            process.write(\"\\n\");\n+            process.appendResult(new EchoModel(message));\n         }\n \n         process.end();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VersionCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VersionCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VersionCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VersionCommand.java\n@@ -1,6 +1,7 @@\n package com.taobao.arthas.core.command.basic1000;\n \n \n+import com.taobao.arthas.core.command.model.VersionModel;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ArthasBanner;\n@@ -15,8 +16,13 @@\n @Name(\"version\")\n @Summary(\"Display Arthas version\")\n public class VersionCommand extends AnnotatedCommand {\n+\n     @Override\n     public void process(CommandProcess process) {\n-        process.write(ArthasBanner.version()).write(\"\\n\").end();\n+        VersionModel result = new VersionModel();\n+        result.setVersion(ArthasBanner.version());\n+        process.appendResult(result);\n+        process.end();\n     }\n+\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/EchoModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/EchoModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/EchoModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/EchoModel.java\n@@ -0,0 +1,29 @@\n+package com.taobao.arthas.core.command.model;\n+\n+/**\n+ * @author gongdewei 2020/5/11\n+ */\n+public class EchoModel extends ResultModel {\n+\n+    private String content;\n+\n+    public EchoModel() {\n+    }\n+\n+    public EchoModel(String content) {\n+        this.content = content;\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"echo\";\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(String content) {\n+        this.content = content;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/model/VersionModel.java b/core/src/main/java/com/taobao/arthas/core/command/model/VersionModel.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/model/VersionModel.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/model/VersionModel.java\n@@ -0,0 +1,20 @@\n+package com.taobao.arthas.core.command.model;\n+\n+public class VersionModel extends ResultModel {\n+\n+    private String version;\n+\n+    @Override\n+    public String getType() {\n+        return \"version\";\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/EchoView.java b/core/src/main/java/com/taobao/arthas/core/command/view/EchoView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/EchoView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/EchoView.java\n@@ -0,0 +1,14 @@\n+package com.taobao.arthas.core.command.view;\n+\n+import com.taobao.arthas.core.command.model.EchoModel;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+\n+/**\n+ * @author gongdewei 2020/5/11\n+ */\n+public class EchoView extends ResultView<EchoModel> {\n+    @Override\n+    public void draw(CommandProcess process, EchoModel result) {\n+        process.write(result.getContent()).write(\"\\n\");\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/view/VersionView.java b/core/src/main/java/com/taobao/arthas/core/command/view/VersionView.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/view/VersionView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/view/VersionView.java\n@@ -0,0 +1,16 @@\n+package com.taobao.arthas.core.command.view;\n+\n+import com.taobao.arthas.core.command.model.VersionModel;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+\n+/**\n+ * @author gongdewei 2020/3/27\n+ */\n+public class VersionView extends ResultView<VersionModel> {\n+\n+    @Override\n+    public void draw(CommandProcess process, VersionModel result) {\n+        writeln(process, result.getVersion());\n+    }\n+\n+}",
    "output": "transform command: echo, version"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n@@ -1,9 +1,11 @@\n package com.taobao.arthas.core.command.basic1000;\n \n import com.taobao.arthas.core.advisor.Enhancer;\n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.ShellServer;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.shell.session.SessionManager;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n import com.taobao.middleware.cli.annotations.Hidden;\n@@ -39,8 +41,15 @@ public static void shutdown(CommandProcess process) {\n             // ignore\n         } finally {\n             process.end();\n-            ShellServer server = process.session().getServer();\n-            server.close();\n+            ShellServer server = ArthasBootstrap.getInstance().getShellServer();\n+            if (server != null) {\n+                server.close();\n+            }\n+\n+            SessionManager sessionManager = ArthasBootstrap.getInstance().getSessionManager();\n+            if (sessionManager != null){\n+                sessionManager.close();\n+            }\n         }\n     }\n }",
    "output": "close ShellServer and SessionManager when shutdown"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -10,11 +10,13 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.common.OSUtils;\n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.cli.CliToken;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n@@ -91,6 +93,11 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private boolean alluser;\n \n+    /**\n+     * run profiling for <duration> seconds\n+     */\n+    private Long duration;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -180,6 +187,12 @@ public void setAlluser(boolean alluser) {\n         this.alluser = alluser;\n     }\n \n+    @Option(shortName = \"d\", longName = \"duration\")\n+    @Description(\"run profiling for <duration> seconds\")\n+    public void setDuration(long duration) {\n+        this.duration = duration;\n+    }\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n@@ -256,7 +269,7 @@ private static String execute(AsyncProfiler asyncProfiler, String arg)\n     }\n \n     @Override\n-    public void process(CommandProcess process) {\n+    public void process(final CommandProcess process) {\n         int status = 0;\n         try {\n             ProfilerAction profilerAction = ProfilerAction.valueOf(action);\n@@ -266,7 +279,7 @@ public void process(CommandProcess process) {\n                 return;\n             }\n \n-            AsyncProfiler asyncProfiler = this.profilerInstance();\n+            final AsyncProfiler asyncProfiler = this.profilerInstance();\n \n             if (ProfilerAction.execute.equals(profilerAction)) {\n                 if (actionArg == null) {\n@@ -280,13 +293,28 @@ public void process(CommandProcess process) {\n                 String executeArgs = executeArgs(ProfilerAction.start);\n                 String result = execute(asyncProfiler, executeArgs);\n                 process.write(result);\n-            } else if (ProfilerAction.stop.equals(profilerAction)) {\n-                if (this.file == null) {\n-                    this.file = new File(\"arthas-output\",\n-                            new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + this.format)\n-                                    .getAbsolutePath();\n+\n+                if (this.duration != null) {\n+                    final String outputFile = outputFile();\n+                    final String stopExecuteArgs = executeArgs(ProfilerAction.stop);\n+                    process.write(String.format(\"profiler will silent stop after %d seconds.\\n\", this.duration.longValue()));\n+                    process.write(\"profiler output file will be: \" + new File(outputFile).getAbsolutePath() + \"\\n\");\n+                    ArthasBootstrap.getInstance().getScheduledExecutorService().schedule(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                logger.info(\"profiler output file: \" + new File(outputFile).getAbsolutePath() + \"\\n\");\n+                                String result = execute(asyncProfiler, stopExecuteArgs);\n+                                logger.info(\"profiler stop result: \" + result);\n+                            } catch (Throwable e) {\n+                                logger.error(\"\", e);\n+                            }\n+                        }\n+                    }, this.duration, TimeUnit.SECONDS);\n                 }\n-                process.write(\"profiler output file: \" + new File(this.file).getAbsolutePath() + \"\\n\");\n+            } else if (ProfilerAction.stop.equals(profilerAction)) {\n+                String outputFile = outputFile();\n+                process.write(\"profiler output file: \" + new File(outputFile).getAbsolutePath() + \"\\n\");\n                 String executeArgs = executeArgs(ProfilerAction.stop);\n                 String result = execute(asyncProfiler, executeArgs);\n                 process.write(result);\n@@ -342,6 +370,14 @@ public void process(CommandProcess process) {\n         }\n     }\n \n+    private String outputFile() {\n+        if (this.file == null) {\n+            this.file = new File(\"arthas-output\",\n+                    new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(new Date()) + \".\" + this.format).getAbsolutePath();\n+        }\n+        return file;\n+    }\n+\n     private List<String> events() {\n         List<String> result = new ArrayList<String>();\n ",
    "output": "profiler command support duration option. close #1197"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n@@ -11,6 +11,7 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInitializer;\n import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.channel.nio.NioEventLoopGroup;\n@@ -34,6 +35,7 @@ public class ForwardClientSocketClientHandler extends SimpleChannelInboundHandle\n \n     private static final Logger logger = LoggerFactory.getLogger(ForwardClientSocketClientHandler.class);\n \n+    private ChannelPromise handshakeFuture;\n     private final URI localServerURI;\n \n     public ForwardClientSocketClientHandler(URI localServerURI) {\n@@ -83,8 +85,8 @@ protected void initChannel(SocketChannel ch) {\n                 });\n \n         Channel localChannel = b.connect(localServerURI.getHost(), localServerURI.getPort()).sync().channel();\n-        localFrameHandler.handshakeFuture()\n-                .addListener(new GenericFutureListener<ChannelFuture>() {\n+        this.handshakeFuture = localFrameHandler.handshakeFuture();\n+        handshakeFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) throws Exception {\n                         ChannelPipeline pipeline = future.channel().pipeline();\n@@ -93,7 +95,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                     }\n                 });\n \n-        localFrameHandler.handshakeFuture().sync();\n+        handshakeFuture.sync();\n         ctx.pipeline().remove(ForwardClientSocketClientHandler.this);\n         ctx.pipeline().addLast(new RelayHandler(localChannel));\n         logger.info(\"ForwardClientSocketClientHandler connect local arthas server success\");\n@@ -105,7 +107,10 @@ protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame msg) {\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n-        cause.printStackTrace();\n+        logger.error(\"ForwardClientSocketClient channel: {}\" , ctx.channel(), cause);\n+        if (!handshakeFuture.isDone()) {\n+            handshakeFuture.setFailure(cause);\n+        }\n         ctx.close();\n     }\n }",
    "output": "polish #1150"
  },
  {
    "input": "diff --git a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n--- a/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n+++ b/tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/ForwardClientSocketClientHandler.java\n@@ -1,4 +1,3 @@\n-\n package com.alibaba.arthas.tunnel.client;\n \n import java.net.URI;\n@@ -12,7 +11,6 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInitializer;\n import io.netty.channel.ChannelPipeline;\n-import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.channel.nio.NioEventLoopGroup;\n@@ -30,26 +28,20 @@\n import io.netty.util.concurrent.GenericFutureListener;\n \n /**\n- * \n  * @author hengyunabc 2019-08-28\n- *\n  */\n public class ForwardClientSocketClientHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n-    private final static Logger logger = LoggerFactory.getLogger(ForwardClientSocketClientHandler.class);\n-\n-    private ChannelPromise handshakeFuture;\n \n-    private Channel localChannel;\n+    private static final Logger logger = LoggerFactory.getLogger(ForwardClientSocketClientHandler.class);\n \n-    private URI localServerURI;\n+    private final URI localServerURI;\n \n     public ForwardClientSocketClientHandler(URI localServerURI) {\n         this.localServerURI = localServerURI;\n     }\n \n     @Override\n     public void channelActive(ChannelHandlerContext ctx) {\n-\n     }\n \n     @Override\n@@ -58,26 +50,30 @@ public void channelInactive(ChannelHandlerContext ctx) {\n     }\n \n     @Override\n-    public void userEventTriggered(final ChannelHandlerContext ctx, Object evt) throws Exception {\n-\n+    public void userEventTriggered(final ChannelHandlerContext ctx, Object evt) {\n         if (evt.equals(ClientHandshakeStateEvent.HANDSHAKE_COMPLETE)) {\n-\n-            EventLoopGroup group = new NioEventLoopGroup();\n-\n             try {\n+                connectLocalServer(ctx);\n+            } catch (Throwable e) {\n+                logger.error(\"ForwardClientSocketClientHandler connect local arthas server error\", e);\n+            }\n+        } else {\n+            ctx.fireUserEventTriggered(evt);\n+        }\n+    }\n \n-                logger.info(\"ForwardClientSocketClientHandler star connect local arthas server\");\n-\n-                WebSocketClientHandshaker newHandshaker = WebSocketClientHandshakerFactory.newHandshaker(localServerURI,\n-                        WebSocketVersion.V13, null, true, new DefaultHttpHeaders());\n-\n-                final WebSocketClientProtocolHandler websocketClientHandler = new WebSocketClientProtocolHandler(\n-                        newHandshaker);\n-\n-                final LocalFrameHandler localFrameHandler = new LocalFrameHandler();\n-\n-                Bootstrap b = new Bootstrap();\n-                b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>() {\n+    private void connectLocalServer(final ChannelHandlerContext ctx) throws InterruptedException {\n+        EventLoopGroup group = new NioEventLoopGroup();\n+        logger.info(\"ForwardClientSocketClientHandler star connect local arthas server\");\n+        WebSocketClientHandshaker newHandshaker = WebSocketClientHandshakerFactory.newHandshaker(localServerURI,\n+                WebSocketVersion.V13, null, true, new DefaultHttpHeaders());\n+        final WebSocketClientProtocolHandler websocketClientHandler = new WebSocketClientProtocolHandler(\n+                newHandshaker);\n+        final LocalFrameHandler localFrameHandler = new LocalFrameHandler();\n+\n+        Bootstrap b = new Bootstrap();\n+        b.group(group).channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) {\n                         ChannelPipeline p = ch.pipeline();\n@@ -86,45 +82,30 @@ protected void initChannel(SocketChannel ch) {\n                     }\n                 });\n \n-                localChannel = b.connect(localServerURI.getHost(), localServerURI.getPort()).sync().channel();\n-\n-                localFrameHandler.handshakeFuture().addListener(new GenericFutureListener<ChannelFuture>() {\n+        Channel localChannel = b.connect(localServerURI.getHost(), localServerURI.getPort()).sync().channel();\n+        localFrameHandler.handshakeFuture()\n+                .addListener(new GenericFutureListener<ChannelFuture>() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) throws Exception {\n                         ChannelPipeline pipeline = future.channel().pipeline();\n                         pipeline.remove(localFrameHandler);\n                         pipeline.addLast(new RelayHandler(ctx.channel()));\n-\n                     }\n                 });\n \n-                localFrameHandler.handshakeFuture().sync();\n-\n-                ctx.pipeline().remove(ForwardClientSocketClientHandler.this);\n-\n-                ctx.pipeline().addLast(new RelayHandler(localChannel));\n-\n-                logger.info(\"ForwardClientSocketClientHandler connect local arthas server success\");\n-            } catch (Throwable e) {\n-                logger.error(\"ForwardClientSocketClientHandler connect local arthas server error\", e);\n-            }\n-\n-        } else {\n-            ctx.fireUserEventTriggered(evt);\n-        }\n+        localFrameHandler.handshakeFuture().sync();\n+        ctx.pipeline().remove(ForwardClientSocketClientHandler.this);\n+        ctx.pipeline().addLast(new RelayHandler(localChannel));\n+        logger.info(\"ForwardClientSocketClientHandler connect local arthas server success\");\n     }\n \n     @Override\n-    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame msg) throws Exception {\n-\n+    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame msg) {\n     }\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n         cause.printStackTrace();\n-        if (!handshakeFuture.isDone()) {\n-            handshakeFuture.setFailure(cause);\n-        }\n         ctx.close();\n     }\n }",
    "output": "Avoid NPE in ForwardClientSocketClientHandler & code refactor (#1150)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -49,6 +49,7 @@\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar --use-version 3.2.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n+                + \"  java -jar arthas-boot.jar --select arthas-demo\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"\n                 + \"  https://alibaba.github.io/arthas\\n\")\n@@ -114,7 +115,9 @@ public class Bootstrap {\n \n     private String statUrl;\n \n-    static {\n+    private String select;\n+\n+\tstatic {\n         ARTHAS_LIB_DIR = new File(\n                 System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n         try {\n@@ -256,6 +259,12 @@ public void setStatUrl(String statUrl) {\n         this.statUrl = statUrl;\n     }\n \n+    @Option(longName = \"select\")\n+    @Description(\"select target process by classname or JARfilename\")\n+    public void setSelect(String select) {\n+        this.select = select;\n+    }\n+\n     public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException,\n                     ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException,\n                     IllegalArgumentException, InvocationTargetException {\n@@ -333,7 +342,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         // select pid\n         if (pid < 0) {\n             try {\n-                pid = ProcessUtils.select(bootstrap.isVerbose(), telnetPortPid);\n+                pid = ProcessUtils.select(bootstrap.isVerbose(), telnetPortPid, bootstrap.getSelect());\n             } catch (InputMismatchException e) {\n                 System.out.println(\"Please input an integer to select pid.\");\n                 System.exit(1);\n@@ -690,4 +699,8 @@ public String getAgentId() {\n     public String getStatUrl() {\n         return statUrl;\n     }\n+\n+    public String getSelect() {\n+\t\treturn select;\n+\t}\n }\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -10,6 +10,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Scanner;\n import java.util.InputMismatchException;\n \n@@ -28,7 +29,7 @@ public class ProcessUtils {\n     private static String FOUND_JAVA_HOME = null;\n \n     @SuppressWarnings(\"resource\")\n-    public static long select(boolean v, long telnetPortPid) throws InputMismatchException {\n+    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n         Map<Long, String> processMap = listProcessByJps(v);\n         // Put the port that is already listening at the first\n         if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n@@ -45,6 +46,28 @@ public static long select(boolean v, long telnetPortPid) throws InputMismatchExc\n             return -1;\n         }\n \n+\t\t// select target process by the '--select' option when match only one process\n+\t\tif (select != null && !select.trim().isEmpty()) {\n+\t\t\tint matchedSelectCount = 0;\n+\t\t\tLong matchedPid = null;\n+\t\t\tfor (Entry<Long, String> entry : processMap.entrySet()) {\n+\t\t\t\tif (entry.getValue().contains(select)) {\n+\t\t\t\t\tmatchedSelectCount++;\n+\t\t\t\t\tmatchedPid = entry.getKey();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (matchedSelectCount == 1) {\n+\t\t\t\treturn matchedPid;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (processMap.size() == 1) {\n+\t\t\tEntry<Long, String> entry = processMap.entrySet().iterator().next();\n+\t\t\tif (entry.getValue().contains(select)) {\n+\t\t\t\treturn entry.getKey();\n+\t\t\t}\n+\t\t}\n+\n         AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n         // print list\n         int count = 1;",
    "output": "add select option for as.sh/arthas-boot to select target process by classname or JARfilename. #1212"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -503,7 +503,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein\n     }\n \n     // 批量增强\n-    public static void enhance(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes)\n+    private static void enhance(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes)\n             throws UnmodifiableClassException {\n         try {\n             inst.addTransformer(transformer, true);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -2,12 +2,12 @@\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n-import com.taobao.arthas.core.advisor.Enhancer;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.TypeRenderUtils;\n@@ -81,7 +81,7 @@ public void setDirectory(String directory) {\n \n     @Option(shortName = \"l\", longName = \"limit\")\n     @Description(\"The limit of dump classes size, default value is 5\")\n-    @DefaultValue(\"5\")\n+    @DefaultValue(\"50\")\n     public void setLimit(int limit) {\n         this.limit = limit;\n     }\n@@ -174,7 +174,7 @@ private Map<Class<?>, File> dump(Instrumentation inst, Set<Class<?>> classes) th\n         } else {\n             transformer = new ClassDumpTransformer(classes);\n         }\n-        Enhancer.enhance(inst, transformer, classes);\n+        InstrumentationUtils.retransformClasses(inst, transformer, classes);\n         return transformer.getDumpResult();\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -9,6 +9,7 @@\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.Decompiler;\n+import com.taobao.arthas.core.util.InstrumentationUtils;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.TypeRenderUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n@@ -26,7 +27,6 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.io.File;\n-import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.Instrumentation;\n import java.util.HashSet;\n import java.util.Map;\n@@ -127,35 +127,14 @@ public void process(CommandProcess process) {\n         }\n     }\n \n-\n-    public static void retransformClasses(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes) {\n-        try {\n-            inst.addTransformer(transformer, true);\n-\n-            for(Class<?> clazz : classes) {\n-                try{\n-                    inst.retransformClasses(clazz);\n-                }catch(Throwable e) {\n-                    String errorMsg = \"retransformClasses class error, name: \" + clazz.getName();\n-                    if(ClassUtils.isLambdaClass(clazz) && e instanceof VerifyError) {\n-                        errorMsg += \", Please ignore lambda class VerifyError: https://github.com/alibaba/arthas/issues/675\";\n-                    }\n-                    logger.error(errorMsg, e);\n-                }\n-            }\n-        } finally {\n-            inst.removeTransformer(transformer);\n-        }\n-    }\n-\n     private void processExactMatch(CommandProcess process, RowAffect affect, Instrumentation inst, Set<Class<?>> matchedClasses, Set<Class<?>> withInnerClasses) {\n         Class<?> c = matchedClasses.iterator().next();\n         Set<Class<?>> allClasses = new HashSet<Class<?>>(withInnerClasses);\n         allClasses.add(c);\n \n         try {\n             ClassDumpTransformer transformer = new ClassDumpTransformer(allClasses);\n-            retransformClasses(inst, transformer, allClasses);\n+            InstrumentationUtils.retransformClasses(inst, transformer, allClasses);\n \n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/InstrumentationUtils.java\n@@ -0,0 +1,38 @@\n+package com.taobao.arthas.core.util;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.util.Set;\n+\n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-05-25\n+ *\n+ */\n+public class InstrumentationUtils {\n+    private static final Logger logger = LoggerFactory.getLogger(InstrumentationUtils.class);\n+\n+    public static void retransformClasses(Instrumentation inst, ClassFileTransformer transformer,\n+            Set<Class<?>> classes) {\n+        try {\n+            inst.addTransformer(transformer, true);\n+\n+            for (Class<?> clazz : classes) {\n+                try {\n+                    inst.retransformClasses(clazz);\n+                } catch (Throwable e) {\n+                    String errorMsg = \"retransformClasses class error, name: \" + clazz.getName();\n+                    if (ClassUtils.isLambdaClass(clazz) && e instanceof VerifyError) {\n+                        errorMsg += \", Please ignore lambda class VerifyError: https://github.com/alibaba/arthas/issues/675\";\n+                    }\n+                    logger.error(errorMsg, e);\n+                }\n+            }\n+        } finally {\n+            inst.removeTransformer(transformer);\n+        }\n+    }\n+}",
    "output": "fix dump empty result when retransformClasses error #1210"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -108,10 +108,18 @@ public JobTimeoutTask(Job job) {\n \n         @Override\n         public void run() {\n-            if (job != null) {\n-                Job temp = job;\n-                job = null;\n-                temp.terminate();\n+            try {\n+                if (job != null) {\n+                    Job temp = job;\n+                    job = null;\n+                    temp.terminate();\n+                }\n+            } catch (Throwable e) {\n+                try {\n+                    logger.error(\"JobTimeoutTask error, job id: {}, line: {}\", job.id(), job.line(), e);\n+                } catch (Throwable t) {\n+                    // ignore\n+                }\n             }\n         }\n ",
    "output": "polish 6322374d81d9e1374c65f5594cf784c37a459fe9"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -197,7 +197,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n \n             // 这里要再次过滤一次，为啥？因为在transform的过程中，有可能还会再诞生新的类\n             // 所以需要将之前需要转换的类集合传递下来，再次进行判断\n-            if (!matchingClasses.contains(classBeingRedefined)) {\n+            if (matchingClasses != null && !matchingClasses.contains(classBeingRedefined)) {\n                 return null;\n             }\n \n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/advisor/EnhancerTest.java\n@@ -41,14 +41,10 @@ public void test() throws Throwable {\n \n         AdviceListener listener = Mockito.mock(AdviceListener.class);\n \n-        EnhancerAffect affect = new EnhancerAffect();\n+        EqualsMatcher<String> methodNameMatcher = new EqualsMatcher<String>(\"print\");\n+        EqualsMatcher<String> classNameMatcher = new EqualsMatcher<String>(MathGame.class.getName());\n \n-        Set<Class<?>> matchingClasses = new HashSet<Class<?>>();\n-        matchingClasses.add(MathGame.class);\n-\n-        EqualsMatcher<String> matcher = new EqualsMatcher<String>(\"print\");\n-\n-        Enhancer enhancer = new Enhancer(listener, true, false, matchingClasses, matcher, affect);\n+        Enhancer enhancer = new Enhancer(listener, true, false, classNameMatcher, methodNameMatcher);\n \n         ClassLoader inClassLoader = MathGame.class.getClassLoader();\n         String className = MathGame.class.getName();",
    "output": "fix testcase. #1184"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -66,9 +66,10 @@ public class Enhancer implements ClassFileTransformer {\n     private final AdviceListener listener;\n     private final boolean isTracing;\n     private final boolean skipJDKTrace;\n-    private final Set<Class<?>> matchingClasses;\n+    private final Matcher classNameMatcher;\n     private final Matcher methodNameMatcher;\n     private final EnhancerAffect affect;\n+    private Set<Class<?>> matchingClasses = null;\n \n     // 被增强的类的缓存\n     private final static Map<Class<?>/* Class */, Object> classBytesCache = new WeakHashMap<Class<?>, Object>();\n@@ -86,14 +87,14 @@ public class Enhancer implements ClassFileTransformer {\n      * @param methodNameMatcher 方法名匹配\n      * @param affect            影响统计\n      */\n-    Enhancer(AdviceListener listener, boolean isTracing, boolean skipJDKTrace, Set<Class<?>> matchingClasses,\n-            Matcher methodNameMatcher, EnhancerAffect affect) {\n+    public Enhancer(AdviceListener listener, boolean isTracing, boolean skipJDKTrace, Matcher classNameMatcher,\n+            Matcher methodNameMatcher) {\n         this.listener = listener;\n         this.isTracing = isTracing;\n         this.skipJDKTrace = skipJDKTrace;\n-        this.matchingClasses = matchingClasses;\n+        this.classNameMatcher = classNameMatcher;\n         this.methodNameMatcher = methodNameMatcher;\n-        this.affect = affect;\n+        this.affect = new EnhancerAffect();;\n     }\n \n     public static class SpyInterceptor {\n@@ -352,6 +353,9 @@ private static void dumpClassIfNecessary(String className, byte[] data, Enhancer\n         try {\n             FileUtils.writeByteArrayToFile(dumpClassFile, data);\n             affect.addClassDumpFile(dumpClassFile);\n+            if (GlobalOptions.verbose) {\n+                logger.info(\"dump enhanced class: {}, path: {}\", className, dumpClassFile);\n+            }\n         } catch (IOException e) {\n             logger.warn(\"dump class:{} to file {} failed.\", className, dumpClassFile, e);\n         }\n@@ -407,41 +411,33 @@ private static boolean isUnsupportedClass(Class<?> clazz) {\n      * @return 增强影响范围\n      * @throws UnmodifiableClassException 增强失败\n      */\n-    public static synchronized EnhancerAffect enhance(final Instrumentation inst, final AdviceListener listener,\n-            final boolean isTracing, final boolean skipJDKTrace, final Matcher classNameMatcher,\n-            final Matcher methodNameMatcher) throws UnmodifiableClassException {\n-\n-        final EnhancerAffect affect = new EnhancerAffect();\n-\n+    public synchronized EnhancerAffect enhance(final Instrumentation inst) throws UnmodifiableClassException {\n         // 获取需要增强的类集合\n-        final Set<Class<?>> enhanceClassSet = GlobalOptions.isDisableSubClass\n+        this.matchingClasses = GlobalOptions.isDisableSubClass\n                 ? SearchUtils.searchClass(inst, classNameMatcher)\n                 : SearchUtils.searchSubClass(inst, SearchUtils.searchClass(inst, classNameMatcher));\n \n         // 过滤掉无法被增强的类\n-        filter(enhanceClassSet);\n+        filter(matchingClasses);\n \n-        // 构建增强器\n-        final Enhancer enhancer = new Enhancer(listener, isTracing, skipJDKTrace, enhanceClassSet, methodNameMatcher,\n-                affect);\n-        affect.setTransformer(enhancer);\n+        affect.setTransformer(this);\n \n         try {\n-            ArthasBootstrap.getInstance().getTransformerManager().addTransformer(enhancer, isTracing);\n+            ArthasBootstrap.getInstance().getTransformerManager().addTransformer(this, isTracing);\n             //inst.addTransformer(enhancer, true);\n \n             // 批量增强\n             if (GlobalOptions.isBatchReTransform) {\n-                final int size = enhanceClassSet.size();\n+                final int size = matchingClasses.size();\n                 final Class<?>[] classArray = new Class<?>[size];\n-                arraycopy(enhanceClassSet.toArray(), 0, classArray, 0, size);\n+                arraycopy(matchingClasses.toArray(), 0, classArray, 0, size);\n                 if (classArray.length > 0) {\n                     inst.retransformClasses(classArray);\n                     logger.info(\"Success to batch transform classes: \" + Arrays.toString(classArray));\n                 }\n             } else {\n                 // for each 增强\n-                for (Class<?> clazz : enhanceClassSet) {\n+                for (Class<?> clazz : matchingClasses) {\n                     try {\n                         inst.retransformClasses(clazz);\n                         logger.info(\"Success to transform class: \" + clazz);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/TransformerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/TransformerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/TransformerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/TransformerManager.java\n@@ -66,6 +66,8 @@ public void removeTransformer(ClassFileTransformer transformer) {\n     }\n \n     public void destroy() {\n+        watchTransformers.clear();\n+        traceTransformers.clear();\n         instrumentation.removeTransformer(classFileTransformer);\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -1,17 +1,12 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import java.arthas.SpyAPI;\n import java.lang.instrument.Instrumentation;\n import java.lang.instrument.UnmodifiableClassException;\n import java.util.Collections;\n import java.util.List;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n-import com.taobao.arthas.bytekit.asm.binding.Binding;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtEnter;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExceptionExit;\n-import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExit;\n import com.taobao.arthas.core.advisor.AdviceListener;\n import com.taobao.arthas.core.advisor.Enhancer;\n import com.taobao.arthas.core.advisor.InvokeTraceable;\n@@ -114,8 +109,10 @@ protected void enhance(CommandProcess process) {\n                 skipJDKTrace = ((AbstractTraceAdviceListener) listener).getCommand().isSkipJDKTrace();\n             }\n \n-            EnhancerAffect effect = Enhancer.enhance(inst, listener, listener instanceof InvokeTraceable,\n-                    skipJDKTrace, getClassNameMatcher(), getMethodNameMatcher());\n+            Enhancer enhancer = new Enhancer(listener, listener instanceof InvokeTraceable, skipJDKTrace, getClassNameMatcher(), getMethodNameMatcher());\n+            // 注册通知监听器\n+            process.register(lock, listener, enhancer);\n+            EnhancerAffect effect = enhancer.enhance(inst);\n \n             if (effect.cCnt() == 0 || effect.mCnt() == 0) {\n                 // no class effected\n@@ -132,8 +129,6 @@ protected void enhance(CommandProcess process) {\n \n             // 这里做个补偿,如果在enhance期间,unLock被调用了,则补偿性放弃\n             if (session.getLock() == lock) {\n-                // 注册通知监听器\n-                process.register(lock, listener, effect.getTransformer());\n                 if (process.isForeground()) {\n                     process.echoTips(Constants.Q_OR_CTRL_C_ABORT_MSG + \"\\n\");\n                 }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -109,8 +109,9 @@ public JobTimeoutTask(Job job) {\n         @Override\n         public void run() {\n             if (job != null) {\n-                job.terminate();\n+                Job temp = job;\n                 job = null;\n+                temp.terminate();\n             }\n         }\n ",
    "output": "fix Transformer do not register problem, when Enhancer error. #1184"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n@@ -11,6 +11,7 @@\n import com.taobao.arthas.common.concurrent.ConcurrentWeakKeyHashMap;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.system.ExecStatus;\n+import com.taobao.arthas.core.shell.system.Process;\n import com.taobao.arthas.core.shell.system.ProcessAware;\n \n /**\n@@ -69,7 +70,11 @@ public void run() {\n                                     for (AdviceListener listener : listeners) {\n                                         if (listener instanceof ProcessAware) {\n                                             ProcessAware processAware = (ProcessAware) listener;\n-                                            ExecStatus status = processAware.getProcess().status();\n+                                            Process process = processAware.getProcess();\n+                                            if (process == null) {\n+                                                continue;\n+                                            }\n+                                            ExecStatus status = process.status();\n                                             if (!status.equals(ExecStatus.TERMINATED)) {\n                                                 newResult.add(listener);\n                                             }",
    "output": "fix process null problem. #1184"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n@@ -3,10 +3,11 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map.Entry;\n-import java.util.Timer;\n-import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.common.concurrent.ConcurrentWeakKeyHashMap;\n import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.system.ExecStatus;\n@@ -49,43 +50,49 @@\n  *\n  */\n public class AdviceListenerManager {\n-\n-    private static Timer timer = ArthasBootstrap.getInstance().getTimer();\n+    private static final Logger logger = LoggerFactory.getLogger(AdviceListenerManager.class);\n     private static final FakeBootstrapClassLoader FAKEBOOTSTRAPCLASSLOADER = new FakeBootstrapClassLoader();\n \n     static {\n-        timer.scheduleAtFixedRate(new TimerTask() {\n-\n+        // 清理失效的 AdviceListener\n+        ArthasBootstrap.getInstance().getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {\n             @Override\n             public void run() {\n-                if (adviceListenerMap != null) {\n-                    for (Entry<ClassLoader, ClassLoaderAdviceListenerManager> entry : adviceListenerMap.entrySet()) {\n-                        ClassLoaderAdviceListenerManager adviceListenerManager = entry.getValue();\n-                        synchronized (adviceListenerManager) {\n-                            for (Entry<String, List<AdviceListener>> eee : adviceListenerManager.map.entrySet()) {\n-                                List<AdviceListener> listeners = eee.getValue();\n-                                List<AdviceListener> newResult = new ArrayList<AdviceListener>();\n-                                for (AdviceListener listener : listeners) {\n-                                    if (listener instanceof ProcessAware) {\n-                                        ProcessAware processAware = (ProcessAware) listener;\n-                                        ExecStatus status = processAware.getProcess().status();\n-                                        if (!status.equals(ExecStatus.TERMINATED)) {\n-                                            newResult.add(listener);\n+                try {\n+                    if (adviceListenerMap != null) {\n+                        for (Entry<ClassLoader, ClassLoaderAdviceListenerManager> entry : adviceListenerMap.entrySet()) {\n+                            ClassLoaderAdviceListenerManager adviceListenerManager = entry.getValue();\n+                            synchronized (adviceListenerManager) {\n+                                for (Entry<String, List<AdviceListener>> eee : adviceListenerManager.map.entrySet()) {\n+                                    List<AdviceListener> listeners = eee.getValue();\n+                                    List<AdviceListener> newResult = new ArrayList<AdviceListener>();\n+                                    for (AdviceListener listener : listeners) {\n+                                        if (listener instanceof ProcessAware) {\n+                                            ProcessAware processAware = (ProcessAware) listener;\n+                                            ExecStatus status = processAware.getProcess().status();\n+                                            if (!status.equals(ExecStatus.TERMINATED)) {\n+                                                newResult.add(listener);\n+                                            }\n                                         }\n                                     }\n-                                }\n \n-                                if (newResult.size() != listeners.size()) {\n-                                    adviceListenerManager.map.put(eee.getKey(), newResult);\n-                                }\n+                                    if (newResult.size() != listeners.size()) {\n+                                        adviceListenerManager.map.put(eee.getKey(), newResult);\n+                                    }\n \n+                                }\n                             }\n                         }\n                     }\n+                } catch (Throwable e) {\n+                    try {\n+                        logger.error(\"clean AdviceListener error\", e);\n+                    } catch (Throwable t) {\n+                        // ignore\n+                    }\n                 }\n             }\n-\n-        }, 3000, 3000);\n+        }, 3, 3, TimeUnit.SECONDS);\n     }\n \n     static private ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager> adviceListenerMap = new ConcurrentWeakKeyHashMap<ClassLoader, ClassLoaderAdviceListenerManager>();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -14,8 +14,8 @@\n import java.util.Map.Entry;\n import java.util.Properties;\n import java.util.Timer;\n-import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -70,7 +70,7 @@ public class ArthasBootstrap {\n     private Instrumentation instrumentation;\n     private Thread shutdown;\n     private ShellServer shellServer;\n-    private ExecutorService executorService;\n+    private ScheduledExecutorService executorService;\n     private TunnelClient tunnelClient;\n \n     private File arthasOutputDir;\n@@ -98,7 +98,7 @@ private ArthasBootstrap(Instrumentation instrumentation, String args) throws Thr\n         // 4. start agent server\n         bind(configure);\n \n-        executorService = Executors.newCachedThreadPool(new ThreadFactory() {\n+        executorService = Executors.newScheduledThreadPool(1, new ThreadFactory() {\n             @Override\n             public Thread newThread(Runnable r) {\n                 final Thread t = new Thread(r, \"as-command-execute-daemon\");\n@@ -389,6 +389,10 @@ public Timer getTimer() {\n         return this.timer;\n     }\n \n+    public ScheduledExecutorService getScheduledExecutorService() {\n+        return this.executorService;\n+    }\n+\n     public Instrumentation getInstrumentation() {\n         return this.instrumentation;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -4,7 +4,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.TimerTask;\n import java.util.concurrent.TimeUnit;\n \n import com.alibaba.arthas.deps.org.slf4j.Logger;\n@@ -22,7 +21,7 @@\n  * @author gehui 2017年7月31日 上午11:55:41\n  */\n public class GlobalJobControllerImpl extends JobControllerImpl {\n-    private Map<Integer, TimerTask> jobTimeoutTaskMap = new HashMap<Integer, TimerTask>();\n+    private Map<Integer, JobTimeoutTask> jobTimeoutTaskMap = new HashMap<Integer, JobTimeoutTask>();\n     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);\n \n     @Override\n@@ -42,7 +41,7 @@ public void close() {\n \n     @Override\n     public boolean removeJob(int id) {\n-        TimerTask jobTimeoutTask = jobTimeoutTaskMap.remove(id);\n+        JobTimeoutTask jobTimeoutTask = jobTimeoutTaskMap.remove(id);\n         if (jobTimeoutTask != null) {\n             jobTimeoutTask.cancel();\n         }\n@@ -56,9 +55,10 @@ public Job createJob(InternalCommandManager commandManager, List<CliToken> token\n         /*\n          * 达到超时时间将会停止job\n          */\n-        TimerTask jobTimeoutTask = new JobTimeoutTask(job);\n-        Date timeoutDate = new Date(System.currentTimeMillis() + (getJobTimeoutInSecond() * 1000));\n-        ArthasBootstrap.getInstance().getTimer().schedule(jobTimeoutTask, timeoutDate);\n+        JobTimeoutTask jobTimeoutTask = new JobTimeoutTask(job);\n+        long jobTimeoutInSecond = getJobTimeoutInSecond();\n+        Date timeoutDate = new Date(System.currentTimeMillis() + (jobTimeoutInSecond * 1000));\n+        ArthasBootstrap.getInstance().getScheduledExecutorService().schedule(jobTimeoutTask, jobTimeoutInSecond, TimeUnit.SECONDS);\n         jobTimeoutTaskMap.put(job.id(), jobTimeoutTask);\n         job.setTimeoutDate(timeoutDate);\n \n@@ -99,8 +99,8 @@ private long getJobTimeoutInSecond() {\n         return result;\n     }\n \n-    private static class JobTimeoutTask extends TimerTask {\n-        Job job;\n+    private static class JobTimeoutTask implements Runnable {\n+        private Job job;\n \n         public JobTimeoutTask(Job job) {\n             this.job = job;\n@@ -110,15 +110,12 @@ public JobTimeoutTask(Job job) {\n         public void run() {\n             if (job != null) {\n                 job.terminate();\n+                job = null;\n             }\n         }\n \n-        @Override\n-        public boolean cancel() {\n-            // clear job reference from timer\n-            // fix issue: https://github.com/alibaba/arthas/issues/1189\n+        public void cancel() {\n             job = null;\n-            return super.cancel();\n         }\n     }\n }",
    "output": "use ScheduledExecutorService instanceof timer, fix timer cancelled problem. #1184"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -9,6 +9,8 @@\n import java.lang.reflect.Method;\n import java.util.Set;\n \n+import com.alibaba.arthas.deps.org.slf4j.Logger;\n+import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n@@ -46,6 +48,7 @@\n         \"  sm -Ed org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\.StringUtils .*\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"sm\")\n public class SearchMethodCommand extends AnnotatedCommand {\n+    private static final Logger logger = LoggerFactory.getLogger(SearchMethodCommand.class);\n \n     private String classPattern;\n     private String methodPattern;\n@@ -92,34 +95,42 @@ public void process(CommandProcess process) {\n         Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx, hashCode);\n \n         for (Class<?> clazz : matchedClasses) {\n-            for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n-                String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(constructor).toString();\n-                if (!methodNameMatcher.matching(\"<init>\")) {\n-                    continue;\n+            try {\n+                for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n+                    String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(constructor).toString();\n+                    if (!methodNameMatcher.matching(\"<init>\")) {\n+                        continue;\n+                    }\n+\n+                    if (isDetail) {\n+                        process.write(RenderUtil.render(renderConstructor(constructor, clazz), process.width()) + \"\\n\");\n+                    } else {\n+                        String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n+                        process.write(line);\n+                    }\n+                    affect.rCnt(1);\n                 }\n \n-                if (isDetail) {\n-                    process.write(RenderUtil.render(renderConstructor(constructor, clazz), process.width()) + \"\\n\");\n-                } else {\n-                    String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n-                    process.write(line);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(method).toString();\n+                    if (!methodNameMatcher.matching(method.getName())) {\n+                        continue;\n+                    }\n+\n+                    if (isDetail) {\n+                        process.write(RenderUtil.render(renderMethod(method, clazz), process.width()) + \"\\n\");\n+                    } else {\n+                        String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n+                        process.write(line);\n+                    }\n+                    affect.rCnt(1);\n                 }\n-                affect.rCnt(1);\n-            }\n-\n-            for (Method method : clazz.getDeclaredMethods()) {\n-                String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(method).toString();\n-                if (!methodNameMatcher.matching(method.getName())) {\n-                    continue;\n-                }\n-\n-                if (isDetail) {\n-                    process.write(RenderUtil.render(renderMethod(method, clazz), process.width()) + \"\\n\");\n-                } else {\n-                    String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n-                    process.write(line);\n-                }\n-                affect.rCnt(1);\n+            } catch (Error e) {\n+                //print failed className\n+                String msg = String.format(\"process class failed: %s, error: %s\", clazz.getName(), e.toString());\n+                logger.error(msg, e);\n+                process.write(msg).write(\"\\n\");\n+                throw e;\n             }\n         }\n ",
    "output": "#730 print sm process failed class name (#1160)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n@@ -19,7 +19,6 @@\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.shell.term.TermServer;\n-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n \n import java.lang.instrument.Instrumentation;\n import java.util.ArrayList;\n@@ -184,6 +183,7 @@ public void removeSession(ShellImpl shell) {\n \n         synchronized (ShellServerImpl.this) {\n             sessions.remove(shell.id);\n+            shell.close(\"network error\");\n             completeSessionClosed = sessions.isEmpty() && closed;\n         }\n         if (completeSessionClosed) {",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/bytekit/src/test/java/com/example/ByteKitDemo.java b/bytekit/src/test/java/com/example/ByteKitDemo.java\n--- a/bytekit/src/test/java/com/example/ByteKitDemo.java\n+++ b/bytekit/src/test/java/com/example/ByteKitDemo.java\n@@ -45,7 +45,7 @@ public static void onSuppress(@Binding.Throwable Throwable e, @Binding.Class Obj\n         }\n     }\n \n-    public static class EnterInterceptor {\n+    public static class SampleInterceptor {\n \n         @AtEnter(inline = true, suppress = RuntimeException.class, suppressHandler = PrintExceptionSuppressHandler.class)\n         public static void atEnter(@Binding.This Object object, \n@@ -92,7 +92,7 @@ public void run() {\n \n         // 解析定义的 Interceptor类 和相关的注解\n         DefaultInterceptorClassParser interceptorClassParser = new DefaultInterceptorClassParser();\n-        List<InterceptorProcessor> processors = interceptorClassParser.parse(EnterInterceptor.class);\n+        List<InterceptorProcessor> processors = interceptorClassParser.parse(SampleInterceptor.class);\n \n         // 加载字节码\n         ClassNode classNode = AsmUtils.loadClass(Sample.class);",
    "output": "add bytekit/README.md"
  },
  {
    "input": "diff --git a/bytekit/src/test/java/com/example/ByteKitDemo.java b/bytekit/src/test/java/com/example/ByteKitDemo.java\n--- a/bytekit/src/test/java/com/example/ByteKitDemo.java\n+++ b/bytekit/src/test/java/com/example/ByteKitDemo.java\n@@ -0,0 +1,124 @@\n+package com.example;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodNode;\n+import com.taobao.arthas.bytekit.asm.MethodProcessor;\n+import com.taobao.arthas.bytekit.asm.binding.Binding;\n+import com.taobao.arthas.bytekit.asm.interceptor.InterceptorProcessor;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtEnter;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExceptionExit;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtExit;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.ExceptionHandler;\n+import com.taobao.arthas.bytekit.asm.interceptor.parser.DefaultInterceptorClassParser;\n+import com.taobao.arthas.bytekit.utils.AgentUtils;\n+import com.taobao.arthas.bytekit.utils.AsmUtils;\n+import com.taobao.arthas.bytekit.utils.Decompiler;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-05-21\n+ *\n+ */\n+public class ByteKitDemo {\n+\n+    public static class Sample {\n+        private int exceptionCount = 0;\n+\n+        public String hello(String str, boolean exception) {\n+            if (exception) {\n+                exceptionCount++;\n+                throw new RuntimeException(\"test exception, str: \" + str);\n+            }\n+            return \"hello \" + str;\n+        }\n+    }\n+\n+    public static class PrintExceptionSuppressHandler {\n+\n+        @ExceptionHandler(inline = true)\n+        public static void onSuppress(@Binding.Throwable Throwable e, @Binding.Class Object clazz) {\n+            System.out.println(\"exception handler: \" + clazz);\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static class EnterInterceptor {\n+\n+        @AtEnter(inline = true, suppress = RuntimeException.class, suppressHandler = PrintExceptionSuppressHandler.class)\n+        public static void atEnter(@Binding.This Object object, \n+                @Binding.Class Object clazz,\n+                @Binding.Args Object[] args, \n+                @Binding.MethodName String methodName,\n+                @Binding.MethodDesc String methodDesc) {\n+            System.out.println(\"atEnter, args[0]: \" + args[0]);\n+        }\n+\n+        @AtExit(inline = true)\n+        public static void atExit(@Binding.Return Object returnObject) {\n+            System.out.println(\"atExit, returnObject: \" + returnObject);\n+        }\n+\n+        @AtExceptionExit(inline = true, onException = RuntimeException.class)\n+        public static void atExceptionExit(@Binding.Throwable RuntimeException ex,\n+                @Binding.Field(name = \"exceptionCount\") int exceptionCount) {\n+            System.out.println(\"atExceptionExit, ex: \" + ex.getMessage() + \", field exceptionCount: \" + exceptionCount);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AgentUtils.install();\n+\n+        // 启动Sample，不断执行\n+        final Sample sample = new Sample();\n+        Thread t = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                for (int i = 0; i < 100; ++i) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(3);\n+                        String result = sample.hello(\"\" + i, (i % 3) == 0);\n+                        System.out.println(\"call hello result: \" + result);\n+                    } catch (Throwable e) {\n+                        // ignore\n+                        System.out.println(\"call hello exception: \" + e.getMessage());\n+                    }\n+                }\n+            }\n+        });\n+        t.start();\n+\n+        // 解析定义的 Interceptor类 和相关的注解\n+        DefaultInterceptorClassParser interceptorClassParser = new DefaultInterceptorClassParser();\n+        List<InterceptorProcessor> processors = interceptorClassParser.parse(EnterInterceptor.class);\n+\n+        // 加载字节码\n+        ClassNode classNode = AsmUtils.loadClass(Sample.class);\n+\n+        // 对加载到的字节码做增强处理\n+        for (MethodNode methodNode : classNode.methods) {\n+            if (methodNode.name.equals(\"hello\")) {\n+                MethodProcessor methodProcessor = new MethodProcessor(classNode, methodNode);\n+                for (InterceptorProcessor interceptor : processors) {\n+                    interceptor.process(methodProcessor);\n+                }\n+            }\n+        }\n+\n+        // 获取增强后的字节码\n+        byte[] bytes = AsmUtils.toBytes(classNode);\n+\n+        // 查看反编译结果\n+        System.out.println(Decompiler.decompile(bytes));\n+\n+        // 等待，查看未增强里的输出结果\n+        TimeUnit.SECONDS.sleep(10);\n+\n+        // 通过 reTransform 增强类\n+        AgentUtils.reTransform(Sample.class, bytes);\n+        System.in.read();\n+    }\n+\n+}",
    "output": "add ByteKitDemo"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AgentUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AgentUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AgentUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AgentUtils.java\n@@ -7,8 +7,6 @@\n import java.lang.instrument.UnmodifiableClassException;\n import java.security.ProtectionDomain;\n \n-import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n-\n import net.bytebuddy.agent.ByteBuddyAgent;\n \n public class AgentUtils {\n@@ -17,6 +15,11 @@ private static class InstrumentationHolder {\n         static final Instrumentation instance = ByteBuddyAgent.install();\n     }\n \n+    public static Instrumentation install() {\n+        return InstrumentationHolder.instance;\n+\n+    }\n+\n     public static void redefine(Class<?> clazz, byte[] classFile)\n             throws ClassNotFoundException, UnmodifiableClassException {\n         ClassDefinition classDefinition = new ClassDefinition(clazz, classFile);",
    "output": "add AgentUtils#install method"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n@@ -19,7 +19,6 @@\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.shell.term.TermServer;\n-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n \n import java.lang.instrument.Instrumentation;\n import java.util.ArrayList;\n@@ -184,6 +183,7 @@ public void removeSession(ShellImpl shell) {\n \n         synchronized (ShellServerImpl.this) {\n             sessions.remove(shell.id);\n+            shell.close(\"network error\");\n             completeSessionClosed = sessions.isEmpty() && closed;\n         }\n         if (completeSessionClosed) {",
    "output": "fix issue #1187: close shell when removing session"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -132,5 +132,5 @@ public class GlobalOptions {\n             summary = \"Option to print verbose information\",\n             description = \"This option enables print verbose information, default value false.\"\n     )\n-    public static volatile boolean verbose = true;\n+    public static volatile boolean verbose = false;\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -295,7 +295,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 // enter/exist 总是要插入 listener\n                 AdviceListenerManager.registerAdviceListener(inClassLoader, className, methodNode.name, methodNode.desc,\n                         listener);\n-                affect.mCnt(1);\n+                affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);\n             }\n \n             byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode);\n@@ -351,7 +351,7 @@ private static void dumpClassIfNecessary(String className, byte[] data, Enhancer\n         // 将类字节码写入文件\n         try {\n             FileUtils.writeByteArrayToFile(dumpClassFile, data);\n-            affect.getClassDumpFiles().add(dumpClassFile);\n+            affect.addClassDumpFile(dumpClassFile);\n         } catch (IOException e) {\n             logger.warn(\"dump class:{} to file {} failed.\", className, dumpClassFile, e);\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n@@ -1,11 +1,13 @@\n package com.taobao.arthas.core.util.affect;\n \n import com.taobao.arthas.core.GlobalOptions;\n+import com.taobao.arthas.core.util.ClassLoaderUtils;\n \n import java.io.File;\n import java.lang.instrument.ClassFileTransformer;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import static java.lang.String.format;\n@@ -25,6 +27,8 @@ public final class EnhancerAffect extends Affect {\n      */\n     private final Collection<File> classDumpFiles = new ArrayList<File>();\n \n+    private final List<String> methods = new ArrayList<String>();\n+\n     public EnhancerAffect() {\n     }\n \n@@ -48,6 +52,16 @@ public int mCnt(int mc) {\n         return mCnt.addAndGet(mc);\n     }\n \n+    /**\n+     * 记录影响的函数，并增加计数\n+     * @param mc\n+     * @return\n+     */\n+    public int addMethodAndCount(ClassLoader classLoader, String clazz, String method, String methodDesc) {\n+        this.methods.add(ClassLoaderUtils.classLoaderHash(classLoader) + \"|\" + clazz.replace('/', '.') + \"#\" + method + \"|\" + methodDesc);\n+        return mCnt.addAndGet(1);\n+    }\n+\n     /**\n      * 获取影响类个数\n      *\n@@ -66,13 +80,8 @@ public int mCnt() {\n         return mCnt.get();\n     }\n \n-    /**\n-     * 获取dump的Class文件集合\n-     *\n-     * @return classDumpList\n-     */\n-    public Collection<File> getClassDumpFiles() {\n-        return classDumpFiles;\n+    public void addClassDumpFile(File file) {\n+        classDumpFiles.add(file);\n     }\n \n     public ClassFileTransformer getTransformer() {\n@@ -93,6 +102,12 @@ public String toString() {\n                 infoSB.append(\"[dump: \").append(classDumpFile.getAbsoluteFile()).append(\"]\\n\");\n             }\n         }\n+\n+        if (GlobalOptions.verbose && !methods.isEmpty()) {\n+            for (String method : methods) {\n+                infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n+            }\n+        }\n         infoSB.append(format(\"Affect(class count:%d , method count:%d) cost in %s ms.\",\n                 cCnt(),\n                 mCnt(),",
    "output": "EnhancerAffect print the affected method details when verbose option is true #1195"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -123,4 +123,14 @@ public class GlobalOptions {\n             description = \"This option enables print files in parent class, default value true.\"\n     )\n     public static volatile boolean printParentFields = true;\n+\n+    /**\n+     * 是否打开verbose 开关\n+     */\n+    @Option(level = 1,\n+            name = \"verbose\",\n+            summary = \"Option to print verbose information\",\n+            description = \"This option enables print verbose information, default value false.\"\n+    )\n+    public static volatile boolean verbose = true;\n }",
    "output": "Add a global option to print verbose information #1194"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -120,7 +120,7 @@ protected void enhance(CommandProcess process) {\n             if (effect.cCnt() == 0 || effect.mCnt() == 0) {\n                 // no class effected\n                 // might be method code too large\n-                process.write(\"Matched class-cnt: \" + effect.cCnt() + \", method-cnt: \" + effect.mCnt() + \"\\n\");\n+                process.write(\"Matched class count: \" + effect.cCnt() + \", method count: \" + effect.mCnt() + \"\\n\");\n                 process.write(\"No class or method is affected, try:\\n\"\n                               + \"1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n                               + \"2. reset CLASS_NAME and try again, your method body might be too large.\\n\"\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/affect/EnhancerAffect.java\n@@ -93,7 +93,7 @@ public String toString() {\n                 infoSB.append(\"[dump: \").append(classDumpFile.getAbsoluteFile()).append(\"]\\n\");\n             }\n         }\n-        infoSB.append(format(\"Affect(class-cnt:%d , method-cnt:%d) cost in %s ms.\",\n+        infoSB.append(format(\"Affect(class count:%d , method count:%d) cost in %s ms.\",\n                 cCnt(),\n                 mCnt(),\n                 cost()));",
    "output": "print affect class/method count more clear. close #1191"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -185,9 +185,18 @@ public static void saveUrl(final String filename, final String urlString, boolea\n      * @return\n      * @throws Exception\n      */\n-    private static Document transformMavenMetaData(String mavenMetaData) throws Exception {\n+    static Document transformMavenMetaData(String mavenMetaData) throws Exception {\n         ByteArrayInputStream inputStream = new ByteArrayInputStream(mavenMetaData.getBytes(\"UTF-8\"));\n         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+        //disable XXE before newDocumentBuilder\n+        dbFactory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n+        dbFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+        dbFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+        dbFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+        dbFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+        dbFactory.setXIncludeAware(false);\n+        dbFactory.setExpandEntityReferences(false);\n+        //create doc builder\n         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n         return dBuilder.parse(inputStream);\n     }\n\ndiff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -9,18 +9,26 @@\n import java.util.ArrayList;\n \n import org.junit.Assert;\n+import org.w3c.dom.Document;\n+\n import static com.taobao.arthas.boot.DownloadUtils.*;\n \n public class DownloadUtilsTest {\n \n     @Test\n     public void testReadMavenReleaseVersion() {\n-        Assert.assertNull(readMavenReleaseVersion(\"\"));\n+        //check 'center' repo\n+        String releaseVersion = readMavenReleaseVersion(readMavenMetaData(\"center\", false));\n+        Assert.assertNotNull(releaseVersion);\n+        Assert.assertNotEquals(\"releaseVersion is empty\", \"\", releaseVersion.trim());\n+        //check 'aliyun' repo\n+        String aliyunReleaseVersion = readMavenReleaseVersion(readMavenMetaData(\"aliyun\", false));\n+        Assert.assertEquals(\"releaseVersion is not match between repo 'center' and 'aliyun'\", releaseVersion, aliyunReleaseVersion);\n     }\n \n     @Test\n     public void testReadAllMavenVersion() {\n-        Assert.assertEquals(new ArrayList<String>(), readAllMavenVersion(\"\"));\n+        Assert.assertNotEquals(new ArrayList<String>(), readAllMavenVersion(readMavenMetaData(\"center\", false)));\n     }\n \n     @Test\n@@ -35,4 +43,22 @@ public void testReadMavenMetaData() throws IOException {\n         String url = \"https://repo1.maven.org/maven2/com/taobao/arthas/arthas-packaging/maven-metadata.xml\";\n         Assert.assertEquals(IOUtils.toString(new URL(url).openStream()), readMavenMetaData(\"center\", false));\n     }\n+\n+    @Test\n+    public void testXXE() throws Exception {\n+        try {\n+            //from https://blog.spoock.com/2018/10/23/java-xxe/\n+            String playload = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                    \"<!DOCTYPE root [\\n\" +\n+                    \"        <!ENTITY xxe SYSTEM \\\"../NOTICE\\\">\\n\" +\n+                    \"        ]>\\n\" +\n+                    \"<evil>&xxe;</evil>\";\n+            Document document = transformMavenMetaData(playload);\n+        } catch (org.xml.sax.SAXParseException e) {\n+            String message = e.getMessage();\n+            Assert.assertTrue(\"XXE is not disabled\", message.contains(\"disallow-doctype-decl\"));\n+            return;\n+        }\n+        Assert.fail(\"XXE is not disabled\");\n+    }\n }",
    "output": "disable XML xxe feature (#1166)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -56,12 +56,7 @@ public Job createJob(InternalCommandManager commandManager, List<CliToken> token\n         /*\n          * 达到超时时间将会停止job\n          */\n-        TimerTask jobTimeoutTask = new TimerTask() {\n-            @Override\n-            public void run() {\n-                job.terminate();\n-            }\n-        };\n+        TimerTask jobTimeoutTask = new JobTimeoutTask(job);\n         Date timeoutDate = new Date(System.currentTimeMillis() + (getJobTimeoutInSecond() * 1000));\n         ArthasBootstrap.getInstance().getTimer().schedule(jobTimeoutTask, timeoutDate);\n         jobTimeoutTaskMap.put(job.id(), jobTimeoutTask);\n@@ -103,4 +98,27 @@ private long getJobTimeoutInSecond() {\n         }\n         return result;\n     }\n+\n+    private static class JobTimeoutTask extends TimerTask {\n+        Job job;\n+\n+        public JobTimeoutTask(Job job) {\n+            this.job = job;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (job != null) {\n+                job.terminate();\n+            }\n+        }\n+\n+        @Override\n+        public boolean cancel() {\n+            // clear job reference from timer\n+            // fix issue: https://github.com/alibaba/arthas/issues/1189\n+            job = null;\n+            return super.cancel();\n+        }\n+    }\n }",
    "output": "Merge pull request #1192 from kylixs/fix-issue-1189\n\nfix issue #1189, clear job reference from timer"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -56,12 +56,7 @@ public Job createJob(InternalCommandManager commandManager, List<CliToken> token\n         /*\n          * 达到超时时间将会停止job\n          */\n-        TimerTask jobTimeoutTask = new TimerTask() {\n-            @Override\n-            public void run() {\n-                job.terminate();\n-            }\n-        };\n+        TimerTask jobTimeoutTask = new JobTimeoutTask(job);\n         Date timeoutDate = new Date(System.currentTimeMillis() + (getJobTimeoutInSecond() * 1000));\n         ArthasBootstrap.getInstance().getTimer().schedule(jobTimeoutTask, timeoutDate);\n         jobTimeoutTaskMap.put(job.id(), jobTimeoutTask);\n@@ -103,4 +98,27 @@ private long getJobTimeoutInSecond() {\n         }\n         return result;\n     }\n+\n+    private static class JobTimeoutTask extends TimerTask {\n+        Job job;\n+\n+        public JobTimeoutTask(Job job) {\n+            this.job = job;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (job != null) {\n+                job.terminate();\n+            }\n+        }\n+\n+        @Override\n+        public boolean cancel() {\n+            // clear job reference from timer\n+            // fix issue: https://github.com/alibaba/arthas/issues/1189\n+            job = null;\n+            return super.cancel();\n+        }\n+    }\n }",
    "output": "fix issue #1189, clear job reference from timer"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n@@ -117,7 +117,7 @@ private void afterFinishing(Advice advice) {\n      * \n      * </pre>\n      * \n-     * @author hengyunabc 2019-11-20\n+     * @author hengyunabc 2020-05-20\n      *\n      */\n     static class ObjectStack {\n@@ -147,11 +147,15 @@ public void push(Object value) {\n         public Object pop() {\n             if (pos > 0) {\n                 pos--;\n-                return array[pos];\n+                Object object = array[pos];\n+                array[pos] = null;\n+                return object;\n             } else {\n                 pos = cap;\n                 pos--;\n-                return array[pos];\n+                Object object = array[pos];\n+                array[pos] = null;\n+                return object;\n             }\n         }\n     }",
    "output": "clean object in ObjectStack"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -70,8 +70,8 @@ public class Enhancer implements ClassFileTransformer {\n     private final Matcher methodNameMatcher;\n     private final EnhancerAffect affect;\n \n-    // 类-字节码缓存\n-    private final static Map<Class<?>/* Class */, byte[]/* bytes of Class */> classBytesCache = new WeakHashMap<Class<?>, byte[]>();\n+    // 被增强的类的缓存\n+    private final static Map<Class<?>/* Class */, Object> classBytesCache = new WeakHashMap<Class<?>, Object>();\n     private static SpyImpl spyImpl = new SpyImpl();\n \n     static {\n@@ -190,7 +190,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 }\n             } catch (Throwable e) {\n                 logger.error(\"the classloader can not load SpyAPI, ignore it. classloader: {}, className: {}\",\n-                        inClassLoader.getName(), className);\n+                        inClassLoader.getClass().getName(), className);\n                 return null;\n             }\n \n@@ -200,13 +200,6 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 return null;\n             }\n \n-            // 首先先检查是否在缓存中存在Class字节码\n-            // 因为要支持多人协作,存在多人同时增强的情况\n-            final byte[] byteOfClassInCache = classBytesCache.get(classBeingRedefined);\n-            if (null != byteOfClassInCache) {\n-                classfileBuffer = byteOfClassInCache;\n-            }\n-\n             ClassNode classNode = AsmUtils.toClassNode(classfileBuffer);\n \n             // 生成增强字节码\n@@ -307,8 +300,8 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n \n             byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode);\n \n-            // 生成成功,推入缓存\n-            classBytesCache.put(classBeingRedefined, enhanceClassByteArray);\n+            // 增强成功，记录类\n+            classBytesCache.put(classBeingRedefined, new Object());\n \n             // dump the class\n             dumpClassIfNecessary(className, enhanceClassByteArray, affect);",
    "output": "only save Class when enhance"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -183,6 +183,17 @@ public static void onInvokeException(@Binding.This Object target, @Binding.Class\n     public byte[] transform(final ClassLoader inClassLoader, String className, Class<?> classBeingRedefined,\n             ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n         try {\n+            // 检查classloader能否加载到 SpyAPI，如果不能，则放弃增强\n+            try {\n+                if (inClassLoader != null) {\n+                    inClassLoader.loadClass(SpyAPI.class.getName());\n+                }\n+            } catch (Throwable e) {\n+                logger.error(\"the classloader can not load SpyAPI, ignore it. classloader: {}, className: {}\",\n+                        inClassLoader.getName(), className);\n+                return null;\n+            }\n+\n             // 这里要再次过滤一次，为啥？因为在transform的过程中，有可能还会再诞生新的类\n             // 所以需要将之前需要转换的类集合传递下来，再次进行判断\n             if (!matchingClasses.contains(classBeingRedefined)) {",
    "output": "check classloader before enhance"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerManager.java\n@@ -14,39 +14,45 @@\n \n /**\n  * \n- * TODO line 的记录 listener方式？ 还是有string为key，不过 classname|method|desc|num 这样子？ 判断是否已插入了，可以在两行中间查询，有没有 SpyAPI 的invoke?\n+ * TODO line 的记录 listener方式？ 还是有string为key，不过 classname|method|desc|num 这样子？\n+ * 判断是否已插入了，可以在两行中间查询，有没有 SpyAPI 的invoke?\n  * \n- * TODO trace的怎么搞？ trace 只记录一次就可以了 classname|method|desc|trace ? 怎么避免 trace 到 SPY的invoke ？直接忽略？\n+ * TODO trace的怎么搞？ trace 只记录一次就可以了 classname|method|desc|trace ? 怎么避免 trace 到\n+ * SPY的invoke ？直接忽略？\n  * \n  * TODO trace命令可以动态的增加 新的函数进去不？只要关联上同一个 Listener应该是可以的。\n  * \n- * TODO 在SPY里放很多的 Object数组，然后动态的设置进去？ 比如有新的 Listener来的时候。 这样子连查表都不用了。 甚至可以动态生成 存放这些 Listener数组的类？\n- * 这样子的话，只要有 Binding那里，查询到一个具体分配好的类， 这样子就可以了？  甚至每个ClassLoader里都动态生成这样子的 存放类，那么这样子不可以避免查 ClassLoader了么？\n+ * TODO 在SPY里放很多的 Object数组，然后动态的设置进去？ 比如有新的 Listener来的时候。 这样子连查表都不用了。 甚至可以动态生成\n+ * 存放这些 Listener数组的类？ 这样子的话，只要有 Binding那里，查询到一个具体分配好的类， 这样子就可以了？\n+ * 甚至每个ClassLoader里都动态生成这样子的 存放类，那么这样子不可以避免查 ClassLoader了么？\n  * \n  * 动态为每一个增强类，生成一个新的类，新的类里，有各种的 ID 数组，保存每一个类的每一种 trace 点的信息？？\n  * \n- * 多个 watch命令 对同一个类，现在的逻辑是，每个watch都有一个自己的 TransForm，但不会重复增强，因为做了判断。 watch命令停止时，也没有去掉增强的代码。\n- * 只有reset时 才会去掉。\n+ * 多个 watch命令 对同一个类，现在的逻辑是，每个watch都有一个自己的 TransForm，但不会重复增强，因为做了判断。\n+ * watch命令停止时，也没有去掉增强的代码。 只有reset时 才会去掉。\n  * \n- * 其实用户想查看局部变量，并不是想查看哪一行！ 而是想看某个函数里子调用时的 局部变量的值！ 所以实际上是想要一个新的命令，比如 watchinmethod ，\n- * 可以 在某个子调用里，\n+ * 其实用户想查看局部变量，并不是想查看哪一行！ 而是想看某个函数里子调用时的 局部变量的值！ 所以实际上是想要一个新的命令，比如 watchinmethod\n+ * ， 可以 在某个子调用里，\n  * \n- * TODO 现在的trace 可以输出行号，可能不是很精确，但是可以对应上的。 这个在新的方式里怎么支持？ 增加一个 linenumber binding？ 从mehtodNode，向上查找到最近的行号？\n+ * TODO 现在的trace 可以输出行号，可能不是很精确，但是可以对应上的。 这个在新的方式里怎么支持？ 增加一个 linenumber binding？\n+ * 从mehtodNode，向上查找到最近的行号？\n  * \n- * TODO 防止重复增强，最重要的应该还是动态增加 annotation，这个才是真正可以做到某一行，某一个子 invoke 都能识别出来的！ 无论是 transform多少次！\n- * 字节码怎么动态加 annotation ？ annotation里签名用 url ?的key/value方式表达！ 这样子可以有效还原信息\n+ * TODO 防止重复增强，最重要的应该还是动态增加 annotation，这个才是真正可以做到某一行，某一个子 invoke 都能识别出来的！ 无论是\n+ * transform多少次！ 字节码怎么动态加 annotation ？ annotation里签名用 url ?的key/value方式表达！\n+ * 这样子可以有效还原信息\n  * \n- * TODO 是否考虑一个 trace /watch命令之后，得到一个具体的 Listener ID， 允许在另外的窗口里，再次 trace/watch时指定这个ID，就会查找到，并处理。\n- * 这样子的话，真正达到了动态灵活的，一层一层增加的trace ！\n+ * TODO 是否考虑一个 trace /watch命令之后，得到一个具体的 Listener ID， 允许在另外的窗口里，再次\n+ * trace/watch时指定这个ID，就会查找到，并处理。 这样子的话，真正达到了动态灵活的，一层一层增加的trace ！\n  * \n  * \n  * @author hengyunabc 2020-04-24\n  *\n  */\n public class AdviceListenerManager {\n-    \n+\n     private static Timer timer = ArthasBootstrap.getInstance().getTimer();\n-    \n+    private static final FakeBootstrapClassLoader FAKEBOOTSTRAPCLASSLOADER = new FakeBootstrapClassLoader();\n+\n     static {\n         timer.scheduleAtFixedRate(new TimerTask() {\n \n@@ -78,7 +84,7 @@ public void run() {\n                     }\n                 }\n             }\n-            \n+\n         }, 3000, 3000);\n     }\n \n@@ -90,7 +96,7 @@ static class ClassLoaderAdviceListenerManager {\n         private String key(String className, String methodName, String methodDesc) {\n             return className + methodName + methodDesc;\n         }\n-        \n+\n         private String keyForTrace(String className, String owner, String methodName, String methodDesc) {\n             return className + owner + methodName + methodDesc;\n         }\n@@ -106,7 +112,7 @@ public void registerAdviceListener(String className, String methodName, String m\n                     listeners = new ArrayList<AdviceListener>();\n                     map.put(key, listeners);\n                 }\n-                if(!listeners.contains(listener)) {\n+                if (!listeners.contains(listener)) {\n                     listeners.add(listener);\n                 }\n             }\n@@ -120,8 +126,7 @@ public List<AdviceListener> queryAdviceListeners(String className, String method\n \n             return listeners;\n         }\n-        \n-        \n+\n         public void registerTraceAdviceListener(String className, String owner, String methodName, String methodDesc,\n                 AdviceListener listener) {\n \n@@ -133,12 +138,13 @@ public void registerTraceAdviceListener(String className, String owner, String m\n                 listeners = new ArrayList<AdviceListener>();\n                 map.put(key, listeners);\n             }\n-            if(!listeners.contains(listener)) {\n+            if (!listeners.contains(listener)) {\n                 listeners.add(listener);\n             }\n         }\n \n-        public List<AdviceListener> queryTraceAdviceListeners(String className, String owner, String methodName, String methodDesc) {\n+        public List<AdviceListener> queryTraceAdviceListeners(String className, String owner, String methodName,\n+                String methodDesc) {\n             className = className.replace('/', '.');\n             String key = keyForTrace(className, owner, methodName, methodDesc);\n \n@@ -150,6 +156,7 @@ public List<AdviceListener> queryTraceAdviceListeners(String className, String o\n \n     public static void registerAdviceListener(ClassLoader classLoader, String className, String methodName,\n             String methodDesc, AdviceListener listener) {\n+        classLoader = wrap(classLoader);\n         className = className.replace('/', '.');\n \n         ClassLoaderAdviceListenerManager manager = adviceListenerMap.get(classLoader);\n@@ -167,6 +174,7 @@ public static void updateAdviceListeners() {\n \n     public static List<AdviceListener> queryAdviceListeners(ClassLoader classLoader, String className,\n             String methodName, String methodDesc) {\n+        classLoader = wrap(classLoader);\n         className = className.replace('/', '.');\n         ClassLoaderAdviceListenerManager manager = adviceListenerMap.get(classLoader);\n \n@@ -176,9 +184,10 @@ public static List<AdviceListener> queryAdviceListeners(ClassLoader classLoader,\n \n         return null;\n     }\n-    \n-    public static void registerTraceAdviceListener(ClassLoader classLoader, String className, String owner, String methodName,\n-            String methodDesc, AdviceListener listener) {\n+\n+    public static void registerTraceAdviceListener(ClassLoader classLoader, String className, String owner,\n+            String methodName, String methodDesc, AdviceListener listener) {\n+        classLoader = wrap(classLoader);\n         className = className.replace('/', '.');\n \n         ClassLoaderAdviceListenerManager manager = adviceListenerMap.get(classLoader);\n@@ -189,8 +198,10 @@ public static void registerTraceAdviceListener(ClassLoader classLoader, String c\n         }\n         manager.registerTraceAdviceListener(className, owner, methodName, methodDesc, listener);\n     }\n-    public static List<AdviceListener> queryTraceAdviceListeners(ClassLoader classLoader, String className, String owner,\n-            String methodName, String methodDesc) {\n+\n+    public static List<AdviceListener> queryTraceAdviceListeners(ClassLoader classLoader, String className,\n+            String owner, String methodName, String methodDesc) {\n+        classLoader = wrap(classLoader);\n         className = className.replace('/', '.');\n         ClassLoaderAdviceListenerManager manager = adviceListenerMap.get(classLoader);\n \n@@ -200,4 +211,15 @@ public static List<AdviceListener> queryTraceAdviceListeners(ClassLoader classLo\n \n         return null;\n     }\n+\n+    private static ClassLoader wrap(ClassLoader classLoader) {\n+        if (classLoader != null) {\n+            return classLoader;\n+        }\n+        return FAKEBOOTSTRAPCLASSLOADER;\n+    }\n+\n+    private static class FakeBootstrapClassLoader extends ClassLoader {\n+\n+    }\n }",
    "output": "support classes load by bootstrap classloader"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n@@ -77,7 +77,7 @@ private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile,\n         Class<?> spyClass = null;\n         if (parent != null) {\n             try {\n-                parent.loadClass(\"java.arthas.SpyAPI\");\n+                spyClass =parent.loadClass(\"java.arthas.SpyAPI\");\n             } catch (Throwable e) {\n                 // ignore\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -75,6 +75,7 @@ private void attachAgent(Configure configure) throws Exception {\n             String pid = descriptor.id();\n             if (pid.equals(Long.toString(configure.getJavaPid()))) {\n                 virtualMachineDescriptor = descriptor;\n+                break;\n             }\n         }\n         VirtualMachine virtualMachine = null;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -29,7 +29,7 @@ public class HistoryCommand extends AnnotatedCommand {\n     boolean clear = false;\n     int n = -1;\n \n-    @Option(shortName = \"c\", longName = \"clear\")\n+    @Option(shortName = \"c\", longName = \"clear\", flag = true , acceptValue = false)\n     @Description(\"clear history\")\n     public void setClear(boolean clear) {\n         this.clear = clear;\n@@ -56,7 +56,7 @@ public void process(CommandProcess process) {\n                 StringBuilder sb = new StringBuilder();\n \n                 int size = history.size();\n-                if (n < 0) {\n+                if (n < 0 || n > size) {\n                     n = size;\n                 }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {\n     private String level;\n \n     /**\n-     * include the logger don't have appender, default false.\n+     * include the loggers which don't have appenders, default false.\n      */\n     private boolean includeNoAppender;\n \n@@ -104,7 +104,7 @@ public void setLevel(String level) {\n     }\n \n     @Option(longName = \"include-no-appender\", flag = true)\n-    @Description(\"include the loggers don't have appender, default value false\")\n+    @Description(\"include the loggers which don't have appenders, default value false\")\n     public void setHaveAppender(boolean includeNoAppender) {\n         this.includeNoAppender = includeNoAppender;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -10,6 +10,7 @@\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.matcher.Matcher;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n@@ -54,7 +55,8 @@ public void setMethodPattern(String methodPattern) {\n         this.methodPattern = methodPattern;\n     }\n \n-    @Argument(index = 2, argName = \"express\")\n+    @Argument(index = 2, argName = \"express\", required = false)\n+    @DefaultValue(\"{params, target, returnObj}\")\n     @Description(\"the content you want to watch, written by ognl.\\n\" + Constants.EXPRESS_EXAMPLES)\n     public void setExpress(String express) {\n         this.express = express;",
    "output": "Merge branch 'master' into bytekit"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n@@ -1,28 +1,36 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n-import com.taobao.arthas.core.command.express.ExpressException;\n-import com.taobao.arthas.core.shell.command.CommandProcess;\n+import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.createTable;\n+import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.fillTableHeader;\n+import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.fillTableRow;\n+\n+import java.util.Date;\n+\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.advisor.AdviceListenerAdapter;\n+import com.taobao.arthas.core.command.express.ExpressException;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.util.Date;\n-\n-import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.createTable;\n-import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.fillTableHeader;\n-import static com.taobao.arthas.core.command.monitor200.TimeTunnelTable.fillTableRow;\n-\n /**\n  * @author beiwei30 on 30/11/2016.\n+ * @author hengyunabc 2020-05-20\n  */\n-public class TimeTunnelAdviceListener extends ReflectAdviceListenerAdapter {\n+public class TimeTunnelAdviceListener extends AdviceListenerAdapter {\n     private static final Logger logger = LoggerFactory.getLogger(TimeTunnelAdviceListener.class);\n+    private final ThreadLocal<ObjectStack> argsRef = new ThreadLocal<ObjectStack>() {\n+        @Override\n+        protected ObjectStack initialValue() {\n+            return new ObjectStack(512);\n+        }\n+    };\n+\n     private TimeTunnelCommand command;\n     private CommandProcess process;\n \n@@ -40,18 +48,23 @@ public TimeTunnelAdviceListener(TimeTunnelCommand command, CommandProcess proces\n     @Override\n     public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args)\n             throws Throwable {\n+        argsRef.get().push(args);\n         threadLocalWatch.start();\n     }\n \n     @Override\n     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,\n                                Object returnObject) throws Throwable {\n+        //取出入参时的 args，因为在函数执行过程中 args可能被修改\n+        args = (Object[]) argsRef.get().pop();\n         afterFinishing(Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject));\n     }\n \n     @Override\n     public void afterThrowing(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,\n                               Throwable throwable) {\n+        //取出入参时的 args，因为在函数执行过程中 args可能被修改\n+        args = (Object[]) argsRef.get().pop();\n         afterFinishing(Advice.newForAfterThrowing(loader, clazz, method, target, args, throwable));\n     }\n \n@@ -93,4 +106,53 @@ private void afterFinishing(Advice advice) {\n             abortProcess(process, command.getNumberOfLimit());\n         }\n     }\n+\n+    /**\n+     * \n+     * <pre>\n+     * 一个特殊的stack，为了追求效率，避免扩容。\n+     * 因为这个stack的push/pop 并不一定成对调用，比如可能push执行了，但是后面的流程被中断了，pop没有被执行。\n+     * 如果不固定大小，一直增长的话，极端情况下可能应用有内存问题。\n+     * 如果到达容量，pos会重置，循环存储数据。所以使用这个Stack如果在极端情况下统计的数据会不准确，只用于monitor/watch等命令的计时。\n+     * \n+     * </pre>\n+     * \n+     * @author hengyunabc 2019-11-20\n+     *\n+     */\n+    static class ObjectStack {\n+        private Object[] array;\n+        private int pos = 0;\n+        private int cap;\n+\n+        public ObjectStack(int maxSize) {\n+            array = new Object[maxSize];\n+            cap = array.length;\n+        }\n+\n+        public int size() {\n+            return pos;\n+        }\n+\n+        public void push(Object value) {\n+            if (pos < cap) {\n+                array[pos++] = value;\n+            } else {\n+                // if array is full, reset pos\n+                pos = 0;\n+                array[pos++] = value;\n+            }\n+        }\n+\n+        public Object pop() {\n+            if (pos > 0) {\n+                pos--;\n+                return array[pos];\n+            } else {\n+                pos = cap;\n+                pos--;\n+                return array[pos];\n+            }\n+        }\n+    }\n }",
    "output": "tt command store the real method args at enter"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -47,6 +47,8 @@\n import com.taobao.arthas.bytekit.utils.AsmUtils;\n import com.taobao.arthas.core.GlobalOptions;\n import com.taobao.arthas.core.bytecode.AdviceListenerManager;\n+import com.taobao.arthas.core.bytecode.SpyImpl;\n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.util.ArthasCheckUtils;\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.SearchUtils;\n@@ -55,6 +57,7 @@\n \n /**\n  * 对类进行通知增强 Created by vlinux on 15/5/17.\n+ * @author hengyunabc\n  */\n public class Enhancer implements ClassFileTransformer {\n \n@@ -69,6 +72,11 @@ public class Enhancer implements ClassFileTransformer {\n \n     // 类-字节码缓存\n     private final static Map<Class<?>/* Class */, byte[]/* bytes of Class */> classBytesCache = new WeakHashMap<Class<?>, byte[]>();\n+    private static SpyImpl spyImpl = new SpyImpl();\n+\n+    static {\n+        SpyAPI.setSpy(spyImpl);\n+    }\n \n     /**\n      * @param adviceId          通知编号\n@@ -78,7 +86,7 @@ public class Enhancer implements ClassFileTransformer {\n      * @param methodNameMatcher 方法名匹配\n      * @param affect            影响统计\n      */\n-    private Enhancer(AdviceListener listener, boolean isTracing, boolean skipJDKTrace, Set<Class<?>> matchingClasses,\n+    Enhancer(AdviceListener listener, boolean isTracing, boolean skipJDKTrace, Set<Class<?>> matchingClasses,\n             Matcher methodNameMatcher, EnhancerAffect affect) {\n         this.listener = listener;\n         this.isTracing = isTracing;\n@@ -131,27 +139,46 @@ public static void onInvokeException(@Binding.This Object target, @Binding.Class\n     }\n \n     public static class SpyTraceInterceptor {\n-        @AtInvoke(name = \"\", inline = true, whenComplete = false, excludes = \"java.arthas.SpyAPI\")\n+        @AtInvoke(name = \"\", inline = true, whenComplete = false, excludes = {\"java.arthas.SpyAPI\", \"java.lang.Byte\"\n+                , \"java.lang.Boolean\"\n+                , \"java.lang.Short\"\n+                , \"java.lang.Character\"\n+                , \"java.lang.Integer\"\n+                , \"java.lang.Float\"\n+                , \"java.lang.Long\"\n+                , \"java.lang.Double\"})\n         public static void onInvoke(@Binding.This Object target, @Binding.Class Class<?> clazz,\n                 @Binding.InvokeInfo String invokeInfo) {\n             SpyAPI.atBeforeInvoke(clazz, invokeInfo, target);\n         }\n \n-        @AtInvoke(name = \"\", inline = true, whenComplete = true, excludes = \"java.arthas.SpyAPI\")\n+        @AtInvoke(name = \"\", inline = true, whenComplete = true, excludes = {\"java.arthas.SpyAPI\", \"java.lang.Byte\"\n+                , \"java.lang.Boolean\"\n+                , \"java.lang.Short\"\n+                , \"java.lang.Character\"\n+                , \"java.lang.Integer\"\n+                , \"java.lang.Float\"\n+                , \"java.lang.Long\"\n+                , \"java.lang.Double\"})\n         public static void onInvokeAfter(@Binding.This Object target, @Binding.Class Class<?> clazz,\n                 @Binding.InvokeInfo String invokeInfo) {\n             SpyAPI.atAfterInvoke(clazz, invokeInfo, target);\n         }\n \n-        @AtInvokeException(name = \"\", inline = true, excludes = \"java.arthas.SpyAPI\")\n+        @AtInvokeException(name = \"\", inline = true, excludes = {\"java.arthas.SpyAPI\", \"java.lang.Byte\"\n+                , \"java.lang.Boolean\"\n+                , \"java.lang.Short\"\n+                , \"java.lang.Character\"\n+                , \"java.lang.Integer\"\n+                , \"java.lang.Float\"\n+                , \"java.lang.Long\"\n+                , \"java.lang.Double\"})\n         public static void onInvokeException(@Binding.This Object target, @Binding.Class Class<?> clazz,\n                 @Binding.InvokeInfo String invokeInfo, @Binding.Throwable Throwable throwable) {\n             SpyAPI.atInvokeException(clazz, invokeInfo, target, throwable);\n         }\n     }\n \n-    com.taobao.arthas.core.bytecode.SpyImpl spyImpl = new com.taobao.arthas.core.bytecode.SpyImpl();\n-\n     @Override\n     public byte[] transform(final ClassLoader inClassLoader, String className, Class<?> classBeingRedefined,\n             ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n@@ -162,23 +189,14 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class\n                 return null;\n             }\n \n-            ClassNode classNode;\n-\n-            SpyAPI.setSpy(spyImpl);\n-\n             // 首先先检查是否在缓存中存在Class字节码\n             // 因为要支持多人协作,存在多人同时增强的情况\n-//            final byte[] byteOfClassInCache = classBytesCache.get(classBeingRedefined);\n-//            if (null != byteOfClassInCache) {\n-//                classNode = AsmUtils.toClassNode(byteOfClassInCache);\n-//            }\n-//\n-//            // 如果没有命中缓存,则从原始字节码开始增强\n-//            else {\n-//                classNode = AsmUtils.toClassNode(classfileBuffer);\n-//            }\n-\n-            classNode = AsmUtils.toClassNode(classfileBuffer);\n+            final byte[] byteOfClassInCache = classBytesCache.get(classBeingRedefined);\n+            if (null != byteOfClassInCache) {\n+                classfileBuffer = byteOfClassInCache;\n+            }\n+\n+            ClassNode classNode = AsmUtils.toClassNode(classfileBuffer);\n \n             // 生成增强字节码\n             DefaultInterceptorClassParser defaultInterceptorClassParser = new DefaultInterceptorClassParser();\n@@ -380,8 +398,11 @@ public static synchronized EnhancerAffect enhance(final Instrumentation inst, fi\n         // 构建增强器\n         final Enhancer enhancer = new Enhancer(listener, isTracing, skipJDKTrace, enhanceClassSet, methodNameMatcher,\n                 affect);\n+        affect.setTransformer(enhancer);\n+\n         try {\n-            inst.addTransformer(enhancer, true);\n+            ArthasBootstrap.getInstance().getTransformerManager().addTransformer(enhancer, isTracing);\n+            //inst.addTransformer(enhancer, true);\n \n             // 批量增强\n             if (GlobalOptions.isBatchReTransform) {\n@@ -411,7 +432,7 @@ public static synchronized EnhancerAffect enhance(final Instrumentation inst, fi\n                 }\n             }\n         } finally {\n-            inst.removeTransformer(enhancer);\n+            //inst.removeTransformer(enhancer);\n         }\n \n         return affect;",
    "output": "exclude box/unbox method when trace method"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -323,7 +323,7 @@ public Binding parse(Annotation annotation) {\n     public static class MethodInfoBindingParser implements BindingParser {\n         @Override\n         public Binding parse(Annotation annotation) {\n-            return new MethodDeclarationBinding();\n+            return new MethodInfoBinding();\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerAdapter.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerAdapter.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerAdapter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceListenerAdapter.java\n@@ -1,43 +0,0 @@\n-package com.taobao.arthas.core.advisor;\n-\n-/**\n- * 通知监听适配器\n- */\n-public class AdviceListenerAdapter implements AdviceListener {\n-\n-\n-    @Override\n-    public void create() {\n-\n-    }\n-\n-    @Override\n-    public void destroy() {\n-\n-    }\n-\n-    @Override\n-    public void before(\n-            ClassLoader loader, String className, String methodName, String methodDesc,\n-            Object target, Object[] args) throws Throwable {\n-\n-    }\n-\n-    @Override\n-    public void afterReturning(\n-            ClassLoader loader, String className, String methodName, String methodDesc,\n-            Object target, Object[] args,\n-            Object returnObject) throws Throwable {\n-\n-    }\n-\n-    @Override\n-    public void afterThrowing(\n-            ClassLoader loader, String className, String methodName, String methodDesc,\n-            Object target, Object[] args,\n-            Throwable throwable) throws Throwable {\n-\n-    }\n-\n-}\n-\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -4,7 +4,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.TimeUnit;\n \n@@ -23,15 +22,9 @@\n  * @author gehui 2017年7月31日 上午11:55:41\n  */\n public class GlobalJobControllerImpl extends JobControllerImpl {\n-\n-    private Timer timer;\n     private Map<Integer, TimerTask> jobTimeoutTaskMap = new HashMap<Integer, TimerTask>();\n     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);\n \n-    public GlobalJobControllerImpl() {\n-        timer = ArthasBootstrap.getInstance().getTimer();\n-    }\n-\n     @Override\n     public void close(final Handler<Void> completionHandler) {\n         if (completionHandler != null) {\n@@ -70,7 +63,7 @@ public void run() {\n             }\n         };\n         Date timeoutDate = new Date(System.currentTimeMillis() + (getJobTimeoutInSecond() * 1000));\n-        timer.schedule(jobTimeoutTask, timeoutDate);\n+        ArthasBootstrap.getInstance().getTimer().schedule(jobTimeoutTask, timeoutDate);\n         jobTimeoutTaskMap.put(job.id(), jobTimeoutTask);\n         job.setTimeoutDate(timeoutDate);\n ",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -321,6 +321,7 @@ public boolean isBind() {\n     }\n \n     public void destroy() {\n+        timer.cancel();\n         if (this.tunnelClient != null) {\n             try {\n                 tunnelClient.stop();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -41,7 +41,6 @@ public void close(final Handler<Void> completionHandler) {\n \n     @Override\n     public void close() {\n-        timer.cancel();\n         jobTimeoutTaskMap.clear();\n         for (Job job : jobs()) {\n             job.terminate();",
    "output": "update timer"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n@@ -20,7 +20,7 @@ public class MethodInfoBinding extends Binding {\n     public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n         MethodProcessor methodProcessor = bindingContext.getMethodProcessor();\n         MethodNode methodNode = methodProcessor.getMethodNode();\n-        AsmOpUtils.ldc(instructions, methodNode.name + methodNode.desc);\n+        AsmOpUtils.ldc(instructions, methodNode.name + '|' +  methodNode.desc);\n     }\n \n     @Override",
    "output": "fix MethodInfoBinding"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -13,6 +13,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Properties;\n+import java.util.Timer;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n@@ -77,6 +78,8 @@ public class ArthasBootstrap {\n \n     private static LoggerContext loggerContext;\n \n+    private Timer timer = new Timer(\"arthas-timer\", true);\n+\n     private ArthasBootstrap(Instrumentation instrumentation, String args) throws Throwable {\n         this.instrumentation = instrumentation;\n \n@@ -387,6 +390,10 @@ public TunnelClient getTunnelClient() {\n         return tunnelClient;\n     }\n \n+    public Timer getTimer() {\n+        return this.timer;\n+    }\n+\n     private Logger logger() {\n         return LoggerFactory.getLogger(this.getClass());\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -11,11 +11,11 @@\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.GlobalOptions;\n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.cli.CliToken;\n import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.impl.ShellImpl;\n import com.taobao.arthas.core.shell.system.Job;\n-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n \n /**\n  * 全局的Job Controller，不应该存在启停的概念，不需要在连接的断开时关闭，\n@@ -24,10 +24,14 @@\n  */\n public class GlobalJobControllerImpl extends JobControllerImpl {\n \n-    private Timer timer = new Timer(\"arthas-job-timeout\", true);\n+    private Timer timer;\n     private Map<Integer, TimerTask> jobTimeoutTaskMap = new HashMap<Integer, TimerTask>();\n     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);\n \n+    public GlobalJobControllerImpl() {\n+        timer = ArthasBootstrap.getInstance().getTimer();\n+    }\n+\n     @Override\n     public void close(final Handler<Void> completionHandler) {\n         if (completionHandler != null) {",
    "output": "add timmer in ArthasBootstrap"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -24,7 +24,7 @@\n  */\n public class GlobalJobControllerImpl extends JobControllerImpl {\n \n-    private Timer timer = new Timer(\"job-timeout\", true);\n+    private Timer timer = new Timer(\"arthas-job-timeout\", true);\n     private Map<Integer, TimerTask> jobTimeoutTaskMap = new HashMap<Integer, TimerTask>();\n     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);\n ",
    "output": "better job timeout timer name"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {\n     private String level;\n \n     /**\n-     * include the logger don't have appender, default false.\n+     * include the loggers which don't have appenders, default false.\n      */\n     private boolean includeNoAppender;\n \n@@ -104,7 +104,7 @@ public void setLevel(String level) {\n     }\n \n     @Option(longName = \"include-no-appender\", flag = true)\n-    @Description(\"include the loggers don't have appender, default value false\")\n+    @Description(\"include the loggers which don't have appenders, default value false\")\n     public void setHaveAppender(boolean includeNoAppender) {\n         this.includeNoAppender = includeNoAppender;\n     }",
    "output": "Merge remote-tracking branch 'upstream/master' into fix-issue-1151"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -312,6 +312,21 @@ public Binding parse(Annotation annotation) {\n         }\n     }\n \n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @java.lang.annotation.Target(ElementType.PARAMETER)\n+    @BindingParserHandler(parser = MethodInfoBindingParser.class)\n+    public static @interface MethodInfo {\n+        boolean optional() default false;\n+    }\n+\n+    public static class MethodInfoBindingParser implements BindingParser {\n+        @Override\n+        public Binding parse(Annotation annotation) {\n+            return new MethodDeclarationBinding();\n+        }\n+    }\n+\n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java\n@@ -0,0 +1,30 @@\n+package com.taobao.arthas.bytekit.asm.binding;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.InsnList;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodNode;\n+import com.taobao.arthas.bytekit.asm.MethodProcessor;\n+import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n+\n+/**\n+ * method name | method desc 的方式组织\n+ * \n+ * TODO 是否要有 line number ?\n+ * \n+ * @author hengyunabc 2020-05-16\n+ *\n+ */\n+public class MethodInfoBinding extends Binding {\n+\n+    @Override\n+    public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n+        MethodProcessor methodProcessor = bindingContext.getMethodProcessor();\n+        MethodNode methodNode = methodProcessor.getMethodNode();\n+        AsmOpUtils.ldc(instructions, methodNode.name + methodNode.desc);\n+    }\n+\n+    @Override\n+    public Type getType(BindingContext bindingContext) {\n+        return Type.getType(String.class);\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -92,23 +92,21 @@ public static class SpyInterceptor {\n \n         @AtEnter(inline = true)\n         public static void atEnter(@Binding.This Object target, @Binding.Class Class<?> clazz,\n-                @Binding.MethodName String methodName, @Binding.MethodDesc String methodDesc,\n-                @Binding.Args Object[] args) {\n-            SpyAPI.atEnter(clazz, methodName, methodDesc, target, args);\n+                @Binding.MethodInfo String methodInfo, @Binding.Args Object[] args) {\n+            SpyAPI.atEnter(clazz, methodInfo, target, args);\n         }\n \n         @AtExit(inline = true)\n         public static void atExit(@Binding.This Object target, @Binding.Class Class<?> clazz,\n-                @Binding.MethodName String methodName, @Binding.MethodDesc String methodDesc,\n-                @Binding.Args Object[] args, @Binding.Return Object returnObj) {\n-            SpyAPI.atExit(clazz, methodName, methodDesc, target, args, returnObj);\n+                @Binding.MethodInfo String methodInfo, @Binding.Args Object[] args, @Binding.Return Object returnObj) {\n+            SpyAPI.atExit(clazz, methodInfo, target, args, returnObj);\n         }\n \n         @AtExceptionExit(inline = true)\n         public static void atExceptionExit(@Binding.This Object target, @Binding.Class Class<?> clazz,\n-                @Binding.MethodName String methodName, @Binding.MethodDesc String methodDesc,\n-                @Binding.Args Object[] args, @Binding.Throwable Throwable throwable) {\n-            SpyAPI.atExceptionExit(clazz, methodName, methodDesc, target, args, throwable);\n+                @Binding.MethodInfo String methodInfo, @Binding.Args Object[] args,\n+                @Binding.Throwable Throwable throwable) {\n+            SpyAPI.atExceptionExit(clazz, methodInfo, target, args, throwable);\n         }\n     }\n \n\ndiff --git a/spy/src/main/java/java/arthas/SpyAPI.java b/spy/src/main/java/java/arthas/SpyAPI.java\n--- a/spy/src/main/java/java/arthas/SpyAPI.java\n+++ b/spy/src/main/java/java/arthas/SpyAPI.java\n@@ -32,18 +32,18 @@ public static void setSpy(AbstractSpy spy) {\n         spyInstance = spy;\n     }\n \n-    public static void atEnter(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args) {\n-        spyInstance.atEnter(clazz, methodName, methodDesc, target, args);\n+    public static void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] args) {\n+        spyInstance.atEnter(clazz, methodInfo, target, args);\n     }\n \n-    public static void atExit(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args,\n+    public static void atExit(Class<?> clazz, String methodInfo, Object target, Object[] args,\n             Object returnObject) {\n-        spyInstance.atExit(clazz, methodName, methodDesc, target, args, returnObject);\n+        spyInstance.atExit(clazz, methodInfo, target, args, returnObject);\n     }\n \n-    public static void atExceptionExit(Class<?> clazz, String methodName, String methodDesc, Object target,\n+    public static void atExceptionExit(Class<?> clazz, String methodInfo, Object target,\n             Object[] args, Throwable throwable) {\n-        spyInstance.atExceptionExit(clazz, methodName, methodDesc, target, args, throwable);\n+        spyInstance.atExceptionExit(clazz, methodInfo, target, args, throwable);\n     }\n \n     public static void atBeforeInvoke(Class<?> clazz, String invokeInfo, Object target) {\n@@ -59,13 +59,13 @@ public static void atInvokeException(Class<?> clazz, String invokeInfo, Object t\n     }\n \n     public static abstract class AbstractSpy {\n-        public abstract void atEnter(Class<?> clazz, String methodName, String methodDesc, Object target,\n+        public abstract void atEnter(Class<?> clazz, String methodInfo, Object target,\n                 Object[] args);\n \n-        public abstract void atExit(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args,\n+        public abstract void atExit(Class<?> clazz, String methodInfo, Object target, Object[] args,\n                 Object returnObject);\n \n-        public abstract void atExceptionExit(Class<?> clazz, String methodName, String methodDesc, Object target,\n+        public abstract void atExceptionExit(Class<?> clazz, String methodInfo, Object target,\n                 Object[] args, Throwable throwable);\n \n         public abstract void atBeforeInvoke(Class<?> clazz, String invokeInfo, Object target);\n@@ -78,16 +78,16 @@ public abstract void atExceptionExit(Class<?> clazz, String methodName, String m\n     static class NopSpy extends AbstractSpy {\n \n         @Override\n-        public void atEnter(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args) {\n+        public void atEnter(Class<?> clazz, String methodInfo, Object target, Object[] args) {\n         }\n \n         @Override\n-        public void atExit(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args,\n+        public void atExit(Class<?> clazz, String methodInfo, Object target, Object[] args,\n                 Object returnObject) {\n         }\n \n         @Override\n-        public void atExceptionExit(Class<?> clazz, String methodName, String methodDesc, Object target, Object[] args,\n+        public void atExceptionExit(Class<?> clazz, String methodInfo, Object target, Object[] args,\n                 Throwable throwable) {\n         }\n ",
    "output": "support MethodInfo binding"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {\n     private String level;\n \n     /**\n-     * include the logger don't have appender, default false.\n+     * include the logger which don't have appenders, default false.\n      */\n     private boolean includeNoAppender;\n \n@@ -104,7 +104,7 @@ public void setLevel(String level) {\n     }\n \n     @Option(longName = \"include-no-appender\", flag = true)\n-    @Description(\"include the loggers don't have appender, default value false\")\n+    @Description(\"include the loggers which don't have appenders, default value false\")\n     public void setHaveAppender(boolean includeNoAppender) {\n         this.includeNoAppender = includeNoAppender;\n     }",
    "output": "Fix grammar issue (#1176)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -52,7 +52,10 @@ public class ThreadCommand extends AnnotatedCommand {\n     private int sampleInterval = 100;\n     private String state;\n \n-    {\n+    private boolean lockedMonitors = false;\n+    private boolean lockedSynchronizers = false;\n+\n+    static {\n         states = new HashSet<String>(State.values().length);\n         for (State state : State.values()) {\n             states.add(state.name());\n@@ -89,6 +92,18 @@ public void setState(String state) {\n         this.state = state;\n     }\n \n+    @Option(longName = \"lockedMonitors\", flag = true)\n+    @Description(\"Find the thread info with lockedMonitors flag, default value is false.\")\n+    public void setLockedMonitors(boolean lockedMonitors) {\n+        this.lockedMonitors = lockedMonitors;\n+    }\n+\n+    @Option(longName = \"lockedSynchronizers\", flag = true)\n+    @Description(\"Find the thread info with lockedSynchronizers flag, default value is false.\")\n+    public void setLockedSynchronizers(boolean lockedSynchronizers) {\n+        this.lockedSynchronizers = lockedSynchronizers;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         Affect affect = new RowAffect();\n@@ -176,7 +191,7 @@ private int processTopBusyThreads(CommandProcess process) {\n         int status = 0;\n         Map<Long, Long> topNThreads = ThreadUtil.getTopNThreads(sampleInterval, topNBusy);\n         Long[] tids = topNThreads.keySet().toArray(new Long[0]);\n-        ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ArrayUtils.toPrimitive(tids), true, true);\n+        ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ArrayUtils.toPrimitive(tids), lockedMonitors, lockedSynchronizers);\n         if (threadInfos == null) {\n             process.write(\"thread do not exist! id: \" + id + \"\\n\");\n             status = 1;\n@@ -192,7 +207,7 @@ private int processTopBusyThreads(CommandProcess process) {\n     private int processThread(CommandProcess process) {\n         int status = 0;\n         String content;\n-        ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(new long[]{id}, true, true);\n+        ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(new long[]{id}, lockedMonitors, lockedSynchronizers);\n         if (threadInfos == null || threadInfos[0] == null) {\n             content = \"thread do not exist! id: \" + id + \"\\n\";\n             status = 1;",
    "output": "fix thread command cause application InterruptedException problem. #1175"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/interceptor/annotation/AtInvokeException.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/interceptor/annotation/AtInvokeException.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/interceptor/annotation/AtInvokeException.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/interceptor/annotation/AtInvokeException.java\n@@ -0,0 +1,102 @@\n+package com.taobao.arthas.bytekit.asm.interceptor.annotation;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.taobao.arthas.bytekit.asm.binding.Binding;\n+import com.taobao.arthas.bytekit.asm.interceptor.InterceptorMethodConfig;\n+import com.taobao.arthas.bytekit.asm.interceptor.InterceptorProcessor;\n+import com.taobao.arthas.bytekit.asm.interceptor.annotation.AtInvokeException.InvokeExceptionInterceptorProcessorParser;\n+import com.taobao.arthas.bytekit.asm.interceptor.parser.InterceptorProcessorParser;\n+import com.taobao.arthas.bytekit.asm.location.InvokeLocationMatcher;\n+import com.taobao.arthas.bytekit.asm.location.LocationMatcher;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-05-03\n+ *\n+ */\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@java.lang.annotation.Target(ElementType.METHOD)\n+@InterceptorParserHander(parserHander = InvokeExceptionInterceptorProcessorParser.class)\n+public @interface AtInvokeException {\n+    boolean inline() default true;\n+\n+    Class<? extends Throwable> suppress() default None.class;\n+\n+    Class<?> suppressHandler() default Void.class;\n+\n+    Class<?> owner() default Void.class;\n+\n+    /**\n+     * method name\n+     * \n+     * @return\n+     */\n+    String name();\n+\n+    String desc() default \"\";\n+\n+    int count() default -1;\n+\n+    String[] excludes() default {};\n+\n+    class InvokeExceptionInterceptorProcessorParser implements InterceptorProcessorParser {\n+\n+        @Override\n+        public InterceptorProcessor parse(Method method, Annotation annotationOnMethod) {\n+\n+            InterceptorProcessor interceptorProcessor = new InterceptorProcessor(\n+                    method.getDeclaringClass().getClassLoader());\n+            InterceptorMethodConfig interceptorMethodConfig = new InterceptorMethodConfig();\n+            interceptorProcessor.setInterceptorMethodConfig(interceptorMethodConfig);\n+\n+            interceptorMethodConfig.setOwner(Type.getInternalName(method.getDeclaringClass()));\n+            interceptorMethodConfig.setMethodName(method.getName());\n+            interceptorMethodConfig.setMethodDesc(Type.getMethodDescriptor(method));\n+\n+            AtInvokeException atInvokeException = (AtInvokeException) annotationOnMethod;\n+\n+            String owner = null;\n+            String desc = null;\n+            if (!atInvokeException.owner().equals(Void.class)) {\n+                owner = Type.getType(atInvokeException.owner()).getInternalName();\n+            }\n+            if (atInvokeException.desc().isEmpty()) {\n+                desc = null;\n+            }\n+\n+            List<String> excludes = new ArrayList<String>();\n+            for (String exclude : atInvokeException.excludes()) {\n+                excludes.add(exclude);\n+            }\n+\n+            LocationMatcher locationMatcher = new InvokeLocationMatcher(owner, atInvokeException.name(), desc,\n+                    atInvokeException.count(), true, excludes, true);\n+            interceptorProcessor.setLocationMatcher(locationMatcher);\n+\n+            interceptorMethodConfig.setInline(atInvokeException.inline());\n+\n+            List<Binding> bindings = BindingParserUtils.parseBindings(method);\n+\n+            interceptorMethodConfig.setBindings(bindings);\n+\n+            InterceptorMethodConfig errorHandlerMethodConfig = ExceptionHandlerUtils\n+                    .errorHandlerMethodConfig(atInvokeException.suppress(), atInvokeException.suppressHandler());\n+            if (errorHandlerMethodConfig != null) {\n+                interceptorProcessor.setExceptionHandlerConfig(errorHandlerMethodConfig);\n+            }\n+\n+            return interceptorProcessor;\n+        }\n+\n+    }\n+}",
    "output": "add AtInvokeException.java"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -248,6 +248,23 @@ public Binding parse(Annotation annotation) {\n         }\n     }\n \n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @java.lang.annotation.Target(ElementType.PARAMETER)\n+    @BindingParserHandler(parser = InvokeInfoBindingParser.class)\n+    public static @interface InvokeInfo {\n+\n+        boolean optional() default false;\n+\n+    }\n+\n+    public static class InvokeInfoBindingParser implements BindingParser {\n+        @Override\n+        public Binding parse(Annotation annotation) {\n+            return new InvokeInfoBinding();\n+        }\n+    }\n+\n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeInfoBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeInfoBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeInfoBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/InvokeInfoBinding.java\n@@ -0,0 +1,64 @@\n+package com.taobao.arthas.bytekit.asm.binding;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.AbstractInsnNode;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.InsnList;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.LineNumberNode;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.MethodInsnNode;\n+import com.taobao.arthas.bytekit.asm.location.MethodInsnNodeWare;\n+import com.taobao.arthas.bytekit.asm.location.Location;\n+import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n+\n+/**\n+ * 包含 owner/method name/ method desc/ line number\n+ * \n+ * @author hengyunabc 2020-05-14\n+ *\n+ */\n+public class InvokeInfoBinding extends Binding {\n+\n+    @Override\n+    public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n+        Location location = bindingContext.getLocation();\n+        if (location instanceof MethodInsnNodeWare) {\n+            MethodInsnNodeWare methodInsnNodeWare = (MethodInsnNodeWare) location;\n+            MethodInsnNode methodInsnNode = methodInsnNodeWare.methodInsnNode();\n+\n+            int line = -1;\n+\n+            if (location.isWhenComplete() == false) {\n+                AbstractInsnNode insnNode = methodInsnNode.getPrevious();\n+                while (insnNode != null) {\n+                    if (insnNode instanceof LineNumberNode) {\n+                        line = ((LineNumberNode) insnNode).line;\n+                        break;\n+                    }\n+                    insnNode = insnNode.getPrevious();\n+                }\n+            } else {\n+                AbstractInsnNode insnNode = methodInsnNode.getNext();\n+                while (insnNode != null) {\n+                    if (insnNode instanceof LineNumberNode) {\n+                        line = ((LineNumberNode) insnNode).line;\n+                        break;\n+                    }\n+                    insnNode = insnNode.getNext();\n+                }\n+            }\n+\n+            String result = methodInsnNode.owner + \"|\" + methodInsnNode.name + \"|\" + methodInsnNode.desc + \"|\" + line;\n+            AsmOpUtils.push(instructions, result);\n+\n+        } else {\n+            throw new IllegalArgumentException(\n+                    \"InvokeMethodNameBinding location is not Invocation location, location: \" + location);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Type getType(BindingContext bindingContext) {\n+        return Type.getType(String.class);\n+    }\n+\n+}",
    "output": "add InvokeInfo binding"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n@@ -26,21 +26,33 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n         Location location = bindingContext.getLocation();\n         AbstractInsnNode insnNode = location.getInsnNode();\n \n+        int line = -1;\n         if (exact) {\n             if (insnNode instanceof LineNumberNode) {\n-                AsmOpUtils.push(instructions, ((LineNumberNode) insnNode).line);\n+                line = ((LineNumberNode) insnNode).line;\n             } else {\n                 throw new IllegalArgumentException(\"LineBinding location is not LineNumberNode, insnNode: \" + insnNode);\n             }\n         } else {\n-            while (insnNode != null) {\n-                if (insnNode instanceof LineNumberNode) {\n-                    AsmOpUtils.push(instructions, ((LineNumberNode) insnNode).line);\n-                    break;\n+            if (location.isWhenComplete() == false) {\n+                while (insnNode != null) {\n+                    if (insnNode instanceof LineNumberNode) {\n+                        line = ((LineNumberNode) insnNode).line;\n+                        break;\n+                    }\n+                    insnNode = insnNode.getPrevious();\n+                }\n+            } else {\n+                while (insnNode != null) {\n+                    if (insnNode instanceof LineNumberNode) {\n+                        line = ((LineNumberNode) insnNode).line;\n+                        break;\n+                    }\n+                    insnNode = insnNode.getNext();\n                 }\n-                insnNode = insnNode.getPrevious();\n             }\n         }\n+        AsmOpUtils.push(instructions, line);\n     }\n \n     @Override",
    "output": "LineBinding support location whenComplete"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -56,6 +56,7 @@ public class JadCommand extends AnnotatedCommand {\n     private String methodName;\n     private String code = null;\n     private boolean isRegEx = false;\n+    private boolean hideUnicode = false;\n \n     /**\n      * jad output source code only\n@@ -87,6 +88,12 @@ public void setRegEx(boolean regEx) {\n         isRegEx = regEx;\n     }\n \n+    @Option(longName = \"hideUnicode\", flag = true)\n+    @Description(\"hide unicode, default value false\")\n+    public void setHideUnicode(boolean hideUnicode) {\n+        this.hideUnicode = hideUnicode;\n+    }\n+\n     @Option(longName = \"source-only\", flag = true)\n     @Description(\"Output source code only\")\n     public void setSourceOnly(boolean sourceOnly) {\n@@ -153,7 +160,7 @@ private void processExactMatch(CommandProcess process, RowAffect affect, Instrum\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n \n-            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName);\n+            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName, hideUnicode);\n             if (source != null) {\n                 source = pattern.matcher(source).replaceAll(\"\");\n             } else {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -16,12 +16,17 @@\n  */\n public class Decompiler {\n \n+    public static String decompile(String classFilePath, String methodName) {\n+        return decompile(classFilePath, methodName, false);\n+    }\n+\n     /**\n      * @param classFilePath\n      * @param methodName\n+     * @param hideUnicode\n      * @return\n      */\n-    public static String decompile(String classFilePath, String methodName) {\n+    public static String decompile(String classFilePath, String methodName, boolean hideUnicode) {\n         final StringBuilder result = new StringBuilder(8192);\n \n         OutputSinkFactory mySink = new OutputSinkFactory() {\n@@ -52,6 +57,7 @@ public void write(T sinkable) {\n          *      the cfr version is wrong. so disable show cfr version.\n          */\n         options.put(\"showversion\", \"false\");\n+        options.put(\"hideutf\", String.valueOf(hideUnicode));\n         if (!StringUtils.isBlank(methodName)) {\n             options.put(\"methodname\", methodName);\n         }",
    "output": "jad command better support unicode. #1169"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java b/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n@@ -70,6 +70,9 @@ public void testSupportedPipeCharWithRegex() {\n      * case2:\n      * trace -E classA|classB methodA|methodB|grep classA\n      * [trace, -E, classA|classB, methodA|methodB|grep, classA] -> [trace, -E, classA|classB, methodA|methodB|grep, classA]\n+     * case3:\n+     * trace -E classA|classB| methodA|methodB | grep classA\n+     * [trace, -E, classA|classB|, methodA|methodB, |, grep, classA] -> [trace, -E, classA|classB，|, methodA|methodB, |, grep, classA]\n      */\n     @Test\n     public void testUnSupportedPipeChar() {\n@@ -80,6 +83,10 @@ public void testUnSupportedPipeChar() {\n         expectedTextTokenValue = new String[]{\"trace\", \"-E\", \"classA|classB\", \"methodA|methodB|grep\", \"classA\"};\n         actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB methodA|methodB|grep classA\");\n         assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        expectedTextTokenValue = new String[]{\"trace\", \"-E\", \"classA|classB\", \"|\", \"methodA|methodB\", \"|\", \"grep\", \"classA\"};\n+        actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB| methodA|methodB | grep classA\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n     }\n \n     private void assertEquals(String[] expectedTextTokenValue, List<CliToken> actualTokens) {",
    "output": "add unsupported testcase scenario"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java b/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImplTest.java\n@@ -0,0 +1,103 @@\n+package com.taobao.arthas.core.shell.cli.impl;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class CliTokenImplTest {\n+\n+    /**\n+     * supported:\n+     * <p>\n+     * case1:\n+     * thread| grep xxx\n+     * [thread|, grep, xxx] -> [thread, |, grep, xxx]\n+     * case:2\n+     * thread | grep xxx\n+     * [thread, |, grep, xxx] -> [thread, |, grep, xxx]\n+     * case3:\n+     * thread |grep xxx\n+     * [thread, |grep] -> [thread, |, grep, xxx]\n+     */\n+    @Test\n+    public void testSupportedPipeCharWithoutRegex() {\n+        String[] expectedTextTokenValue = new String[]{\"thread\", \"|\", \"grep\", \"xxx\"};\n+        List<CliToken> actualTokens = CliTokenImpl.tokenize(\"thread| grep xxx\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        actualTokens = CliTokenImpl.tokenize(\"thread | grep xxx\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        actualTokens = CliTokenImpl.tokenize(\"thread |grep xxx\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+    }\n+\n+    /**\n+     * supported:\n+     * <p>\n+     * case1:\n+     * trace -E classA|classB methodA|methodB| grep classA\n+     * [trace, -E, classA|classB, methodA|methodB|, grep, classA] -> [trace, -E, classA|classB, methodA|methodB, |, grep, classA]\n+     * case2:\n+     * trace -E classA|classB methodA|methodB | grep classA\n+     * [trace, -E, classA|classB, methodA|methodB, |, grep, classA] -> [trace, -E, classA|classB, methodA|methodB, |, grep, classA]\n+     * case3:\n+     * trace -E classA|classB methodA|methodB |grep classA\n+     * [trace, -E, classA|classB, methodA|methodB, |grep, classA] -> [trace, -E, classA|classB, methodA|methodB, |, grep, classA]\n+     */\n+    @Test\n+    public void testSupportedPipeCharWithRegex() {\n+        String[] expectedTextTokenValue = new String[]{\"trace\", \"-E\", \"classA|classB\", \"methodA|methodB\", \"|\", \"grep\", \"classA\"};\n+        List<CliToken> actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB methodA|methodB| grep classA\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB methodA|methodB | grep classA\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB methodA|methodB |grep classA\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+    }\n+\n+    /**\n+     * unsupported:\n+     * <p>\n+     * case1:\n+     * thread|grep xxx\n+     * [thread|grep, xxx] -> [thread|grep, xxx]\n+     * case2:\n+     * trace -E classA|classB methodA|methodB|grep classA\n+     * [trace, -E, classA|classB, methodA|methodB|grep, classA] -> [trace, -E, classA|classB, methodA|methodB|grep, classA]\n+     */\n+    @Test\n+    public void testUnSupportedPipeChar() {\n+        String[] expectedTextTokenValue = new String[]{\"thread|grep\", \"xxx\"};\n+        List<CliToken> actualTokens = CliTokenImpl.tokenize(\"thread|grep xxx\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+\n+        expectedTextTokenValue = new String[]{\"trace\", \"-E\", \"classA|classB\", \"methodA|methodB|grep\", \"classA\"};\n+        actualTokens = CliTokenImpl.tokenize(\"trace -E classA|classB methodA|methodB|grep classA\");\n+        assertEquals(expectedTextTokenValue, actualTokens);\n+    }\n+\n+    private void assertEquals(String[] expectedTextTokenValue, List<CliToken> actualTokens) {\n+        removeBlankToken(actualTokens);\n+        for (int i = 0; i < expectedTextTokenValue.length; i++) {\n+            Assert.assertEquals(expectedTextTokenValue[i], actualTokens.get(i).value());\n+        }\n+    }\n+\n+    private void removeBlankToken(List<CliToken> cliTokens) {\n+        CliToken blankToken = new CliTokenImpl(false, \" \");\n+        Iterator<CliToken> it = cliTokens.iterator();\n+        while (it.hasNext()) {\n+            CliToken token = it.next();\n+            if (blankToken.equals(token)) {\n+                it.remove();\n+            }\n+        }\n+    }\n+\n+}",
    "output": "add testcase"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/impl/CliTokenImpl.java\n@@ -3,6 +3,7 @@\n import com.taobao.arthas.core.shell.cli.CliToken;\n import io.termd.core.readline.LineStatus;\n \n+import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n \n@@ -70,10 +71,53 @@ public static List<CliToken> tokenize(String s) {\n \n         tokenize(s, 0, tokens);\n \n+        tokens = correctPipeChar(tokens);\n         return tokens;\n \n     }\n \n+    /**\n+     * fix pipe char '|' problem: https://github.com/alibaba/arthas/issues/1151\n+     * supported:\n+     * 1) thread| grep xxx\n+     *   [thread|, grep]  -> [thread, |, grep]\n+     * 2) thread |grep xxx\n+     *   [thread, |grep] -> [thread, |, grep]\n+     *\n+     * unsupported:\n+     * 3) thread|grep xxx\n+     * 4) trace -E  classA|classB methodA|methodB|grep classA\n+     * @param tokens\n+     * @return\n+     */\n+    private static List<CliToken> correctPipeChar(List<CliToken> tokens) {\n+        List<CliToken> newTokens = new ArrayList<CliToken>(tokens.size()+4);\n+        for (CliToken token : tokens) {\n+            String tokenValue = token.value();\n+            if (tokenValue.length()>1 && tokenValue.endsWith(\"|\")) {\n+                //split last char '|'\n+                tokenValue = tokenValue.substring(0, tokenValue.length()-1);\n+                String rawValue = token.raw();\n+                rawValue = rawValue.substring(0, rawValue.length()-1);\n+                newTokens.add(new CliTokenImpl(token.isText(), rawValue, tokenValue));\n+                //add '|' char\n+                newTokens.add(new CliTokenImpl(true, \"|\", \"|\"));\n+\n+            } else if (tokenValue.length()>1 && tokenValue.startsWith(\"|\")) {\n+                //add '|' char\n+                newTokens.add(new CliTokenImpl(true, \"|\", \"|\"));\n+                //remove first char '|'\n+                tokenValue = tokenValue.substring(1);\n+                String rawValue = token.raw();\n+                rawValue = rawValue.substring(1);\n+                newTokens.add(new CliTokenImpl(token.isText(), rawValue, tokenValue));\n+            } else {\n+                newTokens.add(token);\n+            }\n+        }\n+        return newTokens;\n+    }\n+\n     private static void tokenize(String s, int index, List<CliToken> builder) {\n         while (index < s.length()) {\n             char c = s.charAt(index);",
    "output": "#1151 fix pipe char '|' problem"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n@@ -79,7 +79,7 @@ private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile,\n         Class<?> spyClass = null;\n         if (parent != null) {\n             try {\n-                parent.loadClass(\"java.arthas.Spy\");\n+                spyClass = parent.loadClass(\"java.arthas.Spy\");\n             } catch (Throwable e) {\n                 // ignore\n             }",
    "output": "Avoid append spy jar to BootstrapClassLoader multiple times. fix #996 (#1153)"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtils.java\n@@ -0,0 +1,77 @@\n+package com.taobao.arthas.bytekit.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.AnnotationNode;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-05-04\n+ *\n+ */\n+public class AsmAnnotationUtils {\n+\n+    public static List<String> queryAnnotationInfo(List<AnnotationNode> annotations, String annotationType,\n+            String key) {\n+        List<String> result = new ArrayList<String>();\n+        if (annotations != null) {\n+            for (AnnotationNode annotationNode : annotations) {\n+                if (annotationNode.desc.equals(annotationType)) {\n+                    if (annotationNode.values != null) {\n+                        Iterator<Object> iterator = annotationNode.values.iterator();\n+                        while (iterator.hasNext()) {\n+                            String name = (String) iterator.next();\n+                            Object values = iterator.next();\n+                            if (key.equals(name)) {\n+                                result.addAll((List<String>) values);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public static void addAnnotationInfo(List<AnnotationNode> annotations, String annotationType, String key,\n+            String value) {\n+\n+        AnnotationNode annotationNode = null;\n+        for (AnnotationNode tmp : annotations) {\n+            if (tmp.desc.equals(annotationType)) {\n+                annotationNode = tmp;\n+            }\n+        }\n+\n+        if (annotationNode == null) {\n+            annotationNode = new AnnotationNode(annotationType);\n+            annotations.add(annotationNode);\n+        }\n+\n+        if (annotationNode.values == null) {\n+            annotationNode.values = new ArrayList<Object>();\n+        }\n+\n+        // 查找有没有对应的key\n+        String name = null;\n+        List<String> values = null;\n+        Iterator<Object> iterator = annotationNode.values.iterator();\n+        while (iterator.hasNext()) {\n+            if (key.equals(iterator.next())) {\n+                values = (List<String>) iterator.next();\n+            } else {\n+                iterator.next();\n+            }\n+        }\n+        if (values == null) {\n+            values = new ArrayList<String>();\n+            annotationNode.values.add(key);\n+            annotationNode.values.add(values);\n+        }\n+        if (!values.contains(values)) {\n+            values.add(value);\n+        }\n+    }\n+}\n\ndiff --git a/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtilsTest.java b/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtilsTest.java\n--- a/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtilsTest.java\n+++ b/bytekit/src/test/java/com/taobao/arthas/bytekit/utils/AsmAnnotationUtilsTest.java\n@@ -0,0 +1,78 @@\n+package com.taobao.arthas.bytekit.utils;\n+\n+import java.io.IOException;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Arrays;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+import org.springframework.stereotype.Service;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.ClassNode;\n+import com.taobao.arthas.bytekit.utils.AsmAnnotationUtils;\n+import com.taobao.arthas.bytekit.utils.AsmUtils;\n+\n+/**\n+ * \n+ * @author hengyunabc 2020-05-04\n+ *\n+ */\n+public class AsmAnnotationUtilsTest {\n+\n+    @Target(value = { ElementType.TYPE, ElementType.METHOD })\n+    @Retention(value = RetentionPolicy.RUNTIME)\n+    public @interface AdviceInfo {\n+\n+        public String[] adviceInfos();\n+    }\n+\n+    @Service\n+    @AdviceInfo(adviceInfos = { \"xxxx\", \"yyy\" })\n+    static class AAA {\n+\n+        @AdviceInfo(adviceInfos = { \"mmm\", \"yyy\" })\n+        public void test() {\n+\n+        }\n+\n+    }\n+\n+    @Service\n+    static class BBB {\n+        public void test() {\n+        }\n+    }\n+\n+    @Test\n+    public void test() throws IOException {\n+        ClassNode classNodeA = AsmUtils.loadClass(AAA.class);\n+\n+        ClassNode classNodeB = AsmUtils.loadClass(BBB.class);\n+\n+        Assertions.assertThat(AsmAnnotationUtils.queryAnnotationInfo(classNodeA.visibleAnnotations,\n+                Type.getDescriptor(AdviceInfo.class), \"adviceInfos\")).isEqualTo(Arrays.asList(\"xxxx\", \"yyy\"));\n+\n+        AsmAnnotationUtils.addAnnotationInfo(classNodeA.visibleAnnotations, Type.getDescriptor(AdviceInfo.class),\n+                \"adviceInfos\", \"fff\");\n+\n+        Assertions\n+                .assertThat(AsmAnnotationUtils.queryAnnotationInfo(classNodeA.visibleAnnotations,\n+                        Type.getDescriptor(AdviceInfo.class), \"adviceInfos\"))\n+                .isEqualTo(Arrays.asList(\"xxxx\", \"yyy\", \"fff\"));\n+\n+        Assertions.assertThat(AsmAnnotationUtils.queryAnnotationInfo(classNodeB.visibleAnnotations,\n+                Type.getDescriptor(AdviceInfo.class), \"adviceInfos\")).isEmpty();\n+\n+        AsmAnnotationUtils.addAnnotationInfo(classNodeB.visibleAnnotations, Type.getDescriptor(AdviceInfo.class),\n+                \"adviceInfos\", \"fff\");\n+\n+        Assertions.assertThat(AsmAnnotationUtils.queryAnnotationInfo(classNodeB.visibleAnnotations,\n+                Type.getDescriptor(AdviceInfo.class), \"adviceInfos\")).isEqualTo(Arrays.asList(\"fff\"));\n+\n+    }\n+\n+}",
    "output": "add AsmAnnotationUtils"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/InliningAdapter.java\n@@ -17,7 +17,7 @@ public class InliningAdapter extends LocalVariablesSorter {\n     private LocalVariablesSorter lvs;\n \n     public InliningAdapter(LocalVariablesSorter mv, int access, String desc, Label end) {\n-        super(Opcodes.ASM7, access, desc, mv);\n+        super(Opcodes.ASM8, access, desc, mv);\n         this.end = end;\n         this.lvs = mv;\n \n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/MethodCallInliner.java\n@@ -37,7 +37,7 @@ public CatchBlock(Label start, Label end, Label handler, String type) {\n \n \tpublic MethodCallInliner(int access, String name, String desc, MethodVisitor mv,\n \t\t\tMethodNode toBeInlined) {\n-\t\tsuper(Opcodes.ASM7, mv, access, name, desc);\n+\t\tsuper(Opcodes.ASM8, mv, access, name, desc);\n \t\tthis.toBeInlined = toBeInlined;\n \t}\n \n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -49,7 +49,7 @@ public static ClassNode loadClass(Class<?> clazz) throws IOException {\n \n \tpublic static ClassNode toClassNode(byte[] classBytes) {\n \t\tClassReader reader = new ClassReader(classBytes);\n-\t\tClassNode result = new ClassNode(Opcodes.ASM7);\n+\t\tClassNode result = new ClassNode(Opcodes.ASM8);\n \t\treader.accept(result, ClassReader.SKIP_FRAMES);\n \t\treturn result;\n \t}\n@@ -135,7 +135,7 @@ public static String toASMCode(MethodNode methodNode) {\n \t}\n \n \tpublic static MethodNode newMethodNode(MethodNode source) {\n-\t\treturn new MethodNode(Opcodes.ASM7, source.access, source.name, source.desc, source.signature,\n+\t\treturn new MethodNode(Opcodes.ASM8, source.access, source.name, source.desc, source.signature,\n \t\t\t\tsource.exceptions.toArray(new String[source.exceptions.size()]));\n \t}\n \n@@ -149,7 +149,7 @@ public static MethodNode removeJSRInstructions(MethodNode subjectMethod) {\n \n \tpublic static MethodNode removeLineNumbers(MethodNode methodNode) {\n \t\tMethodNode result = newMethodNode(methodNode);\n-\t\tmethodNode.accept(new MethodVisitor(Opcodes.ASM7, result) {\n+\t\tmethodNode.accept(new MethodVisitor(Opcodes.ASM8, result) {\n \t\t\tpublic void visitLineNumber(int line, Label start) {\n \t\t\t}\n \t\t});\n@@ -330,8 +330,8 @@ public static MethodNode copy(MethodNode source) {\n     }\n \n     public static ClassNode copy(ClassNode source) {\n-        ClassNode result = new ClassNode(Opcodes.ASM7);\n-        source.accept(new ClassVisitor(Opcodes.ASM7, result) {\n+        ClassNode result = new ClassNode(Opcodes.ASM8);\n+        source.accept(new ClassVisitor(Opcodes.ASM8, result) {\n             @Override\n             public MethodVisitor visitMethod(int access, String name, String desc, String signature,\n                             String[] exceptions) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n@@ -363,7 +363,7 @@ private static void afterThrowing(AdviceListener listener,\n      * @param cv           ClassVisitor for ASM\n      */\n     public AdviceWeaver(int adviceId, boolean isTracing, boolean skipJDKTrace, String className, Matcher matcher, EnhancerAffect affect, ClassVisitor cv) {\n-        super(Opcodes.ASM7, cv);\n+        super(Opcodes.ASM8, cv);\n         this.adviceId = adviceId;\n         this.isTracing = isTracing;\n         this.skipJDKTrace = skipJDKTrace;\n@@ -418,7 +418,7 @@ public MethodVisitor visitMethod(\n         // 编织方法计数\n         affect.mCnt(1);\n \n-        return new AdviceAdapter(Opcodes.ASM7, new JSRInlinerAdapter(mv, access, name, desc, signature, exceptions), access, name, desc) {\n+        return new AdviceAdapter(Opcodes.ASM8, new JSRInlinerAdapter(mv, access, name, desc, signature, exceptions), access, name, desc) {\n \n             // -- Label for try...catch block\n             private final Label beginLabel = new Label();",
    "output": "upgrade asm to 8.0.1"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n@@ -2,6 +2,7 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.io.PrintWriter;\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.net.URLClassLoader;\n@@ -19,6 +20,12 @@\n  */\n public class VerifyUtils {\n \n+    public static void asmVerify(byte[] bytes, boolean printResults) throws IOException {\n+        ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n+        ClassReader cr = new ClassReader(inputStream);\n+        CheckClassAdapter.verify(cr, true, new PrintWriter(System.out));\n+    }\n+    \n     public static void asmVerify(byte[] bytes) throws IOException {\n         ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n         ClassReader cr = new ClassReader(inputStream);",
    "output": "asm verity support print details"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n@@ -371,7 +371,8 @@ public void run() {\n                 handler.handle(process);\n             } catch (Throwable t) {\n                 logger.error(\"Error during processing the command:\", t);\n-                process.write(\"Error during processing the command: \" + t.getMessage() + \"\\n\");\n+                process.write(\"Error during processing the command, exception type: \" + t.getClass().getName() + \", message:\" + t.getMessage()\n+                        + \", please check $HOME/logs/arthas/arthas.log for more details. \\n\");\n                 terminate(1, null);\n             }\n         }",
    "output": "print more details when ProcessImpl error"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -313,27 +313,33 @@ public Binding parse(Annotation annotation) {\n         }\n         \n     }\n-    \n-    \n+\n+\n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = LineBindingParser.class)\n     public static @interface Line {\n-        \n         boolean optional() default false;\n \n+        /**\n+         * 是否精确是在某个 LineNumberNode 上。如果为true的话，会向上找到最接近的 LineNumberNode\n+         * \n+         * @return\n+         */\n+        boolean exact() default false;\n+\n     }\n-    \n+\n     public static class LineBindingParser implements BindingParser {\n         @Override\n         public Binding parse(Annotation annotation) {\n-            return new LineBinding();\n+            Line line = (Line) annotation;\n+            return new LineBinding(line.exact());\n         }\n-        \n     }\n-    \n-    \n+\n+\n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LineBinding.java\n@@ -8,17 +8,38 @@\n import com.taobao.arthas.bytekit.asm.location.Location;\n import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n \n+/**\n+ * \n+ * @author hengyunabc\n+ *\n+ */\n public class LineBinding extends Binding {\n \n+    private boolean exact;\n+\n+    public LineBinding(boolean exact) {\n+        this.exact = exact;\n+    }\n+\n     @Override\n     public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n         Location location = bindingContext.getLocation();\n         AbstractInsnNode insnNode = location.getInsnNode();\n \n-        if (insnNode instanceof LineNumberNode) {\n-            AsmOpUtils.push(instructions, ((LineNumberNode) insnNode).line);\n+        if (exact) {\n+            if (insnNode instanceof LineNumberNode) {\n+                AsmOpUtils.push(instructions, ((LineNumberNode) insnNode).line);\n+            } else {\n+                throw new IllegalArgumentException(\"LineBinding location is not LineNumberNode, insnNode: \" + insnNode);\n+            }\n         } else {\n-            throw new IllegalArgumentException(\"LineBinding location is not LineNumberNode, insnNode: \" + insnNode);\n+            while (insnNode != null) {\n+                if (insnNode instanceof LineNumberNode) {\n+                    AsmOpUtils.push(instructions, ((LineNumberNode) insnNode).line);\n+                    break;\n+                }\n+                insnNode = insnNode.getPrevious();\n+            }\n         }\n     }\n \n\ndiff --git a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtInvokeTest.java b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtInvokeTest.java\n--- a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtInvokeTest.java\n+++ b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtInvokeTest.java\n@@ -28,6 +28,7 @@ public Sample(int i, long l, String s) {\n         public int testCall(int ii) {\n             toBeCall(ii, 123L, \"\");\n             System.err.println(\"abc\");\n+\n             aaa(\"abc\");\n             return 123;\n         }\n@@ -60,10 +61,12 @@ public static class TestAccessInterceptor {\n         public static void onInvoke(\n                 @Binding.This Object object,\n                 @Binding.Class Object clazz\n-                ,  \n+                , \n+                @Binding.Line int line,\n                 @Binding.InvokeArgs Object[] args\n                 ) {\n-            System.err.println(\"onInvoke: this\" + object);\n+            System.err.println(\"onInvoke: line: \" + line);\n+            System.err.println(\"onInvoke: this: \" + object);\n         }\n         \n         @AtInvoke(name = \"toBeCall\", inline = false, whenComplete = true)",
    "output": "better support LineBinding"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodDeclarationBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodDeclarationBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodDeclarationBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodDeclarationBinding.java\n@@ -5,11 +5,10 @@\n \n import com.taobao.arthas.bytekit.asm.MethodProcessor;\n import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n-import com.taobao.arthas.bytekit.utils.AsmUtils;\n \n /**\n- * 提供一个完整的 method 的string，包含类名，并不是desc？用户可以自己提取descs method的定义，前面是 public\n- * /static 这些关键字，是有限的几个。后面是 throws ，的异常信息\n+ * TODO 提供一个完整的 method 的string，包含类名，并不是desc？用户可以自己提取descs method的定义，前面是 public\n+ * /static 这些关键字，是有限的几个。后面是 throws ，的异常信息。 或者做一下取巧比如把 classname | methoname | desc 之类连起一个String\n  * \n  * @author hengyunabc\n  *\n@@ -19,14 +18,13 @@ public class MethodDeclarationBinding extends Binding {\n     @Override\n     public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n         MethodProcessor methodProcessor = bindingContext.getMethodProcessor();\n-        AsmOpUtils.ldc(instructions, AsmUtils.methodDeclaration(Type.getObjectType(methodProcessor.getOwner()),\n-                methodProcessor.getMethodNode()));\n-\n+//        AsmOpUtils.ldc(instructions, AsmUtils.methodDeclaration(Type.getObjectType(methodProcessor.getOwner()),\n+//                methodProcessor.getMethodNode()));\n+        AsmOpUtils.ldc(instructions, methodProcessor.getMethodNode().desc);\n     }\n \n     @Override\n     public Type getType(BindingContext bindingContext) {\n         return Type.getType(String.class);\n     }\n-\n }",
    "output": "update MethodDeclarationBinding.java"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/AsmUtils.java\n@@ -31,6 +31,11 @@\n import com.alibaba.arthas.deps.org.objectweb.asm.util.ASMifier;\n import com.alibaba.arthas.deps.org.objectweb.asm.util.TraceClassVisitor;\n \n+/**\n+ * \n+ * @author hengyunabc\n+ *\n+ */\n public class AsmUtils {\n \n \tpublic static ClassNode loadClass(Class<?> clazz) throws IOException {\n@@ -236,6 +241,19 @@ public static List<MethodInsnNode> findMethodInsnNode(MethodNode methodNode, Str\n         return result;\n     }\n \n+    public static boolean containsMethodInsnNode(MethodNode methodNode, String owner, String name) {\n+        for (AbstractInsnNode insnNode = methodNode.instructions.getFirst(); insnNode != null; insnNode = insnNode\n+                .getNext()) {\n+            if (insnNode instanceof MethodInsnNode) {\n+                final MethodInsnNode methodInsnNode = (MethodInsnNode) insnNode;\n+                if (methodInsnNode.owner.equals(owner) && methodInsnNode.name.equals(name)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n \tpublic static boolean isStatic(MethodNode methodNode) {\n \t\treturn (methodNode.access & Opcodes.ACC_STATIC) != 0;\n \t}",
    "output": "update AsmUtils.java"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.8\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.2.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "Merge branch 'master' into bytekit"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -214,7 +214,6 @@ public Binding parse(Annotation annotation) {\n             return new InvokeMethodDeclarationBinding();\n         }\n     }\n-    \n \n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n@@ -223,15 +222,46 @@ public Binding parse(Annotation annotation) {\n     public static @interface Method {\n         boolean optional() default false;\n     }\n-    \n+\n     public static class MethodBindingParser implements BindingParser {\n         @Override\n         public Binding parse(Annotation annotation) {\n             return new MethodBinding();\n         }\n-        \n+\n     }\n-    \n+\n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @java.lang.annotation.Target(ElementType.PARAMETER)\n+    @BindingParserHandler(parser = MethodNameBindingParser.class)\n+    public static @interface MethodName {\n+        boolean optional() default false;\n+    }\n+\n+    public static class MethodNameBindingParser implements BindingParser {\n+        @Override\n+        public Binding parse(Annotation annotation) {\n+            return new MethodNameBinding();\n+        }\n+\n+    }\n+\n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @java.lang.annotation.Target(ElementType.PARAMETER)\n+    @BindingParserHandler(parser = MethodDescBindingParser.class)\n+    public static @interface MethodDesc {\n+        boolean optional() default false;\n+    }\n+\n+    public static class MethodDescBindingParser implements BindingParser {\n+        @Override\n+        public Binding parse(Annotation annotation) {\n+            return new MethodDeclarationBinding();\n+        }\n+    }\n+\n     @Documented\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodNameBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodNameBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodNameBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodNameBinding.java\n@@ -0,0 +1,25 @@\n+package com.taobao.arthas.bytekit.asm.binding;\n+\n+import com.alibaba.arthas.deps.org.objectweb.asm.Type;\n+import com.alibaba.arthas.deps.org.objectweb.asm.tree.InsnList;\n+import com.taobao.arthas.bytekit.asm.MethodProcessor;\n+import com.taobao.arthas.bytekit.utils.AsmOpUtils;\n+\n+/**\n+ * @author hengyunabc\n+ *\n+ */\n+public class MethodNameBinding extends Binding {\n+\n+\t@Override\n+\tpublic void pushOntoStack(InsnList instructions, BindingContext bindingContext) {\n+\t\tMethodProcessor methodProcessor = bindingContext.getMethodProcessor();\n+\t\tAsmOpUtils.ldc(instructions, methodProcessor.getMethodNode().name);\n+\t}\n+\n+\t@Override\n+\tpublic Type getType(BindingContext bindingContext) {\n+\t\treturn Type.getType(String.class);\n+\t}\n+\n+}\n\ndiff --git a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtEnterTest.java b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtEnterTest.java\n--- a/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtEnterTest.java\n+++ b/bytekit/src/test/java/com/taobao/arthas/bytekit/asm/interceptor/AtEnterTest.java\n@@ -63,9 +63,13 @@ public static long onEnter(\n                @Binding.Field(name = \"longField\") Object longFieldObject,\n                @Binding.Field(name = \"intField\") int intField,\n                @Binding.Field(name = \"strField\") String strField,\n-               @Binding.Field(name = \"intField\") Object intFielObject\n+               @Binding.Field(name = \"intField\") Object intFielObject,\n+               @Binding.MethodName String methodName,\n+               @Binding.MethodDesc String methodDesc\n                ) {\n             System.err.println(\"onEnter, object:\" + object);\n+            System.err.println(\"onEnter, methodName:\" + methodName);\n+            System.err.println(\"onEnter, methodDesc:\" + methodDesc);\n             return 123L;\n         }\n ",
    "output": "support bindding MethodDesc, MethodName"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -29,7 +29,7 @@ public class HistoryCommand extends AnnotatedCommand {\n     boolean clear = false;\n     int n = -1;\n \n-    @Option(shortName = \"c\", longName = \"clear\")\n+    @Option(shortName = \"c\", longName = \"clear\", flag = true , acceptValue = false)\n     @Description(\"clear history\")\n     public void setClear(boolean clear) {\n         this.clear = clear;\n@@ -56,7 +56,7 @@ public void process(CommandProcess process) {\n                 StringBuilder sb = new StringBuilder();\n \n                 int size = history.size();\n-                if (n < 0) {\n+                if (n < 0 || n > size) {\n                     n = size;\n                 }\n ",
    "output": "improve history command. close #1140"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -10,6 +10,7 @@\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.matcher.Matcher;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n@@ -54,7 +55,8 @@ public void setMethodPattern(String methodPattern) {\n         this.methodPattern = methodPattern;\n     }\n \n-    @Argument(index = 2, argName = \"express\")\n+    @Argument(index = 2, argName = \"express\", required = false)\n+    @DefaultValue(\"{params, target, returnObj}\")\n     @Description(\"the content you want to watch, written by ognl.\\n\" + Constants.EXPRESS_EXAMPLES)\n     public void setExpress(String express) {\n         this.express = express;",
    "output": "Set default value for the express argument of the watch command (#1122)"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/Binding.java\n@@ -48,7 +48,7 @@ public boolean fromStack() {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ArgsBindingParser.class)\n-    public @interface Args {\n+    public static @interface Args {\n         \n         boolean optional() default false;\n \n@@ -65,7 +65,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ArgNamesBindingParser.class)\n-    public @interface ArgNames {\n+    public static @interface ArgNames {\n         \n         boolean optional() default false;\n \n@@ -82,7 +82,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = LocalVarsBindingParser.class)\n-    public @interface LocalVars {\n+    public static @interface LocalVars {\n         \n         boolean optional() default false;\n \n@@ -99,7 +99,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = LocalVarNamesBindingParser.class)\n-    public @interface LocalVarNames {\n+    public static @interface LocalVarNames {\n         \n         boolean optional() default false;\n \n@@ -116,7 +116,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ClassBindingParser.class)\n-    public @interface Class {\n+    public static @interface Class {\n         \n         boolean optional() default false;\n \n@@ -135,7 +135,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = FieldBindingParser.class)\n-    public @interface Field {\n+    public static @interface Field {\n         boolean optional() default false;\n         java.lang.Class<?> owner() default Void.class;\n         java.lang.Class<?> type() default Void.class;\n@@ -166,7 +166,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = InvokeArgsBindingParser.class)\n-    public @interface InvokeArgs {\n+    public static @interface InvokeArgs {\n         \n         boolean optional() default false;\n \n@@ -184,7 +184,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = InvokeReturnBindingParser.class)\n-    public @interface InvokeReturn {\n+    public static @interface InvokeReturn {\n         \n         boolean optional() default false;\n \n@@ -202,7 +202,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = InvokeMethodDeclarationBindingParser.class)\n-    public @interface InvokeMethodDeclaration {\n+    public static @interface InvokeMethodDeclaration {\n         \n         boolean optional() default false;\n \n@@ -220,7 +220,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = MethodBindingParser.class)\n-    public @interface Method {\n+    public static @interface Method {\n         boolean optional() default false;\n     }\n     \n@@ -236,7 +236,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ReturnBindingParser.class)\n-    public @interface Return {\n+    public static @interface Return {\n         \n         boolean optional() default false;\n \n@@ -254,7 +254,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ThisBindingParser.class)\n-    public @interface This {\n+    public static @interface This {\n \n     }\n     \n@@ -270,7 +270,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = ThrowableBindingParser.class)\n-    public @interface Throwable {\n+    public static @interface Throwable {\n         \n         boolean optional() default false;\n \n@@ -289,7 +289,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = LineBindingParser.class)\n-    public @interface Line {\n+    public static @interface Line {\n         \n         boolean optional() default false;\n \n@@ -308,7 +308,7 @@ public Binding parse(Annotation annotation) {\n     @Retention(RetentionPolicy.RUNTIME)\n     @java.lang.annotation.Target(ElementType.PARAMETER)\n     @BindingParserHandler(parser = MonitorBindingParser.class)\n-    public @interface Monitor {\n+    public static @interface Monitor {\n         \n         boolean optional() default false;\n ",
    "output": "export Binding annotation"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ReturnBinding.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ReturnBinding.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ReturnBinding.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ReturnBinding.java\n@@ -25,7 +25,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)\n             AsmOpUtils.push(instructions, null);\n         }else {\n             LocalVariableNode returnVariableNode = bindingContext.getMethodProcessor().initReturnVariableNode();\n-            AsmOpUtils.storeVar(instructions, returnType, returnVariableNode.index);\n+            AsmOpUtils.loadVar(instructions, returnType, returnVariableNode.index);\n         }\n         \n     }",
    "output": "fix ReturnBinding save stack"
  },
  {
    "input": "diff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/ClassLoaderUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/ClassLoaderUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/ClassLoaderUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/ClassLoaderUtils.java\n@@ -0,0 +1,48 @@\n+package com.taobao.arthas.bytekit.utils;\n+\n+import java.lang.reflect.Field;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import sun.misc.Unsafe;\n+\n+\n+/**\n+ *\n+ * @author hengyunabc 2017-10-12\n+ *\n+ */\n+public class ClassLoaderUtils {\n+    @SuppressWarnings({ \"restriction\", \"unchecked\" })\n+    public static URL[] getUrls(ClassLoader classLoader) {\n+        if (classLoader instanceof URLClassLoader) {\n+            return ((URLClassLoader) classLoader).getURLs();\n+        }\n+\n+        // jdk9\n+        if (classLoader.getClass().getName().startsWith(\"jdk.internal.loader.ClassLoaders$\")) {\n+            try {\n+                Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+                field.setAccessible(true);\n+                Unsafe unsafe = (Unsafe) field.get(null);\n+\n+                // jdk.internal.loader.ClassLoaders.AppClassLoader.ucp\n+                Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n+                long ucpFieldOffset = unsafe.objectFieldOffset(ucpField);\n+                Object ucpObject = unsafe.getObject(classLoader, ucpFieldOffset);\n+\n+                // jdk.internal.loader.URLClassPath.path\n+                Field pathField = ucpField.getType().getDeclaredField(\"path\");\n+                long pathFieldOffset = unsafe.objectFieldOffset(pathField);\n+                ArrayList<URL> path = (ArrayList<URL>) unsafe.getObject(ucpObject, pathFieldOffset);\n+\n+                return path.toArray(new URL[path.size()]);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                return null;\n+            }\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n--- a/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n+++ b/bytekit/src/main/java/com/taobao/arthas/bytekit/utils/VerifyUtils.java\n@@ -31,10 +31,8 @@ public static void asmVerify(byte[] bytes) throws IOException {\n     public static Object instanceVerity(byte[] bytes) throws Exception {\n         String name = Type.getObjectType(AsmUtils.toClassNode(bytes).name).getClassName();\n \n-        URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n-\n         @SuppressWarnings(\"resource\")\n-        ClassbyteClassLoader cl = new ClassbyteClassLoader(systemClassLoader.getURLs(),\n+        ClassbyteClassLoader cl = new ClassbyteClassLoader(ClassLoaderUtils.getUrls(ClassLoader.getSystemClassLoader()),\n                         ClassLoader.getSystemClassLoader().getParent());\n \n         cl.addClass(name, bytes);",
    "output": "support jdk 11"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -75,6 +75,7 @@ private void attachAgent(Configure configure) throws Exception {\n             String pid = descriptor.id();\n             if (pid.equals(Long.toString(configure.getJavaPid()))) {\n                 virtualMachineDescriptor = descriptor;\n+                break;\n             }\n         }\n         VirtualMachine virtualMachine = null;",
    "output": "exit redunant loop (#1123)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.8\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.2.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -47,6 +47,10 @@ public static boolean isLessThanJava9() {\n         return JAVA_VERSION < 9.0f;\n     }\n \n+    public static boolean isGreaterThanJava7() {\n+        return JAVA_VERSION > 1.7f;\n+    }\n+\n     public static boolean isGreaterThanJava8() {\n         return JAVA_VERSION > 1.8f;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -1,5 +1,7 @@\n package com.taobao.arthas.core;\n \n+import com.taobao.arthas.common.JavaVersionUtils;\n+\n /**\n  * 全局开关\n  * Created by vlinux on 15/6/4.\n@@ -67,6 +69,18 @@ public class GlobalOptions {\n     )\n     public static volatile boolean isDisableSubClass = false;\n \n+    /**\n+     * 是否在interface类里搜索函数\n+     * https://github.com/alibaba/arthas/issues/1105\n+     */\n+    @Option(\n+            level = 1,\n+            name = \"support-default-method\",\n+            summary = \"Option to control include default method in interface when class matching\",\n+            description = \"This option disable to include default method in interface when matching class.\"\n+    )\n+    public static volatile boolean isSupportDefaultMethod = true && JavaVersionUtils.isGreaterThanJava7();\n+\n     /**\n      * 是否在asm中输出\n      */\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -253,9 +253,8 @@ private static boolean isUnsafeClass(Class<?> clazz) {\n      * 是否过滤目前暂不支持的类\n      */\n     private static boolean isUnsupportedClass(Class<?> clazz) {\n-\n         return clazz.isArray()\n-                || clazz.isInterface()\n+                || (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod)\n                 || clazz.isEnum()\n                 || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class);\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -15,7 +15,6 @@\n import com.alibaba.arthas.deps.org.slf4j.Logger;\n import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;\n import com.taobao.arthas.core.command.Constants;\n-import com.taobao.arthas.core.command.logger.LoggerCommand;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -115,6 +115,7 @@ protected void enhance(CommandProcess process) {\n             if (effect.cCnt() == 0 || effect.mCnt() == 0) {\n                 // no class effected\n                 // might be method code too large\n+                process.write(\"Matched class-cnt: \" + effect.cCnt() + \", method-cnt: \" + effect.mCnt() + \"\\n\");\n                 process.write(\"No class or method is affected, try:\\n\"\n                               + \"1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n                               + \"2. reset CLASS_NAME and try again, your method body might be too large.\\n\"",
    "output": "support default method. #1105"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n@@ -8,6 +8,7 @@\n import java.lang.instrument.Instrumentation;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.CodeSource;\n import java.util.jar.JarFile;\n \n import com.taobao.arthas.agent.ArthasClassloader;\n@@ -20,6 +21,7 @@\n public class AgentBootstrap {\n     private static final String RESET = \"resetArthasClassLoader\";\n     private static final String ARTHAS_SPY_JAR = \"arthas-spy.jar\";\n+    private static final String ARTHAS_CORE_JAR = \"arthas-core.jar\";\n     private static final String ARTHAS_BOOTSTRAP = \"com.taobao.arthas.core.server.ArthasBootstrap\";\n     private static final String GET_INSTANCE = \"getInstance\";\n     private static final String IS_BIND = \"isBind\";\n@@ -71,7 +73,7 @@ public synchronized static void resetArthasClassLoader() {\n         arthasClassLoader = null;\n     }\n \n-    private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile, File agentJarFile) throws Throwable {\n+    private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile, File arthasCoreJarFile) throws Throwable {\n         // 将Spy添加到BootstrapClassLoader\n         ClassLoader parent = ClassLoader.getSystemClassLoader().getParent();\n         Class<?> spyClass = null;\n@@ -87,12 +89,12 @@ private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile,\n         }\n \n         // 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀\n-        return loadOrDefineClassLoader(agentJarFile);\n+        return loadOrDefineClassLoader(arthasCoreJarFile);\n     }\n \n-    private static ClassLoader loadOrDefineClassLoader(File agentJar) throws Throwable {\n+    private static ClassLoader loadOrDefineClassLoader(File arthasCoreJarFile) throws Throwable {\n         if (arthasClassLoader == null) {\n-            arthasClassLoader = new ArthasClassloader(new URL[]{agentJar.toURI().toURL()});\n+            arthasClassLoader = new ArthasClassloader(new URL[]{arthasCoreJarFile.toURI().toURL()});\n         }\n         return arthasClassLoader;\n     }\n@@ -104,19 +106,46 @@ private static void initSpy() throws NoSuchMethodException {\n     private static synchronized void main(String args, final Instrumentation inst) {\n         try {\n             ps.println(\"Arthas server agent start...\");\n-            // 传递的args参数分两个部分:agentJar路径和agentArgs, 分别是Agent的JAR包路径和期望传递到服务端的参数\n+            // 传递的args参数分两个部分:arthasCoreJar路径和agentArgs, 分别是Agent的JAR包路径和期望传递到服务端的参数\n+            if (args == null) {\n+                args = \"\";\n+            }\n             args = decodeArg(args);\n+\n+            String arthasCoreJar;\n+            final String agentArgs;\n             int index = args.indexOf(';');\n-            String agentJar = args.substring(0, index);\n-            final String agentArgs = args.substring(index);\n+            if (index != -1) {\n+                arthasCoreJar = args.substring(0, index);\n+                agentArgs = args.substring(index);\n+            } else {\n+                arthasCoreJar = \"\";\n+                agentArgs = args;\n+            }\n \n-            File agentJarFile = new File(agentJar);\n-            if (!agentJarFile.exists()) {\n-                ps.println(\"Agent jar file does not exist: \" + agentJarFile);\n+            File arthasCoreJarFile = new File(arthasCoreJar);\n+            if (!arthasCoreJarFile.exists()) {\n+                ps.println(\"Can not find arthas-core jar file from args: \" + arthasCoreJarFile);\n+                // try to find from arthas-agent.jar directory\n+                CodeSource codeSource = AgentBootstrap.class.getProtectionDomain().getCodeSource();\n+                if (codeSource != null) {\n+                    try {\n+                        File arthasAgentJarFile = new File(codeSource.getLocation().toURI().getSchemeSpecificPart());\n+                        arthasCoreJarFile = new File(arthasAgentJarFile.getParentFile(), ARTHAS_CORE_JAR);\n+                        if (!arthasCoreJarFile.exists()) {\n+                            ps.println(\"Can not find arthas-core jar file from agent jar directory: \" + arthasAgentJarFile);\n+                        }\n+                    } catch (Throwable e) {\n+                        ps.println(\"Can not find arthas-core jar file from \" + codeSource.getLocation());\n+                        e.printStackTrace(ps);\n+                    }\n+                }\n+            }\n+            if (!arthasCoreJarFile.exists()) {\n                 return;\n             }\n \n-            File spyJarFile = new File(agentJarFile.getParentFile(), ARTHAS_SPY_JAR);\n+            File spyJarFile = new File(arthasCoreJarFile.getParentFile(), ARTHAS_SPY_JAR);\n             if (!spyJarFile.exists()) {\n                 ps.println(\"Spy jar file does not exist: \" + spyJarFile);\n                 return;\n@@ -125,7 +154,7 @@ private static synchronized void main(String args, final Instrumentation inst) {\n             /**\n              * Use a dedicated thread to run the binding logic to prevent possible memory leak. #195\n              */\n-            final ClassLoader agentLoader = getClassLoader(inst, spyJarFile, agentJarFile);\n+            final ClassLoader agentLoader = getClassLoader(inst, spyJarFile, arthasCoreJarFile);\n             initSpy();\n \n             Thread bindingThread = new Thread() {",
    "output": "support agent premain. #1083"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.command.basic1000;\n \n+import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -14,6 +15,9 @@\n  */\n @Name(\"echo\")\n @Summary(\"write arguments to the standard output\")\n+@Description(\"\\nExamples:\\n\" +\n+        \"  echo 'abc'\\n\" +\n+        Constants.WIKI + Constants.WIKI_HOME + \"echo\")\n public class EchoCommand extends AnnotatedCommand {\n     private String message;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n@@ -32,7 +32,10 @@\n  */\n @Name(\"perfcounter\")\n @Summary(\"Display the perf counter infornation.\")\n-@Description(Constants.WIKI + Constants.WIKI_HOME + \"perf\")\n+@Description(\"\\nExamples:\\n\" +\n+        \"  perfcounter\\n\" +\n+        \"  perfcounter -d\\n\" +\n+        Constants.WIKI + Constants.WIKI_HOME + \"perfcounter\")\n public class PerfCounterCommand extends AnnotatedCommand {\n     private static final Logger logger = LoggerFactory.getLogger(PerfCounterCommand.class);\n     private static Object perfObject;",
    "output": "update doc"
  },
  {
    "input": "diff --git a/spy/src/main/java/java/arthas/Spy.java b/spy/src/main/java/java/arthas/Spy.java\n--- a/spy/src/main/java/java/arthas/Spy.java\n+++ b/spy/src/main/java/java/arthas/Spy.java\n@@ -8,7 +8,12 @@\n  * Created by vlinux on 15/8/23.\n  */\n public class Spy {\n-\n+    public static final String ON_BEFORE = \"methodOnBegin\";\n+    public static final String ON_RETURN = \"methodOnReturnEnd\";\n+    public static final String ON_THROWS = \"methodOnThrowingEnd\";\n+    public static final String BEFORE_INVOKE = \"methodOnInvokeBeforeTracing\";\n+    public static final String AFTER_INVOKE = \"methodOnInvokeAfterTracing\";\n+    public static final String THROW_INVOKE = \"methodOnInvokeThrowTracing\";\n \n     // -- 各种Advice的钩子引用 --\n     public static volatile Method ON_BEFORE_METHOD;\n@@ -53,13 +58,7 @@ public static void init(\n      * to avoid classloader leak.\n      */\n     public static void destroy() {\n-        CLASSLOADER = null;\n-        ON_BEFORE_METHOD = null;\n-        ON_RETURN_METHOD = null;\n-        ON_THROWS_METHOD = null;\n-        BEFORE_INVOKING_METHOD = null;\n-        AFTER_INVOKING_METHOD = null;\n-        THROW_INVOKING_METHOD = null;\n+        initEmptySpy();\n         // clear the reference to ArthasClassLoader in AgentLauncher\n         if (AGENT_RESET_METHOD != null) {\n             try {\n@@ -71,4 +70,62 @@ public static void destroy() {\n         AGENT_RESET_METHOD = null;\n     }\n \n+    private static void initEmptySpy() {\n+        try {\n+            Class<?> adviceWeaverClass = Spy.class;\n+            Method onBefore = adviceWeaverClass.getMethod(Spy.ON_BEFORE, int.class, ClassLoader.class, String.class,\n+                    String.class, String.class, Object.class, Object[].class);\n+            Method onReturn = adviceWeaverClass.getMethod(Spy.ON_RETURN, Object.class);\n+            Method onThrows = adviceWeaverClass.getMethod(Spy.ON_THROWS, Throwable.class);\n+            Method beforeInvoke = adviceWeaverClass.getMethod(Spy.BEFORE_INVOKE, int.class, String.class, String.class,\n+                    String.class, int.class);\n+            Method afterInvoke = adviceWeaverClass.getMethod(Spy.AFTER_INVOKE, int.class, String.class, String.class,\n+                    String.class, int.class);\n+            Method throwInvoke = adviceWeaverClass.getMethod(Spy.THROW_INVOKE, int.class, String.class, String.class,\n+                    String.class, int.class);\n+            Spy.init(null, onBefore, onReturn, onThrows, beforeInvoke, afterInvoke, throwInvoke);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    /**\n+     * empty method\n+     * \n+     * @see com.taobao.arthas.core.advisor.AdviceWeaver#methodOnBegin(int,\n+     *      ClassLoader, String, String, String, Object, Object[])\n+     * @param adviceId\n+     * @param loader\n+     * @param className\n+     * @param methodName\n+     * @param methodDesc\n+     * @param target\n+     * @param args\n+     */\n+    public static void methodOnBegin(int adviceId, ClassLoader loader, String className, String methodName,\n+            String methodDesc, Object target, Object[] args) {\n+    }\n+\n+    /**\n+     * empty method\n+     * \n+     * @see com.taobao.arthas.core.advisor.AdviceWeaver#methodOnReturnEnd(Object)\n+     * @param returnObject\n+     */\n+    public static void methodOnReturnEnd(Object returnObject) {\n+    }\n+\n+    public static void methodOnThrowingEnd(Throwable throwable) {\n+    }\n+\n+    public static void methodOnInvokeBeforeTracing(int adviceId, String owner, String name, String desc,\n+            int lineNumber) {\n+    }\n+\n+    public static void methodOnInvokeAfterTracing(int adviceId, String owner, String name, String desc,\n+            int lineNumber) {\n+    }\n+\n+    public static void methodOnInvokeThrowTracing(int adviceId, String owner, String name, String desc,\n+            int lineNumber) {\n+    }\n }",
    "output": "fix the issue when the woven code is still running and throw NullPointerException after executing the stop command. #1094"
  },
  {
    "input": "diff --git a/spy/src/main/java/one/profiler/AsyncProfiler.java b/spy/src/main/java/one/profiler/AsyncProfiler.java\n--- a/spy/src/main/java/one/profiler/AsyncProfiler.java\n+++ b/spy/src/main/java/one/profiler/AsyncProfiler.java\n@@ -16,6 +16,8 @@\n \n package one.profiler;\n \n+import java.io.IOException;\n+\n /**\n  * Java API for in-process profiling. Serves as a wrapper around\n  * async-profiler native library. This class is a singleton.\n@@ -25,10 +27,7 @@\n public class AsyncProfiler implements AsyncProfilerMXBean {\n     private static AsyncProfiler instance;\n \n-    private final String version;\n-\n     private AsyncProfiler() {\n-        this.version = version0();\n     }\n \n     public static AsyncProfiler getInstance() {\n@@ -100,7 +99,11 @@ public void stop() throws IllegalStateException {\n      */\n     @Override\n     public String getVersion() {\n-        return version;\n+        try {\n+            return execute0(\"version\");\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n     }\n \n     /**\n@@ -110,10 +113,10 @@ public String getVersion() {\n      * @param command Profiling command\n      * @return The command result\n      * @throws IllegalArgumentException If failed to parse the command\n-     * @throws java.io.IOException If failed to create output file\n+     * @throws IOException If failed to create output file\n      */\n     @Override\n-    public String execute(String command) throws IllegalArgumentException, java.io.IOException {\n+    public String execute(String command) throws IllegalArgumentException, IOException {\n         return execute0(command);\n     }\n \n@@ -125,7 +128,11 @@ public String execute(String command) throws IllegalArgumentException, java.io.I\n      */\n     @Override\n     public String dumpCollapsed(Counter counter) {\n-        return dumpCollapsed0(counter.ordinal());\n+        try {\n+            return execute0(\"collapsed,counter=\" + counter.name().toLowerCase());\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n     }\n \n     /**\n@@ -136,7 +143,11 @@ public String dumpCollapsed(Counter counter) {\n      */\n     @Override\n     public String dumpTraces(int maxTraces) {\n-        return dumpTraces0(maxTraces);\n+        try {\n+            return execute0(\"summary,traces=\" + maxTraces);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n     }\n \n     /**\n@@ -147,14 +158,47 @@ public String dumpTraces(int maxTraces) {\n      */\n     @Override\n     public String dumpFlat(int maxMethods) {\n-        return dumpFlat0(maxMethods);\n+        try {\n+            return execute0(\"summary,flat=\" + maxMethods);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    /**\n+     * Add the given thread to the set of profiled threads\n+     *\n+     * @param thread Thread to include in profiling\n+     */\n+    public void addThread(Thread thread) {\n+        filterThread(thread, true);\n+    }\n+\n+    /**\n+     * Remove the given thread from the set of profiled threads\n+     *\n+     * @param thread Thread to exclude from profiling\n+     */\n+    public void removeThread(Thread thread) {\n+        filterThread(thread, false);\n+    }\n+\n+    private void filterThread(Thread thread, boolean enable) {\n+        if (thread == null) {\n+            filterThread0(null, enable);\n+        } else {\n+            // Need to take lock to avoid race condition with a thread state change\n+            synchronized (thread) {\n+                Thread.State state = thread.getState();\n+                if (state != Thread.State.NEW && state != Thread.State.TERMINATED) {\n+                    filterThread0(thread, enable);\n+                }\n+            }\n+        }\n     }\n \n     private native void start0(String event, long interval, boolean reset) throws IllegalStateException;\n     private native void stop0() throws IllegalStateException;\n-    private native String execute0(String command) throws IllegalArgumentException, java.io.IOException;\n-    private native String dumpCollapsed0(int counter);\n-    private native String dumpTraces0(int maxTraces);\n-    private native String dumpFlat0(int maxMethods);\n-    private native String version0();\n+    private native String execute0(String command) throws IllegalArgumentException, IOException;\n+    private native void filterThread0(Thread thread, boolean enable);\n }",
    "output": "Upgrade async-profiler to 1.7 and support arm arch. close #1089"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -9,8 +9,13 @@\n  */\n public class OSUtils {\n     private static final String OPERATING_SYSTEM_NAME = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n+    private static final String OPERATING_SYSTEM_ARCH = System.getProperty(\"os.arch\").toLowerCase(Locale.ENGLISH);\n+    private static final String UNKNOWN = \"unknown\";\n \n     static PlatformEnum platform;\n+\n+    static String arch;\n+\n     static {\n         if (OPERATING_SYSTEM_NAME.startsWith(\"linux\")) {\n             platform = PlatformEnum.LINUX;\n@@ -21,6 +26,8 @@ public class OSUtils {\n         } else {\n             platform = PlatformEnum.UNKNOWN;\n         }\n+\n+        arch = normalizeArch(OPERATING_SYSTEM_ARCH);\n     }\n \n     private OSUtils() {\n@@ -48,4 +55,78 @@ public static boolean isCygwinOrMinGW() {\n         return false;\n     }\n \n+\tpublic static String arch() {\n+\t\treturn arch;\n+\t}\n+\n+\tpublic static boolean isArm() {\n+\t\treturn \"arm_32\".equals(arch);\n+\t}\n+\n+\tprivate static String normalizeArch(String value) {\n+\t\tvalue = normalize(value);\n+\t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n+\t\t\treturn \"x86_64\";\n+\t\t}\n+\t\tif (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n+\t\t\treturn \"x86_32\";\n+\t\t}\n+\t\tif (value.matches(\"^(ia64w?|itanium64)$\")) {\n+\t\t\treturn \"itanium_64\";\n+\t\t}\n+\t\tif (\"ia64n\".equals(value)) {\n+\t\t\treturn \"itanium_32\";\n+\t\t}\n+\t\tif (value.matches(\"^(sparc|sparc32)$\")) {\n+\t\t\treturn \"sparc_32\";\n+\t\t}\n+\t\tif (value.matches(\"^(sparcv9|sparc64)$\")) {\n+\t\t\treturn \"sparc_64\";\n+\t\t}\n+\t\tif (value.matches(\"^(arm|arm32)$\")) {\n+\t\t\treturn \"arm_32\";\n+\t\t}\n+\t\tif (\"aarch64\".equals(value)) {\n+\t\t\treturn \"aarch_64\";\n+\t\t}\n+\t\tif (value.matches(\"^(mips|mips32)$\")) {\n+\t\t\treturn \"mips_32\";\n+\t\t}\n+\t\tif (value.matches(\"^(mipsel|mips32el)$\")) {\n+\t\t\treturn \"mipsel_32\";\n+\t\t}\n+\t\tif (\"mips64\".equals(value)) {\n+\t\t\treturn \"mips_64\";\n+\t\t}\n+\t\tif (\"mips64el\".equals(value)) {\n+\t\t\treturn \"mipsel_64\";\n+\t\t}\n+\t\tif (value.matches(\"^(ppc|ppc32)$\")) {\n+\t\t\treturn \"ppc_32\";\n+\t\t}\n+\t\tif (value.matches(\"^(ppcle|ppc32le)$\")) {\n+\t\t\treturn \"ppcle_32\";\n+\t\t}\n+\t\tif (\"ppc64\".equals(value)) {\n+\t\t\treturn \"ppc_64\";\n+\t\t}\n+\t\tif (\"ppc64le\".equals(value)) {\n+\t\t\treturn \"ppcle_64\";\n+\t\t}\n+\t\tif (\"s390\".equals(value)) {\n+\t\t\treturn \"s390_32\";\n+\t\t}\n+\t\tif (\"s390x\".equals(value)) {\n+\t\t\treturn \"s390_64\";\n+\t\t}\n+\n+\t\treturn UNKNOWN;\n+\t}\n+\n+\tprivate static String normalize(String value) {\n+\t\tif (value == null) {\n+\t\t\treturn \"\";\n+\t\t}\n+\t\treturn value.toLowerCase(Locale.US).replaceAll(\"[^a-z0-9]+\", \"\");\n+\t}\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -101,6 +101,9 @@ public class ProfilerCommand extends AnnotatedCommand {\n         }\n         if (OSUtils.isLinux()) {\n             profierSoPath = \"async-profiler/libasyncProfiler-linux-x64.so\";\n+            if (OSUtils.isArm()) {\n+                profierSoPath = \"async-profiler/libasyncProfiler-linux-arm.so\";\n+            }\n         }\n \n         if (profierSoPath != null) {",
    "output": "Upgrade async-profiler to 1.7 and support arm arch. close #1089"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.7\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.8\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release 3.1.8"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.agent;\n+package com.taobao.arthas.agent3;\n \n import java.arthas.Spy;\n import java.io.File;\n@@ -10,6 +10,8 @@\n import java.net.URLDecoder;\n import java.util.jar.JarFile;\n \n+import com.taobao.arthas.agent.ArthasClassloader;\n+\n /**\n  * 代理启动类\n  *",
    "output": "change package com.taobao.arthas.agent to com.taobao.arthas.agent3. #1085"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -85,11 +85,6 @@ public class LoggerCommand extends AnnotatedCommand {\n      */\n     private boolean includeNoAppender;\n \n-    /**\n-     * include the arthas logger, default false.\n-     */\n-    private boolean includeArthasLogger;\n-\n     @Option(shortName = \"n\", longName = \"name\")\n     @Description(\"logger name\")\n     public void setName(String name) {\n@@ -114,12 +109,6 @@ public void setHaveAppender(boolean includeNoAppender) {\n         this.includeNoAppender = includeNoAppender;\n     }\n \n-    @Option(longName = \"include-arthas-logger\", flag = true)\n-    @Description(\"include the arthas loggers, default value false\")\n-    public void setIncludeArthasLogger(boolean includeArthasLogger) {\n-        this.includeArthasLogger = includeArthasLogger;\n-    }\n-\n     @Override\n     public void process(CommandProcess process) {\n         int status = 0;\n@@ -178,12 +167,6 @@ public void loggers(CommandProcess process, String name) {\n             String className = clazz.getName();\n             ClassLoader classLoader = clazz.getClassLoader();\n \n-            // skip the arthas classloader\n-            if (this.includeArthasLogger == false && classLoader != null && this.getClass().getClassLoader().getClass()\n-                            .getName().equals(classLoader.getClass().getName())) {\n-                continue;\n-            }\n-\n             // if special classloader\n             if (this.hashCode != null && !this.hashCode.equals(StringUtils.classLoaderHash(clazz))) {\n                 continue;",
    "output": "remove useless code. #985"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -124,7 +124,7 @@ public static DefaultFullHttpResponse view(File dir, String path, HttpVersion ve\n                 \n                 String renderResult = renderDir(file);\n                 fullResp.content().writeBytes(renderResult.getBytes(\"utf-8\"));\n-                fullResp.headers().set(HttpHeaderNames.CONTENT_TYPE, \"content-type: text/html; charset=utf-8\");\n+                fullResp.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html; charset=utf-8\");\n             } else {\n                 FileInputStream fileInputStream = new FileInputStream(file);\n                 try {",
    "output": "fix content-type problem. #1052"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -53,7 +53,7 @@ public class ThreadCommand extends AnnotatedCommand {\n     private String state;\n \n     {\n-        states = new HashSet<String>(8);\n+        states = new HashSet<String>(State.values().length);\n         for (State state : State.values()) {\n             states.add(state.name());\n         }",
    "output": "Three minor code enhancements (#1014)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -45,7 +45,7 @@ public static long select(boolean v, long telnetPortPid) throws InputMismatchExc\n             return -1;\n         }\n \n-        AnsiLog.info(\"Found existing java process, please choose one and hit RETURN.\");\n+        AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n         // print list\n         int count = 1;\n         for (String process : processMap.values()) {",
    "output": "Optimize the hints at the beginning, when choosing a process #1024"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -39,10 +39,16 @@\n  * @author hengyunabc 2019-09-04\n  *\n  */\n+//@formatter:off\n @Name(\"logger\")\n @Summary(\"Print logger info, and update the logger level\")\n-@Description(\"\\nExamples:\\n\" + \"  logger\\n\" + \"  logger -c 327a647b\\n\"\n-                + \"  logger -c 327a647b --name ROOT --level debug\\n\" + Constants.WIKI + Constants.WIKI_HOME + \"logger\")\n+@Description(\"\\nExamples:\\n\"\n+                + \"  logger\\n\"\n+                + \"  logger -c 327a647b\\n\"\n+                + \"  logger -c 327a647b --name ROOT --level debug\\n\"\n+                + \"  logger --include-no-appender\\n\"\n+                + Constants.WIKI + Constants.WIKI_HOME + \"logger\")\n+//@formatter:on\n public class LoggerCommand extends AnnotatedCommand {\n     private static final Logger logger = LogUtil.getArthasLogger();\n \n@@ -159,9 +165,9 @@ public void level(CommandProcess process) {\n         }\n \n         if (result) {\n-            process.write(\"update logger level success.\\n\");\n+            process.write(\"Update logger level success.\\n\");\n         } else {\n-            process.write(\"update logger level fail.\\n\");\n+            process.write(\"Update logger level fail. Try to specify the classloader with the -c option. Use `sc -d CLASSNAME` to find out the classloader hashcode.\\n\");\n         }\n     }\n ",
    "output": "improve logger command error message. #1077"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -2,6 +2,7 @@\n \n import com.taobao.arthas.core.command.basic1000.CatCommand;\n import com.taobao.arthas.core.command.basic1000.ClsCommand;\n+import com.taobao.arthas.core.command.basic1000.EchoCommand;\n import com.taobao.arthas.core.command.basic1000.GrepCommand;\n import com.taobao.arthas.core.command.basic1000.HelpCommand;\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n@@ -100,6 +101,7 @@ private static void initCommands() {\n         commands.add(Command.create(LoggerCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n         commands.add(Command.create(CatCommand.class));\n+        commands.add(Command.create(EchoCommand.class));\n         commands.add(Command.create(PwdCommand.class));\n         commands.add(Command.create(MBeanCommand.class));\n         commands.add(Command.create(GrepCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/EchoCommand.java\n@@ -0,0 +1,36 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Summary;\n+\n+/**\n+ * \n+ * @author hengyunabc\n+ *\n+ */\n+@Name(\"echo\")\n+@Summary(\"write arguments to the standard output\")\n+public class EchoCommand extends AnnotatedCommand {\n+    private String message;\n+\n+    @Argument(argName = \"message\", index = 0, required = false)\n+    @Description(\"message\")\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        if (message != null) {\n+            process.write(message);\n+            process.write(\"\\n\");\n+        }\n+\n+        process.end();\n+    }\n+\n+}",
    "output": "add echo command. #1076"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -7,10 +7,13 @@\n import java.io.FileReader;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n \n import org.apache.commons.net.telnet.InvalidTelnetOptionException;\n import org.apache.commons.net.telnet.TelnetClient;\n@@ -42,12 +45,11 @@\n @Name(\"arthas-client\")\n @Summary(\"Arthas Telnet Client\")\n @Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-client.jar 127.0.0.1 3658\\n\"\n-                + \"  java -jar arthas-client.jar -c 'dashboard -n 1' \\n\"\n-                + \"  java -jar arthas-client.jar -f batch.as 127.0.0.1\\n\")\n+        + \"  java -jar arthas-client.jar -c 'dashboard -n 1' \\n\"\n+        + \"  java -jar arthas-client.jar -f batch.as 127.0.0.1\\n\")\n public class TelnetConsole {\n-    private static final String PROMPT = \"$\";\n+    private static final String PROMPT = \"[arthas@\"; // [arthas@49603]$\n     private static final int DEFAULT_CONNECTION_TIMEOUT = 5000; // 5000 ms\n-    private static final int DEFAULT_BUFFER_SIZE = 1024;\n \n     private static final byte CTRL_C = 0x03;\n \n@@ -107,27 +109,6 @@ public void setheight(int height) {\n     public TelnetConsole() {\n     }\n \n-    private static String readUntil(InputStream in, String prompt) {\n-        try {\n-            StringBuilder sBuffer = new StringBuilder();\n-            byte[] b = new byte[DEFAULT_BUFFER_SIZE];\n-            while (true) {\n-                int size = in.read(b);\n-                if (-1 != size) {\n-                    sBuffer.append(new String(b, 0, size));\n-                    String data = sBuffer.toString();\n-                    if (data.trim().endsWith(prompt)) {\n-                        break;\n-                    }\n-                }\n-            }\n-            return sBuffer.toString();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n     private static List<String> readLines(File batchFile) {\n         List<String> list = new ArrayList<String>();\n         BufferedReader br = null;\n@@ -268,13 +249,13 @@ public void actionPerformed(ActionEvent e) {\n                 telnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n             } catch (IOException e) {\n                 System.out.println(\"Connect to telnet server error: \" + telnetConsole.getTargetIp() + \" \"\n-                                + telnetConsole.getPort());\n+                        + telnetConsole.getPort());\n                 throw e;\n             }\n \n             if (cmds.isEmpty()) {\n                 IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,\n-                                consoleReader.getOutput());\n+                        consoleReader.getOutput());\n             } else {\n                 batchModeRun(telnet, cmds);\n                 telnet.disconnect();\n@@ -287,22 +268,61 @@ public void actionPerformed(ActionEvent e) {\n \n     }\n \n-    private static void batchModeRun(TelnetClient telnet, List<String> commands) throws IOException {\n-        InputStream inputStream = telnet.getInputStream();\n-        OutputStream outputStream = telnet.getOutputStream();\n+    private static void batchModeRun(TelnetClient telnet, List<String> commands)\n+            throws IOException, InterruptedException {\n+        if (commands.size() == 0) {\n+            return;\n+        }\n+\n+        final InputStream inputStream = telnet.getInputStream();\n+        final OutputStream outputStream = telnet.getOutputStream();\n+\n+        final BlockingQueue<String> receviedPromptQueue = new LinkedBlockingQueue<String>(1);\n+        Thread printResultThread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    StringBuilder line = new StringBuilder();\n+                    BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n+                    int b = -1;\n+                    while (true) {\n+                        b = in.read();\n+                        if (b == -1) {\n+                            break;\n+                        }\n+                        line.appendCodePoint(b);\n+\n+                        // 检查到有 [arthas@ 时，意味着可以执行下一个命令了\n+                        int index = line.indexOf(PROMPT);\n+                        if (index > 0) {\n+                            line.delete(0, index + PROMPT.length());\n+                            receviedPromptQueue.put(\"\");\n+                        }\n+                        System.out.print(Character.toChars(b));\n+                    }\n+                } catch (Exception e) {\n+                    // ignore\n+                }\n+            }\n+        });\n+\n+        printResultThread.start();\n \n         for (String command : commands) {\n             if (command.trim().isEmpty()) {\n                 continue;\n             }\n+            receviedPromptQueue.take();\n             // send command to server\n             outputStream.write((command + \" | plaintext\\n\").getBytes());\n             outputStream.flush();\n-            // read result from server and output\n-            String response = readUntil(inputStream, PROMPT);\n-            System.out.print(response);\n-            System.out.flush();\n         }\n+\n+        // 读到最后一个命令执行后的 prompt ，可以直接发 quit命令了。\n+        receviedPromptQueue.take();\n+        outputStream.write(\"quit\\n\".getBytes());\n+        outputStream.flush();\n+        System.out.println();\n     }\n \n     private static String usage(CLI cli) {",
    "output": "fix batch mode do not process PROMPT problem. #1072"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.java\n@@ -41,7 +41,7 @@ public void handle(String line) {\n         }\n \n         String name = first.value();\n-        if (name.equals(\"exit\") || name.equals(\"logout\") || name.equals(\"quit\")) {\n+        if (name.equals(\"exit\") || name.equals(\"logout\") || name.equals(\"q\") || name.equals(\"quit\")) {\n             handleExit();\n             return;\n         } else if (name.equals(\"jobs\")) {",
    "output": "support q to quit. close #1075"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -58,8 +58,6 @@ public class DashboardCommand extends AnnotatedCommand {\n \n     private int numOfExecutions = Integer.MAX_VALUE;\n \n-    private boolean batchMode;\n-\n     private long interval = 5000;\n \n     private volatile long count = 0;\n@@ -71,12 +69,6 @@ public void setNumOfExecutions(int numOfExecutions) {\n         this.numOfExecutions = numOfExecutions;\n     }\n \n-    @Option(shortName = \"b\", longName = \"batch\")\n-    @Description(\"Execute this command in batch mode.\")\n-    public void setBatchMode(boolean batchMode) {\n-        this.batchMode = batchMode;\n-    }\n-\n     @Option(shortName = \"i\", longName = \"interval\")\n     @Description(\"The interval (in ms) between two executions, default is 5000 ms.\")\n     public void setInterval(long interval) {\n@@ -140,10 +132,6 @@ public int getNumOfExecutions() {\n         return numOfExecutions;\n     }\n \n-    public boolean isBatchMode() {\n-        return batchMode;\n-    }\n-\n     public long getInterval() {\n         return interval;\n     }",
    "output": "dashboard command delete unused -b option. fix #1074"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -6,6 +6,7 @@\n import com.taobao.arthas.core.command.basic1000.HelpCommand;\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n import com.taobao.arthas.core.command.basic1000.KeymapCommand;\n+import com.taobao.arthas.core.command.basic1000.OptionsCommand;\n import com.taobao.arthas.core.command.basic1000.PwdCommand;\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n@@ -17,7 +18,6 @@\n import com.taobao.arthas.core.command.basic1000.VMOptionCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n import com.taobao.arthas.core.command.hidden.JulyCommand;\n-import com.taobao.arthas.core.command.hidden.OptionsCommand;\n import com.taobao.arthas.core.command.hidden.ThanksCommand;\n import com.taobao.arthas.core.command.klass100.ClassLoaderCommand;\n import com.taobao.arthas.core.command.klass100.DumpClassCommand;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/OptionsCommand.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.core.command.hidden;\n+package com.taobao.arthas.core.command.basic1000;\n \n import com.taobao.arthas.core.GlobalOptions;\n import com.taobao.arthas.core.Option;",
    "output": "move OptionsCommand to basic package"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n@@ -2,9 +2,11 @@\n \n import com.alibaba.fastjson.JSON;\n import com.alibaba.fastjson.JSONObject;\n+import com.taobao.arthas.common.IOUtils;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.PrintWriter;\n import java.net.HttpURLConnection;\n@@ -28,12 +30,14 @@ public class NetUtils {\n      */\n     public static Response request(String urlString) {\n         HttpURLConnection urlConnection = null;\n+        InputStream in = null;\n         try {\n             URL url = new URL(urlString);\n             urlConnection = (HttpURLConnection)url.openConnection();\n             // prefer json to text\n             urlConnection.setRequestProperty(\"Accept\", \"application/json,text/plain;q=0.2\");\n-            BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n+            in = urlConnection.getInputStream();\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n             String line = null;\n             StringBuilder sb = new StringBuilder();\n             while ((line = br.readLine()) != null) {\n@@ -52,6 +56,7 @@ public static Response request(String urlString) {\n         } catch (IOException e) {\n             return new Response(e.getMessage(), false);\n         } finally {\n+            IOUtils.close(in);\n             if (urlConnection != null) {\n                 urlConnection.disconnect();\n             }",
    "output": "fix resource not close problem. close #1023"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -67,7 +67,7 @@ public void setCode(String code) {\n         this.code = code;\n     }\n \n-    @Option(shortName = \"E\", longName = \"regex\")\n+    @Option(shortName = \"E\", longName = \"regex\", flag = true)\n     @Description(\"Enable regular expression to match (wildcard matching by default)\")\n     public void setRegEx(boolean regEx) {\n         isRegEx = regEx;",
    "output": "fix dump -E option support. #1028"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -34,6 +34,7 @@\n import com.taobao.arthas.core.command.monitor200.JvmCommand;\n import com.taobao.arthas.core.command.monitor200.MBeanCommand;\n import com.taobao.arthas.core.command.monitor200.MonitorCommand;\n+import com.taobao.arthas.core.command.monitor200.PerfCounterCommand;\n import com.taobao.arthas.core.command.monitor200.ProfilerCommand;\n import com.taobao.arthas.core.command.monitor200.StackCommand;\n import com.taobao.arthas.core.command.monitor200.ThreadCommand;\n@@ -78,6 +79,7 @@ private static void initCommands() {\n         commands.add(Command.create(WatchCommand.class));\n         commands.add(Command.create(TimeTunnelCommand.class));\n         commands.add(Command.create(JvmCommand.class));\n+        commands.add(Command.create(PerfCounterCommand.class));\n         // commands.add(Command.create(GroovyScriptCommand.class));\n         commands.add(Command.create(OgnlCommand.class));\n         commands.add(Command.create(MemoryCompilerCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java\n@@ -0,0 +1,120 @@\n+package com.taobao.arthas.core.command.monitor200;\n+\n+import static com.taobao.text.ui.Element.label;\n+\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.taobao.arthas.common.JavaVersionUtils;\n+import com.taobao.arthas.common.PidUtils;\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+import com.taobao.text.Decoration;\n+import com.taobao.text.ui.TableElement;\n+import com.taobao.text.util.RenderUtil;\n+\n+import sun.management.counter.Counter;\n+import sun.management.counter.perf.PerfInstrumentation;\n+\n+/**\n+ * @see sun.misc.Perf\n+ * @see sun.management.counter.perf.PerfInstrumentation\n+ * @author hengyunabc 2020-02-16\n+ */\n+@Name(\"perfcounter\")\n+@Summary(\"Display the perf counter infornation.\")\n+@Description(Constants.WIKI + Constants.WIKI_HOME + \"perf\")\n+public class PerfCounterCommand extends AnnotatedCommand {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n+    private static Object perfObject;\n+    private static Method attachMethod;\n+\n+    private boolean details;\n+\n+    @Option(shortName = \"d\", longName = \"details\", flag = true)\n+    @Description(\"print all perf counter details\")\n+    public void setDetails(boolean details) {\n+        this.details = details;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        try {\n+            TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n+            if (this.details) {\n+                table = new TableElement(3, 1, 1, 10).leftCellPadding(1).rightCellPadding(1);\n+                table.row(true, label(\"Name\").style(Decoration.bold.bold()),\n+                        label(\"Variability\").style(Decoration.bold.bold()),\n+                        label(\"Units\").style(Decoration.bold.bold()), label(\"Value\").style(Decoration.bold.bold()));\n+            }\n+\n+            List<Counter> perfCounters = getPerfCounters();\n+            if (perfCounters.isEmpty()) {\n+                process.write(\n+                        \"please check arthas log. if java version >=9 , try to add jvm options when start your process: \"\n+                                + \"--add-opens java.base/jdk.internal.perf=ALL-UNNAMED \"\n+                                + \"--add-exports java.base/jdk.internal.perf=ALL-UNNAMED\\n\");\n+            } else {\n+                for (Counter counter : perfCounters) {\n+                    if (details) {\n+                        table.row(counter.getName(), String.valueOf(counter.getVariability()),\n+                                String.valueOf(counter.getUnits()), String.valueOf(counter.getValue()));\n+                    } else {\n+                        table.row(counter.getName(), String.valueOf(counter.getValue()));\n+                    }\n+                }\n+            }\n+\n+            process.write(RenderUtil.render(table, process.width()));\n+        } finally {\n+            process.end();\n+        }\n+    }\n+\n+    private static List<Counter> getPerfCounters() {\n+\n+        /**\n+         * <pre>\n+         * Perf p = Perf.getPerf();\n+         * ByteBuffer buffer = p.attach(pid, \"r\");\n+         * </pre>\n+         */\n+        try {\n+            if (perfObject == null) {\n+                // jdk8\n+                String perfClassName = \"sun.misc.Perf\";\n+                // jdk 11\n+                if (!JavaVersionUtils.isLessThanJava9()) {\n+                    perfClassName = \"jdk.internal.perf.Perf\";\n+                }\n+\n+                Class<?> perfClass = ClassLoader.getSystemClassLoader().loadClass(perfClassName);\n+                Method getPerfMethod = perfClass.getDeclaredMethod(\"getPerf\");\n+                perfObject = getPerfMethod.invoke(null);\n+            }\n+\n+            if (attachMethod == null) {\n+                attachMethod = perfObject.getClass().getDeclaredMethod(\"attach\",\n+                        new Class<?>[] { int.class, String.class });\n+            }\n+\n+            ByteBuffer buffer = (ByteBuffer) attachMethod.invoke(perfObject,\n+                    new Object[] { (int) PidUtils.currentLongPid(), \"r\" });\n+\n+            PerfInstrumentation perfInstrumentation = new PerfInstrumentation(buffer);\n+            return perfInstrumentation.getAllCounters();\n+        } catch (Throwable e) {\n+            logger.error(\"arthas\", \"get perf counter error\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+}",
    "output": "add perfcounter command. #1029"
  },
  {
    "input": "diff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -32,10 +32,7 @@ public void testGetRepoUrl() {\n \n     @Test\n     public void testReadMavenMetaData() throws IOException {\n-        String url = \"http://repo1.maven.org/maven2/com/taobao/arthas/arthas-packaging/maven-metadata.xml\";\n-        Assert.assertEquals(IOUtils.toString(new URL(url).openStream()), readMavenMetaData(\"center\", true));\n-\n-        Assert.assertNull(readMavenMetaData(\"\", false));\n-        Assert.assertNull(readMavenMetaData(\"https/\", false));\n+        String url = \"https://repo1.maven.org/maven2/com/taobao/arthas/arthas-packaging/maven-metadata.xml\";\n+        Assert.assertEquals(IOUtils.toString(new URL(url).openStream()), readMavenMetaData(\"center\", false));\n     }\n }",
    "output": "fix testcase. #1025"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/config/BinderUtils.java b/core/src/main/java/com/taobao/arthas/core/config/BinderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/BinderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/BinderUtils.java\n@@ -51,9 +51,12 @@ public static void inject(Environment environment, String parentPrefix, String p\n                             && methodName.length() > \"set\".length()) {\n \n                         String field = getFieldNameFromSetterMethod(methodName);\n-                        Object reslovedValue = environment.getProperty(prefix + '.' + field, parameterTypes[0]);\n-                        if (reslovedValue != null) {\n-                            method.invoke(instance, new Object[] { reslovedValue });\n+                        String configKey = prefix + '.' + field;\n+                        if (environment.containsProperty(configKey)) {\n+                            Object reslovedValue = environment.getProperty(prefix + '.' + field, parameterTypes[0]);\n+                            if (reslovedValue != null) {\n+                                method.invoke(instance, new Object[] { reslovedValue });\n+                            }\n                         }\n                     }\n                 }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/TestConfig.java b/core/src/main/java/com/taobao/arthas/core/config/TestConfig.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/TestConfig.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/TestConfig.java\n@@ -1,9 +0,0 @@\n-package com.taobao.arthas.core.config;\n-\n-\n-@Config\n-public class TestConfig {\n-\n-    @NestedConfig\n-    SecondConfig secondConfig;\n-}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -1,13 +1,35 @@\n package com.taobao.arthas.core.server;\n \n-import com.taobao.arthas.core.config.Configure;\n-import com.taobao.arthas.core.config.FeatureCodec;\n-import com.taobao.arthas.core.env.ArthasEnvironment;\n-import com.taobao.arthas.core.env.MapPropertySource;\n+import java.arthas.Spy;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.security.CodeSource;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import com.alibaba.arthas.tunnel.client.TunnelClient;\n import com.taobao.arthas.common.PidUtils;\n import com.taobao.arthas.core.advisor.AdviceWeaver;\n import com.taobao.arthas.core.command.BuiltinCommandPack;\n+import com.taobao.arthas.core.config.BinderUtils;\n+import com.taobao.arthas.core.config.Configure;\n+import com.taobao.arthas.core.config.FeatureCodec;\n+import com.taobao.arthas.core.env.ArthasEnvironment;\n+import com.taobao.arthas.core.env.MapPropertySource;\n+import com.taobao.arthas.core.env.PropertiesPropertySource;\n+import com.taobao.arthas.core.env.PropertySource;\n import com.taobao.arthas.core.shell.ShellServer;\n import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.arthas.core.shell.command.CommandResolver;\n@@ -17,35 +39,23 @@\n import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;\n import com.taobao.arthas.core.util.ArthasBanner;\n import com.taobao.arthas.core.util.Constants;\n+import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.UserStatUtil;\n import com.taobao.middleware.logger.Logger;\n \n import io.netty.channel.ChannelFuture;\n \n-import java.arthas.Spy;\n-import java.io.File;\n-import java.io.IOException;\n-import java.lang.instrument.Instrumentation;\n-import java.lang.reflect.Method;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n \n /**\n  * @author vlinux on 15/5/2.\n  */\n public class ArthasBootstrap {\n \n+    public static final String CONFIG_NAME_PROPERTY  = \"arthas.config.name\";\n+    public static final String CONFIG_LOCATION_PROPERTY = \"arthas.config.location\";\n+    public static final String CONFIG_OVERRIDE_ALL= \"arthas.config.overrideAll\";\n+\n     private static Logger logger = LogUtil.getArthasLogger();\n     private static ArthasBootstrap arthasBootstrap;\n \n@@ -102,23 +112,84 @@ private static void initSpy() throws ClassNotFoundException, NoSuchMethodExcepti\n     public void bind(String args) throws Throwable {\n         initSpy();\n \n-        if( arthasEnvironment == null) {\n+        if (arthasEnvironment == null) {\n             arthasEnvironment = new ArthasEnvironment();\n         }\n-        Configure configure = Configure.toConfigure(args);\n+\n+        /**\n+         * <pre>\n+         * 脚本里传过来的配置项，即命令行参数 > System Env > System Properties > arthas.properties\n+         * arthas.properties 指供一个配置项，可以反转优先级。 arthas.config.overrideAll=true\n+         * https://github.com/alibaba/arthas/issues/986\n+         * </pre>\n+         */\n         Map<String, String> argsMap = FeatureCodec.DEFAULT_COMMANDLINE_CODEC.toMap(args);\n         // 给配置全加上前缀\n         Map<String, Object> mapWithPrefix = new HashMap<String, Object>(argsMap.size());\n-        for(Entry<String, String> entry : argsMap.entrySet()) {\n+        for (Entry<String, String> entry : argsMap.entrySet()) {\n             mapWithPrefix.put(\"arthas.\" + entry.getKey(), entry.getValue());\n         }\n \n         MapPropertySource mapPropertySource = new MapPropertySource(\"args\", mapWithPrefix);\n         arthasEnvironment.addFirst(mapPropertySource);\n \n+        tryToLoadArthasProperties();\n+\n+        Configure configure = new Configure();\n+        BinderUtils.inject(arthasEnvironment, configure);\n+\n         bind(configure);\n     }\n \n+    // try to load arthas.properties\n+    private void tryToLoadArthasProperties() throws IOException {\n+        this.arthasEnvironment.resolvePlaceholders(CONFIG_LOCATION_PROPERTY);\n+\n+        String location = null;\n+\n+        if (arthasEnvironment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n+            location = arthasEnvironment.resolvePlaceholders(CONFIG_LOCATION_PROPERTY);\n+        }\n+\n+        if (location == null) {\n+            CodeSource codeSource = ArthasBootstrap.class.getProtectionDomain().getCodeSource();\n+            if (codeSource != null) {\n+                try {\n+                    location = new File(codeSource.getLocation().toURI().getSchemeSpecificPart()).getAbsolutePath();\n+                } catch (Throwable e) {\n+                    logger.error(\"arthas\", \"can not find libasyncProfiler so\", e);\n+                }\n+            }\n+        }\n+\n+        String configName = \"arthas\";\n+        if (arthasEnvironment.containsProperty(CONFIG_NAME_PROPERTY)) {\n+            configName = arthasEnvironment.resolvePlaceholders(CONFIG_NAME_PROPERTY);\n+        }\n+\n+        if (location != null) {\n+            if (!location.endsWith(\".properties\")) {\n+                location = new File(location, configName + \".properties\").getAbsolutePath();\n+            }\n+        }\n+\n+        if (new File(location).exists()) {\n+            Properties properties = FileUtils.readProperties(location);\n+\n+            boolean overrideAll = false;\n+            if (arthasEnvironment.containsProperty(CONFIG_OVERRIDE_ALL)) {\n+                overrideAll = arthasEnvironment.getRequiredProperty(CONFIG_OVERRIDE_ALL, boolean.class);\n+            }\n+\n+            PropertySource propertySource = new PropertiesPropertySource(location, properties);\n+            if (overrideAll) {\n+                arthasEnvironment.addFirst(propertySource);\n+            } else {\n+                arthasEnvironment.addLast(propertySource);\n+            }\n+        }\n+    }\n+\n     /**\n      * Bootstrap arthas server\n      *\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -10,6 +10,7 @@\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Properties;\n \n public class FileUtils {\n \n@@ -163,5 +164,18 @@ public static String readFileToString(File file, Charset encoding) throws IOExce\n         }\n     }\n \n+    public static Properties readProperties(String file) throws IOException {\n+        Properties properties = new Properties();\n+\n+        FileInputStream in = null;\n+        try {\n+            in = new FileInputStream(file);\n+            properties.load(in);\n+            return properties;\n+        } finally {\n+            com.taobao.arthas.common.IOUtils.close(in);\n+        }\n+\n+    }\n }\n ",
    "output": "support arthas.properties. #986"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -71,7 +71,18 @@ public synchronized static void resetArthasClassLoader() {\n \n     private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile, File agentJarFile) throws Throwable {\n         // 将Spy添加到BootstrapClassLoader\n-        inst.appendToBootstrapClassLoaderSearch(new JarFile(spyJarFile));\n+        ClassLoader parent = ClassLoader.getSystemClassLoader().getParent();\n+        Class<?> spyClass = null;\n+        if (parent != null) {\n+            try {\n+                parent.loadClass(\"java.arthas.Spy\");\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+        }\n+        if (spyClass == null) {\n+            inst.appendToBootstrapClassLoaderSearch(new JarFile(spyJarFile));\n+        }\n \n         // 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀\n         return loadOrDefineClassLoader(agentJarFile);",
    "output": "Avoid append spy jar to BootstrapClassLoader multiple times. fix #996"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -36,7 +36,7 @@ public static String objectToString(Object obj) {\n         try {\n             return obj.toString();\n         } catch (Throwable t) {\n-            return \"ERROR DATA!!!\";\n+            return \"ERROR DATA!!! Method toString() throw exception. obj class: \" + obj.getClass() + \", exception message: \" + t.getMessage();\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -50,7 +50,7 @@ public String draw() {\n                     .append(\", try to specify -M size_limit in your command, check the help command for more.\");\n             return buf.toString();\n         } catch (Throwable t) {\n-            return \"ERROR DATA!!!\";\n+            return \"ERROR DATA!!! exception message: \" + t.getMessage();\n         }\n     }\n ",
    "output": "print exception message, when render error. fix #994"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -1,8 +1,3 @@\n-//\n-// Source code recreated from a .class file by IntelliJ IDEA\n-// (powered by Fernflower decompiler)\n-//\n-\n package com.taobao.arthas.core.util;\n \n import java.lang.reflect.Modifier;\n@@ -516,18 +511,6 @@ private static String changeFirstCharacterCase(String str, boolean capitalize) {\n         }\n     }\n \n-\n-    private static void validateLocalePart(String localePart) {\n-        for(int i = 0; i < localePart.length(); ++i) {\n-            char ch = localePart.charAt(i);\n-            if(ch != 95 && ch != 32 && !Character.isLetterOrDigit(ch)) {\n-                throw new IllegalArgumentException(\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\n-            }\n-        }\n-\n-    }\n-\n-\n     public static String[] toStringArray(Collection<String> collection) {\n         return collection == null?null:(String[])collection.toArray(new String[0]);\n     }\n@@ -584,13 +567,13 @@ public static String[] tokenizeToStringArray(String str, String delimiters, bool\n             return null;\n         } else {\n             StringTokenizer st = new StringTokenizer(str, delimiters);\n-            ArrayList tokens = new ArrayList();\n+            ArrayList<String> tokens = new ArrayList<String>();\n \n             while(true) {\n                 String token;\n                 do {\n                     if(!st.hasMoreTokens()) {\n-                        return toStringArray((Collection)tokens);\n+                        return toStringArray(tokens);\n                     }\n \n                     token = st.nextToken();\n@@ -614,7 +597,7 @@ public static String[] delimitedListToStringArray(String str, String delimiter,\n         } else if(delimiter == null) {\n             return new String[]{str};\n         } else {\n-            ArrayList result = new ArrayList();\n+            ArrayList<String> result = new ArrayList<String>();\n             int pos;\n             if(\"\".equals(delimiter)) {\n                 for(pos = 0; pos < str.length(); ++pos) {\n@@ -631,7 +614,7 @@ public static String[] delimitedListToStringArray(String str, String delimiter,\n                 }\n             }\n \n-            return toStringArray((Collection)result);\n+            return toStringArray(result);\n         }\n     }\n \n@@ -640,7 +623,7 @@ public static String[] commaDelimitedListToStringArray(String str) {\n     }\n \n     public static Set<String> commaDelimitedListToSet(String str) {\n-        TreeSet set = new TreeSet();\n+        TreeSet<String> set = new TreeSet<String>();\n         String[] tokens = commaDelimitedListToStringArray(str);\n         String[] var3 = tokens;\n         int var4 = tokens.length;",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -91,8 +91,6 @@ private static void initCommands() {\n         commands.add(Command.create(ClsCommand.class));\n         commands.add(Command.create(ResetCommand.class));\n         commands.add(Command.create(VersionCommand.class));\n-        commands.add(Command.create(ShutdownCommand.class));\n-        commands.add(Command.create(StopCommand.class));\n         commands.add(Command.create(SessionCommand.class));\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n@@ -105,5 +103,7 @@ private static void initCommands() {\n         commands.add(Command.create(GrepCommand.class));\n         commands.add(Command.create(TeeCommand.class));\n         commands.add(Command.create(ProfilerCommand.class));\n+        commands.add(Command.create(ShutdownCommand.class));\n+        commands.add(Command.create(StopCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n@@ -6,6 +6,7 @@\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.affect.EnhancerAffect;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n+import com.taobao.middleware.cli.annotations.Hidden;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Summary;\n \n@@ -20,6 +21,7 @@\n  */\n @Name(\"shutdown\")\n @Summary(\"Shutdown Arthas server and exit the console\")\n+@Hidden\n public class ShutdownCommand extends AnnotatedCommand {\n     @Override\n     public void process(CommandProcess process) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n@@ -11,7 +11,7 @@\n  * @see ShutdownCommand\n  */\n @Name(\"stop\")\n-@Summary(\"Stop/Shutdown Arthas server and exit the console. Alias for shutdown.\")\n+@Summary(\"Stop/Shutdown Arthas server and exit the console.\")\n public class StopCommand extends AnnotatedCommand {\n     @Override\n     public void process(CommandProcess process) {",
    "output": "hide the shutdown command. #982"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -13,6 +13,7 @@\n import com.taobao.arthas.core.command.basic1000.StopCommand;\n import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n+import com.taobao.arthas.core.command.basic1000.TeeCommand;\n import com.taobao.arthas.core.command.basic1000.VMOptionCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n import com.taobao.arthas.core.command.hidden.JulyCommand;\n@@ -102,6 +103,7 @@ private static void initCommands() {\n         commands.add(Command.create(PwdCommand.class));\n         commands.add(Command.create(MBeanCommand.class));\n         commands.add(Command.create(GrepCommand.class));\n+        commands.add(Command.create(TeeCommand.class));\n         commands.add(Command.create(ProfilerCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n@@ -0,0 +1,48 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.*;\n+\n+/**\n+ * @author min.yang\n+ */\n+@Name(\"tee\")\n+@Summary(\"tee command for pipes.\" )\n+@Description(Constants.EXAMPLE +\n+        \" sysprop | tee /path/to/logfile | grep java \\n\" +\n+        \" sysprop | tee -a /path/to/logfile | grep java \\n\"\n+        + Constants.WIKI + Constants.WIKI_HOME + \"tee\")\n+public class TeeCommand extends AnnotatedCommand {\n+\n+    private String filePath;\n+    private boolean append;\n+\n+    @Argument(index = 0, argName = \"file\", required = false)\n+    @Description(\"File path\")\n+    public void setFilePath(String filePath) {\n+        this.filePath = filePath;\n+    }\n+\n+    @Option(shortName = \"a\", longName = \"append\", flag = true)\n+    @Description(\"Append to file\")\n+    public void setRegEx(boolean append) {\n+        this.append = append;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        process.write(\"The tee command only for pipes. See 'tee --help'\\n\");\n+        process.end();\n+    }\n+\n+    public String getFilePath() {\n+        return filePath;\n+    }\n+\n+    public boolean isAppend() {\n+        return append;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n@@ -30,7 +30,9 @@ public static StdoutHandler inject(List<CliToken> tokens) {\n             return PlainTextHandler.inject(tokens);\n         } else if (firstTextToken.value().equals(WordCountHandler.NAME)) {\n             return WordCountHandler.inject(tokens);\n-        } else {\n+        } else if (firstTextToken.value().equals(TeeHandler.NAME)){\n+            return TeeHandler.inject(tokens);\n+        } else{\n             return null;\n         }\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n@@ -0,0 +1,80 @@\n+package com.taobao.arthas.core.shell.command.internal;\n+\n+import com.taobao.arthas.core.command.basic1000.TeeCommand;\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.middleware.cli.CLI;\n+import com.taobao.middleware.cli.CommandLine;\n+import com.taobao.middleware.cli.annotations.CLIConfigurator;\n+\n+import java.io.*;\n+import java.util.List;\n+\n+/**\n+ * @author min.yang\n+ */\n+public class TeeHandler extends StdoutHandler implements CloseFunction {\n+    public static final String NAME = \"tee\";\n+    private PrintWriter out;\n+    private static CLI cli = null;\n+\n+    public TeeHandler(String filePath, boolean append) throws IOException {\n+        if (StringUtils.isEmpty(filePath)) {\n+            return;\n+        }\n+        File file = new File(filePath);\n+\n+        if (file.isDirectory()) {\n+            throw new IOException(filePath + \": Is a directory\");\n+        }\n+\n+        if (!file.exists()) {\n+            File parentFile = file.getParentFile();\n+            if (parentFile != null) {\n+                parentFile.mkdirs();\n+            }\n+        }\n+        out = new PrintWriter(new BufferedWriter(new FileWriter(file, append)));\n+    }\n+\n+    public static StdoutHandler inject(List<CliToken> tokens) {\n+        List<String> args = StdoutHandler.parseArgs(tokens, NAME);\n+\n+        TeeCommand teeCommand = new TeeCommand();\n+        if (cli == null) {\n+            cli = CLIConfigurator.define(TeeCommand.class);\n+        }\n+        CommandLine commandLine = cli.parse(args, true);\n+\n+        try {\n+            CLIConfigurator.inject(commandLine, teeCommand);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        String filePath = teeCommand.getFilePath();\n+        boolean append = teeCommand.isAppend();\n+        try {\n+            return new TeeHandler(filePath, append);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String apply(String data) {\n+        data = super.apply(data);\n+        if (out != null) {\n+            out.write(data);\n+            out.flush();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (out != null) {\n+            out.close();\n+        }\n+    }\n+}",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -13,6 +13,7 @@\n import com.taobao.arthas.core.command.basic1000.StopCommand;\n import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n+import com.taobao.arthas.core.command.basic1000.TeeCommand;\n import com.taobao.arthas.core.command.basic1000.VMOptionCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n import com.taobao.arthas.core.command.hidden.JulyCommand;\n@@ -102,6 +103,7 @@ private static void initCommands() {\n         commands.add(Command.create(PwdCommand.class));\n         commands.add(Command.create(MBeanCommand.class));\n         commands.add(Command.create(GrepCommand.class));\n+        commands.add(Command.create(TeeCommand.class));\n         commands.add(Command.create(ProfilerCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/TeeCommand.java\n@@ -0,0 +1,48 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.*;\n+\n+/**\n+ * @author min.yang\n+ */\n+@Name(\"tee\")\n+@Summary(\"tee command for pipes.\" )\n+@Description(Constants.EXAMPLE +\n+        \" sysprop | tee /path/to/logfile | grep java \\n\" +\n+        \" sysprop | tee -a /path/to/logfile | grep java \\n\"\n+        + Constants.WIKI + Constants.WIKI_HOME + \"tee\")\n+public class TeeCommand extends AnnotatedCommand {\n+\n+    private String filePath;\n+    private boolean append;\n+\n+    @Argument(index = 0, argName = \"file\", required = false)\n+    @Description(\"File path\")\n+    public void setFilePath(String filePath) {\n+        this.filePath = filePath;\n+    }\n+\n+    @Option(shortName = \"a\", longName = \"append\", flag = true)\n+    @Description(\"Append to file\")\n+    public void setRegEx(boolean append) {\n+        this.append = append;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        process.write(\"The tee command only for pipes. See 'tee --help'\\n\");\n+        process.end();\n+    }\n+\n+    public String getFilePath() {\n+        return filePath;\n+    }\n+\n+    public boolean isAppend() {\n+        return append;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/StdoutHandler.java\n@@ -30,7 +30,9 @@ public static StdoutHandler inject(List<CliToken> tokens) {\n             return PlainTextHandler.inject(tokens);\n         } else if (firstTextToken.value().equals(WordCountHandler.NAME)) {\n             return WordCountHandler.inject(tokens);\n-        } else {\n+        } else if (firstTextToken.value().equals(TeeHandler.NAME)){\n+            return TeeHandler.inject(tokens);\n+        } else{\n             return null;\n         }\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/TeeHandler.java\n@@ -0,0 +1,80 @@\n+package com.taobao.arthas.core.shell.command.internal;\n+\n+import com.taobao.arthas.core.command.basic1000.TeeCommand;\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.middleware.cli.CLI;\n+import com.taobao.middleware.cli.CommandLine;\n+import com.taobao.middleware.cli.annotations.CLIConfigurator;\n+\n+import java.io.*;\n+import java.util.List;\n+\n+/**\n+ * @author min.yang\n+ */\n+public class TeeHandler extends StdoutHandler implements CloseFunction {\n+    public static final String NAME = \"tee\";\n+    private PrintWriter out;\n+    private static CLI cli = null;\n+\n+    public TeeHandler(String filePath, boolean append) throws IOException {\n+        if (StringUtils.isEmpty(filePath)) {\n+            return;\n+        }\n+        File file = new File(filePath);\n+\n+        if (file.isDirectory()) {\n+            throw new IOException(filePath + \": Is a directory\");\n+        }\n+\n+        if (!file.exists()) {\n+            File parentFile = file.getParentFile();\n+            if (parentFile != null) {\n+                parentFile.mkdirs();\n+            }\n+        }\n+        out = new PrintWriter(new BufferedWriter(new FileWriter(file, append)));\n+    }\n+\n+    public static StdoutHandler inject(List<CliToken> tokens) {\n+        List<String> args = StdoutHandler.parseArgs(tokens, NAME);\n+\n+        TeeCommand teeCommand = new TeeCommand();\n+        if (cli == null) {\n+            cli = CLIConfigurator.define(TeeCommand.class);\n+        }\n+        CommandLine commandLine = cli.parse(args, true);\n+\n+        try {\n+            CLIConfigurator.inject(commandLine, teeCommand);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        String filePath = teeCommand.getFilePath();\n+        boolean append = teeCommand.isAppend();\n+        try {\n+            return new TeeHandler(filePath, append);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String apply(String data) {\n+        data = super.apply(data);\n+        if (out != null) {\n+            out.write(data);\n+            out.flush();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (out != null) {\n+            out.close();\n+        }\n+    }\n+}",
    "output": "Add tee command for pipes (#976)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -3,7 +3,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n ",
    "output": "clean code"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -101,21 +101,28 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n \n         List<String> lines = ExecutingCommand.runNative(command);\n \n+        AnsiLog.debug(\"jps result: \" + lines);\n+\n         int currentPid = Integer.parseInt(PidUtils.currentPid());\n         for (String line : lines) {\n             String[] strings = line.trim().split(\"\\\\s+\");\n             if (strings.length < 1) {\n                 continue;\n             }\n-            int pid = Integer.parseInt(strings[0]);\n-            if (pid == currentPid) {\n-                continue;\n-            }\n-            if (strings.length >= 2 && isJpsProcess(strings[1])) { // skip jps\n-                continue;\n-            }\n+            try {\n+                int pid = Integer.parseInt(strings[0]);\n+                if (pid == currentPid) {\n+                    continue;\n+                }\n+                if (strings.length >= 2 && isJpsProcess(strings[1])) { // skip jps\n+                    continue;\n+                }\n \n-            result.put(pid, line);\n+                result.put(pid, line);\n+            } catch (Throwable e) {\n+                // https://github.com/alibaba/arthas/issues/970\n+                // ignore\n+            }\n         }\n \n         return result;",
    "output": "fix arthas-boot error when have _JAVA_OPTIONS env. #970"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java\n@@ -31,6 +31,7 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -148,8 +149,13 @@ private void evictSessions() {\n \n     public synchronized void setTimer() {\n         if (!closed && reaperInterval > 0) {\n-            scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n-            // TODO rename the thread, currently it is `pool-3-thread-1`, which is ambiguous\n+            scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+                @Override\n+                public Thread newThread(Runnable r) {\n+                    final Thread t = new Thread(r, \"arthas-shell-server\");\n+                    return t;\n+                }\n+            });\n             scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n \n                 @Override",
    "output": "Naming the thread of ShellServerImpl (#967)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -15,15 +15,6 @@\n \n public abstract class StringUtils {\n \n-    private static final String FOLDER_SEPARATOR = \"/\";\n-    private static final String WINDOWS_FOLDER_SEPARATOR = \"\\\\\";\n-    private static final String TOP_PATH = \"..\";\n-    private static final String CURRENT_PATH = \".\";\n-    private static final char EXTENSION_SEPARATOR = '.';\n-    public static final int UNIT = 1024;\n-    public static final String STRING_UNITS = \"KMGTPE\";\n-\n-\n     /**\n      * 获取异常的原因描述\n      *\n@@ -878,16 +869,17 @@ public static String classLoaderHash(Class<?> clazz) {\n     }\n \n     /**\n-     * format byte size to human readable format\n+     * format byte size to human readable format. https://stackoverflow.com/a/3758880\n      * @param bytes byets\n      * @return  human readable format\n      */\n     public static String humanReadableByteCount(long bytes) {\n-        if (bytes < UNIT) {\n-            return bytes + \" B\";\n-        }\n-        int exp = (int) (Math.log(bytes) / Math.log(UNIT));\n-        String pre =  STRING_UNITS.charAt(exp-1) +  \"i\";\n-        return String.format(\"%.2f %sB\", bytes / Math.pow(UNIT, exp), pre);\n+        return bytes < 1024L ? bytes + \" B\"\n+                : bytes < 0xfffccccccccccccL >> 40 ? String.format(\"%.1f KiB\", bytes / 0x1p10)\n+                : bytes < 0xfffccccccccccccL >> 30 ? String.format(\"%.1f MiB\", bytes / 0x1p20)\n+                : bytes < 0xfffccccccccccccL >> 20 ? String.format(\"%.1f GiB\", bytes / 0x1p30)\n+                : bytes < 0xfffccccccccccccL >> 10 ? String.format(\"%.1f TiB\", bytes / 0x1p40)\n+                : bytes < 0xfffccccccccccccL ? String.format(\"%.1f PiB\", (bytes >> 10) / 0x1p40)\n+                : String.format(\"%.1f EiB\", (bytes >> 20) / 0x1p40);\n     }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n@@ -20,12 +20,12 @@ public class StringUtilsTest {\n     @Test\n     public void testHumanReadableByteCount() {\n         Assert.assertEquals(StringUtils.humanReadableByteCount(1023L), \"1023 B\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L), \"1.00 KiB\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L), \"1.00 MiB\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L - 100), \"1023.90 KiB\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024L), \"1.00 GiB\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024L), \"1.00 TiB\");\n-        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024 * 1024), \"1.00 PiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L), \"1.0 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L), \"1.0 MiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L - 100), \"1023.9 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024L), \"1.0 GiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024L), \"1.0 TiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024 * 1024), \"1.0 PiB\");\n     }\n \n     @Test",
    "output": "improve humanReadableByteCount"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.7\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -99,4 +99,14 @@ public class GlobalOptions {\n     )\n     public static volatile String jobTimeout = \"1d\";\n \n+    /**\n+     * 是否打印parent类里的field\n+     * @see com.taobao.arthas.core.view.ObjectView\n+     */\n+    @Option(level = 1,\n+            name = \"print-parent-fields\",\n+            summary = \"Option to print all fileds in parent class\",\n+            description = \"This option enables print files in parent class, default value true.\"\n+    )\n+    public static volatile boolean printParentFields = true;\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -582,7 +582,22 @@ else if (object instanceof Enum<?>) {\n                     appendStringBuilder(buf, format(\"@%s[%s]\", className, obj));\n                 } else {\n                     appendStringBuilder(buf, format(\"@%s[\", className));\n-                    final Field[] fields = obj.getClass().getDeclaredFields();\n+                    List<Field> fields = new ArrayList<Field>();\n+                    Class objClass = obj.getClass();\n+                    if (GlobalOptions.printParentFields) {\n+                        // 当父类为null的时候说明到达了最上层的父类(Object类).\n+                        while (objClass != null) {\n+                            for (Field field : objClass.getDeclaredFields()) {\n+                                fields.add(field);\n+                            }\n+                            objClass = objClass.getSuperclass();\n+                        }\n+                    } else {\n+                        for (Field field : objClass.getDeclaredFields()) {\n+                            fields.add(field);\n+                        }\n+                    }\n+\n                     if (null != fields) {\n                         for (Field field : fields) {\n \n@@ -620,17 +635,6 @@ else if (object instanceof Enum<?>) {\n         }\n     }\n \n-    /**\n-     * 是否根节点\n-     *\n-     * @param deep 深度\n-     * @return true:根节点 / false:非根节点\n-     */\n-    private static boolean isRoot(int deep) {\n-        return deep == 0;\n-    }\n-\n-\n     /**\n      * 是否展开当前深度的节点\n      *\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n@@ -266,4 +266,41 @@ private static NestedClass get(int code) {\n             return new NestedClass(code);\n         }\n     }\n+\n+    /**\n+     * 显示基类属性值\n+     */\n+    @Test\n+    public void testObjectViewBaseFieldValue() {\n+        SonBean sonBean = new SonBean();\n+        sonBean.setI(10);\n+        sonBean.setJ(\"test\");\n+\n+        ObjectView objectView = new ObjectView(sonBean, 3, 100);\n+        Assert.assertTrue(objectView.draw().contains(\"i=@Integer[10]\"));\n+    }\n+\n+    private class BaseBean {\n+        private int i;\n+\n+        public int getI() {\n+            return i;\n+        }\n+\n+        public void setI(int i) {\n+            this.i = i;\n+        }\n+    }\n+\n+    private class SonBean extends BaseBean {\n+        private String j;\n+\n+        public String getJ() {\n+            return j;\n+        }\n+\n+        public void setJ(String j) {\n+            this.j = j;\n+        }\n+    }\n }",
    "output": "support print fields in parent class. #435"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -36,6 +36,7 @@\n         \"  trace -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils isBlank\\n\" +\n         \"  trace -E com.test.ClassA|org.test.ClassB method1|method2|method3\\n\" +\n         \"  trace demo.MathGame run -n 5\\n\" +\n+        \"  trace demo.MathGame run --skipJDKMethod false\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"trace\")\n //@formatter:on\n public class TraceCommand extends EnhancerCommand {",
    "output": "update trace command doc. #958"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/HttpTermServer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/HttpTermServer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/HttpTermServer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/HttpTermServer.java\n@@ -4,10 +4,10 @@\n import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.shell.term.TermServer;\n+import com.taobao.arthas.core.shell.term.impl.http.NettyWebsocketTtyBootstrap;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n import io.termd.core.function.Consumer;\n-import io.termd.core.http.netty.NettyWebsocketTtyBootstrap;\n import io.termd.core.tty.TtyConnection;\n \n import java.util.concurrent.TimeUnit;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.core.shell.term.impl.httptelnet;\n+package com.taobao.arthas.core.shell.term.impl.http;\n \n import java.io.File;\n import java.io.FileInputStream;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.core.shell.term.impl.httptelnet;\n+package com.taobao.arthas.core.shell.term.impl.http;\n \n import java.io.File;\n import java.io.InputStream;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/NettyWebsocketTtyBootstrap.java\n@@ -0,0 +1,106 @@\n+package com.taobao.arthas.core.shell.term.impl.http;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.group.ChannelGroup;\n+import io.netty.channel.group.DefaultChannelGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.handler.logging.LoggingHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import io.netty.util.concurrent.ImmediateEventExecutor;\n+import io.termd.core.function.Consumer;\n+import io.termd.core.tty.TtyConnection;\n+import io.termd.core.util.CompletableFuture;\n+import io.termd.core.util.Helper;\n+\n+/**\n+ * Convenience class for quickly starting a Netty Tty server.\n+ *\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+public class NettyWebsocketTtyBootstrap {\n+\n+    private final ChannelGroup channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);\n+    private String host;\n+    private int port;\n+    private EventLoopGroup group;\n+    private Channel channel;\n+\n+    public NettyWebsocketTtyBootstrap() {\n+        this.host = \"localhost\";\n+        this.port = 8080;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public NettyWebsocketTtyBootstrap setHost(String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public NettyWebsocketTtyBootstrap setPort(int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    public void start(Consumer<TtyConnection> handler, final Consumer<Throwable> doneHandler) {\n+        group = new NioEventLoopGroup();\n+\n+        ServerBootstrap b = new ServerBootstrap();\n+        b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO))\n+                .childHandler(new TtyServerInitializer(channelGroup, handler));\n+\n+        final ChannelFuture f = b.bind(host, port);\n+        f.addListener(new GenericFutureListener<Future<? super Void>>() {\n+            @Override\n+            public void operationComplete(Future<? super Void> future) throws Exception {\n+                if (future.isSuccess()) {\n+                    channel = f.channel();\n+                    doneHandler.accept(null);\n+                } else {\n+                    doneHandler.accept(future.cause());\n+                }\n+            }\n+        });\n+    }\n+\n+    public CompletableFuture<Void> start(Consumer<TtyConnection> handler) {\n+        CompletableFuture<Void> fut = new CompletableFuture<Void>();\n+        start(handler, Helper.startedHandler(fut));\n+        return fut;\n+    }\n+\n+    public void stop(final Consumer<Throwable> doneHandler) {\n+        if (channel != null) {\n+            channel.close();\n+        }\n+\n+        channelGroup.close().addListener(new GenericFutureListener<Future<? super Void>>() {\n+            @Override\n+            public void operationComplete(Future<? super Void> future) throws Exception {\n+                try {\n+                    doneHandler.accept(future.cause());\n+                } finally {\n+                    group.shutdownGracefully();\n+                }\n+            }\n+        });\n+    }\n+\n+    public CompletableFuture<Void> stop() {\n+        CompletableFuture<Void> fut = new CompletableFuture<Void>();\n+        stop(Helper.stoppedHandler(fut));\n+        return fut;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java\n@@ -0,0 +1,40 @@\n+package com.taobao.arthas.core.shell.term.impl.http;\n+\n+import java.io.File;\n+\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.group.ChannelGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpServerCodec;\n+import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n+import io.netty.handler.stream.ChunkedWriteHandler;\n+import io.termd.core.function.Consumer;\n+import io.termd.core.tty.TtyConnection;\n+\n+\n+/**\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+public class TtyServerInitializer extends ChannelInitializer<SocketChannel> {\n+\n+  private final ChannelGroup group;\n+  private final Consumer<TtyConnection> handler;\n+\n+  public TtyServerInitializer(ChannelGroup group, Consumer<TtyConnection> handler) {\n+      this.group = group;\n+      this.handler = handler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    ChannelPipeline pipeline = ch.pipeline();\n+    pipeline.addLast(new HttpServerCodec());\n+    pipeline.addLast(new ChunkedWriteHandler());\n+    pipeline.addLast(new HttpObjectAggregator(64 * 1024));\n+    pipeline.addLast(new HttpRequestHandler(\"/ws\", new File(\"arthas-output\")));\n+    pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n+    pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));\n+  }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package com.taobao.arthas.core.shell.term.impl.httptelnet;\n+package com.taobao.arthas.core.shell.term.impl.http;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/package-info.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/package-info.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/package-info.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/package-info.java\n@@ -0,0 +1 @@\n+package com.taobao.arthas.core.shell.term.impl.http;\n\\ No newline at end of file\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n@@ -3,6 +3,9 @@\n import java.io.File;\n import java.util.concurrent.TimeUnit;\n \n+import com.taobao.arthas.core.shell.term.impl.http.HttpRequestHandler;\n+import com.taobao.arthas.core.shell.term.impl.http.TtyWebSocketFrameHandler;\n+\n import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInboundHandlerAdapter;",
    "output": "fix http port 8563 support. #955"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -10,6 +10,7 @@\n import com.taobao.arthas.core.util.matcher.TrueMatcher;\n import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n@@ -83,8 +84,9 @@ public void setPathPatterns(List<String> pathPatterns) {\n         this.pathPatterns = pathPatterns;\n     }\n \n-    @Option(shortName = \"j\", longName = \"jdkMethodSkip\")\n-    @Description(\"skip jdk method trace\")\n+    @Option(longName = \"skipJDKMethod\")\n+    @DefaultValue(\"true\")\n+    @Description(\"skip jdk method trace, default value true.\")\n     public void setSkipJDKTrace(boolean skipJDKTrace) {\n         this.skipJDKTrace = skipJDKTrace;\n     }",
    "output": "trace command skip jdk method by default. #958"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n@@ -56,7 +56,7 @@ public static Element renderClassInfo(Class<?> clazz, boolean isPrintField, Inte\n                 .row(label(\"classLoaderHash\").style(Decoration.bold.bold()), label(StringUtils.classLoaderHash(clazz)));\n \n         if (isPrintField) {\n-            table.row(label(\"fields\"), TypeRenderUtils.drawField(clazz, expand));\n+            table.row(label(\"fields\").style(Decoration.bold.bold()), TypeRenderUtils.drawField(clazz, expand));\n         }\n         return table;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n@@ -98,17 +98,17 @@ public static Element drawClassLoader(Class<?> clazz) {\n     }\n \n     public static Element drawField(Class<?> clazz, Integer expand) {\n-        TableElement fieldsTable = new TableElement().leftCellPadding(0).rightCellPadding(0);\n+        TableElement fieldsTable = new TableElement(1).leftCellPadding(0).rightCellPadding(0);\n         Field[] fields = clazz.getDeclaredFields();\n         if (fields == null || fields.length == 0) {\n             return fieldsTable;\n         }\n \n         for (Field field : fields) {\n-            TableElement fieldTable = new TableElement().leftCellPadding(0).rightCellPadding(0);\n-            fieldTable.row(\"modifier\", StringUtils.modifier(field.getModifiers(), ','))\n+            TableElement fieldTable = new TableElement().leftCellPadding(0).rightCellPadding(1);\n+            fieldTable.row(\"name\", field.getName())\n                     .row(\"type\", StringUtils.classname(field.getType()))\n-                    .row(\"name\", field.getName());\n+                    .row(\"modifier\", StringUtils.modifier(field.getModifiers(), ','));\n \n             Annotation[] annotations = field.getAnnotations();\n             if (annotations != null && annotations.length > 0) {",
    "output": "fix sc command render fields problem. close #956"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -266,6 +266,11 @@ public void process(CommandProcess process) {\n             AsyncProfiler asyncProfiler = this.profilerInstance();\n \n             if (ProfilerAction.execute.equals(profilerAction)) {\n+                if (actionArg == null) {\n+                    process.write(\"actionArg can not be empty.\\n\");\n+                    status = 1;\n+                    return;\n+                }\n                 String result = execute(asyncProfiler, this.actionArg);\n                 process.write(result);\n             } else if (ProfilerAction.start.equals(profilerAction)) {",
    "output": "fix profiler execute make jvm crash problem. close #962"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java b/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n@@ -37,10 +37,16 @@\n  *\n  * @author vlinux on 15/6/6.\n  */\n+// @formatter:off\n @Name(\"options\")\n @Summary(\"View and change various Arthas options\")\n-@Description(Constants.EXAMPLE + \"options dump true\\n\"+ \"options unsafe true\\n\" +\n+@Description(Constants.EXAMPLE +\n+        \"options       # list all options\\n\" +\n+        \"options json-format true\\n\" +\n+        \"options dump true\\n\" +\n+        \"options unsafe true\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"options\")\n+//@formatter:on\n public class OptionsCommand extends AnnotatedCommand {\n     private String optionName;\n     private String optionValue;",
    "output": "update options command doc."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -24,6 +24,7 @@\n  *\n  * @author vlinux on 15/5/27.\n  */\n+// @formatter:off\n @Name(\"trace\")\n @Summary(\"Trace the execution time of specified method invocation.\")\n @Description(value = Constants.EXPRESS_DESCRIPTION + Constants.EXAMPLE +\n@@ -33,7 +34,9 @@\n         \"  trace *StringUtils isBlank '#cost>100'\\n\" +\n         \"  trace -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils isBlank\\n\" +\n         \"  trace -E com.test.ClassA|org.test.ClassB method1|method2|method3\\n\" +\n+        \"  trace demo.MathGame run -n 5\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"trace\")\n+//@formatter:on\n public class TraceCommand extends EnhancerCommand {\n \n     private String classPattern;",
    "output": "update trace command docs"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.4\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.5\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n@@ -6,6 +6,8 @@\n import java.net.URL;\n \n import com.taobao.arthas.common.IOUtils;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.logger.Logger;\n \n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelFutureListener;\n@@ -29,6 +31,7 @@\n  * @author hengyunabc 2019-11-06\n  */\n public class HttpRequestHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n \n     private final String wsUri;\n \n@@ -100,7 +103,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request)\n                 }\n \n             } catch (Throwable e) {\n-                e.printStackTrace();\n+                logger.error(\"arthas\", \"arthas process http request error: \" + request.uri(), e);\n             } finally {\n                 ctx.write(response);\n                 ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);",
    "output": "improve HttpRequestHandler error log"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -38,16 +38,23 @@\n //@formatter:off\n @Name(\"profiler\")\n @Summary(\"Async Profiler. https://github.com/jvm-profiling-tools/async-profiler\")\n-@Description(Constants.EXAMPLE + \"  profiler start\\n\"\n+@Description(Constants.EXAMPLE\n+        + \"  profiler start\\n\"\n         + \"  profiler stop\\n\"\n         + \"  profiler list                # list all supported events\\n\"\n+        + \"  profiler actions             # list all supported actions\\n\"\n         + \"  profiler start --event alloc\\n\"\n         + \"  profiler stop --format svg   # output file format, support svg,html,jfr\\n\"\n         + \"  profiler stop --file /tmp/result.html\\n\"\n+        + \"  profiler stop --threads \\n\"\n         + \"  profiler status\\n\"\n-        + \"  profiler resume\\n\"\n-        + \"  profiler start --threads \\n\"\n-        + \"  profiler getSamples          # get current samples count\\n\"\n+        + \"  profiler resume              # Start or resume profiling without resetting collected data.\\n\"\n+        + \"  profiler getSamples          # Get the number of samples collected during the profiling session\\n\"\n+        + \"  profiler dumpFlat            # Dump flat profile, i.e. the histogram of the hottest methods\\n\"\n+        + \"  profiler dumpCollapsed       # Dump profile in 'collapsed stacktraces' format\\n\"\n+        + \"  profiler dumpTraces          # Dump collected stack traces\\n\"\n+        + \"  profiler execute 'start'                       # Execute an agent-compatible profiling command\\n\"\n+        + \"  profiler execute 'stop,file=/tmp/result.svg'   # Execute an agent-compatible profiling command\\n\"\n         + Constants.WIKI + Constants.WIKI_HOME + \"profiler\")\n //@formatter:on\n public class ProfilerCommand extends AnnotatedCommand {\n@@ -69,8 +76,21 @@ public class ProfilerCommand extends AnnotatedCommand {\n      */\n     private Long interval;\n \n+    /**\n+     * profile different threads separately\n+     */\n     private boolean threads;\n \n+    /**\n+     * include only kernel-mode events\n+     */\n+    private boolean allkernel;\n+\n+    /**\n+     * include only user-mode events\n+     */\n+    private boolean alluser;\n+\n     private static String libPath;\n     private static AsyncProfiler profiler = null;\n \n@@ -145,13 +165,25 @@ public void setThreads(boolean threads) {\n         this.threads = threads;\n     }\n \n+    @Option(longName = \"allkernel\", flag = true)\n+    @Description(\"include only kernel-mode events\")\n+    public void setAllkernel(boolean allkernel) {\n+        this.allkernel = allkernel;\n+    }\n+\n+    @Option(longName = \"alluser\", flag = true)\n+    @Description(\"include only user-mode events\")\n+    public void setAlluser(boolean alluser) {\n+        this.alluser = alluser;\n+    }\n+\n     private AsyncProfiler profilerInstance() {\n         if (profiler != null) {\n             return profiler;\n         }\n \n         // try to load from special path\n-        if (\"load\".equals(action)) {\n+        if (ProfilerAction.load.toString().equals(action)) {\n             profiler = AsyncProfiler.getInstance(this.actionArg);\n         }\n \n@@ -162,17 +194,23 @@ private AsyncProfiler profilerInstance() {\n             if (OSUtils.isLinux() || OSUtils.isMac()) {\n                 throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n             } else {\n-                throw new IllegalStateException(\"Current OS do not support AsyncProfiler.\");\n+                throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n             }\n         }\n \n         return profiler;\n     }\n \n+    /**\n+     * https://github.com/jvm-profiling-tools/async-profiler/blob/v1.6/src/arguments.cpp#L34\n+     *\n+     */\n     enum ProfilerAction {\n-        execute, start, stop, resume, list, version, status,\n+        execute, start, stop, resume, list, version, status, load,\n \n         dumpCollapsed, dumpFlat, dumpTraces, getSamples,\n+\n+        actions\n     }\n \n     private String executeArgs(ProfilerAction action) {\n@@ -195,6 +233,12 @@ private String executeArgs(ProfilerAction action) {\n         if (this.threads) {\n             sb.append(\"threads\").append(',');\n         }\n+        if (this.allkernel) {\n+            sb.append(\"allkernel\").append(',');\n+        }\n+        if (this.alluser) {\n+            sb.append(\"alluser\").append(',');\n+        }\n \n         return sb.toString();\n     }\n@@ -212,10 +256,15 @@ private static String execute(AsyncProfiler asyncProfiler, String arg)\n     public void process(CommandProcess process) {\n         int status = 0;\n         try {\n-            AsyncProfiler asyncProfiler = this.profilerInstance();\n-\n             ProfilerAction profilerAction = ProfilerAction.valueOf(action);\n \n+            if (ProfilerAction.actions.equals(profilerAction)) {\n+                process.write(\"Supported Actions: \" + actions() + \"\\n\");\n+                return;\n+            }\n+\n+            AsyncProfiler asyncProfiler = this.profilerInstance();\n+\n             if (ProfilerAction.execute.equals(profilerAction)) {\n                 String result = execute(asyncProfiler, this.actionArg);\n                 process.write(result);\n@@ -251,7 +300,6 @@ public void process(CommandProcess process) {\n                     actionArg = \"TOTAL\";\n                 }\n                 actionArg = actionArg.toUpperCase();\n-                System.err.println(\"actionArg: \" + actionArg + \", \" + \"TOTAL\".equals(actionArg));\n                 if (\"TOTAL\".equals(actionArg) || \"SAMPLES\".equals(actionArg)) {\n                     String result = asyncProfiler.dumpCollapsed(Counter.valueOf(actionArg));\n                     process.write(result);\n@@ -318,6 +366,14 @@ private List<String> events() {\n         return result;\n     }\n \n+    private Set<String> actions() {\n+        Set<String> values = new HashSet<String>();\n+        for (ProfilerAction action : ProfilerAction.values()) {\n+            values.add(action.toString());\n+        }\n+        return values;\n+    }\n+\n     @Override\n     public void complete(Completion completion) {\n         List<CliToken> tokens = completion.lineTokens();\n@@ -343,11 +399,7 @@ public void complete(Completion completion) {\n             return;\n         }\n \n-        Set<String> values = new HashSet<String>();\n-        for (ProfilerAction action : ProfilerAction.values()) {\n-            values.add(action.toString());\n-        }\n-        CompletionUtils.complete(completion, values);\n+        CompletionUtils.complete(completion, actions());\n     }\n \n }\n\\ No newline at end of file",
    "output": "update ProfilerCommand"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -430,8 +430,10 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             if (localLastestVersion == null) {\n                 if (remoteLastestVersion == null) {\n                     // exit\n-                    AnsiLog.error(\"Can not find Arthas under local: {} and remote: {}\", ARTHAS_LIB_DIR,\n-                                    bootstrap.getRepoMirror());\n+                    AnsiLog.error(\"Can not find Arthas under local: {} and remote maven repo mirror: {}\", ARTHAS_LIB_DIR,\n+                            bootstrap.getRepoMirror());\n+                    AnsiLog.error(\n+                            \"Unable to download arthas from remote server, please download the full package according to wiki: https://github.com/alibaba/arthas\");\n                     System.exit(1);\n                 } else {\n                     needDownload = true;",
    "output": "improve error log. close #944"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/LongStackTest.java b/core/src/test/java/com/taobao/arthas/core/util/LongStackTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/LongStackTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/LongStackTest.java\n@@ -0,0 +1,89 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.taobao.arthas.core.util.ThreadLocalWatch.LongStack;\n+\n+/**\n+ * \n+ * @author hengyunabc 2019-11-20\n+ *\n+ */\n+public class LongStackTest {\n+\n+    @Test\n+    public void test() {\n+        LongStack stack = new LongStack(100);\n+\n+        stack.push(1);\n+        stack.push(2);\n+        stack.push(3);\n+\n+        Assert.assertEquals(3, stack.pop());\n+        Assert.assertEquals(2, stack.pop());\n+        Assert.assertEquals(1, stack.pop());\n+    }\n+\n+    @Test\n+    public void test2() {\n+        LongStack stack = new LongStack(100);\n+\n+        stack.push(1);\n+        stack.push(2);\n+        stack.push(3);\n+\n+        Assert.assertEquals(3, stack.pop());\n+        Assert.assertEquals(2, stack.pop());\n+        Assert.assertEquals(1, stack.pop());\n+        Assert.assertEquals(0, stack.pop());\n+    }\n+\n+    @Test\n+    public void test3() {\n+        LongStack stack = new LongStack(2);\n+\n+        stack.push(1);\n+        stack.push(2);\n+        stack.push(3);\n+\n+        Assert.assertEquals(3, stack.pop());\n+        Assert.assertEquals(2, stack.pop());\n+        Assert.assertEquals(3, stack.pop());\n+        Assert.assertEquals(2, stack.pop());\n+    }\n+\n+    @Test\n+    public void test4() {\n+        LongStack stack = new LongStack(2);\n+\n+        stack.push(1);\n+        stack.push(2);\n+\n+        Assert.assertEquals(2, stack.pop());\n+        Assert.assertEquals(1, stack.pop());\n+        Assert.assertEquals(2, stack.pop());\n+        Assert.assertEquals(1, stack.pop());\n+    }\n+    \n+    @Test\n+    public void test5() {\n+        LongStack stack = new LongStack(10);\n+\n+        stack.push(1);\n+        stack.push(2);\n+        stack.push(3);\n+        stack.pop();\n+        stack.pop();\n+        stack.push(4);\n+        stack.push(5);\n+        \n+        stack.push(6);\n+        stack.pop();\n+\n+        Assert.assertEquals(5, stack.pop());\n+        Assert.assertEquals(4, stack.pop());\n+        Assert.assertEquals(1, stack.pop());\n+        Assert.assertEquals(0, stack.pop());\n+    }\n+}",
    "output": "polish #942, add LongStackTest."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n@@ -1,18 +1,17 @@\n package com.taobao.arthas.core.util;\n \n-import java.util.Stack;\n-\n /**\n  * 简单的调用计时器。\n- * Created by vlinux on 16/6/1.\n+ * \n+ * @author vlinux 16/6/1.\n  * @author hengyunabc 2016-10-31\n  */\n public class ThreadLocalWatch {\n \n-    private final ThreadLocal<Stack<Long>> timestampRef = new ThreadLocal<Stack<Long>>() {\n+    private final ThreadLocal<LongStack> timestampRef = new ThreadLocal<LongStack>() {\n         @Override\n-        protected Stack<Long> initialValue() {\n-            return new Stack<Long>();\n+        protected LongStack initialValue() {\n+            return new LongStack(1024 * 4);\n         }\n     };\n \n@@ -30,8 +29,52 @@ public double costInMillis() {\n         return (System.nanoTime() - timestampRef.get().pop()) / 1000000.0;\n     }\n \n-    public void clear() {\n-        timestampRef.remove();\n-    }\n+    /**\n+     * \n+     * <pre>\n+     * 一个特殊的stack，为了追求效率，避免扩容。\n+     * 因为这个stack的push/pop 并不一定成对调用，比如可能push执行了，但是后面的流程被中断了，pop没有被执行。\n+     * 如果不固定大小，一直增长的话，极端情况下可能应用有内存问题。\n+     * 如果到达容量，pos会重置，循环存储数据。所以使用这个Stack如果在极端情况下统计的数据会不准确，只用于monitor/watch等命令的计时。\n+     * \n+     * </pre>\n+     * \n+     * @author hengyunabc 2019-11-20\n+     *\n+     */\n+    static class LongStack {\n+        private long[] array;\n+        private int pos = 0;\n+        private int cap;\n+\n+        public LongStack(int maxSize) {\n+            array = new long[maxSize];\n+            cap = array.length;\n+        }\n+\n+        public int size() {\n+            return pos;\n+        }\n+\n+        public void push(long value) {\n+            if (pos < cap) {\n+                array[pos++] = value;\n+            } else {\n+                // if array is full, reset pos\n+                pos = 0;\n+                array[pos++] = value;\n+            }\n+        }\n \n+        public long pop() {\n+            if (pos > 0) {\n+                pos--;\n+                return array[pos];\n+            } else {\n+                pos = cap;\n+                pos--;\n+                return array[pos];\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file",
    "output": "polish #942, improve stack in ThreadLocalWatch."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadLocalWatch.java\n@@ -1,31 +1,33 @@\n package com.taobao.arthas.core.util;\n \n+import java.util.Stack;\n+\n /**\n- * 简单的调用计时器。TODO 用stack的实现更合理\n+ * 简单的调用计时器。\n  * Created by vlinux on 16/6/1.\n  * @author hengyunabc 2016-10-31\n  */\n public class ThreadLocalWatch {\n \n-    private final ThreadLocal<Long> timestampRef = new ThreadLocal<Long>() {\n+    private final ThreadLocal<Stack<Long>> timestampRef = new ThreadLocal<Stack<Long>>() {\n         @Override\n-        protected Long initialValue() {\n-            return System.nanoTime();\n+        protected Stack<Long> initialValue() {\n+            return new Stack<Long>();\n         }\n     };\n \n     public long start() {\n         final long timestamp = System.nanoTime();\n-        timestampRef.set(timestamp);\n+        timestampRef.get().push(timestamp);\n         return timestamp;\n     }\n \n     public long cost() {\n-        return (System.nanoTime() - timestampRef.get());\n+        return (System.nanoTime() - timestampRef.get().pop());\n     }\n \n     public double costInMillis() {\n-        return (System.nanoTime() - timestampRef.get()) / 1000000.0;\n+        return (System.nanoTime() - timestampRef.get().pop()) / 1000000.0;\n     }\n \n     public void clear() {",
    "output": "fix monitor command time stat problem(#942)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -159,7 +159,7 @@ private AsyncProfiler profilerInstance() {\n             // load from arthas directory\n             profiler = AsyncProfiler.getInstance(libPath);\n         } else {\n-            if (OSUtils.isLinux() || OSUtils.isLinux()) {\n+            if (OSUtils.isLinux() || OSUtils.isMac()) {\n                 throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n             } else {\n                 throw new IllegalStateException(\"Current OS do not support AsyncProfiler.\");",
    "output": "fix typo. #923"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java\n@@ -35,12 +35,21 @@\n  * @author hengyunabc 2019-10-31\n  *\n  */\n+//@formatter:off\n @Name(\"profiler\")\n-@Summary(\"Profiler\")\n-@Description(\"\\nExamples:\\n\" + \"  mbean\\n\" + \"  mbean -m java.lang:type=Threading\\n\"\n-        + \"  mbean java.lang:type=Threading\\n\" + \"  mbean java.lang:type=Threading *Count\\n\"\n-        + \"  mbean -E java.lang:type=Threading PeakThreadCount|ThreadCount|DaemonThreadCount\\n\"\n-        + \"  mbean -i 1000 java.lang:type=Threading *Count\\n\" + Constants.WIKI + Constants.WIKI_HOME + \"profiler\")\n+@Summary(\"Async Profiler. https://github.com/jvm-profiling-tools/async-profiler\")\n+@Description(Constants.EXAMPLE + \"  profiler start\\n\"\n+        + \"  profiler stop\\n\"\n+        + \"  profiler list                # list all supported events\\n\"\n+        + \"  profiler start --event alloc\\n\"\n+        + \"  profiler stop --format svg   # output file format, support svg,html,jfr\\n\"\n+        + \"  profiler stop --file /tmp/result.html\\n\"\n+        + \"  profiler status\\n\"\n+        + \"  profiler resume\\n\"\n+        + \"  profiler start --threads \\n\"\n+        + \"  profiler getSamples          # get current samples count\\n\"\n+        + Constants.WIKI + Constants.WIKI_HOME + \"profiler\")\n+//@formatter:on\n public class ProfilerCommand extends AnnotatedCommand {\n     private static final Logger logger = LogUtil.getArthasLogger();\n \n@@ -130,7 +139,7 @@ public void setEvent(String event) {\n         this.event = event;\n     }\n \n-    @Option(longName = \"threads\")\n+    @Option(longName = \"threads\", flag = true)\n     @Description(\"profile different threads separately\")\n     public void setThreads(boolean threads) {\n         this.threads = threads;",
    "output": "update comment. #923"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java\n@@ -15,7 +15,6 @@\n import io.netty.util.concurrent.ScheduledFuture;\n import io.termd.core.function.Consumer;\n import io.termd.core.function.Supplier;\n-import io.termd.core.http.netty.TtyWebSocketFrameHandler;\n import io.termd.core.telnet.TelnetHandler;\n import io.termd.core.telnet.netty.TelnetChannelHandler;\n import io.termd.core.tty.TtyConnection;\n@@ -52,7 +51,7 @@ public void run() {\n                 ctx.fireChannelActive(); // trigger TelnetChannelHandler init\n             }\n \n-        }, 500, TimeUnit.MILLISECONDS);\n+        }, 1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Override\n@@ -83,9 +82,10 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n             pipeline.addLast(new HttpRequestHandler(\"/ws\", new File(\"arthas-output\")));\n             pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n             pipeline.addLast(new TtyWebSocketFrameHandler(channelGroup, ttyConnectionFactory));\n+            ctx.fireChannelActive();\n         }\n-        ctx.fireChannelRead(in);\n         pipeline.remove(this);\n+        ctx.fireChannelRead(in);\n     }\n \n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/TtyWebSocketFrameHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/TtyWebSocketFrameHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/TtyWebSocketFrameHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/TtyWebSocketFrameHandler.java\n@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2015 Julien Viet\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.taobao.arthas.core.shell.term.impl.httptelnet;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.group.ChannelGroup;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n+import io.termd.core.function.Consumer;\n+import io.termd.core.http.HttpTtyConnection;\n+import io.termd.core.tty.TtyConnection;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+public class TtyWebSocketFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> {\n+\n+  private final ChannelGroup group;\n+  private final Consumer<TtyConnection> handler;\n+  private ChannelHandlerContext context;\n+  private HttpTtyConnection conn;\n+\n+  public TtyWebSocketFrameHandler(ChannelGroup group, Consumer<TtyConnection> handler) {\n+    this.group = group;\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    super.channelActive(ctx);\n+    context = ctx;\n+  }\n+\n+  @Override\n+  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+    if (evt == WebSocketServerProtocolHandler.ServerHandshakeStateEvent.HANDSHAKE_COMPLETE) {\n+      ctx.pipeline().remove(HttpRequestHandler.class);\n+      group.add(ctx.channel());\n+      conn = new HttpTtyConnection() {\n+        @Override\n+        protected void write(byte[] buffer) {\n+          ByteBuf byteBuf = Unpooled.buffer();\n+          byteBuf.writeBytes(buffer);\n+          if (context != null) {\n+            context.writeAndFlush(new TextWebSocketFrame(byteBuf));\n+          }\n+        }\n+\n+        @Override\n+        public void schedule(Runnable task, long delay, TimeUnit unit) {\n+          if (context != null) {\n+            context.executor().schedule(task, delay, unit);\n+          }\n+        }\n+\n+        @Override\n+        public void execute(Runnable task) {\n+          if (context != null) {\n+            context.executor().execute(task);\n+          }\n+        }\n+\n+        @Override\n+        public void close() {\n+          if (context != null) {\n+            context.close();\n+          }\n+        }\n+      };\n+      handler.accept(conn);\n+    } else {\n+      super.userEventTriggered(ctx, evt);\n+    }\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    HttpTtyConnection tmp = conn;\n+    context = null;\n+    conn = null;\n+    if (tmp != null) {\n+      Consumer<Void> closeHandler = tmp.getCloseHandler();\n+      if (closeHandler != null) {\n+        closeHandler.accept(null);\n+      }\n+    }\n+  }\n+\n+  public void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n+    conn.writeToDecoder(msg.text());\n+  }\n+}",
    "output": "support http and telnet in one port. #316"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/HttpRequestHandler.java\n@@ -66,7 +66,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request)\n                 if (fileViewResult != null) {\n                     response = fileViewResult;\n                 } else {\n-                    URL res = HttpTtyConnection.class.getResource(\"/io/termd/core/http\" + path);\n+                    URL res = HttpTtyConnection.class.getResource(\"/com/taobao/arthas/core/http\" + path);\n                     if (res != null) {\n                         DefaultFullHttpResponse fullResp = new DefaultFullHttpResponse(request.protocolVersion(),\n                                 HttpResponseStatus.OK);\n@@ -99,7 +99,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request)\n                     }\n                 }\n \n-            } catch (Exception e) {\n+            } catch (Throwable e) {\n                 e.printStackTrace();\n             } finally {\n                 ctx.write(response);",
    "output": "move http static resources from termd jar into core module. #924"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -473,10 +473,6 @@ private static class ClassLoaderInfo implements Comparable<ClassLoaderInfo> {\n             this.classLoader = classLoader;\n         }\n \n-        public ClassLoader getClassLoader() {\n-            return classLoader;\n-        }\n-\n         public String getName() {\n             if (classLoader != null) {\n                 return classLoader.toString();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -12,14 +12,14 @@\n import com.taobao.arthas.core.util.TypeRenderUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.DefaultValue;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n import com.taobao.middleware.logger.Logger;\n import com.taobao.text.Color;\n import com.taobao.text.Decoration;\n-import com.taobao.text.ui.Element;\n import com.taobao.text.ui.LabelElement;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n@@ -53,6 +53,8 @@ public class DumpClassCommand extends AnnotatedCommand {\n \n     private String directory;\n \n+    private int limit;\n+\n     @Argument(index = 0, argName = \"class-pattern\")\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -77,6 +79,13 @@ public void setDirectory(String directory) {\n         this.directory = directory;\n     }\n \n+    @Option(shortName = \"l\", longName = \"limit\")\n+    @Description(\"The limit of dump classes size, default value is 5\")\n+    @DefaultValue(\"5\")\n+    public void setLimit(int limit) {\n+        this.limit = limit;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect effect = new RowAffect();\n@@ -94,7 +103,7 @@ public void process(CommandProcess process) {\n \n             if (matchedClasses == null || matchedClasses.isEmpty()) {\n                 processNoMatch(process);\n-            } else if (matchedClasses.size() > 5) {\n+            } else if (matchedClasses.size() > limit) {\n                 processMatches(process, matchedClasses);\n             } else {\n                 processMatch(process, effect, inst, matchedClasses);\n@@ -137,9 +146,9 @@ private void processMatch(CommandProcess process, RowAffect effect, Instrumentat\n     }\n \n     private void processMatches(CommandProcess process, Set<Class<?>> matchedClasses) {\n-        Element usage = new LabelElement(\"dump -c hashcode \" + classPattern).style(Decoration.bold.fg(Color.blue));\n-        process.write(\"Found more than 5 class for: \" + classPattern + \", Please use \");\n-        process.write(RenderUtil.render(usage, process.width()));\n+        process.write(String.format(\n+                \"Found more than %d class for: %s, Please Try to specify the classloader with the -c option, or try to use --limit option.\\n\",\n+                limit, classPattern));\n \n         TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n         table.row(new LabelElement(\"NAME\").style(Decoration.bold.bold()),",
    "output": "dump command limit option. #916"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n@@ -10,8 +10,6 @@\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n \n-import one.profiler.AsyncProfiler;\n-\n /**\n  * @see com.taobao.arthas.core.shell.command.internal.GrepHandler\n  */\n@@ -93,9 +91,9 @@ public void setShowLineNumber(boolean showLineNumber) {\n         this.showLineNumber = showLineNumber;\n     }\n \n-    @Option(longName = \"trim-end\", flag = true)\n+    @Option(longName = \"trim-end\", flag = false)\n     @DefaultValue(\"true\")\n-    @Description(\"Remove whitespaces at the end of the line\")\n+    @Description(\"Remove whitespaces at the end of the line, default value true\")\n     public void setTrimEnd(boolean trimEnd) {\n         this.trimEnd = trimEnd;\n     }\n@@ -170,11 +168,7 @@ public int getMaxCount() {\n \n     @Override\n     public void process(CommandProcess process) {\n-        process.write(\"The grep command only for pipes. See 'grep --help'\").write(\"\\n\");\n-        \n-        String libPath = \"/private/tmp/async-profiler-1.6-macos-x64/build/libasyncProfiler.so\";\n-        AsyncProfiler instance = AsyncProfiler.getInstance(libPath);\n-        process.write(instance.toString());\n+        process.write(\"The grep command only for pipes. See 'grep --help'\\n\");\n         process.end();\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/GrepHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/GrepHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/GrepHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/GrepHandler.java\n@@ -46,12 +46,16 @@ public class GrepHandler extends StdoutHandler {\n      */\n     private final Integer maxCount;\n \n+    private static CLI cli = null;\n+\n     public static StdoutHandler inject(List<CliToken> tokens) {\n         List<String> args = StdoutHandler.parseArgs(tokens, NAME);\n \n         GrepCommand grepCommand = new GrepCommand();\n-        CLI cli = CLIConfigurator.define(GrepCommand.class);\n-        CommandLine commandLine = cli.parse(args);\n+        if (cli == null) {\n+            cli = CLIConfigurator.define(GrepCommand.class);\n+        }\n+        CommandLine commandLine = cli.parse(args, true);\n \n         try {\n             CLIConfigurator.inject(commandLine, grepCommand);\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/command/basic1000/GrepCommandTest.java b/core/src/test/java/com/taobao/arthas/core/command/basic1000/GrepCommandTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/command/basic1000/GrepCommandTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/command/basic1000/GrepCommandTest.java\n@@ -0,0 +1,69 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.taobao.middleware.cli.CLI;\n+import com.taobao.middleware.cli.CommandLine;\n+import com.taobao.middleware.cli.annotations.CLIConfigurator;\n+\n+/**\n+ * \n+ * @author hengyunabc 2019-10-31\n+ *\n+ */\n+public class GrepCommandTest {\n+\n+    private static CLI cli = null;\n+\n+    @Before\n+    public void before() {\n+        cli = CLIConfigurator.define(GrepCommand.class);\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<String> args = Arrays.asList(\"-v\", \"ppp\");\n+        GrepCommand grepCommand = new GrepCommand();\n+        CommandLine commandLine = cli.parse(args, true);\n+\n+        try {\n+            CLIConfigurator.inject(commandLine, grepCommand);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+        Assert.assertTrue(grepCommand.isInvertMatch());\n+    }\n+\n+    @Test\n+    public void test2() {\n+        List<String> args = Arrays.asList(\"--before-context=6\", \"ppp\");\n+        GrepCommand grepCommand = new GrepCommand();\n+        CommandLine commandLine = cli.parse(args, true);\n+\n+        try {\n+            CLIConfigurator.inject(commandLine, grepCommand);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+        Assert.assertEquals(6, grepCommand.getBeforeLines());\n+    }\n+\n+    @Test\n+    public void test3() {\n+        List<String> args = Arrays.asList(\"--trim-end=false\", \"ppp\");\n+        GrepCommand grepCommand = new GrepCommand();\n+        CommandLine commandLine = cli.parse(args, true);\n+\n+        try {\n+            CLIConfigurator.inject(commandLine, grepCommand);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+        Assert.assertFalse(grepCommand.isTrimEnd());\n+    }\n+}",
    "output": "fix grep command --trim-end support"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Constants.java b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n@@ -9,49 +9,52 @@\n /**\n  * @author ralf0131 2016-12-28 16:20.\n  */\n-public interface Constants {\n+public class Constants {\n+\n+    private Constants() {\n+    }\n \n     /**\n      * Spy的全类名\n      */\n-    String SPY_CLASSNAME = \"java.arthas.Spy\";\n+    public static final String SPY_CLASSNAME = \"java.arthas.Spy\";\n \n     /**\n      * 中断提示\n      */\n-    String Q_OR_CTRL_C_ABORT_MSG = \"Press Q or Ctrl+C to abort.\";\n+    public static final String Q_OR_CTRL_C_ABORT_MSG = \"Press Q or Ctrl+C to abort.\";\n \n     /**\n      * 空字符串\n      */\n-    String EMPTY_STRING = \"\";\n+    public static final String EMPTY_STRING = \"\";\n \n     /**\n      * 命令提示符\n      */\n-    String DEFAULT_PROMPT = \"$ \";\n+    public static final String DEFAULT_PROMPT = \"$ \";\n \n     /**\n      * 带颜色命令提示符\n      * raw string: \"[33m$ \u001b[m\"\n      */\n-    String COLOR_PROMPT = Ansi.ansi().fg(Ansi.Color.YELLOW).a(DEFAULT_PROMPT).reset().toString();\n+    public static final String COLOR_PROMPT = Ansi.ansi().fg(Ansi.Color.YELLOW).a(DEFAULT_PROMPT).reset().toString();\n \n     /**\n      * 方法执行耗时\n      */\n-    String COST_VARIABLE = \"cost\";\n+    public static final String COST_VARIABLE = \"cost\";\n \n-    String CMD_HISTORY_FILE = System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"history\";\n+    public static final String CMD_HISTORY_FILE = System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"history\";\n \n     /**\n      * 当前进程PID\n      */\n-    String PID = ApplicationUtils.getPid();\n+    public static final String PID = ApplicationUtils.getPid();\n \n     /**\n      * 缓存目录\n      */\n-    String CACHE_ROOT = LOGS_DIR + File.separator + \"arthas-cache\";\n+    public static final String CACHE_ROOT = LOGS_DIR + File.separator + \"arthas-cache\";\n \n }",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -347,7 +347,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (telnetPortPid > 0 && pid != telnetPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getTelnetPort());\n-            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'shutdown' command.\",\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'stop' command.\",\n                             telnetPortPid);\n             AnsiLog.error(\"2. Or try to use different telnet port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port -1\");\n             System.exit(1);\n@@ -356,7 +356,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (httpPortPid > 0 && pid != httpPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getHttpPort());\n-            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'shutdown' command.\",\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'stop' command.\",\n                             httpPortPid);\n             AnsiLog.error(\"2. Or try to use different http port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port 9999\", httpPortPid);\n             System.exit(1);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n@@ -10,6 +10,8 @@\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n \n+import one.profiler.AsyncProfiler;\n+\n /**\n  * @see com.taobao.arthas.core.shell.command.internal.GrepHandler\n  */\n@@ -169,6 +171,10 @@ public int getMaxCount() {\n     @Override\n     public void process(CommandProcess process) {\n         process.write(\"The grep command only for pipes. See 'grep --help'\").write(\"\\n\");\n+        \n+        String libPath = \"/private/tmp/async-profiler-1.6-macos-x64/build/libasyncProfiler.so\";\n+        AsyncProfiler instance = AsyncProfiler.getInstance(libPath);\n+        process.write(instance.toString());\n         process.end();\n     }\n }",
    "output": "update docs about stop/shutdown. #838"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Constants.java b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n@@ -9,49 +9,52 @@\n /**\n  * @author ralf0131 2016-12-28 16:20.\n  */\n-public interface Constants {\n+public class Constants {\n+\n+    private Constants() {\n+    }\n \n     /**\n      * Spy的全类名\n      */\n-    String SPY_CLASSNAME = \"java.arthas.Spy\";\n+    public static final String SPY_CLASSNAME = \"java.arthas.Spy\";\n \n     /**\n      * 中断提示\n      */\n-    String Q_OR_CTRL_C_ABORT_MSG = \"Press Q or Ctrl+C to abort.\";\n+    public static final String Q_OR_CTRL_C_ABORT_MSG = \"Press Q or Ctrl+C to abort.\";\n \n     /**\n      * 空字符串\n      */\n-    String EMPTY_STRING = \"\";\n+    public static final String EMPTY_STRING = \"\";\n \n     /**\n      * 命令提示符\n      */\n-    String DEFAULT_PROMPT = \"$ \";\n+    public static final String DEFAULT_PROMPT = \"$ \";\n \n     /**\n      * 带颜色命令提示符\n      * raw string: \"[33m$ \u001b[m\"\n      */\n-    String COLOR_PROMPT = Ansi.ansi().fg(Ansi.Color.YELLOW).a(DEFAULT_PROMPT).reset().toString();\n+    public static final String COLOR_PROMPT = Ansi.ansi().fg(Ansi.Color.YELLOW).a(DEFAULT_PROMPT).reset().toString();\n \n     /**\n      * 方法执行耗时\n      */\n-    String COST_VARIABLE = \"cost\";\n+    public static final String COST_VARIABLE = \"cost\";\n \n-    String CMD_HISTORY_FILE = System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"history\";\n+    public static final String CMD_HISTORY_FILE = System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"history\";\n \n     /**\n      * 当前进程PID\n      */\n-    String PID = ApplicationUtils.getPid();\n+    public static final String PID = ApplicationUtils.getPid();\n \n     /**\n      * 缓存目录\n      */\n-    String CACHE_ROOT = LOGS_DIR + File.separator + \"arthas-cache\";\n+    public static final String CACHE_ROOT = LOGS_DIR + File.separator + \"arthas-cache\";\n \n }",
    "output": "update Constants.java"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/GrepCommand.java\n@@ -14,7 +14,7 @@\n  * @see com.taobao.arthas.core.shell.command.internal.GrepHandler\n  */\n @Name(\"grep\")\n-@Summary(\"grep command for pipes.\\n\" )\n+@Summary(\"grep command for pipes.\" )\n @Description(Constants.EXAMPLE +\n         \" sysprop | grep java \\n\" +\n         \" sysprop | grep java -n\\n\" +",
    "output": "add grep command doc. #899"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -66,6 +66,9 @@ public abstract class AnsiLog {\n         }\n     }\n \n+    private AnsiLog() {\n+    }\n+\n     public static boolean enableColor() {\n         return enableColor;\n     }\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/IOUtils.java b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n@@ -22,6 +22,9 @@\n  */\n public class IOUtils {\n \n+    private IOUtils() {\n+    }\n+\n     public static String toString(InputStream inputStream) throws IOException {\n         ByteArrayOutputStream result = new ByteArrayOutputStream();\n         byte[] buffer = new byte[1024];\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -12,6 +12,9 @@ public class JavaVersionUtils {\n     private static final String JAVA_VERSION_STR = System.getProperty(VERSION_PROP_NAME);\n     private static final float JAVA_VERSION = Float.parseFloat(JAVA_VERSION_STR);\n \n+    private JavaVersionUtils() {\n+    }\n+\n     public static String javaVersionStr() {\n         return JAVA_VERSION_STR;\n     }\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -23,6 +23,9 @@ public class OSUtils {\n         }\n     }\n \n+    private OSUtils() {\n+    }\n+\n     public static boolean isWindows() {\n         return platform == PlatformEnum.WINDOWS;\n     }\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/PidUtils.java b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n@@ -24,6 +24,9 @@ public class PidUtils {\n         }\n     }\n \n+    private PidUtils() {\n+    }\n+\n     public static String currentPid() {\n         return PID;\n     }\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n@@ -14,6 +14,9 @@\n  */\n public class SocketUtils {\n \n+    private SocketUtils() {\n+    }\n+\n     public static int findTcpListenProcess(int port) {\n         try {\n             if (OSUtils.isWindows()) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/UsageRender.java b/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n--- a/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n+++ b/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n@@ -7,6 +7,9 @@\n  */\n public class UsageRender {\n \n+    private UsageRender() {\n+    }\n+\n     public static String render(String usage) {\n         if (AnsiLog.enableColor()) {\n             StringBuilder sb = new StringBuilder(1024);",
    "output": "Add private ctor to util class (#902)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -22,11 +22,11 @@\n import java.lang.management.ThreadInfo;\n import java.lang.management.ThreadMXBean;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * @author hengyunabc 2015年12月7日 下午2:06:21\n@@ -40,18 +40,24 @@\n         \"  thread -n 5\\n\" +\n         \"  thread -b\\n\" +\n         \"  thread -i 2000\\n\" +\n-        \"  thread -f RUNNABLE\\n\" +\n+        \"  thread --state BLOCKED\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"thread\")\n public class ThreadCommand extends AnnotatedCommand {\n-\n+    private static Set<String> states = null;\n     private static ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n \n     private long id = -1;\n     private Integer topNBusy = null;\n     private boolean findMostBlockingThread = false;\n     private int sampleInterval = 100;\n-    private String stateOfThread;\n-    private List<String> states = Arrays.asList(new String[]{\"NEW\", \"RUNNABLE\", \"TIMED_WAITING\", \"WAITING\", \"BLOCKED\", \"TERMINATED\"});\n+    private String state;\n+\n+    {\n+        states = new HashSet<String>(8);\n+        for (State state : State.values()) {\n+            states.add(state.name());\n+        }\n+    }\n \n     @Argument(index = 0, required = false, argName = \"id\")\n     @Description(\"Show thread stack\")\n@@ -77,32 +83,34 @@ public void setSampleInterval(int sampleInterval) {\n         this.sampleInterval = sampleInterval;\n     }\n \n-    @Option(shortName = \"f\", longName = \"filter-by-state\")\n-    @Description(\"Display the thead filter by the state. NEW、RUNNABLE、TIMED_WAITING、WAITING、BLOCKED、TERMINATED is optional.\")\n-    public void setStateOfThread(String stateOfThread) {\n-        this.stateOfThread = stateOfThread;\n+    @Option(longName = \"state\")\n+    @Description(\"Display the thead filter by the state. NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED is optional.\")\n+    public void setState(String state) {\n+        this.state = state;\n     }\n \n     @Override\n     public void process(CommandProcess process) {\n         Affect affect = new RowAffect();\n+        int status = 0;\n         try {\n             if (id > 0) {\n-                processThread(process);\n+                status = processThread(process);\n             } else if (topNBusy != null) {\n-                processTopBusyThreads(process);\n+                status = processTopBusyThreads(process);\n             } else if (findMostBlockingThread) {\n-                processBlockingThread(process);\n+                status = processBlockingThread(process);\n             } else {\n-                processAllThreads(process);\n+                status = processAllThreads(process);\n             }\n         } finally {\n             process.write(affect + \"\\n\");\n-            process.end();\n+            process.end(status);\n         }\n     }\n \n-    private void processAllThreads(CommandProcess process) {\n+    private int processAllThreads(CommandProcess process) {\n+        int status = 0;\n         Map<String, Thread> threads = ThreadUtil.getThreads();\n \n         // 统计各种线程状态\n@@ -127,60 +135,72 @@ private void processAllThreads(CommandProcess process) {\n \n         String stat = RenderUtil.render(new LabelElement(threadStat), process.width());\n \n-        Collection<Thread> collection = new ArrayList<Thread>();\n-        if (!StringUtils.isEmpty(stateOfThread)){\n-            if(states.contains(stateOfThread.toUpperCase())) {\n+        Collection<Thread> resultThreads = new ArrayList<Thread>();\n+        if (!StringUtils.isEmpty(this.state)){\n+            this.state = this.state.toUpperCase();\n+            if(states.contains(this.state)) {\n                 for (Thread thread : threads.values()) {\n-                    if (stateOfThread.equals(thread.getState().name())) {\n-                        collection.add(thread);\n+                    if (state.equals(thread.getState().name())) {\n+                        resultThreads.add(thread);\n                     }\n                 }\n             }else{\n-                process.write(\"Error occur,wrong state NEW、RUNNABLE、TIMED_WAITING、WAITING、BLOCKED、TERMINATED is optional.\\n\");\n-                return;\n+                process.write(\"Illegal argument, state should be one of \" + states + \"\\n\");\n+                status = 1;\n+                return status;\n             }\n         } else {\n-            collection = threads.values();\n+            resultThreads = threads.values();\n         }\n-        String content = RenderUtil.render(collection.iterator(),\n+        String content = RenderUtil.render(resultThreads.iterator(),\n                 new ThreadRenderer(sampleInterval), process.width());\n         process.write(stat + content);\n+        return status;\n     }\n \n-    private void processBlockingThread(CommandProcess process) {\n+    private int processBlockingThread(CommandProcess process) {\n+        int status = 0;\n         ThreadUtil.BlockingLockInfo blockingLockInfo = ThreadUtil.findMostBlockingLock();\n \n         if (blockingLockInfo.threadInfo == null) {\n             process.write(\"No most blocking thread found!\\n\");\n+            status = 1;\n         } else {\n             String stacktrace = ThreadUtil.getFullStacktrace(blockingLockInfo);\n             process.write(stacktrace);\n         }\n+        return status;\n     }\n \n-    private void processTopBusyThreads(CommandProcess process) {\n+    private int processTopBusyThreads(CommandProcess process) {\n+        int status = 0;\n         Map<Long, Long> topNThreads = ThreadUtil.getTopNThreads(sampleInterval, topNBusy);\n         Long[] tids = topNThreads.keySet().toArray(new Long[0]);\n         ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ArrayUtils.toPrimitive(tids), true, true);\n         if (threadInfos == null) {\n             process.write(\"thread do not exist! id: \" + id + \"\\n\");\n+            status = 1;\n         } else {\n             for (ThreadInfo info : threadInfos) {\n                 String stacktrace = ThreadUtil.getFullStacktrace(info, topNThreads.get(info.getThreadId()));\n                 process.write(stacktrace + \"\\n\");\n             }\n         }\n+        return status;\n     }\n \n-    private void processThread(CommandProcess process) {\n+    private int processThread(CommandProcess process) {\n+        int status = 0;\n         String content;\n         ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(new long[]{id}, true, true);\n         if (threadInfos == null || threadInfos[0] == null) {\n             content = \"thread do not exist! id: \" + id + \"\\n\";\n+            status = 1;\n         } else {\n             // no cpu usage info\n             content = ThreadUtil.getFullStacktrace(threadInfos[0], -1);\n         }\n         process.write(content);\n+        return status;\n     }\n }\n\\ No newline at end of file",
    "output": "polish #890, update thread command doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -1,9 +1,10 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.util.ArrayUtils;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.ArrayUtils;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadUtil;\n import com.taobao.arthas.core.util.affect.Affect;\n import com.taobao.arthas.core.util.affect.RowAffect;\n@@ -20,7 +21,11 @@\n import java.lang.management.ManagementFactory;\n import java.lang.management.ThreadInfo;\n import java.lang.management.ThreadMXBean;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -35,6 +40,7 @@\n         \"  thread -n 5\\n\" +\n         \"  thread -b\\n\" +\n         \"  thread -i 2000\\n\" +\n+        \"  thread -f RUNNABLE\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"thread\")\n public class ThreadCommand extends AnnotatedCommand {\n \n@@ -44,6 +50,8 @@ public class ThreadCommand extends AnnotatedCommand {\n     private Integer topNBusy = null;\n     private boolean findMostBlockingThread = false;\n     private int sampleInterval = 100;\n+    private String stateOfThread;\n+    private List<String> states = Arrays.asList(new String[]{\"NEW\", \"RUNNABLE\", \"TIMED_WAITING\", \"WAITING\", \"BLOCKED\", \"TERMINATED\"});\n \n     @Argument(index = 0, required = false, argName = \"id\")\n     @Description(\"Show thread stack\")\n@@ -69,6 +77,12 @@ public void setSampleInterval(int sampleInterval) {\n         this.sampleInterval = sampleInterval;\n     }\n \n+    @Option(shortName = \"f\", longName = \"filter-by-state\")\n+    @Description(\"Display the thead filter by the state. NEW、RUNNABLE、TIMED_WAITING、WAITING、BLOCKED、TERMINATED is optional.\")\n+    public void setStateOfThread(String stateOfThread) {\n+        this.stateOfThread = stateOfThread;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         Affect affect = new RowAffect();\n@@ -105,13 +119,30 @@ private void processAllThreads(CommandProcess process) {\n         }\n \n         threadStat.append(\"Threads Total: \").append(threads.values().size());\n+\n         for (State s : State.values()) {\n             Integer count = stateCountMap.get(s);\n             threadStat.append(\", \").append(s.name()).append(\": \").append(count);\n         }\n \n         String stat = RenderUtil.render(new LabelElement(threadStat), process.width());\n-        String content = RenderUtil.render(threads.values().iterator(),\n+\n+        Collection<Thread> collection = new ArrayList<Thread>();\n+        if (!StringUtils.isEmpty(stateOfThread)){\n+            if(states.contains(stateOfThread.toUpperCase())) {\n+                for (Thread thread : threads.values()) {\n+                    if (stateOfThread.equals(thread.getState().name())) {\n+                        collection.add(thread);\n+                    }\n+                }\n+            }else{\n+                process.write(\"Error occur,wrong state NEW、RUNNABLE、TIMED_WAITING、WAITING、BLOCKED、TERMINATED is optional.\\n\");\n+                return;\n+            }\n+        } else {\n+            collection = threads.values();\n+        }\n+        String content = RenderUtil.render(collection.iterator(),\n                 new ThreadRenderer(sampleInterval), process.width());\n         process.write(stat + content);\n     }\n@@ -152,4 +183,4 @@ private void processThread(CommandProcess process) {\n         }\n         process.write(content);\n     }\n-}\n+}\n\\ No newline at end of file",
    "output": "thread command support filter by state. #890"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -539,6 +539,9 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         AnsiLog.info(\"arthas-client connect {} {}\", bootstrap.getTargetIp(), bootstrap.getTelnetPort());\n         AnsiLog.debug(\"Start arthas-client.jar args: \" + telnetArgs);\n+\n+        // fix https://github.com/alibaba/arthas/issues/833\n+        Thread.currentThread().setContextClassLoader(classLoader);\n         mainMethod.invoke(null, new Object[] { telnetArgs.toArray(new String[0]) });\n     }\n ",
    "output": "fix git bash support. close #833"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -47,7 +47,7 @@\n                 + \"  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.3\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.4\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n@@ -49,7 +49,7 @@ public static String classLoaderHash(ClassLoader classLoader) {\n         if (hashCode <= 0) {\n             hashCode = System.identityHashCode(classLoader);\n             if (hashCode < 0) {\n-                hashCode = -hashCode;\n+                hashCode = hashCode & Integer.MAX_VALUE;\n             }\n         }\n         return Integer.toHexString(hashCode);",
    "output": "improve classloader hash string."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -89,7 +89,7 @@ public void bind(Configure configure) throws Throwable {\n \n         String agentId = null;\n         try {\n-            if (configure.getHttpPort() > 0) {\n+            if (configure.getTunnelServer() != null && configure.getHttpPort() > 0) {\n                 tunnelClient = new TunnelClient();\n                 tunnelClient.setId(configure.getAgentId());\n                 tunnelClient.setTunnelServerUrl(configure.getTunnelServer());",
    "output": "fix arthas connect to tunnel server error info. close #871"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n@@ -85,7 +85,7 @@ public void process(CommandProcess process) {\n                 process.write(result + \"\\n\");\n             } catch (ExpressException e) {\n                 logger.warn(\"ognl: failed execute express: \" + express, e);\n-                process.write(\"Failed to get static, exception message: \" + e.getMessage()\n+                process.write(\"Failed to execute ognl, exception message: \" + e.getMessage()\n                                 + \", please check $HOME/logs/arthas/arthas.log for more details. \\n\");\n                 exitCode = -1;\n             }",
    "output": "fix ognl error info"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/Log4jHelper.java b/core/src/main/java/com/taobao/arthas/core/command/logger/Log4jHelper.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/Log4jHelper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/Log4jHelper.java\n@@ -146,6 +146,7 @@ private static List<Map<String, Object>> doGetLoggerAppenders(Enumeration<Append\n                     appenderRef.add((String) a.get(LoggerHelper.name));\n                     result.add(a);\n                 }\n+                info.put(LoggerHelper.blocking, ((AsyncAppender) appender).getBlocking());\n                 info.put(LoggerHelper.appenderRef, appenderRef);\n             }\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LogbackHelper.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LogbackHelper.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LogbackHelper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LogbackHelper.java\n@@ -153,6 +153,7 @@ private static List<Map<String, Object>> doGetLoggerAppenders(Iterator<Appender<\n                     result.add(a);\n                 }\n                 info.put(LoggerHelper.appenderRef, appenderRef);\n+                info.put(LoggerHelper.blocking, !aa.isNeverBlock());\n             } else if (appender instanceof ConsoleAppender) {\n                 info.put(LoggerHelper.target, ((ConsoleAppender) appender).getTarget());\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -251,6 +251,9 @@ private String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, in\n                         appendersTable.row(label(LoggerHelper.target),\n                                         label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                     }\n+                    if (appenderInfo.get(LoggerHelper.blocking) != null) {\n+                        appendersTable.row(label(LoggerHelper.blocking), label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n+                    }\n                     if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                         appendersTable.row(label(LoggerHelper.appenderRef),\n                                         label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerHelper.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerHelper.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerHelper.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerHelper.java\n@@ -21,6 +21,7 @@ public interface LoggerHelper {\n     // appender info\n     public static final String name = \"name\";\n     public static final String file = \"file\";\n+    public static final String blocking = \"blocking\";\n     // type List<String>\n     public static final String appenderRef = \"appenderRef\";\n     public static final String target = \"target\";",
    "output": "logger command print AsyncAppender blocking info #862"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java\n@@ -43,7 +43,7 @@\n  */\n @Name(\"logger\")\n @Summary(\"Print logger info, and update the logger level\")\n-@Description(\"\\nExamples:\\n\" + \"  logger\\n\" + \"  logger -c 327a647b\\n\" + \"  logger --name ROOT --level debug\\n\"\n+@Description(\"\\nExamples:\\n\" + \"  logger\\n\" + \"  logger -c 327a647b\\n\" + \"  logger -c 327a647b --name ROOT --level debug\\n\"\n                 + Constants.WIKI + Constants.WIKI_HOME + \"logger\")\n public class LoggerCommand extends AnnotatedCommand {\n     private static final Logger logger = LogUtil.getArthasLogger();\n@@ -87,7 +87,7 @@ public void setName(String name) {\n     }\n \n     @Option(shortName = \"c\", longName = \"classloader\")\n-    @Description(\"classLoader hashcode\")\n+    @Description(\"classLoader hashcode, if no value is set, default value is SystemClassLoader\")\n     public void setHashCode(String hashCode) {\n         this.hashCode = hashCode;\n     }",
    "output": "update logger command help info"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -44,7 +44,7 @@\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.2\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.3\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -155,7 +155,7 @@ public void operationComplete(Future<? super Void> future) throws Exception {\n             }\n         } else {\n             tunnelSocketCtx.channel().writeAndFlush(new CloseWebSocketFrame(2000, \"Can not find arthas agent by id: \"+ agentId));\n-            logger.error(\"Can not find arthas agent by id: \", agentId);\n+            logger.error(\"Can not find arthas agent by id: {}\", agentId);\n             throw new IllegalArgumentException(\"Can not find arthas agent by id: \" + agentId);\n         }\n     }",
    "output": "fix log"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java\n@@ -10,6 +10,7 @@\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n \n+import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -153,8 +154,9 @@ public void operationComplete(Future<? super Void> future) throws Exception {\n                 tunnelSocketCtx.close();\n             }\n         } else {\n+            tunnelSocketCtx.channel().writeAndFlush(new CloseWebSocketFrame(2000, \"Can not find arthas agent by id: \"+ agentId));\n             logger.error(\"Can not find arthas agent by id: \", agentId);\n-            throw new IllegalArgumentException(\"arthas agent id can not be null\");\n+            throw new IllegalArgumentException(\"Can not find arthas agent by id: \" + agentId);\n         }\n     }\n ",
    "output": "alert error message when webconsole connect error (#855)"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java b/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n--- a/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n@@ -18,5 +18,5 @@ public enum PlatformEnum {\n      */\n     MACOSX,\n \n-    UNKNOWN;\n+    UNKNOWN\n }\n\\ No newline at end of file\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java\n@@ -50,7 +50,7 @@ public boolean removeJob(int id) {\n             jobTimeoutTask.cancel();\n         }\n         return super.removeJob(id);\n-    };\n+    }\n \n     @Override\n     public Job createJob(InternalCommandManager commandManager, List<CliToken> tokens, ShellImpl shell) {\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n--- a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n+++ b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n@@ -16,7 +16,6 @@\n  */\n package com.taobao.arthas.core.testtool;\n \n-import com.taobao.arthas.core.shell.cli.CliToken;\n import org.junit.Assert;\n \n import java.io.File;\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n@@ -8,12 +8,9 @@\n import org.junit.rules.TemporaryFolder;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.nio.charset.Charset;\n-import java.util.Arrays;\n import java.util.List;\n \n import static org.hamcrest.CoreMatchers.allOf;\n\ndiff --git a/testcase/src/main/java/com/alibaba/arthas/Type.java b/testcase/src/main/java/com/alibaba/arthas/Type.java\n--- a/testcase/src/main/java/com/alibaba/arthas/Type.java\n+++ b/testcase/src/main/java/com/alibaba/arthas/Type.java\n@@ -1,5 +1,5 @@\n package com.alibaba.arthas;\n \n public enum Type {\n-    RUN, STOP;\n+    RUN, STOP\n }",
    "output": "clean code. #814"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.util;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n@@ -57,7 +58,9 @@ public void write(T sinkable) {\n         }\n \n         CfrDriver driver = new CfrDriver.Builder().withOptions(options).withOutputSink(mySink).build();\n-        driver.analyse(Collections.singletonList(classFilePath));\n+        List<String> toAnalyse = new ArrayList<String>();\n+        toAnalyse.add(classFilePath);\n+        driver.analyse(toAnalyse);\n \n         return result.toString();\n     }",
    "output": "fix jad problem under jdk6/7. close #851"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -44,7 +44,7 @@\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.1\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.2\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n@@ -8,6 +8,7 @@\n import com.taobao.arthas.core.command.express.ExpressFactory;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.ClassLoaderUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.view.ObjectView;\n@@ -68,7 +69,7 @@ public void process(CommandProcess process) {\n             if (hashCode == null) {\n                 classLoader = ClassLoader.getSystemClassLoader();\n             } else {\n-                classLoader = findClassLoader(inst, hashCode);\n+                classLoader = ClassLoaderUtils.getClassLoader(inst, hashCode);\n             }\n \n             if (classLoader == null) {\n@@ -93,14 +94,4 @@ public void process(CommandProcess process) {\n         }\n     }\n \n-    private static ClassLoader findClassLoader(Instrumentation inst, String hashCode) {\n-        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n-            ClassLoader classLoader = clazz.getClassLoader();\n-            if (classLoader != null && hashCode.equals(Integer.toHexString(classLoader.hashCode()))) {\n-                return classLoader;\n-            }\n-        }\n-        return null;\n-    }\n-\n }",
    "output": "clean code"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n@@ -41,7 +41,7 @@ public void setFile(String file) {\n     }\n \n     @Option(shortName = \"l\", longName = \"live\", flag = true)\n-    @Description(\"Only dump live objects, default value true\")\n+    @Description(\"Dump only live objects; if not specified, all objects in the heap are dumped.\")\n     public void setLive(boolean live) {\n         this.live = live;\n     }",
    "output": "add heapdump command doc. close #837"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -12,6 +12,7 @@\n import com.taobao.arthas.core.command.basic1000.StopCommand;\n import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n+import com.taobao.arthas.core.command.basic1000.VMOptionCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n import com.taobao.arthas.core.command.hidden.JulyCommand;\n import com.taobao.arthas.core.command.hidden.OptionsCommand;\n@@ -91,6 +92,7 @@ private static void initCommands() {\n         commands.add(Command.create(SessionCommand.class));\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n+        commands.add(Command.create(VMOptionCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n         commands.add(Command.create(CatCommand.class));\n         commands.add(Command.create(PwdCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java\n@@ -0,0 +1,116 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import static com.taobao.text.ui.Element.label;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.sun.management.HotSpotDiagnosticMXBean;\n+import com.sun.management.VMOption;\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+import com.taobao.text.Decoration;\n+import com.taobao.text.ui.TableElement;\n+import com.taobao.text.util.RenderUtil;\n+\n+/**\n+ * vmoption command\n+ * \n+ * @author hengyunabc 2019-09-02\n+ *\n+ */\n+@Name(\"vmoption\")\n+@Summary(\"Display, and update the vm diagnostic options.\")\n+@Description(\"\\nExamples:\\n\" + \"  vmoption\\n\" + \"  vmoption PrintGCDetails\\n\" + \"  vmoption PrintGCDetails true\\n\"\n+                + Constants.WIKI + Constants.WIKI_HOME + \"vmoption\")\n+public class VMOptionCommand extends AnnotatedCommand {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n+\n+    private String name;\n+    private String value;\n+\n+    @Argument(index = 0, argName = \"name\", required = false)\n+    @Description(\"VMOption name\")\n+    public void setOptionName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Argument(index = 1, argName = \"value\", required = false)\n+    @Description(\"VMOption value\")\n+    public void setOptionValue(String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        run(process, name, value);\n+    }\n+\n+    private static void run(CommandProcess process, String name, String value) {\n+        try {\n+            HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean = ManagementFactory\n+                            .getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n+\n+            if (StringUtils.isBlank(name) && StringUtils.isBlank(value)) {\n+                // show all options\n+                process.write(renderVMOptions(hotSpotDiagnosticMXBean.getDiagnosticOptions(), process.width()));\n+            } else if (StringUtils.isBlank(value)) {\n+                // view the specified option\n+                VMOption option = hotSpotDiagnosticMXBean.getVMOption(name);\n+                if (option == null) {\n+                    process.write(\"In order to change the system properties, you must specify the property value.\\n\");\n+                } else {\n+                    process.write(renderVMOptions(Arrays.asList(option), process.width()));\n+                }\n+            } else {\n+                // change vm option\n+                hotSpotDiagnosticMXBean.setVMOption(name, value);\n+                process.write(\"Successfully updated the vm option.\\n\");\n+                process.write(name + \"=\" + hotSpotDiagnosticMXBean.getVMOption(name).getValue() + \"\\n\");\n+            }\n+        } catch (Throwable t) {\n+            process.write(\"Error during setting vm option: \" + t.getMessage() + \"\\n\");\n+            logger.error(\"arthas\", \"Error during setting vm option\", t);\n+        } finally {\n+            process.end();\n+        }\n+\n+    }\n+\n+    private static String renderVMOptions(List<VMOption> diagnosticOptions, int width) {\n+        TableElement table = new TableElement(1, 1, 1, 1).leftCellPadding(1).rightCellPadding(1);\n+        table.row(true, label(\"KEY\").style(Decoration.bold.bold()), label(\"VALUE\").style(Decoration.bold.bold()),\n+                        label(\"ORIGIN\").style(Decoration.bold.bold()),\n+                        label(\"WRITEABLE\").style(Decoration.bold.bold()));\n+\n+        for (VMOption option : diagnosticOptions) {\n+            table.row(option.getName(), option.getValue(), \"\" + option.getOrigin(), \"\" + option.isWriteable());\n+        }\n+\n+        return RenderUtil.render(table, width);\n+    }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean = ManagementFactory\n+                        .getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n+        List<VMOption> diagnosticOptions = hotSpotDiagnosticMXBean.getDiagnosticOptions();\n+        List<String> names = new ArrayList<String>(diagnosticOptions.size());\n+        for (VMOption option : diagnosticOptions) {\n+            names.add(option.getName());\n+        }\n+        CompletionUtils.complete(completion, names);\n+    }\n+}",
    "output": "add vmoption command. close #839"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n@@ -44,6 +44,7 @@ public void setOptionValue(String propertyValue) {\n \n     @Override\n     public void process(CommandProcess process) {\n+        int status = 0;\n         try {\n             if (StringUtils.isBlank(propertyName) && StringUtils.isBlank(propertyValue)) {\n                 // show all system properties\n@@ -52,7 +53,7 @@ public void process(CommandProcess process) {\n                 // view the specified system property\n                 String value = System.getProperty(propertyName);\n                 if (value == null) {\n-                    process.write(\"In order to change the system properties, you must specify the property value.\\n\");\n+                    process.write(\"There is no property with the key \" + propertyName + \".\\n\");\n                 } else {\n                     process.write(propertyName + \"=\" + value + \"\\n\");\n                 }\n@@ -64,8 +65,9 @@ public void process(CommandProcess process) {\n             }\n         } catch (Throwable t) {\n             process.write(\"Error during setting system property: \" + t.getMessage() + \"\\n\");\n+            status = 1;\n         } finally {\n-            process.end();\n+            process.end(status);\n         }\n     }\n ",
    "output": "update SystemPropertyCommand message."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -26,6 +26,7 @@\n import com.taobao.arthas.core.command.klass100.SearchClassCommand;\n import com.taobao.arthas.core.command.klass100.SearchMethodCommand;\n import com.taobao.arthas.core.command.monitor200.DashboardCommand;\n+import com.taobao.arthas.core.command.monitor200.HeapDumpCommand;\n import com.taobao.arthas.core.command.monitor200.JvmCommand;\n import com.taobao.arthas.core.command.monitor200.MBeanCommand;\n import com.taobao.arthas.core.command.monitor200.MonitorCommand;\n@@ -78,6 +79,7 @@ private static void initCommands() {\n         commands.add(Command.create(RedefineCommand.class));\n         commands.add(Command.create(DashboardCommand.class));\n         commands.add(Command.create(DumpClassCommand.class));\n+        commands.add(Command.create(HeapDumpCommand.class));\n         commands.add(Command.create(JulyCommand.class));\n         commands.add(Command.create(ThanksCommand.class));\n         commands.add(Command.create(OptionsCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/HeapDumpCommand.java\n@@ -0,0 +1,83 @@\n+package com.taobao.arthas.core.command.monitor200;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import com.sun.management.HotSpotDiagnosticMXBean;\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+\n+/**\n+ * HeapDump command\n+ * \n+ * @author hengyunabc 2019-09-02\n+ *\n+ */\n+@Name(\"heapdump\")\n+@Summary(\"Heap dump\")\n+@Description(\"\\nExamples:\\n\" + \"  heapdump\\n\" + \"  heapdump --live\\n\" + \"  heapdump --live /tmp/dump.hprof\\n\"\n+                + Constants.WIKI + Constants.WIKI_HOME + \"heapdump\")\n+public class HeapDumpCommand extends AnnotatedCommand {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n+    private String file;\n+\n+    private boolean live;\n+\n+    @Argument(argName = \"file\", index = 0, required = false)\n+    @Description(\"Output file\")\n+    public void setFile(String file) {\n+        this.file = file;\n+    }\n+\n+    @Option(shortName = \"l\", longName = \"live\", flag = true)\n+    @Description(\"Only dump live objects, default value true\")\n+    public void setLive(boolean live) {\n+        this.live = live;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        int status = 0;\n+        try {\n+            String dumpFile = file;\n+            if (dumpFile == null || dumpFile.isEmpty()) {\n+                String date = new SimpleDateFormat(\"yyyy-MM-dd-HH-mm\").format(new Date());\n+                File file = File.createTempFile(\"heapdump\" + date + (live ? \"-live\" : \"\"), \".hprof\");\n+                dumpFile = file.getAbsolutePath();\n+                file.delete();\n+            }\n+\n+            process.write(\"Dumping heap to \" + dumpFile + \"...\\n\");\n+\n+            run(process, dumpFile, live);\n+\n+            process.write(\"Heap dump file created\\n\");\n+\n+        } catch (Throwable t) {\n+            logger.error(\"arthas\", \"heap dump error\", t);\n+            process.write(\"Heap dump error: \" + t.getMessage() + '\\n');\n+            status = 1;\n+        } finally {\n+            process.end(status);\n+        }\n+\n+    }\n+\n+    private static void run(CommandProcess process, String file, boolean live) throws IOException {\n+        HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean = ManagementFactory\n+                        .getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n+        hotSpotDiagnosticMXBean.dumpHeap(file, live);\n+    }\n+\n+}",
    "output": "add heapdump command. #837"
  },
  {
    "input": "diff --git a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ActuatorSecurity.java b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ActuatorSecurity.java\n--- a/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ActuatorSecurity.java\n+++ b/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/endpoint/ActuatorSecurity.java\n@@ -0,0 +1,15 @@\n+package com.alibaba.arthas.tunnel.server.endpoint;\n+\n+import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+@Configuration\n+public class ActuatorSecurity extends WebSecurityConfigurerAdapter {\n+    @Override\n+    protected void configure(HttpSecurity httpSecurity) throws Exception {\n+        httpSecurity.authorizeRequests().requestMatchers(EndpointRequest.toAnyEndpoint()).authenticated().anyRequest()\n+                .permitAll().and().formLogin();\n+    }\n+}\n\\ No newline at end of file",
    "output": "tunnel server endpoint support security. #835"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SessionCommand.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.command.basic1000;\n \n+import com.taobao.arthas.core.server.ArthasBootstrap;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.session.Session;\n@@ -12,6 +13,8 @@\n \n import static com.taobao.text.ui.Element.label;\n \n+import com.alibaba.arthas.tunnel.client.TunnelClient;\n+\n /**\n  * 查看会话状态命令\n  *\n@@ -32,6 +35,14 @@ private Element sessionTable(Session session) {\n         TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n         table.row(true, label(\"Name\").style(Decoration.bold.bold()), label(\"Value\").style(Decoration.bold.bold()));\n         table.row(\"JAVA_PID\", \"\" + session.getPid()).row(\"SESSION_ID\", \"\" + session.getSessionId());\n+        TunnelClient tunnelClient = ArthasBootstrap.getInstance().getTunnelClient();\n+        if (tunnelClient != null) {\n+            String id = tunnelClient.getId();\n+            if (id != null) {\n+                table.row(\"AGENT_ID\", \"\" + id);\n+            }\n+            table.row(\"TUNNEL_SERVER\", \"\" + tunnelClient.getTunnelServerUrl());\n+        }\n         return table;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -232,4 +232,8 @@ private void cleanUpSpyReference() {\n             logger.error(null, \"Spy destroy failed: \", e);\n         }\n     }\n+\n+    public TunnelClient getTunnelClient() {\n+        return tunnelClient;\n+    }\n }",
    "output": "session command support print agent id/tunnel server. #835"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n@@ -31,6 +31,11 @@ public class LogUtil {\n      */\n     private static final Logger termdLogger;\n \n+    /**\n+     * 接管tunnel client的Logger\n+     */\n+    private static final Logger tunnelClientLogger;\n+\n     public static final String LOGGER_FILE;\n \n     /**\n@@ -71,6 +76,11 @@ public class LogUtil {\n         termdLogger.activateAppender(arthasLogger);\n         termdLogger.setLevel(Level.INFO);\n         termdLogger.setAdditivity(false);\n+\n+        tunnelClientLogger = LoggerFactory.getLogger(\"com.alibaba.arthas.tunnel.client\");\n+        tunnelClientLogger.activateAppender(arthasLogger);\n+        tunnelClientLogger.setLevel(Level.INFO);\n+        tunnelClientLogger.setAdditivity(false);\n     }\n \n     private static void detectArthasLogDirectory() {",
    "output": "fix tunnel client logger output. #835"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -46,6 +46,7 @@ public class ShellImpl implements Shell {\n     private Term term;\n     private String welcome;\n     private Job currentForegroundJob;\n+    private String prompt;\n \n     public ShellImpl(ShellServer server, Term term, InternalCommandManager commandManager,\n             Instrumentation instrumentation, int pid, JobControllerImpl jobController) {\n@@ -64,6 +65,8 @@ public ShellImpl(ShellServer server, Term term, InternalCommandManager commandMa\n         if (term != null) {\n             term.setSession(session);\n         }\n+\n+        this.setPrompt();\n     }\n \n     public JobController jobController() {\n@@ -106,6 +109,14 @@ public void setWelcome(String welcome) {\n         this.welcome = welcome;\n     }\n \n+    private void setPrompt(){\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"[arthas@\");\n+        stringBuilder.append(session.getPid());\n+        stringBuilder.append(\"]$ \");\n+        this.prompt = stringBuilder.toString();\n+    }\n+\n     public ShellImpl init() {\n         term.interruptHandler(new InterruptHandler(this));\n         term.suspendHandler(new SuspendHandler(this));\n@@ -142,7 +153,7 @@ public String statusLine(Job job, ExecStatus status) {\n     }\n \n     public void readline() {\n-        term.readline(Constants.DEFAULT_PROMPT, new ShellLineHandler(this),\n+        term.readline(prompt, new ShellLineHandler(this),\n                 new CommandManagerCompletionHandler(commandManager));\n     }\n ",
    "output": "change prompt to arthas@pid (#803)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -122,18 +122,14 @@ public String toString() {\n      * @param toString 序列化字符串\n      * @return 反序列化的对象\n      */\n-    public static Configure toConfigure(String toString) {\n+    public static Configure toConfigure(String toString) throws IllegalAccessException {\n         final Configure configure = new Configure();\n         final Map<String, String> map = codec.toMap(toString);\n \n         for (Map.Entry<String, String> entry : map.entrySet()) {\n-            try {\n-                final Field field = ArthasReflectUtils.getField(Configure.class, entry.getKey());\n-                if (null != field && !isStatic(field.getModifiers())) {\n-                    ArthasReflectUtils.set(field, ArthasReflectUtils.valueOf(field.getType(), entry.getValue()), configure);\n-                }\n-            } catch (Throwable t) {\n-                //\n+            final Field field = ArthasReflectUtils.getField(Configure.class, entry.getKey());\n+            if (null != field && !isStatic(field.getModifiers())) {\n+                ArthasReflectUtils.set(field, ArthasReflectUtils.valueOf(field.getType(), entry.getValue()), configure);\n             }\n         }\n         return configure;",
    "output": "Throw IllegalAccessException out when Configure set filed failed. (#818)"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n@@ -25,6 +25,11 @@ public class DynamicCompiler {\n     private final List<Diagnostic<? extends JavaFileObject>> warnings = new ArrayList<Diagnostic<? extends JavaFileObject>>();\n \n     public DynamicCompiler(ClassLoader classLoader) {\n+        if (javaCompiler == null) {\n+            throw new IllegalStateException(\n+                            \"Can not load JavaCompiler from javax.tools.ToolProvider#getSystemJavaCompiler(),\"\n+                                            + \" please confirm the application running in JDK not JRE.\");\n+        }\n         standardFileManager = javaCompiler.getStandardFileManager(null, null, null);\n \n         options.add(\"-Xlint:unchecked\");",
    "output": "check if JavaCompiler is avaliable. #799"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n@@ -1,8 +1,6 @@\n package com.taobao.arthas.core.command.klass100;\n \n import java.io.File;\n-import java.io.IOException;\n-import java.io.Writer;\n import java.lang.instrument.Instrumentation;\n import java.nio.charset.Charset;\n import java.util.List;\n@@ -89,22 +87,7 @@ public void process(final CommandProcess process) {\n                 }\n             }\n \n-            DynamicCompiler dynamicCompiler = new DynamicCompiler(classloader, new Writer() {\n-                @Override\n-                public void write(char[] cbuf, int off, int len) throws IOException {\n-                    process.write(new String(cbuf, off, len));\n-                }\n-\n-                @Override\n-                public void flush() throws IOException {\n-                }\n-\n-                @Override\n-                public void close() throws IOException {\n-\n-                }\n-\n-            });\n+            DynamicCompiler dynamicCompiler = new DynamicCompiler(classloader);\n \n             Charset charset = Charset.defaultCharset();\n             if (encoding != null) {\n\ndiff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n@@ -1,6 +1,5 @@\n package com.taobao.arthas.compiler;\n \n-import java.io.Writer;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n@@ -25,18 +24,11 @@ public class DynamicCompiler {\n     private final List<Diagnostic<? extends JavaFileObject>> errors = new ArrayList<Diagnostic<? extends JavaFileObject>>();\n     private final List<Diagnostic<? extends JavaFileObject>> warnings = new ArrayList<Diagnostic<? extends JavaFileObject>>();\n \n-    private Writer writer;\n-\n     public DynamicCompiler(ClassLoader classLoader) {\n-        this(classLoader, null);\n-    }\n-\n-    public DynamicCompiler(ClassLoader classLoader, Writer writer) {\n         standardFileManager = javaCompiler.getStandardFileManager(null, null, null);\n \n         options.add(\"-Xlint:unchecked\");\n         dynamicClassLoader = new DynamicClassLoader(classLoader);\n-        this.writer = writer;\n     }\n \n     public void addSource(String className, String source) {\n@@ -89,7 +81,7 @@ public Map<String, Class<?>> build() {\n \n             return dynamicClassLoader.getClasses();\n         } catch (Throwable e) {\n-            throw new DynamicCompilerException(e);\n+            throw new DynamicCompilerException(e, errors);\n         } finally {\n             compilationUnits.clear();\n \n@@ -139,7 +131,7 @@ public Map<String, byte[]> buildByteCodes() {\n \n             return dynamicClassLoader.getByteCodes();\n         } catch (ClassFormatError e) {\n-            throw new DynamicCompilerException(e);\n+            throw new DynamicCompilerException(e, errors);\n         } finally {\n             compilationUnits.clear();\n \n\ndiff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n@@ -33,8 +33,9 @@ public DynamicCompilerException(String message, List<Diagnostic<? extends JavaFi\n         this.diagnostics = diagnostics;\n     }\n \n-    public DynamicCompilerException(Throwable cause) {\n+    public DynamicCompilerException(Throwable cause, List<Diagnostic<? extends JavaFileObject>> diagnostics) {\n         super(cause);\n+        this.diagnostics = diagnostics;\n     }\n \n     private List<Map<String, Object>> getErrorList() {",
    "output": "clean code in MemoryCompiler"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -111,7 +111,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n             if (pid == currentPid) {\n                 continue;\n             }\n-            if (strings.length >= 2 && isJspProcess(strings[1])) { // skip jps\n+            if (strings.length >= 2 && isJpsProcess(strings[1])) { // skip jps\n                 continue;\n             }\n \n@@ -370,7 +370,7 @@ public int compare(File file1, File file2) {\n         return jpsList.get(0);\n     }\n \n-    private static boolean isJspProcess(String mainClassName) {\n+    private static boolean isJpsProcess(String mainClassName) {\n         return \"sun.tools.jps.Jps\".equals(mainClassName) || \"jdk.jcmd/sun.tools.jps.Jps\".equals(mainClassName);\n     }\n }",
    "output": "fix typo"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -44,13 +44,8 @@ public class DownloadUtils {\n      */\n     public static String readMavenReleaseVersion(String mavenMetaData) {\n         try {\n-            ByteArrayInputStream inputStream = new ByteArrayInputStream(mavenMetaData.getBytes(\"UTF-8\"));\n-            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n-            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n-            Document document = dBuilder.parse(inputStream);\n-\n+            Document document = transformMavenMetaData(mavenMetaData);\n             NodeList nodeList = document.getDocumentElement().getElementsByTagName(\"release\");\n-\n             return nodeList.item(0).getTextContent();\n         } catch (Exception e) {\n             // ignore\n@@ -67,11 +62,7 @@ public static String readMavenReleaseVersion(String mavenMetaData) {\n     public static List<String> readAllMavenVersion(String mavenMetaData) {\n         List<String> result = new ArrayList<String>();\n         try {\n-            ByteArrayInputStream inputStream = new ByteArrayInputStream(mavenMetaData.getBytes(\"UTF-8\"));\n-            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n-            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n-            Document document = dBuilder.parse(inputStream);\n-\n+            Document document = transformMavenMetaData(mavenMetaData);\n             NodeList nodeList = document.getDocumentElement().getElementsByTagName(\"version\");\n             int length = nodeList.getLength();\n             for (int i = 0; i < length; ++i) {\n@@ -187,6 +178,20 @@ public static void saveUrl(final String filename, final String urlString, boolea\n         }\n     }\n \n+    /**\n+     * transform the maven meta data which is in the format of String into document object.\n+     *\n+     * @param mavenMetaData\n+     * @return\n+     * @throws Exception\n+     */\n+    private static Document transformMavenMetaData(String mavenMetaData) throws Exception {\n+        ByteArrayInputStream inputStream = new ByteArrayInputStream(mavenMetaData.getBytes(\"UTF-8\"));\n+        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+        return dBuilder.parse(inputStream);\n+    }\n+\n     /**\n      * support redirect\n      *\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -8,43 +8,43 @@\n  *\n  */\n public class JavaVersionUtils {\n-    private static final String versionPropName = \"java.specification.version\";\n-    private static final String javaVersionStr = System.getProperty(versionPropName);\n-    private static final float javaVersion = Float.parseFloat(javaVersionStr);\n+    private static final String VERSION_PROP_NAME = \"java.specification.version\";\n+    private static final String JAVA_VERSION_STR = System.getProperty(VERSION_PROP_NAME);\n+    private static final float JAVA_VERSION = Float.parseFloat(JAVA_VERSION_STR);\n \n     public static String javaVersionStr() {\n-        return javaVersionStr;\n+        return JAVA_VERSION_STR;\n     }\n \n     public static String javaVersionStr(Properties props) {\n-        return (null != props) ? props.getProperty(versionPropName): null;\n+        return (null != props) ? props.getProperty(VERSION_PROP_NAME): null;\n     }\n \n     public static float javaVersion() {\n-        return javaVersion;\n+        return JAVA_VERSION;\n     }\n \n     public static boolean isJava6() {\n-        return javaVersionStr.equals(\"1.6\");\n+        return JAVA_VERSION_STR.equals(\"1.6\");\n     }\n \n     public static boolean isJava7() {\n-        return javaVersionStr.equals(\"1.7\");\n+        return JAVA_VERSION_STR.equals(\"1.7\");\n     }\n \n     public static boolean isJava8() {\n-        return javaVersionStr.equals(\"1.8\");\n+        return JAVA_VERSION_STR.equals(\"1.8\");\n     }\n \n     public static boolean isJava9() {\n-        return javaVersionStr.equals(\"9\");\n+        return JAVA_VERSION_STR.equals(\"9\");\n     }\n \n     public static boolean isLessThanJava9() {\n-        return javaVersion < 9.0f;\n+        return JAVA_VERSION < 9.0f;\n     }\n \n     public static boolean isGreaterThanJava8() {\n-        return javaVersion > 1.8f;\n+        return JAVA_VERSION > 1.8f;\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -110,9 +110,9 @@ public void process(CommandProcess process) {\n         } else if (hashCode != null && this.loadClass != null) {\n             processLoadClass(process, inst);\n         } else if (hashCode != null) {\n-            processClassloader(process, inst);\n+            processClassLoader(process, inst);\n         } else if (listClassLoader || isTree){\n-            processClassloaders(process, inst);\n+            processClassLoaders(process, inst);\n         } else {\n             processClassLoaderStats(process, inst);\n         }\n@@ -152,7 +152,7 @@ private void processClassLoaderStats(CommandProcess process, Instrumentation ins\n         process.end();\n     }\n \n-    private void processClassloaders(CommandProcess process, Instrumentation inst) {\n+    private void processClassLoaders(CommandProcess process, Instrumentation inst) {\n         RowAffect affect = new RowAffect();\n         List<ClassLoaderInfo> classLoaderInfos = includeReflectionClassLoader ? getAllClassLoaderInfo(inst) :\n                 getAllClassLoaderInfo(inst, new SunReflectionClassLoaderFilter());\n@@ -165,10 +165,10 @@ private void processClassloaders(CommandProcess process, Instrumentation inst) {\n     }\n \n     // 根据 hashCode 来打印URLClassLoader的urls\n-    private void processClassloader(CommandProcess process, Instrumentation inst) {\n+    private void processClassLoader(CommandProcess process, Instrumentation inst) {\n         RowAffect affect = new RowAffect();\n \n-        Set<ClassLoader> allClassLoader = getAllClassLoader(inst);\n+        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n         for (ClassLoader cl : allClassLoader) {\n             if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n                 process.write(RenderUtil.render(renderClassLoaderUrls(cl), process.width()));\n@@ -184,7 +184,7 @@ private void processClassloader(CommandProcess process, Instrumentation inst) {\n     private void processResources(CommandProcess process, Instrumentation inst) {\n         RowAffect affect = new RowAffect();\n         int rowCount = 0;\n-        Set<ClassLoader> allClassLoader = getAllClassLoader(inst);\n+        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n         for (ClassLoader cl : allClassLoader) {\n             if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n                 TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n@@ -209,7 +209,7 @@ private void processResources(CommandProcess process, Instrumentation inst) {\n \n     // Use ClassLoader to loadClass\n     private void processLoadClass(CommandProcess process, Instrumentation inst) {\n-        Set<ClassLoader> allClassLoader = getAllClassLoader(inst);\n+        Set<ClassLoader> allClassLoader = getAllClassLoaders(inst);\n         for (ClassLoader cl : allClassLoader) {\n             if (Integer.toHexString(cl.hashCode()).equals(hashCode)) {\n                 try {\n@@ -382,7 +382,7 @@ private static void renderParent(TreeElement node, ClassLoaderInfo parent, List<\n         }\n     }\n \n-    private static Set<ClassLoader> getAllClassLoader(Instrumentation inst, Filter... filters) {\n+    private static Set<ClassLoader> getAllClassLoaders(Instrumentation inst, Filter... filters) {\n         Set<ClassLoader> classLoaderSet = new HashSet<ClassLoader>();\n \n         for (Class<?> clazz : inst.getAllLoadedClasses()) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -1,6 +1,5 @@\n package com.taobao.arthas.core.command.klass100;\n \n-import com.taobao.arthas.core.advisor.Enhancer;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n@@ -26,13 +25,12 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import static java.lang.System.arraycopy;\n-\n import java.io.File;\n import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.Instrumentation;\n-import java.lang.instrument.UnmodifiableClassException;\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.regex.Pattern;\n \n import static com.taobao.text.ui.Element.label;",
    "output": "clean up the code a little bit by following Uncle Bob's clean code guide (#785)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -99,7 +99,7 @@ public void process(CommandProcess process) {\n                 }\n \n                 if (isDetail) {\n-                    process.write(RenderUtil.render(renderConstructor(constructor), process.width()) + \"\\n\");\n+                    process.write(RenderUtil.render(renderConstructor(constructor, clazz), process.width()) + \"\\n\");\n                 } else {\n                     String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n                     process.write(line);\n@@ -114,7 +114,7 @@ public void process(CommandProcess process) {\n                 }\n \n                 if (isDetail) {\n-                    process.write(RenderUtil.render(renderMethod(method), process.width()) + \"\\n\");\n+                    process.write(RenderUtil.render(renderMethod(method, clazz), process.width()) + \"\\n\");\n                 } else {\n                     String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n                     process.write(line);\n@@ -135,7 +135,7 @@ private Matcher<String> methodNameMatcher() {\n         return isRegEx ? new RegexMatcher(methodPattern) : new WildcardMatcher(methodPattern);\n     }\n \n-    private Element renderMethod(Method method) {\n+    private Element renderMethod(Method method, Class<?> clazz) {\n         TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n \n         table.row(label(\"declaring-class\").style(bold.bold()), label(method.getDeclaringClass().getName()))\n@@ -144,19 +144,21 @@ private Element renderMethod(Method method) {\n                 .row(label(\"annotation\").style(bold.bold()), label(TypeRenderUtils.drawAnnotation(method)))\n                 .row(label(\"parameters\").style(bold.bold()), label(TypeRenderUtils.drawParameters(method)))\n                 .row(label(\"return\").style(bold.bold()), label(TypeRenderUtils.drawReturn(method)))\n-                .row(label(\"exceptions\").style(bold.bold()), label(TypeRenderUtils.drawExceptions(method)));\n+                .row(label(\"exceptions\").style(bold.bold()), label(TypeRenderUtils.drawExceptions(method)))\n+                .row(label(\"classLoaderHash\").style(bold.bold()), label(StringUtils.classLoaderHash(clazz)));\n         return table;\n     }\n \n-    private Element renderConstructor(Constructor<?> constructor) {\n+    private Element renderConstructor(Constructor<?> constructor, Class<?> clazz) {\n         TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n \n         table.row(label(\"declaring-class\").style(bold.bold()), label(constructor.getDeclaringClass().getName()))\n              .row(label(\"constructor-name\").style(bold.bold()), label(\"<init>\").style(bold.bold()))\n              .row(label(\"modifier\").style(bold.bold()), label(StringUtils.modifier(constructor.getModifiers(), ',')))\n              .row(label(\"annotation\").style(bold.bold()), label(TypeRenderUtils.drawAnnotation(constructor.getDeclaredAnnotations())))\n              .row(label(\"parameters\").style(bold.bold()), label(TypeRenderUtils.drawParameters(constructor)))\n-             .row(label(\"exceptions\").style(bold.bold()), label(TypeRenderUtils.drawExceptions(constructor)));\n+             .row(label(\"exceptions\").style(bold.bold()), label(TypeRenderUtils.drawExceptions(constructor)))\n+             .row(label(\"classLoaderHash\").style(bold.bold()), label(StringUtils.classLoaderHash(clazz)));\n         return table;\n     }\n ",
    "output": "sm support classloader hash. #767"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -42,6 +42,7 @@ public class SearchClassCommand extends AnnotatedCommand {\n     private boolean isDetail = false;\n     private boolean isField = false;\n     private boolean isRegEx = false;\n+    private String hashCode = null;\n     private Integer expand;\n \n     @Argument(argName = \"class-pattern\", index = 0)\n@@ -74,12 +75,18 @@ public void setExpand(Integer expand) {\n         this.expand = expand;\n     }\n \n+    @Option(shortName = \"c\", longName = \"classloader\")\n+    @Description(\"The hash code of the special class's classLoader\")\n+    public void setHashCode(String hashCode) {\n+        this.hashCode = hashCode;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        List<Class<?>> matchedClasses = new ArrayList<Class<?>>(SearchUtils.searchClass(inst, classPattern, isRegEx));\n+        List<Class<?>> matchedClasses = new ArrayList<Class<?>>(SearchUtils.searchClass(inst, classPattern, isRegEx, hashCode));\n         Collections.sort(matchedClasses, new Comparator<Class<?>>() {\n             @Override\n             public int compare(Class<?> c1, Class<?> c2) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -49,6 +49,7 @@ public class SearchMethodCommand extends AnnotatedCommand {\n \n     private String classPattern;\n     private String methodPattern;\n+    private String hashCode = null;\n     private boolean isDetail = false;\n     private boolean isRegEx = false;\n \n@@ -76,13 +77,19 @@ public void setRegEx(boolean regEx) {\n         isRegEx = regEx;\n     }\n \n+    @Option(shortName = \"c\", longName = \"classloader\")\n+    @Description(\"The hash code of the special class's classLoader\")\n+    public void setHashCode(String hashCode) {\n+        this.hashCode = hashCode;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect affect = new RowAffect();\n \n         Instrumentation inst = process.session().getInstrumentation();\n         Matcher<String> methodNameMatcher = methodNameMatcher();\n-        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx);\n+        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx, hashCode);\n \n         for (Class<?> clazz : matchedClasses) {\n             for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {",
    "output": "sc sm support -c option (#766)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -9,6 +9,7 @@\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n import com.taobao.arthas.core.command.basic1000.ShutdownCommand;\n+import com.taobao.arthas.core.command.basic1000.StopCommand;\n import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n@@ -84,6 +85,7 @@ private static void initCommands() {\n         commands.add(Command.create(ResetCommand.class));\n         commands.add(Command.create(VersionCommand.class));\n         commands.add(Command.create(ShutdownCommand.class));\n+        commands.add(Command.create(StopCommand.class));\n         commands.add(Command.create(SessionCommand.class));\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n@@ -16,12 +16,17 @@\n  * 关闭命令\n  *\n  * @author vlinux on 14/10/23.\n+ * @see StopCommand\n  */\n @Name(\"shutdown\")\n @Summary(\"Shutdown Arthas server and exit the console\")\n public class ShutdownCommand extends AnnotatedCommand {\n     @Override\n     public void process(CommandProcess process) {\n+        shutdown(process);\n+    }\n+\n+    public static void shutdown(CommandProcess process) {\n         try {\n             // 退出之前需要重置所有的增强类\n             Instrumentation inst = process.session().getInstrumentation();\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/StopCommand.java\n@@ -0,0 +1,20 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Summary;\n+\n+/**\n+ * Alias for ShutdownCommand\n+ * @author hengyunabc 2019-07-05\n+ * @see ShutdownCommand\n+ */\n+@Name(\"stop\")\n+@Summary(\"Stop/Shutdown Arthas server and exit the console. Alias for shutdown.\")\n+public class StopCommand extends AnnotatedCommand {\n+    @Override\n+    public void process(CommandProcess process) {\n+        ShutdownCommand.shutdown(process);\n+    }\n+}",
    "output": "add stop command, an alias for shutdown. #707"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -321,7 +321,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (telnetPortPid > 0 && pid != telnetPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getTelnetPort());\n-            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first.\",\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'shutdown' command.\",\n                             telnetPortPid);\n             AnsiLog.error(\"2. Or try to use different telnet port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port -1\");\n             System.exit(1);\n@@ -330,7 +330,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (httpPortPid > 0 && pid != httpPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getHttpPort());\n-            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first.\",\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first with running the 'shutdown' command.\",\n                             httpPortPid);\n             AnsiLog.error(\"2. Or try to use different http port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port 9999\", httpPortPid);\n             System.exit(1);",
    "output": "improve shutdown command tip (#757)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java\n@@ -57,9 +57,6 @@ private void afterFinishing(Advice advice) {\n         double cost = threadLocalWatch.costInMillis();\n         TimeFragment timeTunnel = new TimeFragment(advice, new Date(), cost);\n \n-        // reset the timestamp\n-        threadLocalWatch.clear();\n-\n         boolean match = false;\n         try {\n             match = isConditionMet(command.getConditionExpress(), advice, cost);",
    "output": "fix tt command cost less than 0. #746"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -1,32 +1,13 @@\n package com.taobao.arthas.core.util;\n \n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n \n-import org.benf.cfr.reader.bytecode.analysis.parse.utils.Pair;\n-import org.benf.cfr.reader.entities.ClassFile;\n-import org.benf.cfr.reader.entities.Method;\n-import org.benf.cfr.reader.relationship.MemberNameResolver;\n-import org.benf.cfr.reader.state.ClassFileSourceImpl;\n-import org.benf.cfr.reader.state.DCCommonState;\n-import org.benf.cfr.reader.state.TypeUsageCollector;\n-import org.benf.cfr.reader.state.TypeUsageInformation;\n-import org.benf.cfr.reader.util.AnalysisType;\n-import org.benf.cfr.reader.util.CannotLoadClassException;\n-import org.benf.cfr.reader.util.ConfusedCFRException;\n-import org.benf.cfr.reader.util.ListFactory;\n-import org.benf.cfr.reader.util.getopt.GetOptParser;\n-import org.benf.cfr.reader.util.getopt.Options;\n-import org.benf.cfr.reader.util.getopt.OptionsImpl;\n-import org.benf.cfr.reader.util.output.Dumper;\n-import org.benf.cfr.reader.util.output.DumperFactory;\n-import org.benf.cfr.reader.util.output.DumperFactoryImpl;\n-import org.benf.cfr.reader.util.output.IllegalIdentifierDump;\n-import org.benf.cfr.reader.util.output.StreamDumper;\n-import org.benf.cfr.reader.util.output.ToStringDumper;\n+import org.benf.cfr.reader.api.CfrDriver;\n+import org.benf.cfr.reader.api.OutputSinkFactory;\n \n /**\n  *\n@@ -36,167 +17,49 @@\n public class Decompiler {\n \n     /**\n-     * @see org.benf.cfr.reader.Main#main(String[])\n      * @param classFilePath\n      * @param methodName\n      * @return\n      */\n     public static String decompile(String classFilePath, String methodName) {\n-        StringBuilder result = new StringBuilder(8192);\n+        final StringBuilder result = new StringBuilder(8192);\n \n-        List<String> argList = new ArrayList<String>();\n-        argList.add(classFilePath);\n-        if (methodName != null) {\n-            argList.add(\"--methodname\");\n-            argList.add(methodName);\n-        }\n-        String args[] = argList.toArray(new String[0]);\n-\n-        GetOptParser getOptParser = new GetOptParser();\n-\n-        Options options = null;\n-        List<String> files = null;\n-        try {\n-            Pair processedArgs = getOptParser.parse(args, OptionsImpl.getFactory());\n-            files = (List) processedArgs.getFirst();\n-            options = (Options) processedArgs.getSecond();\n-        } catch (Exception e) {\n-            getOptParser.showHelp(OptionsImpl.getFactory(), e);\n-            System.exit(1);\n-        }\n-\n-        if ((options.optionIsSet(OptionsImpl.HELP)) || (files.isEmpty())) {\n-            getOptParser.showOptionHelp(OptionsImpl.getFactory(), options, OptionsImpl.HELP);\n-            return \"\";\n-        }\n-\n-        ClassFileSourceImpl classFileSource = new ClassFileSourceImpl(options);\n-\n-        boolean skipInnerClass = (files.size() > 1)\n-                        && (((Boolean) options.getOption(OptionsImpl.SKIP_BATCH_INNER_CLASSES)).booleanValue());\n-\n-        Collections.sort(files);\n-\n-        for (String path : files) {\n-            classFileSource.clearConfiguration();\n-            DCCommonState dcCommonState = new DCCommonState(options, classFileSource);\n-            DumperFactory dumperFactory = new DumperFactoryImpl(options);\n-\n-            path = classFileSource.adjustInputPath(path);\n-\n-            AnalysisType type = (AnalysisType) options.getOption(OptionsImpl.ANALYSE_AS);\n-            if (type == null) {\n-                type = dcCommonState.detectClsJar(path);\n+        OutputSinkFactory mySink = new OutputSinkFactory() {\n+            @Override\n+            public List<SinkClass> getSupportedSinks(SinkType sinkType, Collection<SinkClass> collection) {\n+                return Arrays.asList(SinkClass.STRING, SinkClass.DECOMPILED, SinkClass.DECOMPILED_MULTIVER,\n+                                SinkClass.EXCEPTION_MESSAGE);\n             }\n \n-            if (type == AnalysisType.JAR) {\n-                // doJar(dcCommonState, path, dumperFactory);\n-            }\n-            if (type == AnalysisType.CLASS) {\n-                result.append(doClass(dcCommonState, path, skipInnerClass, dumperFactory));\n+            @Override\n+            public <T> Sink<T> getSink(final SinkType sinkType, SinkClass sinkClass) {\n+                return new Sink<T>() {\n+                    @Override\n+                    public void write(T sinkable) {\n+                        // skip message like: Analysing type demo.MathGame\n+                        if (sinkType == SinkType.PROGRESS) {\n+                            return;\n+                        }\n+                        result.append(sinkable);\n+                    }\n+                };\n             }\n+        };\n+\n+        HashMap<String, String> options = new HashMap<String, String>();\n+        /**\n+         * @see org.benf.cfr.reader.util.MiscConstants.Version.getVersion() Currently,\n+         *      the cfr version is wrong. so disable show cfr version.\n+         */\n+        options.put(\"showversion\", \"false\");\n+        if (!StringUtils.isBlank(methodName)) {\n+            options.put(\"methodname\", methodName);\n         }\n-        return result.toString();\n-    }\n-\n-    public static String doClass(DCCommonState dcCommonState, String path, boolean skipInnerClass,\n-                    DumperFactory dumperFactory) {\n-        StringBuilder result = new StringBuilder(8192);\n-        Options options = dcCommonState.getOptions();\n-        IllegalIdentifierDump illegalIdentifierDump = IllegalIdentifierDump.Factory.get(options);\n-        Dumper d = new ToStringDumper();\n-        try {\n-            ClassFile c = dcCommonState.getClassFileMaybePath(path);\n-            if ((skipInnerClass) && (c.isInnerClass())) {\n-                return \"\";\n-            }\n-            dcCommonState.configureWith(c);\n-            dumperFactory.getProgressDumper().analysingType(c.getClassType());\n-            try {\n-                c = dcCommonState.getClassFile(c.getClassType());\n-            } catch (CannotLoadClassException e) {\n-            }\n-            if (((Boolean) options.getOption(OptionsImpl.DECOMPILE_INNER_CLASSES)).booleanValue()) {\n-                c.loadInnerClasses(dcCommonState);\n-            }\n-            if (((Boolean) options.getOption(OptionsImpl.RENAME_DUP_MEMBERS)).booleanValue()) {\n-                MemberNameResolver.resolveNames(dcCommonState,\n-                                ListFactory.newList(dcCommonState.getClassCache().getLoadedTypes()));\n-            }\n-\n-            c.analyseTop(dcCommonState);\n \n-            TypeUsageCollector collectingDumper = new TypeUsageCollector(c);\n-            c.collectTypeUsages(collectingDumper);\n+        CfrDriver driver = new CfrDriver.Builder().withOptions(options).withOutputSink(mySink).build();\n+        driver.analyse(Collections.singletonList(classFilePath));\n \n-            d = new StringDumper(collectingDumper.getTypeUsageInformation(), options, illegalIdentifierDump);\n-\n-            // d = dumperFactory.getNewTopLevelDumper(c.getClassType(), summaryDumper,\n-            // collectingDumper.getTypeUsageInformation(), illegalIdentifierDump);\n-\n-            String methname = (String) options.getOption(OptionsImpl.METHODNAME);\n-            if (methname == null) {\n-                c.dump(d);\n-            }\n-            else {\n-                try {\n-                    for (Method method : c.getMethodByName(methname)) {\n-                        method.dump(d, true);\n-                    }\n-                } catch (NoSuchMethodException e) {\n-                    throw new IllegalArgumentException(\"No such method '\" + methname + \"'.\");\n-                }\n-            }\n-            d.print(\"\");\n-            result.append(d.toString());\n-        } catch (ConfusedCFRException e) {\n-            result.append(e.toString()).append(\"\\n\");\n-            for (Object x : e.getStackTrace()) {\n-                result.append(x).append(\"\\n\");\n-            }\n-        } catch (CannotLoadClassException e) {\n-            result.append(\"Can't load the class specified:\").append(\"\\n\");\n-            result.append(e.toString()).append(\"\\n\");\n-        } catch (RuntimeException e) {\n-            result.append(e.toString()).append(\"\\n\");\n-            for (Object x : e.getStackTrace()) {\n-                result.append(x).append(\"\\n\");\n-            }\n-        } finally {\n-            if (d != null) {\n-                d.close();\n-            }\n-        }\n         return result.toString();\n     }\n \n-    public static class StringDumper extends StreamDumper {\n-        private StringWriter sw = new StringWriter();\n-\n-        public StringDumper(TypeUsageInformation typeUsageInformation, Options options,\n-                        IllegalIdentifierDump illegalIdentifierDump) {\n-            super(typeUsageInformation, options, illegalIdentifierDump);\n-        }\n-\n-        public void addSummaryError(Method paramMethod, String paramString) {\n-\n-        }\n-\n-        public void close() {\n-            try {\n-                sw.close();\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        @Override\n-        protected void write(String source) {\n-            sw.write(source);\n-        }\n-\n-        public String toString() {\n-            return sw.toString();\n-        }\n-    }\n }",
    "output": "upgrade cfr to 0.145. #753"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n@@ -113,8 +113,9 @@ public boolean hasNext() {\n \n         @Override\n         public T next() {\n-            if (first.hasNext())\n+            if (first.hasNext()) {\n                 return first.next();\n+            }\n             return next.next();\n         }\n ",
    "output": "polish (#726)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -44,7 +44,7 @@\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.1.0\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.1\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "prepare release"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n@@ -1,6 +1,8 @@\n package com.taobao.arthas.core.shell.system.impl;\n \n+import java.io.File;\n import java.util.Date;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.taobao.arthas.core.shell.future.Future;\n@@ -11,6 +13,10 @@\n import com.taobao.arthas.core.shell.system.ExecStatus;\n import com.taobao.arthas.core.shell.system.Job;\n import com.taobao.arthas.core.shell.system.Process;\n+import com.taobao.arthas.core.shell.term.Term;\n+import com.taobao.arthas.core.shell.term.impl.TermImpl;\n+import com.taobao.arthas.core.util.Constants;\n+import com.taobao.arthas.core.util.FileUtils;\n \n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n@@ -234,6 +240,12 @@ public void handle(Integer exitCode) {\n             }\n             terminateFuture.complete();\n \n+            // save command history\n+            Term term = shell.term();\n+            if (term instanceof TermImpl) {\n+                List<int[]> history = ((TermImpl) term).getReadline().getHistory();\n+                FileUtils.saveCommandHistory(history, new File(Constants.CMD_HISTORY_FILE));\n+            }\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java\n@@ -104,7 +104,7 @@ public static FileOutputStream openOutputStream(File file, boolean append) throw\n     public static void saveCommandHistory(List<int[]> history, File file) {\n         OutputStream out = null;\n         try {\n-            out = openOutputStream(file, false);\n+            out = new BufferedOutputStream(openOutputStream(file, false));\n             for (int[] command: history) {\n                 for (int i : command) {\n                     out.write(i);",
    "output": "save history when job complete. #9"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n@@ -607,12 +607,10 @@ private void close() {\n             if (statisticsHandler != null && flushHandlerChain != null) {\n                 String data = statisticsHandler.result();\n \n-                if (flushHandlerChain != null) {\n-                    for (Function<String, String> function : flushHandlerChain) {\n-                        data = function.apply(data);\n-                        if (function instanceof StatisticsFunction) {\n-                            data = ((StatisticsFunction) function).result();\n-                        }\n+                for (Function<String, String> function : flushHandlerChain) {\n+                    data = function.apply(data);\n+                    if (function instanceof StatisticsFunction) {\n+                        data = ((StatisticsFunction) function).result();\n                     }\n                 }\n             }\n\ndiff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompilerException.java\n@@ -54,13 +54,11 @@ private List<Map<String, Object>> getErrorList() {\n     private String getErrors() {\n         StringBuilder errors = new StringBuilder();\n \n-        for (Map<String, Object> entry : getErrorList()) {\n-\n-            for (String key : entry.keySet()) {\n-\n-                Object value = entry.get(key);\n+        for (Map<String, Object> message : getErrorList()) {\n+            for (Map.Entry<String, Object> entry : message.entrySet()) {\n+                Object value = entry.getValue();\n                 if (value != null && !value.toString().isEmpty()) {\n-                    errors.append(key);\n+                    errors.append(entry.getKey());\n                     errors.append(\": \");\n                     errors.append(value);\n                 }",
    "output": "polish #614"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -296,19 +296,20 @@ static String drawMemoryInfoAndGcInfo(int width, int height) {\n     }\n \n     String drawRuntimeInfoAndTomcatInfo(int width, int height) {\n-        TableElement table = new TableElement(1, 1);\n+        TableElement resultTable = new TableElement(1, 1);\n \n         TableElement runtimeInfoTable = new TableElement(1, 1).rightCellPadding(1);\n         runtimeInfoTable\n                 .add(new RowElement().style(Decoration.bold.fg(Color.black).bg(Color.white)).add(\"Runtime\", \"\"));\n \n         addRuntimeInfo(runtimeInfoTable);\n \n-        TableElement tomcatInfoTable = new TableElement(1, 1).rightCellPadding(1);\n+        TableElement tomcatInfoTable = null;\n \n         try {\n             // 如果请求tomcat信息失败，则不显示tomcat信息\n             if (NetUtils.request(\"http://localhost:8006\").isSuccess()) {\n+                tomcatInfoTable = new TableElement(1, 1).rightCellPadding(1);\n                 tomcatInfoTable\n                         .add(new RowElement().style(Decoration.bold.fg(Color.black).bg(Color.white)).add(\"Tomcat\", \"\"));\n                 addTomcatInfo(tomcatInfoTable);\n@@ -317,8 +318,13 @@ String drawRuntimeInfoAndTomcatInfo(int width, int height) {\n             logger.error(null, \"get Tomcat Info error!\", t);\n         }\n \n-        table.row(runtimeInfoTable, tomcatInfoTable);\n-        return RenderUtil.render(table, width, height);\n+        if (tomcatInfoTable != null) {\n+            resultTable.row(runtimeInfoTable, tomcatInfoTable);\n+        } else {\n+            resultTable = runtimeInfoTable;\n+        }\n+\n+        return RenderUtil.render(resultTable, width, height);\n     }\n \n     static class MemoryEntry {",
    "output": "dashboard command remove the useless tomcat table. #696"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n@@ -42,6 +42,7 @@ public String apply(String data) {\n         data = super.apply(data);\n         if (out != null) {\n             out.write(data);\n+            out.flush();\n         } else {\n             LogUtil.getResultLogger().info(data);\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n@@ -33,6 +33,7 @@\n \n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ * @author hengyunabc 2019-05-14\n  */\n public class JobControllerImpl implements JobController {\n \n@@ -170,8 +171,8 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok\n                     String name = getRedirectFileName(tokens);\n                     if (name == null) {\n                         // 如果没有指定重定向文件名，那么重定向到以jobid命名的缓存中\n-                        name = Constants.PID + File.separator + jobId;\n-                        cacheLocation = Constants.CACHE_ROOT + File.separator + name;\n+                        name = Constants.CACHE_ROOT + File.separator + Constants.PID + File.separator + jobId;\n+                        cacheLocation = name;\n \n                         if (getRedirectJobCount() == 8) {\n                             throw new IllegalStateException(\"The amount of async command that saving result to file can't > 8\");",
    "output": "fix job redirect cache location. #695"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java\n@@ -14,6 +14,7 @@\n \n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ * @author hengyunabc 2019-05-14\n  */\n public class JobImpl implements Job {\n \n@@ -75,7 +76,7 @@ public Session getSession() {\n     @Override\n     public Job resume(boolean foreground) {\n         try {\n-            process.resume(new ResumeHandler());\n+            process.resume(foreground, new ResumeHandler());\n         } catch (IllegalStateException ignore) {\n \n         }",
    "output": "fix bg job exit problem. #694"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -35,10 +35,23 @@ public class AgentBootstrap {\n     private static PrintStream ps = System.err;\n     static {\n         try {\n-            File log = new File(System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator\n-                    + \"arthas\" + File.separator + \"arthas.log\");\n+            File arthasLogDir = new File(System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator\n+                    + \"arthas\" + File.separator);\n+            if (!arthasLogDir.exists()) {\n+                arthasLogDir.mkdirs();\n+            }\n+            if (!arthasLogDir.exists()) {\n+                // #572\n+                arthasLogDir = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + \"logs\" + File.separator\n+                        + \"arthas\" + File.separator);\n+                if (!arthasLogDir.exists()) {\n+                    arthasLogDir.mkdirs();\n+                }\n+            }\n+\n+            File log = new File(arthasLogDir, \"arthas.log\");\n+\n             if (!log.exists()) {\n-                log.getParentFile().mkdirs();\n                 log.createNewFile();\n             }\n             ps = new PrintStream(new FileOutputStream(log, true));",
    "output": "arthas-agent set log directory to /tmp/logs/arthas, when user.home is not writeable. #572"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -53,8 +53,7 @@ public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;\n     private static final String DEFAULT_TARGET_IP = \"127.0.0.1\";\n-    private static final File ARTHAS_LIB_DIR = new File(\n-                    System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n+    private static File ARTHAS_LIB_DIR;\n \n     private boolean help = false;\n \n@@ -107,6 +106,28 @@ public class Bootstrap {\n     private String command;\n     private String batchFile;\n \n+    static {\n+        ARTHAS_LIB_DIR = new File(\n+                System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n+        try {\n+            ARTHAS_LIB_DIR.mkdirs();\n+        } catch (Throwable t) {\n+            //ignore\n+        }\n+        if (!ARTHAS_LIB_DIR.exists()) {\n+            // try to set a temp directory\n+            ARTHAS_LIB_DIR = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + \".arthas\" + File.separator + \"lib\");\n+            try {\n+                ARTHAS_LIB_DIR.mkdirs();\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+        }\n+        if (!ARTHAS_LIB_DIR.exists()) {\n+            System.err.println(\"Can not find directory to save arthas lib. please try to set user home by -Duser.home=\");\n+        }\n+    }\n+\n     @Argument(argName = \"pid\", index = 0, required = false)\n     @Description(\"Target pid\")\n     public void setPid(int pid) {",
    "output": "arthas-boot set arthas lib to /tmp/.arthas/lib, when user.home is not writeable. #572"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n@@ -33,7 +33,7 @@ public ClassDumpTransformer(Set<Class<?>> classesToEnhance) {\n     public ClassDumpTransformer(Set<Class<?>> classesToEnhance, File directory) {\n         this.classesToEnhance = classesToEnhance;\n         this.dumpResult = new HashMap<Class<?>, File>();\n-        this.arthasLogHome = new File(LogUtil.LOGGER_FILE).getParentFile();\n+        this.arthasLogHome = new File(LogUtil.LOGS_ARTHAS_DIR);\n         this.directory = directory;\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Constants.java b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n@@ -4,6 +4,8 @@\n \n import com.taobao.arthas.core.view.Ansi;\n \n+import static com.taobao.arthas.core.util.LogUtil.LOGS_DIR;\n+\n /**\n  * @author ralf0131 2016-12-28 16:20.\n  */\n@@ -50,6 +52,6 @@ public interface Constants {\n     /**\n      * 缓存目录\n      */\n-    String CACHE_ROOT = System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator + \"arthas-cache\";\n+    String CACHE_ROOT = LOGS_DIR + File.separator + \"arthas-cache\";\n \n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/LogUtil.java\n@@ -6,6 +6,8 @@\n import com.taobao.middleware.logger.support.LogLog;\n import com.taobao.middleware.logger.support.LoggerHelper;\n \n+import java.io.File;\n+\n /**\n  * Arthas日志\n  * Created by vlinux on 15/3/8.\n@@ -29,9 +31,22 @@ public class LogUtil {\n      */\n     private static final Logger termdLogger;\n \n-    public static final String LOGGER_FILE = LoggerHelper.getLogFile(\"arthas\", \"arthas.log\");\n+    public static final String LOGGER_FILE;\n+\n+    /**\n+     * default value is ~/logs\n+     */\n+    public static String LOGS_DIR;\n+\n+    /**\n+     * default value is ~/logs/arthas\n+     */\n+    public static String LOGS_ARTHAS_DIR;\n \n     static {\n+        detectArthasLogDirectory();\n+        LOGGER_FILE = LoggerHelper.getLogFile(\"arthas\", \"arthas.log\");\n+\n         LogLog.setQuietMode(true);\n \n         LoggerHelper.setPattern(\"arthas-cache\", \"%d{yyyy-MM-dd HH:mm:ss.SSS}%n%m%n\");\n@@ -58,6 +73,38 @@ public class LogUtil {\n         termdLogger.setAdditivity(false);\n     }\n \n+    private static void detectArthasLogDirectory() {\n+        String dpath = System.getProperty(\"JM.LOG.PATH\");\n+        if (StringUtils.isEmpty(dpath)) {\n+            File logDirectory = new File(System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator);\n+            try {\n+                // when user is nobody mkdir will fail. #572\n+                logDirectory.mkdirs();\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+            if (!logDirectory.exists()) {\n+                // try to set a temp directory\n+                logDirectory = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + \"logs\" + File.separator);\n+                try {\n+                    logDirectory.mkdirs();\n+                } catch (Throwable e) {\n+                    // ignore\n+                }\n+            }\n+            if (logDirectory.exists()) {\n+                LOGS_DIR = logDirectory.getAbsolutePath();\n+                System.setProperty(\"JM.LOG.PATH\", logDirectory.getAbsolutePath());\n+            }\n+        } else {\n+            LOGS_DIR = dpath;\n+        }\n+        if (StringUtils.isEmpty(LOGS_DIR)) {\n+            LOGS_DIR = \"logs\";\n+        }\n+        LOGS_ARTHAS_DIR = LOGS_DIR + File.separator + \"arthas\";\n+    }\n+\n     public static Logger getArthasLogger() {\n         return arthasLogger;\n     }",
    "output": "set arthas logs directory to /tmp/logs, when user.home is not writeable. #572"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -10,6 +10,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.logger.Logger;\n import org.objectweb.asm.ClassReader;\n \n import com.taobao.arthas.core.command.Constants;\n@@ -36,7 +38,7 @@\n                 \"  redefine -c 327a647b /tmp/Test.class /tmp/Test\\\\$Inner.class \\n\" +\n                 Constants.WIKI + Constants.WIKI_HOME + \"redefine\")\n public class RedefineCommand extends AnnotatedCommand {\n-\n+    private static final Logger logger = LogUtil.getArthasLogger();\n     private static final int MAX_FILE_SIZE = 10 * 1024 * 1024;\n \n     private String hashCode;\n@@ -116,6 +118,7 @@ public void process(CommandProcess process) {\n                     continue;\n                 }\n                 definitions.add(new ClassDefinition(clazz, bytesMap.get(clazz.getName())));\n+                logger.info(\"redefine\", \"Try redefine class name: {}, ClassLoader: {}\", clazz.getName(), clazz.getClassLoader());\n             }\n         }\n ",
    "output": "redefine command log redefine info. #530"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -26,8 +26,12 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n+import static java.lang.System.arraycopy;\n+\n import java.io.File;\n+import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.Instrumentation;\n+import java.lang.instrument.UnmodifiableClassException;\n import java.util.*;\n import java.util.regex.Pattern;\n \n@@ -118,14 +122,36 @@ public void process(CommandProcess process) {\n         }\n     }\n \n+\n+    public static void retransformClasses(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes) {\n+        try {\n+            inst.addTransformer(transformer, true);\n+\n+            for(Class<?> clazz : classes) {\n+                try{\n+                    inst.retransformClasses(clazz);\n+                }catch(Throwable e) {\n+                    String errorMsg = \"retransformClasses class error, name: \" + clazz.getName();\n+                    if(ClassUtils.isLambdaClass(clazz) && e instanceof VerifyError) {\n+                        errorMsg += \", Please ignore lambda class VerifyError: https://github.com/alibaba/arthas/issues/675\";\n+                    }\n+                    logger.error(\"jad\", errorMsg, e);\n+                }\n+            }\n+        } finally {\n+            inst.removeTransformer(transformer);\n+        }\n+    }\n+\n     private void processExactMatch(CommandProcess process, RowAffect affect, Instrumentation inst, Set<Class<?>> matchedClasses, Set<Class<?>> withInnerClasses) {\n         Class<?> c = matchedClasses.iterator().next();\n         Set<Class<?>> allClasses = new HashSet<Class<?>>(withInnerClasses);\n         allClasses.add(c);\n \n         try {\n             ClassDumpTransformer transformer = new ClassDumpTransformer(allClasses);\n-            Enhancer.enhance(inst, transformer, allClasses);\n+            retransformClasses(inst, transformer, allClasses);\n+\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java\n@@ -23,6 +23,10 @@ public static String getCodeSource(final CodeSource cs) {\n         return cs.getLocation().getFile();\n     }\n \n+    public static boolean isLambdaClass(Class<?> clazz) {\n+        return clazz.getName().contains(\"$$Lambda$\");\n+    }\n+\n     public static Element renderClassInfo(Class<?> clazz) {\n         return renderClassInfo(clazz, false, null);\n     }",
    "output": "fix jad commnad VerifyError when the class is created by lambda expression. #675"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -180,8 +180,20 @@ private void processNoMatch(CommandProcess process) {\n \n     @Override\n     public void complete(Completion completion) {\n-        if (!CompletionUtils.completeClassName(completion)) {\n-            super.complete(completion);\n+        int argumentIndex = CompletionUtils.detectArgumentIndex(completion);\n+\n+        if (argumentIndex == 1) {\n+            if (!CompletionUtils.completeClassName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n+        } else if (argumentIndex == 2) {\n+            if (!CompletionUtils.completeMethodName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n         }\n+\n+        super.complete(completion);\n     }\n }",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -180,8 +180,20 @@ private void processNoMatch(CommandProcess process) {\n \n     @Override\n     public void complete(Completion completion) {\n-        if (!CompletionUtils.completeClassName(completion)) {\n-            super.complete(completion);\n+        int argumentIndex = CompletionUtils.detectArgumentIndex(completion);\n+\n+        if (argumentIndex == 1) {\n+            if (!CompletionUtils.completeClassName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n+        } else if (argumentIndex == 2) {\n+            if (!CompletionUtils.completeMethodName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n         }\n+\n+        super.complete(completion);\n     }\n }",
    "output": "jad complete method name (#667)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -20,6 +20,7 @@\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.logger.Logger;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n@@ -78,6 +79,7 @@ public class TimeTunnelCommand extends EnhancerCommand {\n     private int numberOfLimit = 100;\n     private int replayTimes = 1;\n     private long replayInterval = 1000L;\n+    private static final Logger logger = LogUtil.getArthasLogger();\n \n     @Argument(index = 0, argName = \"class-pattern\", required = false)\n     @Description(\"Path and classname of Pattern Matching\")\n@@ -362,7 +364,7 @@ private void processWatch(CommandProcess process) {\n \n             affect.rCnt(1);\n         } catch (ExpressException e) {\n-            LogUtil.getArthasLogger().warn(\"tt failed.\", e);\n+            logger.warn(\"tt failed.\", e);\n             process.write(e.getMessage() + \", visit \" + LogUtil.LOGGER_FILE + \" for more detail\\n\");\n         } finally {\n             process.write(affect.toString()).write(\"\\n\");\n@@ -436,39 +438,40 @@ private void processList(CommandProcess process) {\n         process.end();\n     }\n \n-    // 重放指定记录\n+    /**\n+     * 重放指定记录\n+     */\n     private void processPlay(CommandProcess process) {\n-        RowAffect affect = new RowAffect();\n+        TimeFragment tf = timeFragmentMap.get(index);\n+        if (null == tf) {\n+            process.write(format(\"Time fragment[%d] does not exist.\", index) + \"\\n\");\n+            process.end();\n+            return;\n+        }\n+        Advice advice = tf.getAdvice();\n+        String className = advice.getClazz().getName();\n+        String methodName = advice.getMethod().getName();\n+        String objectAddress = advice.getTarget() == null ? \"NULL\" : \"0x\" + toHexString(advice.getTarget().hashCode());\n+        ArthasMethod method = advice.getMethod();\n+        boolean accessible = advice.getMethod().isAccessible();\n         try {\n-            TimeFragment tf = timeFragmentMap.get(index);\n-            if (null == tf) {\n-                process.write(format(\"Time fragment[%d] does not exist.\", index) + \"\\n\");\n-                process.write(affect + \"\\n\");\n-                process.end();\n-                return;\n+            if (!accessible) {\n+                method.setAccessible(true);\n             }\n-\n-            Advice advice = tf.getAdvice();\n-            String className = advice.getClazz().getName();\n-            String methodName = advice.getMethod().getName();\n-            String objectAddress = advice.getTarget() == null ? \"NULL\" : \"0x\" + toHexString(advice.getTarget().hashCode());\n-\n-\n-\n-            ArthasMethod method = advice.getMethod();\n-            method.setAccessible(true);\n-            boolean accessible = advice.getMethod().isAccessible();\n             for (int i = 0; i < getReplayTimes(); i++) {\n-//              wait for the next execution\n                 if (i > 0) {\n-                    try {\n-                        Thread.sleep(getReplayInterval());\n-                    } catch (InterruptedException e) {\n-                        e.printStackTrace();\n+                    //wait for the next execution\n+                    Thread.sleep(getReplayInterval());\n+                    if (!process.isRunning()) {\n+                        return;\n                     }\n                 }\n                 long beginTime = System.nanoTime();\n                 TableElement table = TimeTunnelTable.createDefaultTable();\n+                if (i != 0) {\n+                    // empty line separator\n+                    process.write(\"\\n\");\n+                }\n                 TimeTunnelTable.drawPlayHeader(className, methodName, objectAddress, index, table);\n                 TimeTunnelTable.drawParameters(advice, table, isNeedExpand(), expand);\n \n@@ -480,14 +483,13 @@ private void processPlay(CommandProcess process) {\n                     TimeTunnelTable.drawPlayException(table, t, isNeedExpand(), expand);\n                 }\n                 process.write(RenderUtil.render(table, process.width()))\n-                        .write(format(\"Time fragment[%d] successfully replayed.\", index))\n+                        .write(format(\"Time fragment[%d] successfully replayed %d times.\", index, i+1))\n                         .write(\"\\n\");\n-                affect.rCnt(1);\n-                process.write(affect.toString()).write(\"\\n\");\n             }\n-            method.setAccessible(accessible);\n-\n+        } catch (Throwable t) {\n+            logger.warn(\"tt replay failed.\", t);\n         } finally {\n+            method.setAccessible(accessible);\n             process.end();\n         }\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/CommandProcess.java b/core/src/main/java/com/taobao/arthas/core/shell/command/CommandProcess.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/CommandProcess.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/CommandProcess.java\n@@ -121,9 +121,9 @@ public interface CommandProcess extends Tty {\n \n     /**\n      * Register listener\n-     * \n+     *\n      * @param lock the lock for enhance class\n-     * @param listener \n+     * @param listener\n      */\n     void register(int lock, AdviceListener listener);\n \n@@ -134,7 +134,7 @@ public interface CommandProcess extends Tty {\n \n     /**\n      * Execution times\n-     * \n+     *\n      * @return execution times\n      */\n     AtomicInteger times();\n@@ -151,7 +151,7 @@ public interface CommandProcess extends Tty {\n \n     /**\n      * echo tips\n-     * \n+     *\n      * @param tips process tips\n      */\n     void echoTips(String tips);\n@@ -162,4 +162,9 @@ public interface CommandProcess extends Tty {\n      * @return\n      */\n     String cacheLocation();\n+\n+    /**\n+     * Whether the process is running\n+     */\n+    boolean isRunning();\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java\n@@ -557,6 +557,11 @@ public void end() {\n         public void end(int statusCode) {\n             terminate(statusCode, null);\n         }\n+\n+        @Override\n+        public boolean isRunning() {\n+            return processStatus == ExecStatus.RUNNING;\n+        }\n     }\n \n     static class ProcessOutput {",
    "output": "improve timetunnel command(#631)"
  },
  {
    "input": "diff --git a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n--- a/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n+++ b/boot/src/test/java/com/taobao/arthas/boot/DownloadUtilsTest.java\n@@ -0,0 +1,41 @@\n+package com.taobao.arthas.boot;\n+\n+import com.taobao.arthas.common.IOUtils;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+\n+import org.junit.Assert;\n+import static com.taobao.arthas.boot.DownloadUtils.*;\n+\n+public class DownloadUtilsTest {\n+\n+    @Test\n+    public void testReadMavenReleaseVersion() {\n+        Assert.assertNull(readMavenReleaseVersion(\"\"));\n+    }\n+\n+    @Test\n+    public void testReadAllMavenVersion() {\n+        Assert.assertEquals(new ArrayList<String>(), readAllMavenVersion(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetRepoUrl() {\n+        Assert.assertEquals(\"http\", getRepoUrl(\"https/\", true));\n+        Assert.assertEquals(\"https://repo1.maven.org/maven2\", getRepoUrl(\"center\", false));\n+        Assert.assertEquals(\"https://maven.aliyun.com/repository/public\", getRepoUrl(\"aliyun\", false));\n+    }\n+\n+    @Test\n+    public void testReadMavenMetaData() throws IOException {\n+        String url = \"http://repo1.maven.org/maven2/com/taobao/arthas/arthas-packaging/maven-metadata.xml\";\n+        Assert.assertEquals(IOUtils.toString(new URL(url).openStream()), readMavenMetaData(\"center\", true));\n+\n+        Assert.assertNull(readMavenMetaData(\"\", false));\n+        Assert.assertNull(readMavenMetaData(\"https/\", false));\n+    }\n+}",
    "output": "Add unit tests for com.taobao.arthas.boot.DownloadUtils (#649)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n@@ -1,6 +1,8 @@\n package com.taobao.arthas.core.command.klass100;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.io.Writer;\n import java.lang.instrument.Instrumentation;\n import java.nio.charset.Charset;\n import java.util.List;\n@@ -69,7 +71,7 @@ public void setDirectory(String directory) {\n     }\n \n     @Override\n-    public void process(CommandProcess process) {\n+    public void process(final CommandProcess process) {\n         int exitCode = 0;\n         RowAffect affect = new RowAffect();\n \n@@ -87,7 +89,22 @@ public void process(CommandProcess process) {\n                 }\n             }\n \n-            DynamicCompiler dynamicCompiler = new DynamicCompiler(classloader);\n+            DynamicCompiler dynamicCompiler = new DynamicCompiler(classloader, new Writer() {\n+                @Override\n+                public void write(char[] cbuf, int off, int len) throws IOException {\n+                    process.write(new String(cbuf, off, len));\n+                }\n+\n+                @Override\n+                public void flush() throws IOException {\n+                }\n+\n+                @Override\n+                public void close() throws IOException {\n+\n+                }\n+\n+            });\n \n             Charset charset = Charset.defaultCharset();\n             if (encoding != null) {\n\ndiff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicCompiler.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.compiler;\n \n+import java.io.Writer;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n@@ -24,12 +25,18 @@ public class DynamicCompiler {\n     private final List<Diagnostic<? extends JavaFileObject>> errors = new ArrayList<Diagnostic<? extends JavaFileObject>>();\n     private final List<Diagnostic<? extends JavaFileObject>> warnings = new ArrayList<Diagnostic<? extends JavaFileObject>>();\n \n+    private Writer writer;\n+\n     public DynamicCompiler(ClassLoader classLoader) {\n+        this(classLoader, null);\n+    }\n+\n+    public DynamicCompiler(ClassLoader classLoader, Writer writer) {\n         standardFileManager = javaCompiler.getStandardFileManager(null, null, null);\n \n         options.add(\"-Xlint:unchecked\");\n         dynamicClassLoader = new DynamicClassLoader(classLoader);\n-\n+        this.writer = writer;\n     }\n \n     public void addSource(String className, String source) {",
    "output": "mc command delegate additional output from the compiler. #662"
  },
  {
    "input": "diff --git a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n--- a/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n+++ b/memorycompiler/src/main/java/com/taobao/arthas/compiler/DynamicJavaFileManager.java\n@@ -2,7 +2,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n@@ -13,6 +13,9 @@\n import javax.tools.StandardLocation;\n \n public class DynamicJavaFileManager extends ForwardingJavaFileManager<JavaFileManager> {\n+    private static final String[] superLocationNames = { StandardLocation.PLATFORM_CLASS_PATH.name(),\n+            /** JPMS StandardLocation.SYSTEM_MODULES **/\n+            \"SYSTEM_MODULES\" };\n     private final PackageInternalsFinder finder;\n \n     private final DynamicClassLoader classLoader;\n@@ -62,23 +65,62 @@ public String inferBinaryName(Location location, JavaFileObject file) {\n \n     @Override\n     public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds,\n-                    boolean recurse) throws IOException {\n-        if (location == StandardLocation.PLATFORM_CLASS_PATH) { // let standard manager hanfle\n-            return super.list(location, packageName, kinds, recurse);\n-        } else if (location == StandardLocation.CLASS_PATH && kinds.contains(JavaFileObject.Kind.CLASS)) {\n-            if (packageName.startsWith(\"java\")) {\n-                /**\n-                 * a hack to let standard manager handle locations like \"java.lang\" or\n-                 * \"java.util\". Prob would make sense to join results of standard manager with\n-                 * those of my finder here\n-                 */\n-                return super.list(location, packageName, kinds, recurse);\n-            } else { // app specific classes are here\n-                return finder.find(packageName);\n+                                         boolean recurse) throws IOException {\n+        if (location instanceof StandardLocation) {\n+            String locationName = ((StandardLocation) location).name();\n+            for (String name : superLocationNames) {\n+                if (name.equals(locationName)) {\n+                    return super.list(location, packageName, kinds, recurse);\n+                }\n             }\n         }\n-        return Collections.emptyList();\n \n+        // merge JavaFileObjects from specified ClassLoader\n+        if (location == StandardLocation.CLASS_PATH && kinds.contains(JavaFileObject.Kind.CLASS)) {\n+            return new IterableJoin<JavaFileObject>(super.list(location, packageName, kinds, recurse),\n+                    finder.find(packageName));\n+        }\n+\n+        return super.list(location, packageName, kinds, recurse);\n     }\n \n+    static class IterableJoin<T> implements Iterable<T> {\n+        private final Iterable<T> first, next;\n+\n+        public IterableJoin(Iterable<T> first, Iterable<T> next) {\n+            this.first = first;\n+            this.next = next;\n+        }\n+\n+        @Override\n+        public Iterator<T> iterator() {\n+            return new IteratorJoin<T>(first.iterator(), next.iterator());\n+        }\n+    }\n+\n+    static class IteratorJoin<T> implements Iterator<T> {\n+        private final Iterator<T> first, next;\n+\n+        public IteratorJoin(Iterator<T> first, Iterator<T> next) {\n+            this.first = first;\n+            this.next = next;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            return first.hasNext() || next.hasNext();\n+        }\n+\n+        @Override\n+        public T next() {\n+            if (first.hasNext())\n+                return first.next();\n+            return next.next();\n+        }\n+\n+        @Override\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"remove\");\n+        }\n+    }\n }",
    "output": "mc support JPMS; merge JavaFileObjects from specified ClassLoader. #661"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java b/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java\n@@ -34,6 +34,9 @@ public Class<?> classForName(String className, @SuppressWarnings(\"rawtypes\") Map\n                     classes.put(\"java.lang.\" + className, result);\n                 }\n             }\n+            if (result == null) {\n+                return null;\n+            }\n             classes.put(className, result);\n         }\n         return result;",
    "output": "fix class loader npe (#632)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -200,6 +200,10 @@ public static boolean completeMethodName(Completion completion) {\n         List<CliToken> tokens = completion.lineTokens();\n         String lastToken = completion.lineTokens().get(tokens.size() - 1).value();\n \n+        if (StringUtils.isBlank(lastToken)) {\n+            lastToken = \"\";\n+        }\n+\n         // retrieve the class name\n         String className;\n         if (StringUtils.isBlank(lastToken)) {",
    "output": "fix method completion (#627)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -2,6 +2,8 @@\n \n import com.taobao.arthas.core.advisor.Enhancer;\n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.LogUtil;\n@@ -103,6 +105,12 @@ public void process(CommandProcess process) {\n         }\n     }\n \n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeClassName(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n \n     private void processMatch(CommandProcess process, RowAffect effect, Instrumentation inst, Set<Class<?>> matchedClasses) {\n         try {",
    "output": "dump command support completion (#623)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n@@ -40,9 +40,10 @@\n \n @Name(\"getstatic\")\n @Summary(\"Show the static field of a class\")\n-@Description(Constants.EXAMPLE + \"  getstatic getstatic demo.MathGame random\\n\"\n-                + \"  getstatic -c 39eb305e org.apache.log4j.LogManager DEFAULT_CONFIGURATION_FILE\\n\"\n-             + Constants.WIKI + Constants.WIKI_HOME + \"getstatic\")\n+@Description(Constants.EXAMPLE +\n+             \"  getstatic demo.MathGame random\\n\" +\n+             \"  getstatic -c 39eb305e org.apache.log4j.LogManager DEFAULT_CONFIGURATION_FILE\\n\" +\n+             Constants.WIKI + Constants.WIKI_HOME + \"getstatic\")\n public class GetStaticCommand extends AnnotatedCommand {\n \n     private static final Logger logger = LogUtil.getArthasLogger();",
    "output": "fix getstatic description (#625)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java b/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java\n@@ -3,11 +3,15 @@\n import com.taobao.arthas.core.GlobalOptions;\n import com.taobao.arthas.core.Option;\n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.arthas.core.util.TokenUtils;\n import com.taobao.arthas.core.util.matcher.EqualsMatcher;\n import com.taobao.arthas.core.util.matcher.Matcher;\n-import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.matcher.RegexMatcher;\n import com.taobao.arthas.core.util.reflect.FieldUtils;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -22,6 +26,7 @@\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n import static com.taobao.arthas.core.util.ArthasCheckUtils.isIn;\n import static com.taobao.text.ui.Element.label;\n@@ -69,18 +74,38 @@ public void process(CommandProcess process) {\n         }\n     }\n \n+    /**\n+     * complete first argument(options-name), other case use default complete\n+     *\n+     * @param completion the completion object\n+     */\n+    @Override\n+    public void complete(Completion completion) {\n+        int argumentIndex = CompletionUtils.detectArgumentIndex(completion);\n+        List<CliToken> lineTokens = completion.lineTokens();\n+        if (argumentIndex == 1) {\n+            String laseToken = TokenUtils.getLast(lineTokens).value().trim();\n+            //prefix match options-name\n+            String pattern = \"^\" + laseToken + \".*\";\n+            Collection<String> optionNames = findOptionNames(new RegexMatcher(pattern));\n+            CompletionUtils.complete(completion, optionNames);\n+        } else {\n+            super.complete(completion);\n+        }\n+    }\n+\n     private void processShow(CommandProcess process) throws IllegalAccessException {\n-        Collection<Field> fields = findOptions(new RegexMatcher(\".*\"));\n+        Collection<Field> fields = findOptionFields(new RegexMatcher(\".*\"));\n         process.write(RenderUtil.render(drawShowTable(fields), process.width()));\n     }\n \n     private void processShowName(CommandProcess process) throws IllegalAccessException {\n-        Collection<Field> fields = findOptions(new EqualsMatcher<String>(optionName));\n+        Collection<Field> fields = findOptionFields(new EqualsMatcher<String>(optionName));\n         process.write(RenderUtil.render(drawShowTable(fields), process.width()));\n     }\n \n     private void processChangeNameValue(CommandProcess process) throws IllegalAccessException {\n-        Collection<Field> fields = findOptions(new EqualsMatcher<String>(optionName));\n+        Collection<Field> fields = findOptionFields(new EqualsMatcher<String>(optionName));\n \n         // name not exists\n         if (fields.isEmpty()) {\n@@ -132,36 +157,48 @@ private void processChangeNameValue(CommandProcess process) throws IllegalAccess\n     }\n \n \n-    /*\n+    /**\n      * 判断当前动作是否需要展示整个options\n      */\n     private boolean isShow() {\n         return StringUtils.isBlank(optionName) && StringUtils.isBlank(optionValue);\n     }\n \n \n-    /*\n+    /**\n      * 判断当前动作是否需要展示某个Name的值\n      */\n     private boolean isShowName() {\n         return !StringUtils.isBlank(optionName) && StringUtils.isBlank(optionValue);\n     }\n \n-    private Collection<Field> findOptions(Matcher optionNameMatcher) {\n+    private Collection<Field> findOptionFields(Matcher<String> optionNameMatcher) {\n         final Collection<Field> matchFields = new ArrayList<Field>();\n         for (final Field optionField : FieldUtils.getAllFields(GlobalOptions.class)) {\n-            if (!optionField.isAnnotationPresent(Option.class)) {\n-                continue;\n+            if (isMatchOptionAnnotation(optionField, optionNameMatcher)) {\n+                matchFields.add(optionField);\n             }\n+        }\n+        return matchFields;\n+    }\n \n-            final Option optionAnnotation = optionField.getAnnotation(Option.class);\n-            if (optionAnnotation != null\n-                    && !optionNameMatcher.matching(optionAnnotation.name())) {\n-                continue;\n+    private Collection<String> findOptionNames(Matcher<String> optionNameMatcher) {\n+        final Collection<String> matchOptionNames = new ArrayList<String>();\n+        for (final Field optionField : FieldUtils.getAllFields(GlobalOptions.class)) {\n+            if (isMatchOptionAnnotation(optionField, optionNameMatcher)) {\n+                final Option optionAnnotation = optionField.getAnnotation(Option.class);\n+                matchOptionNames.add(optionAnnotation.name());\n             }\n-            matchFields.add(optionField);\n         }\n-        return matchFields;\n+        return matchOptionNames;\n+    }\n+\n+    private boolean isMatchOptionAnnotation(Field optionField, Matcher<String> optionNameMatcher) {\n+        if (!optionField.isAnnotationPresent(Option.class)) {\n+            return false;\n+        }\n+        final Option optionAnnotation = optionField.getAnnotation(Option.class);\n+        return optionAnnotation != null && optionNameMatcher.matching(optionAnnotation.name());\n     }\n \n     private Element drawShowTable(Collection<Field> optionFields) throws IllegalAccessException {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -157,13 +157,13 @@ private Element renderConstructor(Constructor<?> constructor) {\n     public void complete(Completion completion) {\n         int argumentIndex = CompletionUtils.detectArgumentIndex(completion);\n \n-        if(argumentIndex == 1) {\n-            if(!CompletionUtils.completeClassName(completion)) {\n+        if (argumentIndex == 1) {\n+            if (!CompletionUtils.completeClassName(completion)) {\n                 super.complete(completion);\n             }\n             return;\n-        }else if(argumentIndex == 2) {\n-            if(!CompletionUtils.completeMethodName(completion)) {\n+        } else if (argumentIndex == 2) {\n+            if (!CompletionUtils.completeMethodName(completion)) {\n                 super.complete(completion);\n             }\n             return;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n@@ -1,27 +1,26 @@\n package com.taobao.arthas.core.util;\n \n import java.util.List;\n+\n import com.taobao.arthas.core.shell.cli.CliToken;\n \n /**\n  * tokenizer helper\n- *  \n+ *\n  * @author gehui 2017-07-27 11:39:56\n  */\n public class TokenUtils {\n \n     /**\n      * find the first text token\n-     * @param tokens\n-     * @return\n      */\n     public static CliToken findFirstTextToken(List<CliToken> tokens) {\n-        if(tokens==null || tokens.isEmpty()){\n+        if (tokens == null || tokens.isEmpty()) {\n             return null;\n         }\n         CliToken first = null;\n         for (CliToken token : tokens) {\n-            if (token!=null && token.isText()) {\n+            if (token != null && token.isText()) {\n                 first = token;\n                 break;\n             }\n@@ -31,17 +30,15 @@ public static CliToken findFirstTextToken(List<CliToken> tokens) {\n \n     /**\n      * find the last text token\n-     * @param tokens\n-     * @return\n      */\n     public static CliToken findLastTextToken(List<CliToken> tokens) {\n-        if(tokens==null || tokens.isEmpty()){\n+        if (tokens == null || tokens.isEmpty()) {\n             return null;\n         }\n         //#165\n         for (int i = tokens.size() - 1; i >= 0; i--) {\n             CliToken token = tokens.get(i);\n-            if (token!=null && token.isText()) {\n+            if (token != null && token.isText()) {\n                 return token;\n             }\n         }\n@@ -50,16 +47,14 @@ public static CliToken findLastTextToken(List<CliToken> tokens) {\n \n     /**\n      * find the second text token's text\n-     * @param tokens\n-     * @return\n      */\n     public static String findSecondTokenText(List<CliToken> tokens) {\n-        if(tokens==null || tokens.isEmpty()){\n+        if (tokens == null || tokens.isEmpty()) {\n             return null;\n         }\n         boolean first = true;\n         for (CliToken token : tokens) {\n-            if (token!=null && token.isText()) {\n+            if (token != null && token.isText()) {\n                 if (first) {\n                     first = false;\n                 } else {\n@@ -69,4 +64,12 @@ public static String findSecondTokenText(List<CliToken> tokens) {\n         }\n         return null;\n     }\n+\n+    public static CliToken getLast(List<CliToken> tokens){\n+        if (tokens == null || tokens.isEmpty()) {\n+            return null;\n+        } else {\n+            return tokens.get(tokens.size() -1);\n+        }\n+    }\n }",
    "output": "options command support complete options-name (#612)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n@@ -43,7 +43,7 @@ public List<CliToken> lineTokens() {\n \n     @Override\n     public void complete(List<String> candidates) {\n-        String lastToken = tokens.get(tokens.size() - 1).value();\n+        String lastToken = tokens.isEmpty() ? null : tokens.get(tokens.size() - 1).value();\n         if(StringUtils.isBlank(lastToken)) {\n             lastToken = \"\";\n         }",
    "output": "fix CompletionAdaptor index out of bounds when the token is empty (#610)"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -100,7 +100,7 @@ private static synchronized void main(String args, final Instrumentation inst) {\n             args = decodeArg(args);\n             int index = args.indexOf(';');\n             String agentJar = args.substring(0, index);\n-            final String agentArgs = args.substring(index, args.length());\n+            final String agentArgs = args.substring(index);\n \n             File agentJarFile = new File(agentJar);\n             if (!agentJarFile.exists()) {\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -76,7 +76,7 @@ public class Bootstrap {\n      * <pre>\n      * The directory contains arthas-core.jar/arthas-client.jar/arthas-spy.jar.\n      * 1. When use-version is not empty, try to find arthas home under ~/.arthas/lib\n-     * 2. Try set the directory where arthas-boot.jar is located to arhtas home\n+     * 2. Try set the directory where arthas-boot.jar is located to arthas home\n      * 3. Try to download from maven repo\n      * </pre>\n      */\n@@ -524,7 +524,7 @@ private static List<String> listNames(File dir) {\n     private static void verifyArthasHome(String arthasHome) {\n         File home = new File(arthasHome);\n         if (home.isDirectory()) {\n-            String fileList[] = { \"arthas-core.jar\", \"arthas-agent.jar\", \"arthas-spy.jar\" };\n+            String[] fileList = { \"arthas-core.jar\", \"arthas-agent.jar\", \"arthas-spy.jar\" };\n \n             for (String fileName : fileList) {\n                 if (!new File(home, fileName).exists()) {",
    "output": "Fix typo (#582)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -6,7 +6,6 @@\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.net.URLClassLoader;\n-import java.net.URLDecoder;\n import java.security.CodeSource;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -339,13 +338,12 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (arthasHomeDir == null) {\n             CodeSource codeSource = Bootstrap.class.getProtectionDomain().getCodeSource();\n             if (codeSource != null) {\n-                String bootJarPath = codeSource.getLocation().getFile();\n                 try {\n-                    //convert unicode path to normal path\n-                    bootJarPath = URLDecoder.decode(bootJarPath, \"utf-8\");\n-                    verifyArthasHome(new File(bootJarPath).getParent());\n-                    arthasHomeDir = new File(bootJarPath).getParentFile();\n-                } catch (Exception e) {\n+                    // https://stackoverflow.com/a/17870390\n+                    File bootJarPath = new File(codeSource.getLocation().toURI().getSchemeSpecificPart());\n+                    verifyArthasHome(bootJarPath.getParent());\n+                    arthasHomeDir = bootJarPath.getParentFile();\n+                } catch (Throwable e) {\n                     // ignore\n                 }\n ",
    "output": "polish \"support windows unicode file path\" #574"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -5,6 +5,7 @@\n import java.lang.instrument.Instrumentation;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLDecoder;\n import java.util.jar.JarFile;\n \n /**\n@@ -92,10 +93,11 @@ private static void initSpy(ClassLoader classLoader) throws ClassNotFoundExcepti\n         Spy.initForAgentLauncher(classLoader, onBefore, onReturn, onThrows, beforeInvoke, afterInvoke, throwInvoke, reset);\n     }\n \n-    private static synchronized void main(final String args, final Instrumentation inst) {\n+    private static synchronized void main(String args, final Instrumentation inst) {\n         try {\n             ps.println(\"Arthas server agent start...\");\n             // 传递的args参数分两个部分:agentJar路径和agentArgs, 分别是Agent的JAR包路径和期望传递到服务端的参数\n+            args = decodeArg(args);\n             int index = args.indexOf(';');\n             String agentJar = args.substring(0, index);\n             final String agentArgs = args.substring(index, args.length());\n@@ -172,4 +174,12 @@ private static void bind(Instrumentation inst, ClassLoader agentLoader, String a\n         }\n         ps.println(\"Arthas server already bind.\");\n     }\n+\n+    private static String decodeArg(String arg) {\n+        try {\n+            return URLDecoder.decode(arg, \"utf-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            return arg;\n+        }\n+    }\n }\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -6,6 +6,7 @@\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.net.URLDecoder;\n import java.security.CodeSource;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -340,6 +341,8 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             if (codeSource != null) {\n                 String bootJarPath = codeSource.getLocation().getFile();\n                 try {\n+                    //convert unicode path to normal path\n+                    bootJarPath = URLDecoder.decode(bootJarPath, \"utf-8\");\n                     verifyArthasHome(new File(bootJarPath).getParent());\n                     arthasHomeDir = new File(bootJarPath).getParentFile();\n                 } catch (Exception e) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -11,6 +11,8 @@\n import com.taobao.middleware.cli.Option;\n import com.taobao.middleware.cli.TypedOption;\n \n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.util.Arrays;\n import java.util.Properties;\n \n@@ -85,15 +87,26 @@ private void attachAgent(Configure configure) throws Exception {\n                 }\n             }\n \n-            virtualMachine.loadAgent(configure.getArthasAgent(),\n-                            configure.getArthasCore() + \";\" + configure.toString());\n+            String arthasAgentPath = configure.getArthasAgent();\n+            //convert jar path to unicode string\n+            configure.setArthasAgent(encodeArg(arthasAgentPath));\n+            configure.setArthasCore(encodeArg(configure.getArthasCore()));\n+            virtualMachine.loadAgent(arthasAgentPath,\n+                    configure.getArthasCore() + \";\" + configure.toString());\n         } finally {\n             if (null != virtualMachine) {\n                 virtualMachine.detach();\n             }\n         }\n     }\n \n+    private static String encodeArg(String arg) {\n+        try {\n+            return URLEncoder.encode(arg, \"utf-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            return arg;\n+        }\n+    }\n \n     public static void main(String[] args) {\n         try {",
    "output": "support windows unicode file path. #571"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Decompiler.java\n@@ -85,14 +85,16 @@ public static String decompile(String classFilePath, String methodName) {\n             path = classFileSource.adjustInputPath(path);\n \n             AnalysisType type = (AnalysisType) options.getOption(OptionsImpl.ANALYSE_AS);\n-            if (type == null)\n+            if (type == null) {\n                 type = dcCommonState.detectClsJar(path);\n+            }\n \n             if (type == AnalysisType.JAR) {\n                 // doJar(dcCommonState, path, dumperFactory);\n             }\n-            if (type == AnalysisType.CLASS)\n+            if (type == AnalysisType.CLASS) {\n                 result.append(doClass(dcCommonState, path, skipInnerClass, dumperFactory));\n+            }\n         }\n         return result.toString();\n     }\n@@ -105,8 +107,9 @@ public static String doClass(DCCommonState dcCommonState, String path, boolean s\n         Dumper d = new ToStringDumper();\n         try {\n             ClassFile c = dcCommonState.getClassFileMaybePath(path);\n-            if ((skipInnerClass) && (c.isInnerClass()))\n+            if ((skipInnerClass) && (c.isInnerClass())) {\n                 return \"\";\n+            }\n             dcCommonState.configureWith(c);\n             dumperFactory.getProgressDumper().analysingType(c.getClassType());\n             try {\n@@ -132,12 +135,14 @@ public static String doClass(DCCommonState dcCommonState, String path, boolean s\n             // collectingDumper.getTypeUsageInformation(), illegalIdentifierDump);\n \n             String methname = (String) options.getOption(OptionsImpl.METHODNAME);\n-            if (methname == null)\n+            if (methname == null) {\n                 c.dump(d);\n+            }\n             else {\n                 try {\n-                    for (Method method : c.getMethodByName(methname))\n+                    for (Method method : c.getMethodByName(methname)) {\n                         method.dump(d, true);\n+                    }\n                 } catch (NoSuchMethodException e) {\n                     throw new IllegalArgumentException(\"No such method '\" + methname + \"'.\");\n                 }\n@@ -146,18 +151,21 @@ public static String doClass(DCCommonState dcCommonState, String path, boolean s\n             result.append(d.toString());\n         } catch (ConfusedCFRException e) {\n             result.append(e.toString()).append(\"\\n\");\n-            for (Object x : e.getStackTrace())\n+            for (Object x : e.getStackTrace()) {\n                 result.append(x).append(\"\\n\");\n+            }\n         } catch (CannotLoadClassException e) {\n             result.append(\"Can't load the class specified:\").append(\"\\n\");\n             result.append(e.toString()).append(\"\\n\");\n         } catch (RuntimeException e) {\n             result.append(e.toString()).append(\"\\n\");\n-            for (Object x : e.getStackTrace())\n+            for (Object x : e.getStackTrace()) {\n                 result.append(x).append(\"\\n\");\n+            }\n         } finally {\n-            if (d != null)\n+            if (d != null) {\n                 d.close();\n+            }\n         }\n         return result.toString();\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java\n@@ -191,12 +191,13 @@ public static boolean serverListening(String host, int port) {\n         } catch (Exception e) {\n             return false;\n         } finally {\n-            if (s != null)\n+            if (s != null) {\n                 try {\n                     s.close();\n                 } catch (Exception e) {\n                     // ignore\n                 }\n+            }\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -871,7 +871,9 @@ public static String stripEnd(final String str, final String stripChars) {\n     }\n \n     public static String classLoaderHash(Class<?> clazz) {\n-        if (clazz == null || clazz.getClassLoader() == null) return \"null\";\n+        if (clazz == null || clazz.getClassLoader() == null) {\n+            return \"null\";\n+        }\n         return Integer.toHexString(clazz.getClassLoader().hashCode());\n     }\n \n@@ -881,7 +883,9 @@ public static String classLoaderHash(Class<?> clazz) {\n      * @return  human readable format\n      */\n     public static String humanReadableByteCount(long bytes) {\n-        if (bytes < UNIT) return bytes + \" B\";\n+        if (bytes < UNIT) {\n+            return bytes + \" B\";\n+        }\n         int exp = (int) (Math.log(bytes) / Math.log(UNIT));\n         String pre =  STRING_UNITS.charAt(exp-1) +  \"i\";\n         return String.format(\"%.2f %sB\", bytes / Math.pow(UNIT, exp), pre);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n@@ -136,7 +136,9 @@ public Boolean call() throws Exception {\n     };\n \n     public static void setDetector(final Callable<Boolean> detector) {\n-        if (detector == null) throw new IllegalArgumentException();\n+        if (detector == null) {\n+            throw new IllegalArgumentException();\n+        }\n         Ansi.detector = detector;\n     }\n \n@@ -698,8 +700,9 @@ private Ansi appendEscapeSequence(char command, Object... options) {\n     }\n \n     private void flushAttributes() {\n-        if (attributeOptions.isEmpty())\n+        if (attributeOptions.isEmpty()) {\n             return;\n+        }\n         if (attributeOptions.size() == 1 && attributeOptions.get(0) == 0) {\n             builder.append(FIRST_ESC_CHAR);\n             builder.append(SECOND_ESC_CHAR);",
    "output": "polish #568"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n@@ -50,6 +50,8 @@ public String apply(String data) {\n \n     @Override\n     public void close() {\n-        out.close();\n+        if (out != null) {\n+            out.close();\n+        }\n     }\n }",
    "output": "fix RedirectHandler NullPointerException, when save-result option is true. close #517"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -120,6 +120,12 @@ public void process(CommandProcess process) {\n         }\n \n         try {\n+            if (definitions.isEmpty()) {\n+                process.write(\"These classes are not found in the JVM and may not be loaded: \" + bytesMap.keySet()\n+                                + \"\\n\");\n+                process.end();\n+                return;\n+            }\n             inst.redefineClasses(definitions.toArray(new ClassDefinition[0]));\n             process.write(\"redefine success, size: \" + definitions.size() + \"\\n\");\n         } catch (Exception e) {",
    "output": "redefine command check class if loaded."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -101,7 +101,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n \n         List<String> lines = ExecutingCommand.runNative(command);\n \n-        int currentPid = Integer.parseInt(PidUtils.getPid());\n+        int currentPid = Integer.parseInt(PidUtils.currentPid());\n         for (String line : lines) {\n             String[] strings = line.trim().split(\"\\\\s+\");\n             if (strings.length < 1) {",
    "output": "fix typo: currentPid (#525)"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -3,7 +3,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.lang.management.ManagementFactory;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -18,34 +17,16 @@\n import com.taobao.arthas.common.ExecutingCommand;\n import com.taobao.arthas.common.IOUtils;\n import com.taobao.arthas.common.JavaVersionUtils;\n+import com.taobao.arthas.common.PidUtils;\n \n /**\n  *\n  * @author hengyunabc 2018-11-06\n  *\n  */\n public class ProcessUtils {\n-    private static String PID = \"-1\";\n     private static String FOUND_JAVA_HOME = null;\n \n-    static {\n-        // https://stackoverflow.com/a/7690178\n-        String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n-        int index = jvmName.indexOf('@');\n-\n-        if (index > 0) {\n-            try {\n-                PID = Long.toString(Long.parseLong(jvmName.substring(0, index)));\n-            } catch (Throwable e) {\n-                // ignore\n-            }\n-        }\n-    }\n-\n-    public static String getPid() {\n-        return PID;\n-    }\n-\n     @SuppressWarnings(\"resource\")\n     public static int select(boolean v, int telnetPortPid) throws InputMismatchException {\n         Map<Integer, String> processMap = listProcessByJps(v);\n@@ -120,7 +101,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n \n         List<String> lines = ExecutingCommand.runNative(command);\n \n-        int currentPid = Integer.parseInt(ProcessUtils.getPid());\n+        int currentPid = Integer.parseInt(PidUtils.getPid());\n         for (String line : lines) {\n             String[] strings = line.trim().split(\"\\\\s+\");\n             if (strings.length < 1) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/PidUtils.java b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PidUtils.java\n@@ -0,0 +1,30 @@\n+package com.taobao.arthas.common;\n+\n+import java.lang.management.ManagementFactory;\n+\n+/**\n+ *\n+ * @author hengyunabc 2019-02-16\n+ *\n+ */\n+public class PidUtils {\n+    private static String PID = \"-1\";\n+\n+    static {\n+        // https://stackoverflow.com/a/7690178\n+        String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n+        int index = jvmName.indexOf('@');\n+\n+        if (index > 0) {\n+            try {\n+                PID = Long.toString(Long.parseLong(jvmName.substring(0, index)));\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n+    public static String currentPid() {\n+        return PID;\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -20,7 +20,6 @@\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n-import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n \n@@ -114,8 +113,6 @@ public ShellImpl init() {\n \n         if (welcome != null && welcome.length() > 0) {\n             term.write(welcome + \"\\n\");\n-            term.write(\"pid: \" + session.get(Session.PID) + \"\\n\");\n-            term.write(\"time: \" + DateUtils.getCurrentDate() + \"\\n\\n\");\n         }\n         return this;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.util;\n \n+import com.taobao.arthas.common.PidUtils;\n import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.middleware.logger.Logger;\n import com.taobao.text.Color;\n@@ -19,6 +20,7 @@ public class ArthasBanner {\n     private static final String CREDIT_LOCATION = \"/com/taobao/arthas/core/res/thanks.txt\";\n     private static final String VERSION_LOCATION = \"/com/taobao/arthas/core/res/version\";\n     private static final String WIKI = \"https://alibaba.github.io/arthas\";\n+    private static final String TUTORIALS = \"https://alibaba.github.io/arthas/arthas-tutorials\";\n \n     private static String LOGO = \"Welcome to Arthas\";\n     private static String VERSION = \"unknown\";\n@@ -70,6 +72,10 @@ public static String wiki() {\n         return WIKI;\n     }\n \n+    public static String tutorials() {\n+        return TUTORIALS;\n+    }\n+\n     public static String credit() {\n         return THANKS;\n     }\n@@ -88,6 +94,13 @@ public static String plainTextLogo() {\n \n     public static String welcome() {\n         logger.info(\"arthas version: \" + version());\n-        return logo() + \"\\n\" + \"wiki: \" + wiki() + \"\\n\" + \"version: \" + version();\n+        TableElement table = new TableElement().rightCellPadding(1)\n+                        .row(\"wiki\", wiki())\n+                        .row(\"tutorials\", tutorials())\n+                        .row(\"version\", version())\n+                        .row(\"pid\", PidUtils.currentPid())\n+                        .row(\"time\", DateUtils.getCurrentDate());\n+\n+        return logo() + \"\\n\" + RenderUtil.render(table);\n     }\n }",
    "output": "add tutorials link"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -44,7 +44,7 @@\n                 + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n                 + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --use-version 3.0.5\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.1.0\\n\"\n                 + \"  java -jar arthas-boot.jar --versions\\n\"\n                 + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\" + \"  java -jar arthas-boot.jar --attach-only\\n\"\n                 + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\" + \"WIKI:\\n\"",
    "output": "update version in files"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -67,6 +67,9 @@ public class Bootstrap {\n      */\n     private Long sessionTimeout;\n \n+    private Integer height = null;\n+    private Integer width = null;\n+\n     private boolean verbose = false;\n \n     /**\n@@ -188,6 +191,18 @@ public void setBatchFile(String batchFile) {\n         this.batchFile = batchFile;\n     }\n \n+    @Option(longName = \"height\")\n+    @Description(\"arthas-client terminal height\")\n+    public void setHeight(int height) {\n+        this.height = height;\n+    }\n+\n+    @Option(longName = \"width\")\n+    @Description(\"arthas-client terminal width\")\n+    public void setWidth(int width) {\n+        this.width = width;\n+    }\n+\n     @Option(shortName = \"v\", longName = \"verbose\", flag = true)\n     @Description(\"Verbose, print debug info.\")\n     public void setVerbose(boolean verbose) {\n@@ -448,6 +463,14 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             telnetArgs.add(\"-f\");\n             telnetArgs.add(bootstrap.getBatchFile());\n         }\n+        if (bootstrap.getHeight() != null) {\n+            telnetArgs.add(\"--height\");\n+            telnetArgs.add(\"\" + bootstrap.getHeight());\n+        }\n+        if (bootstrap.getWidth() != null) {\n+            telnetArgs.add(\"--width\");\n+            telnetArgs.add(\"\" + bootstrap.getWidth());\n+        }\n \n         // telnet port ,ip\n         telnetArgs.add(bootstrap.getTargetIp());\n@@ -581,4 +604,12 @@ public boolean isVerbose() {\n     public boolean isVersions() {\n         return versions;\n     }\n+\n+    public Integer getHeight() {\n+        return height;\n+    }\n+\n+    public Integer getWidth() {\n+        return width;\n+    }\n }",
    "output": "as.sh/arthas-boot support width/height options. close #422"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -271,7 +271,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         // select pid\n         if (pid < 0) {\n             try {\n-                pid = ProcessUtils.select(bootstrap.isVerbose());\n+                pid = ProcessUtils.select(bootstrap.isVerbose(), telnetPortPid);\n             } catch (InputMismatchException e) {\n                 System.out.println(\"Please input an integer to select pid.\");\n                 System.exit(1);\n@@ -285,18 +285,18 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (telnetPortPid > 0 && pid != telnetPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getTelnetPort());\n-            AnsiLog.error(\"If you still want to attach target process {}, Try to set a different telnet port by using --telnet-port argument.\",\n-                            pid);\n-            AnsiLog.error(\"Or try to shutdown the process {} using the telnet port first.\", telnetPortPid);\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first.\",\n+                            telnetPortPid);\n+            AnsiLog.error(\"2. Or try to use different telnet port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port -1\");\n             System.exit(1);\n         }\n \n         if (httpPortPid > 0 && pid != httpPortPid) {\n             AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootstrap.getHttpPort());\n-            AnsiLog.error(\"If you still want to attach target process {}, Try to set a different http port by using --http-port argument.\",\n-                            pid);\n-            AnsiLog.error(\"Or try to shutdown the process {} using the http port first.\", httpPortPid);\n+            AnsiLog.error(\"1. Try to restart arthas-boot, select process {}, shutdown it first.\",\n+                            httpPortPid);\n+            AnsiLog.error(\"2. Or try to use different http port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port 9999\", httpPortPid);\n             System.exit(1);\n         }\n \n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -47,8 +47,17 @@ public static String getPid() {\n     }\n \n     @SuppressWarnings(\"resource\")\n-    public static int select(boolean v) throws InputMismatchException {\n+    public static int select(boolean v, int telnetPortPid) throws InputMismatchException {\n         Map<Integer, String> processMap = listProcessByJps(v);\n+        // Put the port that is already listening at the first\n+        if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n+            String telnetPortProcess = processMap.get(telnetPortPid);\n+            processMap.remove(telnetPortPid);\n+            Map<Integer, String> newProcessMap = new LinkedHashMap<Integer, String>();\n+            newProcessMap.put(telnetPortPid, telnetPortProcess);\n+            newProcessMap.putAll(processMap);\n+            processMap = newProcessMap;\n+        }\n \n         if (processMap.isEmpty()) {\n             AnsiLog.info(\"Can not find java process. Try to pass <pid> in command line.\");",
    "output": "better way to select process and better error info. close #445"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/Constants.java b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n@@ -31,6 +31,7 @@ public interface Constants {\n                                 \"  params\\n\" +\n                                 \"  params[0]\\n\" +\n                                 \"  'params[0]+params[1]'\\n\" +\n+                                \"  '{params[0], target, returnObj}'\\n\" +\n                                 \"  returnObj\\n\" +\n                                 \"  throwExp\\n\" +\n                                 \"  target\\n\" +\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -20,6 +20,7 @@\n @Description(Constants.EXPRESS_DESCRIPTION + \"\\nExamples:\\n\" +\n         \"  watch -b org.apache.commons.lang.StringUtils isBlank params\\n\" +\n         \"  watch -f org.apache.commons.lang.StringUtils isBlank returnObj\\n\" +\n+        \"  watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj}' -x 2\\n\" +\n         \"  watch -bf *StringUtils isBlank params\\n\" +\n         \"  watch *StringUtils isBlank params[0]\\n\" +\n         \"  watch *StringUtils isBlank params[0] params[0].length==1\\n\" +",
    "output": "update watch command description."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -1,12 +1,12 @@\n package com.taobao.arthas.core.command.monitor200;\n \n+import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.AdviceListener;\n+import com.taobao.arthas.core.advisor.ArthasMethod;\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.command.express.ExpressFactory;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.arthas.core.advisor.Advice;\n-import com.taobao.arthas.core.advisor.ArthasMethod;\n import com.taobao.arthas.core.shell.handlers.command.CommandInterruptHandler;\n import com.taobao.arthas.core.shell.handlers.shell.QExitHandler;\n import com.taobao.arthas.core.util.LogUtil;\n@@ -15,11 +15,11 @@\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.arthas.core.util.matcher.Matcher;\n import com.taobao.arthas.core.view.ObjectView;\n-import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n@@ -44,7 +44,8 @@\n         \"  tt -l\\n\" +\n         \"  tt -i 1000\\n\" +\n         \"  tt -i 1000 -w params[0]\\n\" +\n-        \"  tt -i 1000 -p\\n\" +\n+        \"  tt -i 1000 -p \\n\" +\n+        \"  tt -i 1000 -p --replay-times 3 --replay-interval 3000\\n\" +\n         \"  tt --delete-all\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"tt\")\n public class TimeTunnelCommand extends EnhancerCommand {\n@@ -75,6 +76,8 @@ public class TimeTunnelCommand extends EnhancerCommand {\n     private boolean isDelete = false;\n     private boolean isRegEx = false;\n     private int numberOfLimit = 100;\n+    private int replayTimes = 1;\n+    private long replayInterval = 1000L;\n \n     @Argument(index = 0, argName = \"class-pattern\", required = false)\n     @Description(\"Path and classname of Pattern Matching\")\n@@ -167,6 +170,20 @@ public void setNumberOfLimit(int numberOfLimit) {\n         this.numberOfLimit = numberOfLimit;\n     }\n \n+\n+    @Option(longName = \"replay-times\")\n+    @Description(\"execution times when play tt\")\n+    public void setReplayTimes(int replayTimes) {\n+        this.replayTimes = replayTimes;\n+    }\n+\n+    @Option(longName = \"replay-interval\")\n+    @Description(\"replay interval  for  play tt with option r greater than 1\")\n+    public void setReplayInterval(int replayInterval) {\n+        this.replayInterval = replayInterval;\n+    }\n+\n+\n     public boolean isRegEx() {\n         return isRegEx;\n     }\n@@ -188,6 +205,14 @@ public int getNumberOfLimit() {\n     }\n \n \n+    public int getReplayTimes() {\n+        return replayTimes;\n+    }\n+\n+    public long getReplayInterval() {\n+        return replayInterval;\n+    }\n+\n     private boolean hasWatchExpress() {\n         return !StringUtils.isEmpty(watchExpress);\n     }\n@@ -428,27 +453,40 @@ private void processPlay(CommandProcess process) {\n             String methodName = advice.getMethod().getName();\n             String objectAddress = advice.getTarget() == null ? \"NULL\" : \"0x\" + toHexString(advice.getTarget().hashCode());\n \n-            TableElement table = TimeTunnelTable.createDefaultTable();\n-            TimeTunnelTable.drawPlayHeader(className, methodName, objectAddress, index, table);\n-            TimeTunnelTable.drawParameters(advice, table, isNeedExpand(), expand);\n+\n \n             ArthasMethod method = advice.getMethod();\n+            method.setAccessible(true);\n             boolean accessible = advice.getMethod().isAccessible();\n-            try {\n-                method.setAccessible(true);\n-                Object returnObj = method.invoke(advice.getTarget(), advice.getParams());\n-                TimeTunnelTable.drawPlayResult(table, returnObj, isNeedExpand(), expand, sizeLimit);\n-            } catch (Throwable t) {\n-                TimeTunnelTable.drawPlayException(table, t, isNeedExpand(), expand);\n-            } finally {\n-                method.setAccessible(accessible);\n+            for (int i = 0; i < getReplayTimes(); i++) {\n+//              wait for the next execution\n+                if (i > 0) {\n+                    try {\n+                        Thread.sleep(getReplayInterval());\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                long beginTime = System.nanoTime();\n+                TableElement table = TimeTunnelTable.createDefaultTable();\n+                TimeTunnelTable.drawPlayHeader(className, methodName, objectAddress, index, table);\n+                TimeTunnelTable.drawParameters(advice, table, isNeedExpand(), expand);\n+\n+                try {\n+                    Object returnObj = method.invoke(advice.getTarget(), advice.getParams());\n+                    double cost = (System.nanoTime() - beginTime) / 1000000.0;\n+                    TimeTunnelTable.drawPlayResult(table, returnObj, isNeedExpand(), expand, sizeLimit, cost);\n+                } catch (Throwable t) {\n+                    TimeTunnelTable.drawPlayException(table, t, isNeedExpand(), expand);\n+                }\n+                process.write(RenderUtil.render(table, process.width()))\n+                        .write(format(\"Time fragment[%d] successfully replayed.\", index))\n+                        .write(\"\\n\");\n+                affect.rCnt(1);\n+                process.write(affect.toString()).write(\"\\n\");\n             }\n+            method.setAccessible(accessible);\n \n-            process.write(RenderUtil.render(table, process.width()))\n-                    .write(format(\"Time fragment[%d] successfully replayed.\", index))\n-                    .write(\"\\n\");\n-            affect.rCnt(1);\n-            process.write(affect.toString()).write(\"\\n\");\n         } finally {\n             process.end();\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelTable.java\n@@ -1,7 +1,7 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.advisor.Advice;\n+import com.taobao.arthas.core.command.express.ExpressException;\n import com.taobao.arthas.core.command.express.ExpressFactory;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.view.ObjectView;\n@@ -179,10 +179,11 @@ static TableElement drawPlayHeader(String className, String methodName, String o\n     }\n \n     static void drawPlayResult(TableElement table, Object returnObj, boolean isNeedExpand, int expandLevel,\n-                               int sizeLimit) {\n+                               int sizeLimit, double cost) {\n         // 执行成功:输出成功状态\n         table.row(\"IS-RETURN\", \"\" + true);\n         table.row(\"IS-EXCEPTION\", \"\" + false);\n+        table.row(\"COST(ms)\", \"\" + cost);\n \n         // 执行成功:输出成功结果\n         if (isNeedExpand) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -158,7 +158,6 @@ public synchronized static ArthasBootstrap getInstance(int javaPid, Instrumentat\n         }\n         return arthasBootstrap;\n     }\n-\n     /**\n      * @return ArthasServer单例\n      */",
    "output": "tt command support cost time/--replay-times/--replay-interval (#498)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -1,18 +1,26 @@\n package com.taobao.arthas.core.command.klass100;\n \n+import static com.taobao.text.Decoration.bold;\n+import static com.taobao.text.ui.Element.label;\n+import static java.lang.String.format;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+\n import com.taobao.arthas.core.command.Constants;\n-import com.taobao.arthas.core.shell.cli.CliToken;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n-import com.taobao.arthas.core.util.matcher.Matcher;\n-import com.taobao.arthas.core.util.matcher.RegexMatcher;\n-import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.TypeRenderUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n+import com.taobao.arthas.core.util.matcher.Matcher;\n+import com.taobao.arthas.core.util.matcher.RegexMatcher;\n+import com.taobao.arthas.core.util.matcher.WildcardMatcher;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n@@ -22,21 +30,11 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.lang.instrument.Instrumentation;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static com.taobao.text.Decoration.bold;\n-import static com.taobao.text.ui.Element.label;\n-import static java.lang.String.format;\n-\n /**\n  * 展示方法信息\n  *\n  * @author vlinux\n+ * @author hengyunabc 2019-02-13\n  */\n @Name(\"sm\")\n @Summary(\"Search the method of classes loaded by JVM\")\n@@ -87,38 +85,31 @@ public void process(CommandProcess process) {\n         Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx);\n \n         for (Class<?> clazz : matchedClasses) {\n-            Set<String> methodNames = new HashSet<String>();\n             for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n+                String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(constructor).toString();\n                 if (!methodNameMatcher.matching(\"<init>\")) {\n                     continue;\n                 }\n \n                 if (isDetail) {\n                     process.write(RenderUtil.render(renderConstructor(constructor), process.width()) + \"\\n\");\n                 } else {\n-                    if (methodNames.contains(\"<init>\")) {\n-                        continue;\n-                    }\n-                    methodNames.add(\"<init>\");\n-                    String line = format(\"%s->%s%n\", clazz.getName(), \"<init>\");\n+                    String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n                     process.write(line);\n                 }\n                 affect.rCnt(1);\n             }\n \n             for (Method method : clazz.getDeclaredMethods()) {\n+                String methodNameWithDescriptor = org.objectweb.asm.commons.Method.getMethod(method).toString();\n                 if (!methodNameMatcher.matching(method.getName())) {\n                     continue;\n                 }\n \n                 if (isDetail) {\n                     process.write(RenderUtil.render(renderMethod(method), process.width()) + \"\\n\");\n                 } else {\n-                    if (methodNames.contains(method.getName())) {\n-                        continue;\n-                    }\n-                    methodNames.add(method.getName());\n-                    String line = format(\"%s->%s%n\", clazz.getName(), method.getName());\n+                    String line = format(\"%s %s%n\", clazz.getName(), methodNameWithDescriptor);\n                     process.write(line);\n                 }\n                 affect.rCnt(1);",
    "output": "sm command print method with Descriptor. close #504"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java\n@@ -6,6 +6,7 @@\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.handlers.Handler;\n+import com.taobao.arthas.core.shell.handlers.shell.QExitHandler;\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.NetUtils;\n@@ -63,7 +64,6 @@ public class DashboardCommand extends AnnotatedCommand {\n \n     private volatile long count = 0;\n     private volatile Timer timer;\n-    private Boolean running = false;\n \n     @Option(shortName = \"n\", longName = \"number-of-execution\")\n     @Description(\"The number of times this command will be executed.\")\n@@ -113,9 +113,11 @@ public void handle(Void event) {\n         process.resumeHandler(restartHandler);\n         process.endHandler(stopHandler);\n \n+        // q exit support\n+        process.stdinHandler(new QExitHandler(process));\n+\n         // start the timer\n         timer.scheduleAtFixedRate(new DashboardTimerTask(process), 0, getInterval());\n-        running = true;\n     }\n \n     public synchronized void stop() {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -13,6 +13,7 @@\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.handlers.command.CommandInterruptHandler;\n+import com.taobao.arthas.core.shell.handlers.shell.QExitHandler;\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.LogUtil;\n@@ -58,6 +59,8 @@ public abstract class EnhancerCommand extends AnnotatedCommand {\n     public void process(final CommandProcess process) {\n         // ctrl-C support\n         process.interruptHandler(new CommandInterruptHandler(process));\n+        // q exit support\n+        process.stdinHandler(new QExitHandler(process));\n \n         // start to enhance\n         enhance(process);\n@@ -125,7 +128,7 @@ protected void enhance(CommandProcess process) {\n                 // 注册通知监听器\n                 process.register(lock, listener);\n                 if (process.isForeground()) {\n-                    process.echoTips(Constants.ABORT_MSG + \"\\n\");\n+                    process.echoTips(Constants.Q_OR_CTRL_C_ABORT_MSG + \"\\n\");\n                 }\n             }\n \n@@ -148,7 +151,7 @@ private static void warn(CommandProcess process, String message) {\n         logger.error(null, message);\n         process.write(\"cannot operate the current command, pls. check arthas.log\\n\");\n         if (process.isForeground()) {\n-            process.echoTips(Constants.ABORT_MSG + \"\\n\");\n+            process.echoTips(Constants.Q_OR_CTRL_C_ABORT_MSG + \"\\n\");\n         }\n     }\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -8,6 +8,7 @@\n import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n import com.taobao.arthas.core.shell.handlers.command.CommandInterruptHandler;\n+import com.taobao.arthas.core.shell.handlers.shell.QExitHandler;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.StringUtils;\n@@ -241,6 +242,8 @@ public void process(final CommandProcess process) {\n \n         // ctrl-C support\n         process.interruptHandler(new CommandInterruptHandler(process));\n+        // q exit support\n+        process.stdinHandler(new QExitHandler(process));\n \n         if (isTimeTunnel) {\n             enhance(process);\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/QExitHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/QExitHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/QExitHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/QExitHandler.java\n@@ -0,0 +1,24 @@\n+package com.taobao.arthas.core.shell.handlers.shell;\n+\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.shell.handlers.Handler;\n+\n+/**\n+ *\n+ * @author hengyunabc 2019-02-09\n+ *\n+ */\n+public class QExitHandler implements Handler<String> {\n+    private CommandProcess process;\n+\n+    public QExitHandler(CommandProcess process) {\n+        this.process = process;\n+    }\n+\n+    @Override\n+    public void handle(String event) {\n+        if (\"q\".equalsIgnoreCase(event)) {\n+            process.end();\n+        }\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Constants.java b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n@@ -17,7 +17,7 @@ public interface Constants {\n     /**\n      * 中断提示\n      */\n-    String ABORT_MSG = \"Press Ctrl+C to abort.\";\n+    String Q_OR_CTRL_C_ABORT_MSG = \"Press Q or Ctrl+C to abort.\";\n \n     /**\n      * 空字符串",
    "output": "dashboard/watch/monitor/tt/stack/trace support press Q to exit. close #410"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -135,7 +135,7 @@ public void setHttpPort(int httpPort) {\n     }\n \n     @Option(longName = \"session-timeout\")\n-    @Description(\"The session timeout seconds, default 300\")\n+    @Description(\"The session timeout seconds, default 1800 (30min)\")\n     public void setSessionTimeout(Long sessionTimeout) {\n         this.sessionTimeout = sessionTimeout;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/ShellServerOptions.java b/core/src/main/java/com/taobao/arthas/core/shell/ShellServerOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/ShellServerOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/ShellServerOptions.java\n@@ -19,7 +19,7 @@ public class ShellServerOptions {\n     /**\n      * Default time, in ms, that a shell session lasts for without being accessed before expiring.\n      */\n-    public static final long DEFAULT_SESSION_TIMEOUT = 5 * 60 * 1000; // 5 minutes\n+    public static final long DEFAULT_SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n \n     /**\n      * Default time, in ms, that a server waits for a client to connect",
    "output": "change default session timeout to 30min. close #342"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -2,6 +2,8 @@\n \n import com.taobao.arthas.core.advisor.Enhancer;\n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ClassUtils;\n@@ -176,4 +178,10 @@ private void processNoMatch(CommandProcess process) {\n         process.write(\"No class found for: \" + classPattern + \"\\n\");\n     }\n \n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeClassName(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n }",
    "output": "jad support completion. #323"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n@@ -4,6 +4,7 @@\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.session.Session;\n+import com.taobao.arthas.core.util.StringUtils;\n \n import java.util.LinkedList;\n import java.util.List;\n@@ -42,15 +43,18 @@ public List<CliToken> lineTokens() {\n \n     @Override\n     public void complete(List<String> candidates) {\n+        String lastToken = tokens.get(tokens.size() - 1).value();\n+        if(StringUtils.isBlank(lastToken)) {\n+            lastToken = \"\";\n+        }\n         if (candidates.size() > 1) {\n             // complete common prefix\n             String commonPrefix = CompletionUtils.findLongestCommonPrefix(candidates);\n             if (commonPrefix.length() > 0) {\n-                CliToken lastToken = tokens.get(tokens.size() - 1);\n-                if (!commonPrefix.equals(lastToken.value())) {\n+                if (!commonPrefix.equals(lastToken)) {\n                     // only complete if the common prefix is longer than the last token\n-                    if (commonPrefix.length() > lastToken.value().length()) {\n-                        String strToComplete = commonPrefix.substring(lastToken.value().length());\n+                    if (commonPrefix.length() > lastToken.length()) {\n+                        String strToComplete = commonPrefix.substring(lastToken.length());\n                         completion.complete(io.termd.core.util.Helper.toCodePoints(strToComplete), false);\n                         return;\n                     }",
    "output": "fix CompletionAdaptor lose chars when the last token is blank."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -1,6 +1,9 @@\n package com.taobao.arthas.core.command.klass100;\n \n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.matcher.Matcher;\n@@ -23,6 +26,7 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n \n import static com.taobao.text.Decoration.bold;\n@@ -84,7 +88,7 @@ public void process(CommandProcess process) {\n \n         for (Class<?> clazz : matchedClasses) {\n             Set<String> methodNames = new HashSet<String>();\n-            for (Constructor constructor : clazz.getDeclaredConstructors()) {\n+            for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n                 if (!methodNameMatcher.matching(\"<init>\")) {\n                     continue;\n                 }\n@@ -146,7 +150,7 @@ private Element renderMethod(Method method) {\n         return table;\n     }\n \n-    private Element renderConstructor(Constructor constructor) {\n+    private Element renderConstructor(Constructor<?> constructor) {\n         TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);\n \n         table.row(label(\"declaring-class\").style(bold.bold()), label(constructor.getDeclaringClass().getName()))\n@@ -157,4 +161,23 @@ private Element renderConstructor(Constructor constructor) {\n              .row(label(\"exceptions\").style(bold.bold()), label(TypeRenderUtils.drawExceptions(constructor)));\n         return table;\n     }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        int argumentIndex = CompletionUtils.detectArgumentIndex(completion);\n+\n+        if(argumentIndex == 1) {\n+            if(!CompletionUtils.completeClassName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n+        }else if(argumentIndex == 2) {\n+            if(!CompletionUtils.completeMethodName(completion)) {\n+                super.complete(completion);\n+            }\n+            return;\n+        }\n+\n+        super.complete(completion);\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -2,6 +2,7 @@\n \n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.term.Tty;\n+import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.usage.StyledUsageFormatter;\n import com.taobao.middleware.cli.CLI;\n@@ -11,6 +12,7 @@\n \n import java.io.File;\n import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -54,15 +56,20 @@ public static void complete(Completion completion, Class<?> clazz) {\n      */\n     public static boolean complete(Completion completion, Collection<String> searchScope) {\n         List<CliToken> tokens = completion.lineTokens();\n-        CliToken lastToken = tokens.get(tokens.size() - 1);\n+        String lastToken = tokens.get(tokens.size() - 1).value();\n         List<String> candidates = new ArrayList<String>();\n+\n+        if (StringUtils.isBlank(lastToken)) {\n+            lastToken = \"\";\n+        }\n+\n         for (String name: searchScope) {\n-            if (\" \".equals(lastToken.value()) || name.startsWith(lastToken.value())) {\n+            if (name.startsWith(lastToken)) {\n                 candidates.add(name);\n             }\n         }\n         if (candidates.size() == 1) {\n-            completion.complete(candidates.get(0).substring(lastToken.value().length()), true);\n+            completion.complete(candidates.get(0).substring(lastToken.length()), true);\n             return true;\n         } else {\n             completion.complete(candidates);\n@@ -182,6 +189,81 @@ public static boolean completeClassName(Completion completion) {\n         return true;\n     }\n \n+    public static boolean completeMethodName(Completion completion) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        String lastToken = completion.lineTokens().get(tokens.size() - 1).value();\n+\n+        // retrieve the class name\n+        String className;\n+        if (StringUtils.isBlank(lastToken)) {\n+            // tokens = { \" \", \"CLASS_NAME\", \" \"}\n+            className = tokens.get(tokens.size() - 2).value();\n+        } else {\n+            // tokens = { \" \", \"CLASS_NAME\", \" \", \"PARTIAL_METHOD_NAME\"}\n+            className = tokens.get(tokens.size() - 3).value();\n+        }\n+\n+        Set<Class<?>> results = SearchUtils.searchClassOnly(completion.session().getInstrumentation(), className, 2);\n+        if (results.isEmpty() || results.size() > 1) {\n+            // no class found or multiple class found\n+            completion.complete(Collections.<String>emptyList());\n+            return true;\n+        }\n+\n+        Class<?> clazz = results.iterator().next();\n+\n+        List<String> res = new ArrayList<String>();\n+\n+        for (Method method : clazz.getDeclaredMethods()) {\n+            if (StringUtils.isBlank(lastToken)) {\n+                res.add(method.getName());\n+            } else if (method.getName().startsWith(lastToken)) {\n+                res.add(method.getName());\n+            }\n+        }\n+\n+        if (res.size() == 1) {\n+            completion.complete(res.get(0).substring(lastToken.length()), true);\n+            return true;\n+        } else {\n+            CompletionUtils.complete(completion, res);\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * 推断输入到哪一个 argument\n+     * @param completion\n+     * @return\n+     */\n+    public static int detectArgumentIndex(Completion completion) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        CliToken lastToken = tokens.get(tokens.size() - 1);\n+\n+        if (lastToken.value().startsWith(\"-\") || lastToken.value().startsWith(\"--\")) {\n+            return -1;\n+        }\n+\n+        if (StringUtils.isBlank((lastToken.value())) && tokens.size() == 1) {\n+            return 1;\n+        }\n+\n+        int tokenCount = 0;\n+\n+        for (CliToken token : tokens) {\n+            if (StringUtils.isBlank(token.value()) || token.value().startsWith(\"-\") || token.value().startsWith(\"--\")) {\n+                // filter irrelevant tokens\n+                continue;\n+            }\n+            tokenCount++;\n+        }\n+\n+        if (StringUtils.isBlank((lastToken.value())) && tokens.size() != 1) {\n+            tokenCount++;\n+        }\n+        return tokenCount;\n+    }\n+\n     public static void completeShortOption(Completion completion, CliToken lastToken, List<Option> options) {\n         String prefix = lastToken.value().substring(1);\n         List<String> candidates = new ArrayList<String>();",
    "output": "sm support completion. #323"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionHandler.java\n@@ -4,6 +4,9 @@\n import com.taobao.arthas.core.shell.cli.CliTokens;\n import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.session.Session;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.logger.Logger;\n+\n import io.termd.core.function.Consumer;\n import io.termd.core.readline.Completion;\n \n@@ -14,6 +17,7 @@\n  * @author beiwei30 on 23/11/2016.\n  */\n class CompletionHandler implements Consumer<Completion> {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n     private final Handler<com.taobao.arthas.core.shell.cli.Completion> completionHandler;\n     private final Session session;\n \n@@ -24,9 +28,14 @@ public CompletionHandler(Handler<com.taobao.arthas.core.shell.cli.Completion> co\n \n     @Override\n     public void accept(final Completion completion) {\n-        final String line = io.termd.core.util.Helper.fromCodePoints(completion.line());\n-        final List<CliToken> tokens = Collections.unmodifiableList(CliTokens.tokenize(line));\n-        com.taobao.arthas.core.shell.cli.Completion comp = new CompletionAdaptor(line, tokens, completion, session);\n-        completionHandler.handle(comp);\n+        try {\n+            final String line = io.termd.core.util.Helper.fromCodePoints(completion.line());\n+            final List<CliToken> tokens = Collections.unmodifiableList(CliTokens.tokenize(line));\n+            com.taobao.arthas.core.shell.cli.Completion comp = new CompletionAdaptor(line, tokens, completion, session);\n+            completionHandler.handle(comp);\n+        } catch (Throwable t) {\n+            // t.printStackTrace();\n+            logger.error(null, \"completion error\", t);\n+        }\n     }\n }",
    "output": "catch completion exception"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n@@ -3,17 +3,14 @@\n import java.io.File;\n import java.io.IOException;\n import java.nio.charset.Charset;\n-import java.util.ArrayList;\n import java.util.List;\n \n-import com.taobao.arthas.core.shell.cli.CliToken;\n import com.taobao.arthas.core.shell.cli.Completion;\n import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.LogUtil;\n-import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -8,6 +8,8 @@\n import java.util.List;\n \n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ClassUtils;\n@@ -102,4 +104,10 @@ private void processClass(CommandProcess process, Class<?> clazz) {\n         }\n     }\n \n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeClassName(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -10,11 +10,14 @@\n import io.termd.core.util.Helper;\n \n import java.io.File;\n+import java.lang.instrument.Instrumentation;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Set;\n \n /**\n  * @author beiwei30 on 09/11/2016.\n@@ -144,6 +147,41 @@ public static boolean completeFilePath(Completion completion) {\n         return true;\n     }\n \n+    public static boolean completeClassName(Completion completion) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        String token = tokens.get(tokens.size() - 1).value();\n+\n+        if (token.startsWith(\"-\") || StringUtils.isBlank(token)) {\n+            return false;\n+        }\n+\n+        Instrumentation instrumentation = completion.session().getInstrumentation();\n+\n+        Class<?>[] allLoadedClasses = instrumentation.getAllLoadedClasses();\n+\n+        Set<String> result = new HashSet<String>();\n+        for(Class<?> clazz : allLoadedClasses) {\n+            String name = clazz.getName();\n+            if(name.startsWith(token)) {\n+                int index = name.indexOf('.', token.length());\n+\n+                if(index > 0) {\n+                    result.add(name.substring(0, index + 1));\n+                }else {\n+                    result.add(name);\n+                }\n+\n+            }\n+        }\n+\n+        if(result.size() == 1 && result.iterator().next().endsWith(\".\")) {\n+            completion.complete(result.iterator().next().substring(token.length()), false);\n+        }else {\n+            CompletionUtils.complete(completion, result);\n+        }\n+        return true;\n+    }\n+\n     public static void completeShortOption(Completion completion, CliToken lastToken, List<Option> options) {\n         String prefix = lastToken.value().substring(1);\n         List<String> candidates = new ArrayList<String>();",
    "output": "sc command support completion"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -13,6 +13,8 @@\n import org.objectweb.asm.ClassReader;\n \n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -130,4 +132,11 @@ public void process(CommandProcess process) {\n     private static String readClassName(final byte[] bytes) {\n         return new ClassReader(bytes).getClassName().replace(\"/\", \".\");\n     }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeFilePath(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n }",
    "output": "redefine command support completion"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n@@ -80,71 +80,9 @@ public void process(CommandProcess process) {\n \n     @Override\n     public void complete(Completion completion) {\n-        List<CliToken> tokens = completion.lineTokens();\n-        String token = tokens.get(tokens.size() - 1).value();\n-\n-        File dir = null;\n-        String partName = \"\";\n-        if (StringUtils.isBlank(token)) {\n-            dir = new File(\"\").getAbsoluteFile();\n-            token = \"\";\n-        } else if (token.endsWith(\"/\")) {\n-            dir = new File(token);\n-        } else {\n-            File parent = new File(token).getAbsoluteFile().getParentFile();\n-            if (parent != null && parent.exists()) {\n-                dir = parent;\n-                partName = new File(token).getName();\n-            }\n-        }\n-\n-        File tokenFile = new File(token);\n-\n-        String tokenFileName = null;\n-        if (token.endsWith(\"/\")) {\n-            tokenFileName = \"\";\n-        } else {\n-            tokenFileName = tokenFile.getName();\n-        }\n-\n-        if (dir == null) {\n+        if (!CompletionUtils.completeFilePath(completion)) {\n             super.complete(completion);\n-            return;\n-        }\n-\n-        File[] listFiles = dir.listFiles();\n-\n-        ArrayList<String> names = new ArrayList<String>();\n-        for (File child : listFiles) {\n-            if (child.getName().startsWith(partName)) {\n-                if (child.isDirectory()) {\n-                    names.add(child.getName() + \"/\");\n-                } else {\n-                    names.add(child.getName());\n-                }\n-            }\n-        }\n-\n-        if (names.size() == 1 && names.get(0).endsWith(\"/\")) {\n-            String name = names.get(0);\n-            // 这个函数补全后不会有空格，并且只能传入要补全的内容\n-            completion.complete(name.substring(tokenFileName.length(), name.length()), false);\n-            return;\n-        }\n-\n-        String prefix = null;\n-        if (token.endsWith(\"/\")) {\n-            prefix = token;\n-        } else {\n-            prefix = token.substring(0, token.length() - new File(token).getName().length());\n-        }\n-\n-        ArrayList<String> namesWithPrefix = new ArrayList<String>();\n-        for (String name : names) {\n-            namesWithPrefix.add(prefix + name);\n         }\n-        // 这个函数需要保留前缀\n-        CompletionUtils.complete(completion, namesWithPrefix);\n     }\n \n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n@@ -9,6 +9,8 @@\n \n import com.taobao.arthas.compiler.DynamicCompiler;\n import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ClassLoaderUtils;\n@@ -128,4 +130,11 @@ public void process(CommandProcess process) {\n             process.end(exitCode);\n         }\n     }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        if (!CompletionUtils.completeFilePath(completion)) {\n+            super.complete(completion);\n+        }\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -2,12 +2,14 @@\n \n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.term.Tty;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.usage.StyledUsageFormatter;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.Option;\n import com.taobao.middleware.cli.annotations.CLIConfigurator;\n import io.termd.core.util.Helper;\n \n+import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -65,6 +67,83 @@ public static boolean complete(Completion completion, Collection<String> searchS\n         }\n     }\n \n+    /**\n+     * 返回true表示已经完成completion，返回否则表示没有，调用者需要另外完成补全\n+     * @param completion\n+     * @return\n+     */\n+    public static boolean completeFilePath(Completion completion) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        String token = tokens.get(tokens.size() - 1).value();\n+\n+        if (token.startsWith(\"-\") || StringUtils.isBlank(token)) {\n+            return false;\n+        }\n+\n+        File dir = null;\n+        String partName = \"\";\n+        if (StringUtils.isBlank(token)) {\n+            dir = new File(\"\").getAbsoluteFile();\n+            token = \"\";\n+        } else if (token.endsWith(\"/\")) {\n+            dir = new File(token);\n+        } else {\n+            File parent = new File(token).getAbsoluteFile().getParentFile();\n+            if (parent != null && parent.exists()) {\n+                dir = parent;\n+                partName = new File(token).getName();\n+            }\n+        }\n+\n+        File tokenFile = new File(token);\n+\n+        String tokenFileName = null;\n+        if (token.endsWith(\"/\")) {\n+            tokenFileName = \"\";\n+        } else {\n+            tokenFileName = tokenFile.getName();\n+        }\n+\n+        if (dir == null) {\n+            return false;\n+        }\n+\n+        File[] listFiles = dir.listFiles();\n+\n+        ArrayList<String> names = new ArrayList<String>();\n+        for (File child : listFiles) {\n+            if (child.getName().startsWith(partName)) {\n+                if (child.isDirectory()) {\n+                    names.add(child.getName() + \"/\");\n+                } else {\n+                    names.add(child.getName());\n+                }\n+            }\n+        }\n+\n+        if (names.size() == 1 && names.get(0).endsWith(\"/\")) {\n+            String name = names.get(0);\n+            // 这个函数补全后不会有空格，并且只能传入要补全的内容\n+            completion.complete(name.substring(tokenFileName.length(), name.length()), false);\n+            return true;\n+        }\n+\n+        String prefix = null;\n+        if (token.endsWith(\"/\")) {\n+            prefix = token;\n+        } else {\n+            prefix = token.substring(0, token.length() - new File(token).getName().length());\n+        }\n+\n+        ArrayList<String> namesWithPrefix = new ArrayList<String>();\n+        for (String name : names) {\n+            namesWithPrefix.add(prefix + name);\n+        }\n+        // 这个函数需要保留前缀\n+        CompletionUtils.complete(completion, namesWithPrefix);\n+        return true;\n+    }\n+\n     public static void completeShortOption(Completion completion, CliToken lastToken, List<Option> options) {\n         String prefix = lastToken.value().substring(1);\n         List<String> candidates = new ArrayList<String>();",
    "output": "improve cat/mc completion"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -40,6 +40,7 @@\n @Description(Constants.EXAMPLE +\n         \"  jad java.lang.String\\n\" +\n         \"  jad java.lang.String toString\\n\" +\n+        \"  jad --source-only java.lang.String\\n\" +\n         \"  jad -c 39eb305e org/apache/log4j/Logger\\n\" +\n         \"  jad -c 39eb305e -E org\\\\\\\\.apache\\\\\\\\.*\\\\\\\\.StringUtils\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"jad\")\n@@ -52,6 +53,11 @@ public class JadCommand extends AnnotatedCommand {\n     private String code = null;\n     private boolean isRegEx = false;\n \n+    /**\n+     * jad output source code only\n+     */\n+    private boolean sourceOnly = false;\n+\n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -77,6 +83,12 @@ public void setRegEx(boolean regEx) {\n         isRegEx = regEx;\n     }\n \n+    @Option(longName = \"source-only\", flag = true)\n+    @Description(\"Output source code only\")\n+    public void setSourceOnly(boolean sourceOnly) {\n+        this.sourceOnly = sourceOnly;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect affect = new RowAffect();\n@@ -97,7 +109,9 @@ public void process(CommandProcess process) {\n                 processExactMatch(process, affect, inst, matchedClasses, withInnerClasses);\n             }\n         } finally {\n-            process.write(affect + \"\\n\");\n+            if (!this.sourceOnly) {\n+                process.write(affect + \"\\n\");\n+            }\n             process.end();\n         }\n     }\n@@ -120,6 +134,11 @@ private void processExactMatch(CommandProcess process, RowAffect affect, Instrum\n                 source = \"unknown\";\n             }\n \n+            if (this.sourceOnly) {\n+                process.write(LangRenderUtil.render(source) + \"\\n\");\n+                return;\n+            }\n+\n \n             process.write(\"\\n\");\n             process.write(RenderUtil.render(new LabelElement(\"ClassLoader: \").style(Decoration.bold.fg(Color.red)), process.width()));",
    "output": "jad command support --source-only option. #496"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassDumpTransformer.java\n@@ -24,10 +24,17 @@ class ClassDumpTransformer implements ClassFileTransformer {\n     private Map<Class<?>, File> dumpResult;\n     private File arthasLogHome;\n \n+    private File directory;\n+\n     public ClassDumpTransformer(Set<Class<?>> classesToEnhance) {\n+        this(classesToEnhance, null);\n+    }\n+\n+    public ClassDumpTransformer(Set<Class<?>> classesToEnhance, File directory) {\n         this.classesToEnhance = classesToEnhance;\n         this.dumpResult = new HashMap<Class<?>, File>();\n         this.arthasLogHome = new File(LogUtil.LOGGER_FILE).getParentFile();\n+        this.directory = directory;\n     }\n \n     @Override\n@@ -50,7 +57,12 @@ private void dumpClassIfNecessary(Class<?> clazz, byte[] data) {\n         String classDumpDir = \"classdump\";\n \n         // 创建类所在的包路径\n-        File dumpDir = new File(arthasLogHome, classDumpDir);\n+        File dumpDir = null;\n+        if (directory != null) {\n+            dumpDir = directory;\n+        } else {\n+            dumpDir = new File(arthasLogHome, classDumpDir);\n+        }\n         if (!dumpDir.mkdirs() && !dumpDir.exists()) {\n             logger.warn(\"create dump directory:{} failed.\", dumpDir.getAbsolutePath());\n             return;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -37,6 +37,7 @@\n @Summary(\"Dump class byte array from JVM\")\n @Description(Constants.EXAMPLE +\n         \"  dump java.lang.String\\n\" +\n+        \"  dump -d /tmp/output java.lang.String\\n\" +\n         \"  dump org/apache/commons/lang/StringUtils\\n\" +\n         \"  dump *StringUtils\\n\" +\n         \"  dump -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils\\n\" +\n@@ -48,6 +49,8 @@ public class DumpClassCommand extends AnnotatedCommand {\n     private String code = null;\n     private boolean isRegEx = false;\n \n+    private String directory;\n+\n     @Argument(index = 0, argName = \"class-pattern\")\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -66,13 +69,27 @@ public void setRegEx(boolean regEx) {\n         isRegEx = regEx;\n     }\n \n+    @Option(shortName = \"d\", longName = \"directory\")\n+    @Description(\"Sets the destination directory for class files\")\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n     @Override\n     public void process(CommandProcess process) {\n         RowAffect effect = new RowAffect();\n-        Instrumentation inst = process.session().getInstrumentation();\n \n-        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx, code);\n         try {\n+            if (directory != null) {\n+                File dir = new File(directory);\n+                if (dir.isFile()) {\n+                    process.write(directory + \" :is not a directory, please check it\\n\");\n+                    return;\n+                }\n+            }\n+            Instrumentation inst = process.session().getInstrumentation();\n+            Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx, code);\n+\n             if (matchedClasses == null || matchedClasses.isEmpty()) {\n                 processNoMatch(process);\n             } else if (matchedClasses.size() > 5) {\n@@ -134,7 +151,12 @@ private void processNoMatch(CommandProcess process) {\n     }\n \n     private Map<Class<?>, File> dump(Instrumentation inst, Set<Class<?>> classes) throws UnmodifiableClassException {\n-        ClassDumpTransformer transformer = new ClassDumpTransformer(classes);\n+        ClassDumpTransformer transformer = null;\n+        if (directory != null) {\n+            transformer = new ClassDumpTransformer(classes, new File(directory));\n+        } else {\n+            transformer = new ClassDumpTransformer(classes);\n+        }\n         Enhancer.enhance(inst, transformer, classes);\n         return transformer.getDumpResult();\n     }",
    "output": "dump command support output directory. #419"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.command;\n \n+import com.taobao.arthas.core.command.basic1000.CatCommand;\n import com.taobao.arthas.core.command.basic1000.ClsCommand;\n import com.taobao.arthas.core.command.basic1000.HelpCommand;\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n@@ -86,6 +87,7 @@ private static void initCommands() {\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n+        commands.add(Command.create(CatCommand.class));\n         commands.add(Command.create(PwdCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/CatCommand.java\n@@ -0,0 +1,150 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.FileUtils;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+\n+@Name(\"cat\")\n+@Summary(\"Concatenate and print files\")\n+public class CatCommand extends AnnotatedCommand {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n+    private List<String> files;\n+    private String encoding;\n+\n+    @Argument(argName = \"files\", index = 0)\n+    @Description(\"files\")\n+    public void setFiles(List<String> files) {\n+        this.files = files;\n+    }\n+\n+    @Option(longName = \"encoding\")\n+    @Description(\"File encoding\")\n+    public void setEncoding(String encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        for (String file : files) {\n+            File f = new File(file);\n+            if (!f.exists()) {\n+                process.write(\"cat \" + file + \": No such file or directory\\n\");\n+                process.end();\n+                return;\n+            }\n+            if (f.isDirectory()) {\n+                process.write(\"cat \" + file + \": Is a directory\\n\");\n+                process.end();\n+                return;\n+            }\n+        }\n+\n+        for (String file : files) {\n+            File f = new File(file);\n+            if (f.length() > 1024 * 1024 * 8) {\n+                process.write(\"cat \" + file + \": Is to large, size: \" + f.length() + '\\n');\n+                process.end();\n+                return;\n+            }\n+            try {\n+                String fileToString = FileUtils.readFileToString(f,\n+                                encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n+                process.write(fileToString);\n+            } catch (IOException e) {\n+                logger.error(null, \"cat read file error. name: \" + file, e);\n+                process.write(\"cat read file error: \" + e.getMessage() + '\\n');\n+                process.end(1);\n+                return;\n+            }\n+        }\n+\n+        process.end();\n+    }\n+\n+    @Override\n+    public void complete(Completion completion) {\n+        List<CliToken> tokens = completion.lineTokens();\n+        String token = tokens.get(tokens.size() - 1).value();\n+\n+        File dir = null;\n+        String partName = \"\";\n+        if (StringUtils.isBlank(token)) {\n+            dir = new File(\"\").getAbsoluteFile();\n+            token = \"\";\n+        } else if (token.endsWith(\"/\")) {\n+            dir = new File(token);\n+        } else {\n+            File parent = new File(token).getAbsoluteFile().getParentFile();\n+            if (parent != null && parent.exists()) {\n+                dir = parent;\n+                partName = new File(token).getName();\n+            }\n+        }\n+\n+        File tokenFile = new File(token);\n+\n+        String tokenFileName = null;\n+        if (token.endsWith(\"/\")) {\n+            tokenFileName = \"\";\n+        } else {\n+            tokenFileName = tokenFile.getName();\n+        }\n+\n+        if (dir == null) {\n+            super.complete(completion);\n+            return;\n+        }\n+\n+        File[] listFiles = dir.listFiles();\n+\n+        ArrayList<String> names = new ArrayList<String>();\n+        for (File child : listFiles) {\n+            if (child.getName().startsWith(partName)) {\n+                if (child.isDirectory()) {\n+                    names.add(child.getName() + \"/\");\n+                } else {\n+                    names.add(child.getName());\n+                }\n+            }\n+        }\n+\n+        if (names.size() == 1 && names.get(0).endsWith(\"/\")) {\n+            String name = names.get(0);\n+            // 这个函数补全后不会有空格，并且只能传入要补全的内容\n+            completion.complete(name.substring(tokenFileName.length(), name.length()), false);\n+            return;\n+        }\n+\n+        String prefix = null;\n+        if (token.endsWith(\"/\")) {\n+            prefix = token;\n+        } else {\n+            prefix = token.substring(0, token.length() - new File(token).getName().length());\n+        }\n+\n+        ArrayList<String> namesWithPrefix = new ArrayList<String>();\n+        for (String name : names) {\n+            namesWithPrefix.add(prefix + name);\n+        }\n+        // 这个函数需要保留前缀\n+        CompletionUtils.complete(completion, namesWithPrefix);\n+    }\n+\n+}",
    "output": "add cat command. close #494"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java\n@@ -1,35 +1,47 @@\n package com.taobao.arthas.core.shell.command.internal;\n \n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n import com.taobao.arthas.core.util.LogUtil;\n-import com.taobao.middleware.logger.LoggerFactory;\n-import org.slf4j.Logger;\n \n /**\n  * 重定向处理类\n- *  \n+ *\n  * @author gehui 2017年7月27日 上午11:38:40\n+ * @author hengyunabc 2019-02-06\n  */\n public class RedirectHandler extends PlainTextHandler implements CloseFunction {\n-\n-    private Logger logger = null;\n+    private PrintWriter out;\n \n     public RedirectHandler() {\n \n     }\n \n-    public RedirectHandler(String name) {\n-        com.taobao.middleware.logger.Logger log = LoggerFactory.getLogger(name);\n-        log.activateAppenderWithSizeRolling(\"arthas-cache\", name, \"UTF-8\", \"200MB\", 3);\n-        log.setAdditivity(false);\n-        log.activateAsync(128, -1);\n-        logger = (Logger) log.getDelegate();\n+    public RedirectHandler(String name, boolean append) throws IOException {\n+        File file = new File(name);\n+\n+        if (file.isDirectory()) {\n+            throw new IOException(name + \": Is a directory\");\n+        }\n+\n+        if (!file.exists()) {\n+            File parentFile = file.getParentFile();\n+            if (parentFile != null) {\n+                parentFile.mkdirs();\n+            }\n+        }\n+        out = new PrintWriter(new BufferedWriter(new FileWriter(file, append)));\n     }\n \n     @Override\n     public String apply(String data) {\n         data = super.apply(data);\n-        if (logger != null) {\n-            logger.info(data);\n+        if (out != null) {\n+            out.write(data);\n         } else {\n             LogUtil.getResultLogger().info(data);\n         }\n@@ -38,6 +50,6 @@ public String apply(String data) {\n \n     @Override\n     public void close() {\n-        LogUtil.closeSlf4jLogger(logger);\n+        out.close();\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java\n@@ -20,6 +20,7 @@\n import io.termd.core.function.Function;\n \n import java.io.File;\n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -149,7 +150,7 @@ private boolean runInBackground(List<CliToken> tokens) {\n         return runInBackground;\n     }\n \n-    private Process createCommandProcess(Command command, ListIterator<CliToken> tokens, int jobId, Term term) {\n+    private Process createCommandProcess(Command command, ListIterator<CliToken> tokens, int jobId, Term term) throws IOException {\n         List<CliToken> remaining = new ArrayList<CliToken>();\n         List<CliToken> pipelineTokens = new ArrayList<CliToken>();\n         boolean isPipeline = false;\n@@ -176,7 +177,7 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok\n                             throw new IllegalStateException(\"The amount of async command that saving result to file can't > 8\");\n                         }\n                     }\n-                    redirectHandler = new RedirectHandler(name);\n+                    redirectHandler = new RedirectHandler(name, \">>\".equals(tokenValue));\n                     break;\n                 }\n             }",
    "output": "improve redirect. #495"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -4,6 +4,7 @@\n import com.taobao.arthas.core.command.basic1000.HelpCommand;\n import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n import com.taobao.arthas.core.command.basic1000.KeymapCommand;\n+import com.taobao.arthas.core.command.basic1000.PwdCommand;\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n import com.taobao.arthas.core.command.basic1000.ShutdownCommand;\n@@ -85,5 +86,6 @@ private static void initCommands() {\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n+        commands.add(Command.create(PwdCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/PwdCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/PwdCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/PwdCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/PwdCommand.java\n@@ -0,0 +1,18 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import java.io.File;\n+\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Summary;\n+\n+@Name(\"pwd\")\n+@Summary(\"Return working directory name\")\n+public class PwdCommand extends AnnotatedCommand {\n+    @Override\n+    public void process(CommandProcess process) {\n+        process.write(new File(\"\").getAbsolutePath()).write(\"\\n\");\n+        process.end();\n+    }\n+}",
    "output": "add pwd command. #493"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -15,6 +15,7 @@\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.middleware.cli.annotations.Argument;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Option;\n@@ -29,8 +30,8 @@\n @Name(\"redefine\")\n @Summary(\"Redefine classes. @see Instrumentation#redefineClasses(ClassDefinition...)\")\n @Description(Constants.EXAMPLE +\n-                \"  redefine -p /tmp/Test.class\\n\" +\n-                \"  redefine -c 327a647b -p /tmp/Test.class /tmp/Test\\\\$Inner.class \\n\" +\n+                \"  redefine /tmp/Test.class\\n\" +\n+                \"  redefine -c 327a647b /tmp/Test.class /tmp/Test\\\\$Inner.class \\n\" +\n                 Constants.WIKI + Constants.WIKI_HOME + \"redefine\")\n public class RedefineCommand extends AnnotatedCommand {\n \n@@ -46,19 +47,14 @@ public void setHashCode(String hashCode) {\n         this.hashCode = hashCode;\n     }\n \n-    @Option(shortName = \"p\", longName = \"path\", acceptMultipleValues = true)\n+    @Argument(argName = \"classfilePaths\", index = 0)\n     @Description(\".class file paths\")\n-    public void setPathPatterns(List<String> paths) {\n+    public void setPaths(List<String> paths) {\n         this.paths = paths;\n     }\n \n     @Override\n     public void process(CommandProcess process) {\n-        if (paths == null || paths.isEmpty()) {\n-            process.write(\"paths is empty.\\n\");\n-            process.end();\n-            return;\n-        }\n         Instrumentation inst = process.session().getInstrumentation();\n \n         for (String path : paths) {",
    "output": "remove unnecessary -p option in the redefine command. close #492"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -16,8 +16,6 @@ public class OSUtils {\n             platform = PlatformEnum.LINUX;\n         } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n-            platform = PlatformEnum.MACOSX;\n         } else if (OPERATING_SYSTEM_NAME.startsWith(\"windows\")) {\n             platform = PlatformEnum.WINDOWS;\n         } else {",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -17,6 +17,7 @@\n import com.taobao.arthas.core.command.klass100.DumpClassCommand;\n import com.taobao.arthas.core.command.klass100.GetStaticCommand;\n import com.taobao.arthas.core.command.klass100.JadCommand;\n+import com.taobao.arthas.core.command.klass100.MemoryCompilerCommand;\n import com.taobao.arthas.core.command.klass100.OgnlCommand;\n import com.taobao.arthas.core.command.klass100.RedefineCommand;\n import com.taobao.arthas.core.command.klass100.SearchClassCommand;\n@@ -69,6 +70,8 @@ private static void initCommands() {\n         commands.add(Command.create(JvmCommand.class));\n         // commands.add(Command.create(GroovyScriptCommand.class));\n         commands.add(Command.create(OgnlCommand.class));\n+        commands.add(Command.create(MemoryCompilerCommand.class));\n+        commands.add(Command.create(RedefineCommand.class));\n         commands.add(Command.create(DashboardCommand.class));\n         commands.add(Command.create(DumpClassCommand.class));\n         commands.add(Command.create(JulyCommand.class));\n@@ -81,7 +84,6 @@ private static void initCommands() {\n         commands.add(Command.create(SessionCommand.class));\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n-        commands.add(Command.create(RedefineCommand.class));\n         commands.add(Command.create(HistoryCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -65,7 +65,7 @@ public void setTree(boolean tree) {\n     }\n \n     @Option(shortName = \"c\", longName = \"classloader\")\n-    @Description(\"Display ClassLoader urls\")\n+    @Description(\"The hash code of the special ClassLoader\")\n     public void setHashCode(String hashCode) {\n         this.hashCode = hashCode;\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/MemoryCompilerCommand.java\n@@ -0,0 +1,131 @@\n+package com.taobao.arthas.core.command.klass100;\n+\n+import java.io.File;\n+import java.lang.instrument.Instrumentation;\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import com.taobao.arthas.compiler.DynamicCompiler;\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.ClassLoaderUtils;\n+import com.taobao.arthas.core.util.FileUtils;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.arthas.core.util.affect.RowAffect;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+\n+/**\n+ *\n+ * @author hengyunabc 2019-02-05\n+ *\n+ */\n+@Name(\"mc\")\n+@Summary(\"Memory compiler, compiles java files into bytecode and class files in memory.\")\n+@Description(Constants.EXAMPLE + \"  mc /tmp/Test.java\\n\" + \"  mc -c 327a647b /tmp/Test.java\\n\"\n+                + \"  mc -d /tmp/output /tmp/ClassA.java /tmp/ClassB.java\\n\" + Constants.WIKI + Constants.WIKI_HOME\n+                + \"mc\")\n+public class MemoryCompilerCommand extends AnnotatedCommand {\n+\n+    private static final Logger logger = LogUtil.getArthasLogger();\n+\n+    private String directory;\n+    private String hashCode;\n+    private String encoding;\n+\n+    private List<String> sourcefiles;\n+\n+    @Argument(argName = \"sourcefiles\", index = 0)\n+    @Description(\"source files\")\n+    public void setClassPattern(List<String> sourcefiles) {\n+        this.sourcefiles = sourcefiles;\n+    }\n+\n+    @Option(shortName = \"c\", longName = \"classloader\")\n+    @Description(\"The hash code of the special ClassLoader\")\n+    public void setHashCode(String hashCode) {\n+        this.hashCode = hashCode;\n+    }\n+\n+    @Option(longName = \"encoding\")\n+    @Description(\"Source file encoding\")\n+    public void setEncoding(String encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    @Option(shortName = \"d\", longName = \"directory\")\n+    @Description(\"Sets the destination directory for class files\")\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        int exitCode = 0;\n+        RowAffect affect = new RowAffect();\n+\n+        try {\n+            Instrumentation inst = process.session().getInstrumentation();\n+            ClassLoader classloader = null;\n+            if (hashCode == null) {\n+                classloader = ClassLoader.getSystemClassLoader();\n+            } else {\n+                classloader = ClassLoaderUtils.getClassLoader(inst, hashCode);\n+                if (classloader == null) {\n+                    process.write(\"Can not find classloader with hashCode: \" + hashCode + \".\\n\");\n+                    exitCode = -1;\n+                    return;\n+                }\n+            }\n+\n+            DynamicCompiler dynamicCompiler = new DynamicCompiler(classloader);\n+\n+            Charset charset = Charset.defaultCharset();\n+            if (encoding != null) {\n+                charset = Charset.forName(encoding);\n+            }\n+\n+            for (String sourceFile : sourcefiles) {\n+                String sourceCode = FileUtils.readFileToString(new File(sourceFile), charset);\n+                String name = new File(sourceFile).getName();\n+                if (name.endsWith(\".java\")) {\n+                    name = name.substring(0, name.length() - \".java\".length());\n+                }\n+                dynamicCompiler.addSource(name, sourceCode);\n+            }\n+\n+            Map<String, byte[]> byteCodes = dynamicCompiler.buildByteCodes();\n+\n+            File outputDir = null;\n+            if (this.directory != null) {\n+                outputDir = new File(this.directory);\n+            } else {\n+                outputDir = new File(\"\").getAbsoluteFile();\n+            }\n+\n+            process.write(\"Memory compiler output:\\n\");\n+            for (Entry<String, byte[]> entry : byteCodes.entrySet()) {\n+                File byteCodeFile = new File(outputDir, entry.getKey().replace('.', '/') + \".class\");\n+                FileUtils.writeByteArrayToFile(byteCodeFile, entry.getValue());\n+                process.write(byteCodeFile.getAbsolutePath() + '\\n');\n+                affect.rCnt(1);\n+            }\n+\n+        } catch (Throwable e) {\n+            logger.warn(\"Memory compiler error\", e);\n+            process.write(\"Memory compiler error, exception message: \" + e.getMessage()\n+                            + \", please check $HOME/logs/arthas/arthas.log for more details. \\n\");\n+            exitCode = -1;\n+        } finally {\n+            process.write(affect + \"\\n\");\n+            process.end(exitCode);\n+        }\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ClassLoaderUtils.java\n@@ -0,0 +1,41 @@\n+package com.taobao.arthas.core.util;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ *\n+ * @author hengyunabc 2019-02-05\n+ *\n+ */\n+public class ClassLoaderUtils {\n+\n+    public static Set<ClassLoader> getAllClassLoader(Instrumentation inst) {\n+        Set<ClassLoader> classLoaderSet = new HashSet<ClassLoader>();\n+\n+        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            if (classLoader != null) {\n+                classLoaderSet.add(classLoader);\n+            }\n+        }\n+        return classLoaderSet;\n+    }\n+\n+    public static ClassLoader getClassLoader(Instrumentation inst, String hashCode) {\n+        if (hashCode == null || hashCode.isEmpty()) {\n+            return null;\n+        }\n+\n+        for (Class<?> clazz : inst.getAllLoadedClasses()) {\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            if (classLoader != null) {\n+                if (Integer.toHexString(classLoader.hashCode()).equals(hashCode)) {\n+                    return classLoader;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}",
    "output": "add mc command. #373"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -16,8 +16,6 @@ public class OSUtils {\n             platform = PlatformEnum.LINUX;\n         } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n-            platform = PlatformEnum.MACOSX;\n         } else if (OPERATING_SYSTEM_NAME.startsWith(\"windows\")) {\n             platform = PlatformEnum.WINDOWS;\n         } else {",
    "output": "remove duplicate mac os check (#491)"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java\n@@ -129,7 +129,7 @@ private void processBlockingThread(CommandProcess process) {\n \n     private void processTopBusyThreads(CommandProcess process) {\n         Map<Long, Long> topNThreads = ThreadUtil.getTopNThreads(sampleInterval, topNBusy);\n-        Long[] tids = topNThreads.keySet().toArray(new Long[topNThreads.keySet().size()]);\n+        Long[] tids = topNThreads.keySet().toArray(new Long[0]);\n         ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ArrayUtils.toPrimitive(tids), true, true);\n         if (threadInfos == null) {\n             process.write(\"thread do not exist! id: \" + id + \"\\n\");\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/FeatureCodec.java b/core/src/main/java/com/taobao/arthas/core/config/FeatureCodec.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/FeatureCodec.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/FeatureCodec.java\n@@ -236,7 +236,7 @@ else if (isEquals(c, splitEscapeChar)) {\n \n         }\n \n-        return segmentArrayList.toArray(new String[segmentArrayList.size()]);\n+        return segmentArrayList.toArray(new String[0]);\n     }\n \n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -538,7 +538,7 @@ private static void validateLocalePart(String localePart) {\n \n \n     public static String[] toStringArray(Collection<String> collection) {\n-        return collection == null?null:(String[])collection.toArray(new String[collection.size()]);\n+        return collection == null?null:(String[])collection.toArray(new String[0]);\n     }\n \n     public static String[] split(String toSplit, String delimiter) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TypeRenderUtils.java\n@@ -160,6 +160,6 @@ public static String drawAnnotation(Annotation... annotations) {\n                 types.add(annotation.annotationType());\n             }\n         }\n-        return StringUtils.concat(\",\", types.toArray(new Class<?>[types.size()]));\n+        return StringUtils.concat(\",\", types.toArray(new Class<?>[0]));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/reflect/FieldUtils.java b/core/src/main/java/com/taobao/arthas/core/util/reflect/FieldUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/reflect/FieldUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/reflect/FieldUtils.java\n@@ -238,7 +238,7 @@ public static void writeField(final Field field, final Object target, final Obje\n      */\n     public static Field[] getAllFields(final Class<?> cls) {\n         final List<Field> allFieldsList = getAllFieldsList(cls);\n-        return allFieldsList.toArray(new Field[allFieldsList.size()]);\n+        return allFieldsList.toArray(new Field[0]);\n     }\n \n     /**",
    "output": "Optimize toArray (#484)\n\nreplace toArray(new T[size]) with toArray(new T[0]) for better performance\r\n\r\nhttps://shipilev.net/blog/2016/arrays-wisdom-ancients/#_conclusion"
  },
  {
    "input": "diff --git a/demo/src/main/java/demo/MathGame.java b/demo/src/main/java/demo/MathGame.java\n--- a/demo/src/main/java/demo/MathGame.java\n+++ b/demo/src/main/java/demo/MathGame.java\n@@ -20,7 +20,7 @@ public static void main(String[] args) throws InterruptedException {\n \n     public void run() throws InterruptedException {\n         try {\n-            int number = random.nextInt();\n+            int number = random.nextInt()/10000;\n             List<Integer> primeFactors = primeFactors(number);\n             print(number, primeFactors);\n ",
    "output": "make MathGame faster"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -33,6 +33,7 @@\n         \"  trace *StringUtils isBlank params[0].length==1\\n\" +\n         \"  trace *StringUtils isBlank '#cost>100'\\n\" +\n         \"  trace -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils isBlank\\n\" +\n+        \"  trace -E com.test.ClassA|org.test.ClassB method1|method2|method3\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"trace\")\n public class TraceCommand extends EnhancerCommand {\n ",
    "output": "update trace doc."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/KeymapCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/KeymapCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/KeymapCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/KeymapCommand.java\n@@ -1,40 +1,89 @@\n package com.taobao.arthas.core.command.basic1000;\n \n+import com.taobao.arthas.common.IOUtils;\n+import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.term.impl.Helper;\n+import com.taobao.arthas.core.util.LogUtil;\n+import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.middleware.logger.Logger;\n+import com.taobao.text.Decoration;\n+import com.taobao.text.ui.TableElement;\n+import com.taobao.text.util.RenderUtil;\n+\n+import static com.taobao.text.ui.Element.label;\n \n import java.io.BufferedReader;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n \n /**\n  * A command to display all the keymap for the specified connection.\n+ *\n  * @author ralf0131 2016-12-15 17:27.\n+ * @author hengyunabc 2019-01-18\n  */\n @Name(\"keymap\")\n @Summary(\"Display all the available keymap for the specified connection.\")\n+@Description(Constants.WIKI + Constants.WIKI_HOME + \"keymap\")\n public class KeymapCommand extends AnnotatedCommand {\n+    private static final Logger logger = LogUtil.getArthasLogger();\n \n     @Override\n     public void process(CommandProcess process) {\n         InputStream inputrc = Helper.loadInputRcFile();\n-        BufferedReader br = new BufferedReader(new InputStreamReader(inputrc));\n-        StringBuilder sb = new StringBuilder();\n-        String line;\n         try {\n+            TableElement table = new TableElement(1, 1, 2).leftCellPadding(1).rightCellPadding(1);\n+            table.row(true, label(\"Shortcut\").style(Decoration.bold.bold()),\n+                            label(\"Description\").style(Decoration.bold.bold()),\n+                            label(\"Name\").style(Decoration.bold.bold()));\n+\n+            BufferedReader br = new BufferedReader(new InputStreamReader(inputrc));\n+            String line;\n             while ((line = br.readLine()) != null) {\n-                if (line.startsWith(\"#\") || \"\".equals(line.trim())) {\n+                line = line.trim();\n+                if (line.startsWith(\"#\") || \"\".equals(line)) {\n                     continue;\n                 }\n-                sb.append(line + \"\\n\");\n+                String[] strings = line.split(\":\");\n+                if (strings != null && strings.length == 2) {\n+                    table.row(strings[0], translate(strings[0]), strings[1]);\n+                } else {\n+                    table.row(line);\n+                }\n+\n             }\n-        } catch (Exception e) {\n-            sb.append(e.getMessage());\n+            process.write(RenderUtil.render(table, process.width()));\n+        } catch (IOException e) {\n+            logger.error(\"keymap\", \"read inputrc file error.\", e);\n+        } finally {\n+            IOUtils.close(inputrc);\n+            process.end();\n         }\n-        process.write(sb.toString());\n-        process.end();\n+    }\n+\n+    private String translate(String key) {\n+        if (key.length() == 6 && key.startsWith(\"\\\"\\\\C-\") && key.endsWith(\"\\\"\")) {\n+            char ch = key.charAt(4);\n+            if ((ch >= 'a' && ch <= 'z') || ch == '?') {\n+                return \"Ctrl + \" + ch;\n+            }\n+        }\n+\n+        if (key.equals(\"\\\"\\\\e[D\\\"\")) {\n+            return \"Left arrow\";\n+        } else if (key.equals(\"\\\"\\\\e[C\\\"\")) {\n+            return \"Right arrow\";\n+        } else if (key.equals(\"\\\"\\\\e[B\\\"\")) {\n+            return \"Down arrow\";\n+        } else if (key.equals(\"\\\"\\\\e[A\\\"\")) {\n+            return \"Up arrow\";\n+        }\n+\n+        return key;\n     }\n }",
    "output": "keymap command usage more friendly. close #366"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -480,7 +480,14 @@ private static String listVersions(String mavenMetaData) {\n \n     private static List<String> listNames(File dir) {\n         List<String> names = new ArrayList<String>();\n-        for (File file : dir.listFiles()) {\n+        if (!dir.exists()) {\n+            return names;\n+        }\n+        File[] files = dir.listFiles();\n+        if (files == null) {\n+            return names;\n+        }\n+        for (File file : files) {\n             String name = file.getName();\n             if (name.startsWith(\".\") || file.isFile()) {\n                 continue;",
    "output": "fix NullPointerException when list local versions. #456"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -11,6 +11,8 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.TimeZone;\n+import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.InputMismatchException;\n \n@@ -88,9 +90,9 @@ public class Bootstrap {\n     private boolean versions;\n \n     /**\n-     * download from maven center repository by default\n+     * download from maven repository. if timezone is +0800, default value is 'aliyun', else is 'center'.\n      */\n-    private String repoMirror = \"center\";\n+    private String repoMirror;\n \n     /**\n      * enforce use http to download arthas. default use https\n@@ -226,6 +228,15 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             System.exit(0);\n         }\n \n+        if (bootstrap.getRepoMirror() == null || bootstrap.getRepoMirror().trim().isEmpty()) {\n+            bootstrap.setRepoMirror(\"center\");\n+            // if timezone is +0800, default repo mirror is aliyun\n+            if (TimeUnit.MILLISECONDS.toHours(TimeZone.getDefault().getOffset(System.currentTimeMillis())) == 8) {\n+                bootstrap.setRepoMirror(\"aliyun\");\n+            }\n+        }\n+        AnsiLog.debug(\"Repo mirror:\" + bootstrap.getRepoMirror());\n+\n         if (bootstrap.isVersions()) {\n             if (mavenMetaData == null) {\n                 mavenMetaData = DownloadUtils.readMavenMetaData(bootstrap.getRepoMirror(), bootstrap.isuseHttp());",
    "output": "when timezone is +0800, default repo mirror is aliyun. #452"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -121,7 +121,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n             if (pid == currentPid) {\n                 continue;\n             }\n-            if (strings.length >= 2 && strings[1].equals(\"sun.tools.jps.Jps\")) { // skip jps\n+            if (strings.length >= 2 && isJspProcess(strings[1])) { // skip jps\n                 continue;\n             }\n \n@@ -380,4 +380,7 @@ public int compare(File file1, File file2) {\n         return jpsList.get(0);\n     }\n \n+    private static boolean isJspProcess(String mainClassName) {\n+        return \"sun.tools.jps.Jps\".equals(mainClassName) || \"jdk.jcmd/sun.tools.jps.Jps\".equals(mainClassName);\n+    }\n }",
    "output": "Exclude JDK 11 jps process. close #451"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java\n@@ -355,7 +355,7 @@ private static void afterThrowing(AdviceListener listener,\n      * @param cv        ClassVisitor for ASM\n      */\n     public AdviceWeaver(int adviceId, boolean isTracing, boolean skipJDKTrace, String className, Matcher matcher, EnhancerAffect affect, ClassVisitor cv) {\n-        super(ASM5, cv);\n+        super(Opcodes.ASM7, cv);\n         this.adviceId = adviceId;\n         this.isTracing = isTracing;\n         this.skipJDKTrace = skipJDKTrace;\n@@ -410,7 +410,7 @@ public MethodVisitor visitMethod(\n         // 编织方法计数\n         affect.mCnt(1);\n \n-        return new AdviceAdapter(ASM5, new JSRInlinerAdapter(mv, access, name, desc, signature, exceptions), access, name, desc) {\n+        return new AdviceAdapter(Opcodes.ASM7, new JSRInlinerAdapter(mv, access, name, desc, signature, exceptions), access, name, desc) {\n \n             // -- Label for try...catch block\n             private final Label beginLabel = new Label();",
    "output": "upgrade asm api to Opcodes.ASM7. #459 #425"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -140,7 +140,8 @@ protected void enhance(CommandProcess process) {\n                 process.write(\"No class or method is affected, try:\\n\"\n                               + \"1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n                               + \"2. reset CLASS_NAME and try again, your method body might be too large.\\n\"\n-                              + \"3. visit https://github.com/alibaba/arthas/issues/47 for more details.\\n\");\n+                              + \"3. check arthas log: \" + LogUtil.LOGGER_FILE + \"\\n\"\n+                              + \"4. visit https://github.com/alibaba/arthas/issues/47 for more details.\\n\");\n                 process.end();\n                 return;\n             }",
    "output": "improve log"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -80,8 +80,8 @@ private void attachAgent(Configure configure) throws Exception {\n                 if (!targetJavaVersion.equals(currentJavaVersion)) {\n                     AnsiLog.warn(\"Current VM java version: {} do not match target VM java version: {}, attach may fail.\",\n                                     currentJavaVersion, targetJavaVersion);\n-                    AnsiLog.warn(\"Target VM JAVA_HOME is {}, try to set the same JAVA_HOME.\",\n-                                    targetSystemProperties.getProperty(\"java.home\"));\n+                    AnsiLog.warn(\"Target VM JAVA_HOME is {}, arthas-boot JAVA_HOME is {}, try to set the same JAVA_HOME.\",\n+                                    targetSystemProperties.getProperty(\"java.home\"), System.getProperty(\"java.home\"));\n                 }\n             }\n ",
    "output": "improve log info"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n--- a/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n+++ b/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java\n@@ -93,79 +93,72 @@ private void spy(final ClassLoader targetClassLoader) throws Exception {\n \t}\n \n     @Override\n-    public byte[] transform(\n-            final ClassLoader inClassLoader,\n-            String className,\n-            Class<?> classBeingRedefined,\n-            ProtectionDomain protectionDomain,\n-            byte[] classfileBuffer) throws IllegalClassFormatException {\n-\n-\n-        // 这里要再次过滤一次，为啥？因为在transform的过程中，有可能还会再诞生新的类\n-        // 所以需要将之前需要转换的类集合传递下来，再次进行判断\n-        if (!matchingClasses.contains(classBeingRedefined)) {\n-            return null;\n-        }\n-\n-        final ClassReader cr;\n-\n-        // 首先先检查是否在缓存中存在Class字节码\n-        // 因为要支持多人协作,存在多人同时增强的情况\n-        final byte[] byteOfClassInCache = classBytesCache.get(classBeingRedefined);\n-        if (null != byteOfClassInCache) {\n-            cr = new ClassReader(byteOfClassInCache);\n-        }\n-\n-        // 如果没有命中缓存,则从原始字节码开始增强\n-        else {\n-            cr = new ClassReader(classfileBuffer);\n-        }\n+    public byte[] transform(final ClassLoader inClassLoader, String className, Class<?> classBeingRedefined,\n+                    ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+        try {\n+            // 这里要再次过滤一次，为啥？因为在transform的过程中，有可能还会再诞生新的类\n+            // 所以需要将之前需要转换的类集合传递下来，再次进行判断\n+            if (!matchingClasses.contains(classBeingRedefined)) {\n+                return null;\n+            }\n \n-        // 字节码增强\n-        final ClassWriter cw = new ClassWriter(cr, COMPUTE_FRAMES | COMPUTE_MAXS) {\n+            final ClassReader cr;\n \n+            // 首先先检查是否在缓存中存在Class字节码\n+            // 因为要支持多人协作,存在多人同时增强的情况\n+            final byte[] byteOfClassInCache = classBytesCache.get(classBeingRedefined);\n+            if (null != byteOfClassInCache) {\n+                cr = new ClassReader(byteOfClassInCache);\n+            }\n \n-            /*\n-             * 注意，为了自动计算帧的大小，有时必须计算两个类共同的父类。\n-             * 缺省情况下，ClassWriter将会在getCommonSuperClass方法中计算这些，通过在加载这两个类进入虚拟机时，使用反射API来计算。\n-             * 但是，如果你将要生成的几个类相互之间引用，这将会带来问题，因为引用的类可能还不存在。\n-             * 在这种情况下，你可以重写getCommonSuperClass方法来解决这个问题。\n-             *\n-             * 通过重写 getCommonSuperClass() 方法，更正获取ClassLoader的方式，改成使用指定ClassLoader的方式进行。\n-             * 规避了原有代码采用Object.class.getClassLoader()的方式\n-             */\n-            @Override\n-            protected String getCommonSuperClass(String type1, String type2) {\n-                Class<?> c, d;\n-                final ClassLoader classLoader = inClassLoader;\n-                try {\n-                    c = Class.forName(type1.replace('/', '.'), false, classLoader);\n-                    d = Class.forName(type2.replace('/', '.'), false, classLoader);\n-                } catch (Exception e) {\n-                    throw new RuntimeException(e);\n-                }\n-                if (c.isAssignableFrom(d)) {\n-                    return type1;\n-                }\n-                if (d.isAssignableFrom(c)) {\n-                    return type2;\n-                }\n-                if (c.isInterface() || d.isInterface()) {\n-                    return \"java/lang/Object\";\n-                } else {\n-                    do {\n-                        c = c.getSuperclass();\n-                    } while (!c.isAssignableFrom(d));\n-                    return c.getName().replace('.', '/');\n-                }\n+            // 如果没有命中缓存,则从原始字节码开始增强\n+            else {\n+                cr = new ClassReader(classfileBuffer);\n             }\n \n-        };\n+            // 字节码增强\n+            final ClassWriter cw = new ClassWriter(cr, COMPUTE_FRAMES | COMPUTE_MAXS) {\n+\n+                /*\n+                 * 注意，为了自动计算帧的大小，有时必须计算两个类共同的父类。\n+                 * 缺省情况下，ClassWriter将会在getCommonSuperClass方法中计算这些，通过在加载这两个类进入虚拟机时，使用反射API来计算。\n+                 * 但是，如果你将要生成的几个类相互之间引用，这将会带来问题，因为引用的类可能还不存在。\n+                 * 在这种情况下，你可以重写getCommonSuperClass方法来解决这个问题。\n+                 *\n+                 * 通过重写 getCommonSuperClass() 方法，更正获取ClassLoader的方式，改成使用指定ClassLoader的方式进行。\n+                 * 规避了原有代码采用Object.class.getClassLoader()的方式\n+                 */\n+                @Override\n+                protected String getCommonSuperClass(String type1, String type2) {\n+                    Class<?> c, d;\n+                    final ClassLoader classLoader = inClassLoader;\n+                    try {\n+                        c = Class.forName(type1.replace('/', '.'), false, classLoader);\n+                        d = Class.forName(type2.replace('/', '.'), false, classLoader);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                    if (c.isAssignableFrom(d)) {\n+                        return type1;\n+                    }\n+                    if (d.isAssignableFrom(c)) {\n+                        return type2;\n+                    }\n+                    if (c.isInterface() || d.isInterface()) {\n+                        return \"java/lang/Object\";\n+                    } else {\n+                        do {\n+                            c = c.getSuperclass();\n+                        } while (!c.isAssignableFrom(d));\n+                        return c.getName().replace('.', '/');\n+                    }\n+                }\n \n-        try {\n+            };\n \n             // 生成增强字节码\n-            cr.accept(new AdviceWeaver(adviceId, isTracing, skipJDKTrace, cr.getClassName(), methodNameMatcher, affect, cw), EXPAND_FRAMES);\n+            cr.accept(new AdviceWeaver(adviceId, isTracing, skipJDKTrace, cr.getClassName(), methodNameMatcher, affect,\n+                            cw), EXPAND_FRAMES);\n             final byte[] enhanceClassByteArray = cw.toByteArray();\n \n             // 生成成功,推入缓存",
    "output": "catch asm exception in Enhancer#transform. #462"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/ObjectView.java\n@@ -571,6 +571,10 @@ else if (Date.class.isInstance(obj)) {\n                 appendStringBuilder(buf, format(\"@%s[%s]\", className, new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss,SSS\").format(obj)));\n             }\n \n+            else if (object instanceof Enum<?>) {\n+                appendStringBuilder(buf, format(\"@%s[%s]\", className, obj));\n+            }\n+\n             // 普通Object输出\n             else {\n ",
    "output": "ObjectView support enum. close #454"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n--- a/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n+++ b/core/src/main/java/com/taobao/arthas/core/view/Ansi.java\n@@ -391,7 +391,7 @@ public Ansi bg(Color color) {\n     }\n \n     public Ansi bgCyan() {\n-        return this.fg(Color.CYAN);\n+        return this.bg(Color.CYAN);\n     }\n \n     public Ansi bgDefault() {",
    "output": "update method of com.taobao.arthas.core.view.Ansi#bgCyan from this.fg(Color.CYAN) to this.bg(Color.CYAN)  fix #427"
  },
  {
    "input": "diff --git a/testcase/src/main/java/com/alibaba/arthas/Test.java b/testcase/src/main/java/com/alibaba/arthas/Test.java\n--- a/testcase/src/main/java/com/alibaba/arthas/Test.java\n+++ b/testcase/src/main/java/com/alibaba/arthas/Test.java\n@@ -43,7 +43,7 @@ public static void main(String[] args) throws InterruptedException {\n             list.get(random).setName(null);\n             test(list);\n             list.get(random).setName(name);\n-            Thread.sleep(1000l);\n+            Thread.sleep(1000L);\n         }\n     }\n ",
    "output": "Update Test.java (#407)\n\nUse uppercase L to declare variables"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -266,7 +266,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n                 System.exit(1);\n             }\n             if (pid < 0) {\n-                System.out.println(\"Please select an avaliable pid.\");\n+                System.out.println(\"Please select an available pid.\");\n                 System.exit(1);\n             }\n         }",
    "output": "Fix typo."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -327,7 +327,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (arthasHomeDir == null) {\n             boolean checkFile =  ARTHAS_LIB_DIR.exists() || ARTHAS_LIB_DIR.mkdirs();\n             if(!checkFile){\n-                AnsiLog.error(\"cannot create directory {}: Permission denied\", ARTHAS_LIB_DIR.getAbsolutePath());\n+                AnsiLog.error(\"cannot create directory {}: maybe permission denied\", ARTHAS_LIB_DIR.getAbsolutePath());\n                 System.exit(1);\n             }\n ",
    "output": "bug fix when cannot create directory"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -325,7 +325,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         // try to download from remote server\n         if (arthasHomeDir == null) {\n-            ARTHAS_LIB_DIR.mkdirs();\n+            boolean checkFile =  ARTHAS_LIB_DIR.exists() || ARTHAS_LIB_DIR.mkdirs();\n+            if(!checkFile){\n+                AnsiLog.error(\"cannot create directory {}: Permission denied\", ARTHAS_LIB_DIR.getAbsolutePath());\n+                System.exit(1);\n+            }\n \n             /**\n              * <pre>",
    "output": "bug fix when cannot create directory"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -150,7 +150,10 @@ public static String findJavaHome() {\n         String javaHome = System.getProperty(\"java.home\");\n \n         if (JavaVersionUtils.isLessThanJava9()) {\n-            File toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+            File toolsJar = new File(javaHome, \"lib/tools.jar\");\n+            if (!toolsJar.exists()) {\n+                toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+            }\n             if (!toolsJar.exists()) {\n                 // maybe jre\n                 toolsJar = new File(javaHome, \"../../lib/tools.jar\");\n@@ -311,7 +314,10 @@ private static File findToolsJar() {\n         }\n \n         String javaHome = findJavaHome();\n-        File toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+        File toolsJar = new File(javaHome, \"lib/tools.jar\");\n+        if (!toolsJar.exists()) {\n+            toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+        }\n         if (!toolsJar.exists()) {\n             // maybe jre\n             toolsJar = new File(javaHome, \"../../lib/tools.jar\");",
    "output": "improve find tools.jar logic. fix #383"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/IOUtils.java b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n@@ -8,11 +8,9 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.io.Reader;\n import java.io.Writer;\n-import java.nio.charset.StandardCharsets;\n import java.util.Enumeration;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -22,7 +22,6 @@\n import com.taobao.arthas.core.command.klass100.SearchClassCommand;\n import com.taobao.arthas.core.command.klass100.SearchMethodCommand;\n import com.taobao.arthas.core.command.monitor200.DashboardCommand;\n-import com.taobao.arthas.core.command.monitor200.GroovyScriptCommand;\n import com.taobao.arthas.core.command.monitor200.JvmCommand;\n import com.taobao.arthas.core.command.monitor200.MonitorCommand;\n import com.taobao.arthas.core.command.monitor200.StackCommand;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -15,7 +15,6 @@\n import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n import static com.taobao.arthas.core.util.ArthasCheckUtils.isEquals;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n@@ -10,9 +10,6 @@\n import com.taobao.arthas.core.util.ThreadUtil;\n import com.taobao.middleware.logger.Logger;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * @author beiwei30 on 29/11/2016.\n  */\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n@@ -4,9 +4,6 @@\n import com.taobao.arthas.core.util.ThreadUtil;\n import com.taobao.arthas.core.view.TreeView;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * 用于在ThreadLocal中传递的实体\n  * @author ralf0131 2017-01-05 14:05.\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n@@ -3,12 +3,8 @@\n import com.taobao.arthas.core.shell.impl.ShellImpl;\n import com.taobao.arthas.core.shell.system.ExecStatus;\n import com.taobao.arthas.core.shell.system.Job;\n-import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.term.SignalHandler;\n import com.taobao.arthas.core.shell.term.Term;\n-import io.termd.core.util.Helper;\n-\n-import java.util.Set;\n \n /**\n  * @author beiwei30 on 23/11/2016.\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -18,21 +18,16 @@\n import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.system.impl.InternalCommandManager;\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n-import com.taobao.arthas.core.shell.system.impl.JobImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n \n import java.lang.instrument.Instrumentation;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n import java.util.UUID;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java b/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n@@ -2,8 +2,6 @@\n \n import java.util.Date;\n \n-import com.taobao.arthas.core.shell.future.Future;\n-import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.term.Tty;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java b/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n@@ -1,6 +1,5 @@\n package com.taobao.arthas.core.shell.system;\n \n-import java.io.File;\n import java.util.Date;\n \n import com.taobao.arthas.core.shell.handlers.Handler;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -5,7 +5,6 @@\n import java.lang.management.*;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.text.SimpleDateFormat;\n import java.util.*;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java b/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n@@ -1,8 +1,5 @@\n package com.taobao.arthas.core.util.metrics;\n \n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicLongArray;\n-\n /**\n  * <pre>\n  * 统计传入的数据是总数的速率。\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n@@ -7,7 +7,6 @@\n import com.taobao.text.Color;\n import com.taobao.text.Decoration;\n import com.taobao.text.Style;\n-import com.taobao.text.ui.RowElement;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n ",
    "output": "Merge pull request #379 from sergioescala/master\n\nRemoving unnecessary/unused imports"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/IOUtils.java b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n@@ -8,11 +8,9 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.io.Reader;\n import java.io.Writer;\n-import java.nio.charset.StandardCharsets;\n import java.util.Enumeration;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -22,7 +22,6 @@\n import com.taobao.arthas.core.command.klass100.SearchClassCommand;\n import com.taobao.arthas.core.command.klass100.SearchMethodCommand;\n import com.taobao.arthas.core.command.monitor200.DashboardCommand;\n-import com.taobao.arthas.core.command.monitor200.GroovyScriptCommand;\n import com.taobao.arthas.core.command.monitor200.JvmCommand;\n import com.taobao.arthas.core.command.monitor200.MonitorCommand;\n import com.taobao.arthas.core.command.monitor200.StackCommand;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java\n@@ -15,7 +15,6 @@\n import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n import static com.taobao.arthas.core.util.ArthasCheckUtils.isEquals;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackAdviceListener.java\n@@ -10,9 +10,6 @@\n import com.taobao.arthas.core.util.ThreadUtil;\n import com.taobao.middleware.logger.Logger;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * @author beiwei30 on 29/11/2016.\n  */\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceEntity.java\n@@ -4,9 +4,6 @@\n import com.taobao.arthas.core.util.ThreadUtil;\n import com.taobao.arthas.core.view.TreeView;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * 用于在ThreadLocal中传递的实体\n  * @author ralf0131 2017-01-05 14:05.\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/handlers/shell/SuspendHandler.java\n@@ -3,12 +3,8 @@\n import com.taobao.arthas.core.shell.impl.ShellImpl;\n import com.taobao.arthas.core.shell.system.ExecStatus;\n import com.taobao.arthas.core.shell.system.Job;\n-import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.term.SignalHandler;\n import com.taobao.arthas.core.shell.term.Term;\n-import io.termd.core.util.Helper;\n-\n-import java.util.Set;\n \n /**\n  * @author beiwei30 on 23/11/2016.\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -18,21 +18,16 @@\n import com.taobao.arthas.core.shell.system.JobController;\n import com.taobao.arthas.core.shell.system.impl.InternalCommandManager;\n import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;\n-import com.taobao.arthas.core.shell.system.impl.JobImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n \n import java.lang.instrument.Instrumentation;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n import java.util.UUID;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java b/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/Job.java\n@@ -2,8 +2,6 @@\n \n import java.util.Date;\n \n-import com.taobao.arthas.core.shell.future.Future;\n-import com.taobao.arthas.core.shell.handlers.Handler;\n import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.shell.term.Tty;\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java b/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/system/Process.java\n@@ -1,6 +1,5 @@\n package com.taobao.arthas.core.shell.system;\n \n-import java.io.File;\n import java.util.Date;\n \n import com.taobao.arthas.core.shell.handlers.Handler;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java\n@@ -5,7 +5,6 @@\n import java.lang.management.*;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.text.SimpleDateFormat;\n import java.util.*;\n \n /**\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java b/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/metrics/SumRateCounter.java\n@@ -1,8 +1,5 @@\n package com.taobao.arthas.core.util.metrics;\n \n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicLongArray;\n-\n /**\n  * <pre>\n  * 统计传入的数据是总数的速率。\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n@@ -7,7 +7,6 @@\n import com.taobao.text.Color;\n import com.taobao.text.Decoration;\n import com.taobao.text.Style;\n-import com.taobao.text.ui.RowElement;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n ",
    "output": "Removing unnecessary/unused imports\n\nSigned-off by: Sergio Escalante sergioescala@gmail.com"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/IOUtil.java b/client/src/main/java/com/taobao/arthas/client/IOUtil.java\n--- a/client/src/main/java/com/taobao/arthas/client/IOUtil.java\n+++ b/client/src/main/java/com/taobao/arthas/client/IOUtil.java\n@@ -2,6 +2,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.io.Writer;\n \n@@ -41,12 +42,13 @@ public void run() {\n             @Override\n             public void run() {\n                 try {\n+                    InputStreamReader reader = new InputStreamReader(remoteInput);\n                     while (true) {\n-                        int singleByte = remoteInput.read();\n-                        if (singleByte < 0) {\n+                        int singleChar = reader.read();\n+                        if (singleChar == -1) {\n                             break;\n                         }\n-                        localOutput.write(singleByte);\n+                        localOutput.write(singleChar);\n                         localOutput.flush();\n                     }\n                 } catch (IOException e) {",
    "output": "fix output encoding problem. close #376"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -104,9 +104,9 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n \n         String[] command = null;\n         if (v) {\n-            command = new String[] { jps, \"-v\" };\n+            command = new String[] { jps, \"-v\", \"-l\" };\n         } else {\n-            command = new String[] { jps };\n+            command = new String[] { jps, \"-l\" };\n         }\n \n         List<String> lines = ExecutingCommand.runNative(command);\n@@ -121,7 +121,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n             if (pid == currentPid) {\n                 continue;\n             }\n-            if (strings.length >= 2 && strings[1].equals(\"Jps\")) { // skip jps\n+            if (strings.length >= 2 && strings[1].equals(\"sun.tools.jps.Jps\")) { // skip jps\n                 continue;\n             }\n ",
    "output": "arthas-boot run jps with \"-l\" option. close #361"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -1,36 +1,43 @@\n package com.taobao.arthas.common;\n \n+import java.util.Properties;\n+\n /**\n  *\n  * @author hengyunabc 2018-11-21\n  *\n  */\n public class JavaVersionUtils {\n-    private static final String javaVersionStr = System.getProperty(\"java.specification.version\");\n+    private static final String versionPropName = \"java.specification.version\";\n+    private static final String javaVersionStr = System.getProperty(versionPropName);\n     private static final float javaVersion = Float.parseFloat(javaVersionStr);\n \n     public static String javaVersionStr() {\n         return javaVersionStr;\n     }\n \n+    public static String javaVersionStr(Properties props) {\n+        return (null != props) ? props.getProperty(versionPropName): null;\n+    }\n+\n     public static float javaVersion() {\n         return javaVersion;\n     }\n \n     public static boolean isJava6() {\n-        return Float.toString(javaVersion).equals(\"1.6\");\n+        return javaVersionStr.equals(\"1.6\");\n     }\n \n     public static boolean isJava7() {\n-        return Float.toString(javaVersion).equals(\"1.7\");\n+        return javaVersionStr.equals(\"1.7\");\n     }\n \n     public static boolean isJava8() {\n-        return Float.toString(javaVersion).equals(\"1.8\");\n+        return javaVersionStr.equals(\"1.8\");\n     }\n \n     public static boolean isJava9() {\n-        return Float.toString(javaVersion).equals(\"9\");\n+        return javaVersionStr.equals(\"9\");\n     }\n \n     public static boolean isLessThanJava9() {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -3,6 +3,7 @@\n import com.sun.tools.attach.VirtualMachine;\n import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.common.AnsiLog;\n+import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.core.config.Configure;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n@@ -73,8 +74,8 @@ private void attachAgent(Configure configure) throws Exception {\n             }\n \n             Properties targetSystemProperties = virtualMachine.getSystemProperties();\n-            String targetJavaVersion = targetSystemProperties.getProperty(\"java.specification.version\");\n-            String currentJavaVersion = System.getProperty(\"java.specification.version\");\n+            String targetJavaVersion = JavaVersionUtils.javaVersionStr(targetSystemProperties);\n+            String currentJavaVersion = JavaVersionUtils.javaVersionStr();\n             if (targetJavaVersion != null && currentJavaVersion != null) {\n                 if (!targetJavaVersion.equals(currentJavaVersion)) {\n                     AnsiLog.warn(\"Current VM java version: {} do not match target VM java version: {}, attach may fail.\",",
    "output": "Merge pull request #356 from garenchan/dev\n\nImprove get Java version"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -1,36 +1,43 @@\n package com.taobao.arthas.common;\n \n+import java.util.Properties;\n+\n /**\n  *\n  * @author hengyunabc 2018-11-21\n  *\n  */\n public class JavaVersionUtils {\n-    private static final String javaVersionStr = System.getProperty(\"java.specification.version\");\n+    private static final String versionPropName = \"java.specification.version\";\n+    private static final String javaVersionStr = System.getProperty(versionPropName);\n     private static final float javaVersion = Float.parseFloat(javaVersionStr);\n \n     public static String javaVersionStr() {\n         return javaVersionStr;\n     }\n \n+    public static String javaVersionStr(Properties props) {\n+        return (null != props) ? props.getProperty(versionPropName): null;\n+    }\n+\n     public static float javaVersion() {\n         return javaVersion;\n     }\n \n     public static boolean isJava6() {\n-        return Float.toString(javaVersion).equals(\"1.6\");\n+        return javaVersionStr.equals(\"1.6\");\n     }\n \n     public static boolean isJava7() {\n-        return Float.toString(javaVersion).equals(\"1.7\");\n+        return javaVersionStr.equals(\"1.7\");\n     }\n \n     public static boolean isJava8() {\n-        return Float.toString(javaVersion).equals(\"1.8\");\n+        return javaVersionStr.equals(\"1.8\");\n     }\n \n     public static boolean isJava9() {\n-        return Float.toString(javaVersion).equals(\"9\");\n+        return javaVersionStr.equals(\"9\");\n     }\n \n     public static boolean isLessThanJava9() {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -3,6 +3,7 @@\n import com.sun.tools.attach.VirtualMachine;\n import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.common.AnsiLog;\n+import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.core.config.Configure;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n@@ -73,8 +74,8 @@ private void attachAgent(Configure configure) throws Exception {\n             }\n \n             Properties targetSystemProperties = virtualMachine.getSystemProperties();\n-            String targetJavaVersion = targetSystemProperties.getProperty(\"java.specification.version\");\n-            String currentJavaVersion = System.getProperty(\"java.specification.version\");\n+            String targetJavaVersion = JavaVersionUtils.javaVersionStr(targetSystemProperties);\n+            String currentJavaVersion = JavaVersionUtils.javaVersionStr();\n             if (targetJavaVersion != null && currentJavaVersion != null) {\n                 if (!targetJavaVersion.equals(currentJavaVersion)) {\n                     AnsiLog.warn(\"Current VM java version: {} do not match target VM java version: {}, attach may fail.\",",
    "output": "Use JavaVersionUtils to get java version."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -12,6 +12,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.logging.Level;\n+import java.util.InputMismatchException;\n \n import javax.xml.parsers.ParserConfigurationException;\n \n@@ -250,7 +251,12 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         int pid = bootStrap.getPid();\n         // select pid\n         if (pid < 0) {\n-            pid = ProcessUtils.select(bootStrap.isVerbose());\n+            try {\n+                pid = ProcessUtils.select(bootStrap.isVerbose());\n+            } catch (InputMismatchException e) {\n+                System.out.println(\"Please input an integer to select pid.\");\n+                System.exit(1);\n+            }\n             if (pid < 0) {\n                 System.out.println(\"Please select an avaliable pid.\");\n                 System.exit(1);\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -12,6 +12,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Scanner;\n+import java.util.InputMismatchException;\n \n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ExecutingCommand;\n@@ -45,7 +46,8 @@ public static String getPid() {\n         return PID;\n     }\n \n-    public static int select(boolean v) {\n+    @SuppressWarnings(\"resource\")\n+    public static int select(boolean v) throws InputMismatchException {\n         Map<Integer, String> processMap = listProcessByJps(v);\n \n         if (processMap.isEmpty()) {",
    "output": "Merge pull request #352 from garenchan/dev\n\nMore user-friendly prompts when selecting pid."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -228,7 +228,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (JavaVersionUtils.isJava6() || JavaVersionUtils.isJava7()) {\n             bootStrap.setuseHttp(true);\n             AnsiLog.debug(\"Java version is {}, only support http, set useHttp to true.\",\n-                            System.getProperty(\"java.specification.version\"));\n+                            JavaVersionUtils.javaVersionStr());\n         }\n \n         // check telnet/http port\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -25,6 +25,7 @@\n  */\n public class ProcessUtils {\n     private static String PID = \"-1\";\n+    private static String FOUND_JAVA_HOME = null;\n \n     static {\n         // https://stackoverflow.com/a/7690178\n@@ -127,9 +128,67 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n         return result;\n     }\n \n+    /**\n+     * <pre>\n+     * 1. Try to find java home from System Property java.home\n+     * 2. If jdk > 8, FOUND_JAVA_HOME set to java.home\n+     * 3. If jdk <= 8, try to find tools.jar under java.home\n+     * 4. If tools.jar do not exists under java.home, try to find System env JAVA_HOME\n+     * 5. If jdk <= 8 and tools.jar do not exists under JAVA_HOME, throw IllegalArgumentException\n+     * </pre>\n+     *\n+     * @return\n+     */\n+    public static String findJavaHome() {\n+        if (FOUND_JAVA_HOME != null) {\n+            return FOUND_JAVA_HOME;\n+        }\n+\n+        String javaHome = System.getProperty(\"java.home\");\n+\n+        if (JavaVersionUtils.isLessThanJava9()) {\n+            File toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+            if (!toolsJar.exists()) {\n+                // maybe jre\n+                toolsJar = new File(javaHome, \"../../lib/tools.jar\");\n+            }\n+\n+            if (toolsJar.exists()) {\n+                FOUND_JAVA_HOME = javaHome;\n+                return FOUND_JAVA_HOME;\n+            }\n+\n+            if (!toolsJar.exists()) {\n+                AnsiLog.debug(\"Can not find tools.jar under java.home: \" + javaHome);\n+                String javaHomeEnv = System.getenv(\"JAVA_HOME\");\n+                if (javaHomeEnv != null && !javaHomeEnv.isEmpty()) {\n+                    AnsiLog.debug(\"Try to find tools.jar in System Env JAVA_HOME: \" + javaHomeEnv);\n+                    // $JAVA_HOME/lib/tools.jar\n+                    toolsJar = new File(javaHomeEnv, \"lib/tools.jar\");\n+                    if (!toolsJar.exists()) {\n+                        // maybe jre\n+                        toolsJar = new File(javaHomeEnv, \"../lib/tools.jar\");\n+                    }\n+                }\n+\n+                if (toolsJar.exists()) {\n+                    AnsiLog.info(\"Found java home from System Env JAVA_HOME: \" + javaHomeEnv);\n+                    FOUND_JAVA_HOME = javaHomeEnv;\n+                    return FOUND_JAVA_HOME;\n+                }\n+\n+                throw new IllegalArgumentException(\"Can not find tools.jar under java home: \" + javaHome\n+                                + \", please try to start arthas-boot with full path java. Such as /opt/jdk/bin/java -jar arthas-boot.jar\");\n+            }\n+        } else {\n+            FOUND_JAVA_HOME = javaHome;\n+        }\n+        return FOUND_JAVA_HOME;\n+    }\n+\n     public static void startArthasCore(int targetPid, List<String> attachArgs) {\n         // find java/java.exe, then try to find tools.jar\n-        String javaHome = System.getProperty(\"java.home\");\n+        String javaHome = findJavaHome();\n \n         // find java/java.exe\n         File javaPath = findJava();\n@@ -138,22 +197,18 @@ public static void startArthasCore(int targetPid, List<String> attachArgs) {\n                             \"Can not find java/java.exe executable file under java home: \" + javaHome);\n         }\n \n-        File toolsJar = new File(javaHome, \"../lib/tools.jar\");\n-        if (!toolsJar.exists()) {\n-            // maybe jre\n-            toolsJar = new File(javaHome, \"../../lib/tools.jar\");\n-        }\n+        File toolsJar = findToolsJar();\n \n         if (JavaVersionUtils.isLessThanJava9()) {\n-            if (!toolsJar.exists()) {\n+            if (toolsJar == null || !toolsJar.exists()) {\n                 throw new IllegalArgumentException(\"Can not find tools.jar under java home: \" + javaHome);\n             }\n         }\n \n         List<String> command = new ArrayList<String>();\n         command.add(javaPath.getAbsolutePath());\n \n-        if (toolsJar.exists()) {\n+        if (toolsJar != null && toolsJar.exists()) {\n             command.add(\"-Xbootclasspath/a:\" + toolsJar.getAbsolutePath());\n         }\n \n@@ -213,7 +268,7 @@ public void run() {\n     }\n \n     private static File findJava() {\n-        String javaHome = System.getProperty(\"java.home\");\n+        String javaHome = findJavaHome();\n         String[] paths = { \"bin/java\", \"bin/java.exe\", \"../bin/java\", \"../bin/java.exe\" };\n \n         List<File> javaList = new ArrayList<File>();\n@@ -226,7 +281,7 @@ private static File findJava() {\n         }\n \n         if (javaList.isEmpty()) {\n-            AnsiLog.debug(\"Can not find java under current java home: \" + javaHome);\n+            AnsiLog.debug(\"Can not find java/java.exe under current java home: \" + javaHome);\n             return null;\n         }\n \n@@ -247,7 +302,28 @@ public int compare(File file1, File file2) {\n         return javaList.get(0);\n     }\n \n+    private static File findToolsJar() {\n+        if (JavaVersionUtils.isGreaterThanJava8()) {\n+            return null;\n+        }\n+\n+        String javaHome = findJavaHome();\n+        File toolsJar = new File(javaHome, \"../lib/tools.jar\");\n+        if (!toolsJar.exists()) {\n+            // maybe jre\n+            toolsJar = new File(javaHome, \"../../lib/tools.jar\");\n+        }\n+\n+        if (!toolsJar.exists()) {\n+            throw new IllegalArgumentException(\"Can not find tools.jar under java home: \" + javaHome);\n+        }\n+\n+        AnsiLog.debug(\"Found tools.jar: \" + toolsJar.getAbsolutePath());\n+        return toolsJar;\n+    }\n+\n     private static File findJps() {\n+        // Try to find jps under java.home and System env JAVA_HOME\n         String javaHome = System.getProperty(\"java.home\");\n         String[] paths = { \"bin/jps\", \"bin/jps.exe\", \"../bin/jps\", \"../bin/jps.exe\" };\n ",
    "output": "Improve find java home/tools.jar logic. fix #325 #332"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -12,6 +12,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.logging.Level;\n+import java.util.InputMismatchException;\n \n import javax.xml.parsers.ParserConfigurationException;\n \n@@ -249,7 +250,12 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         int pid = bootStrap.getPid();\n         // select pid\n         if (pid < 0) {\n-            pid = ProcessUtils.select(bootStrap.isVerbose());\n+            try {\n+                pid = ProcessUtils.select(bootStrap.isVerbose());\n+            } catch (InputMismatchException e) {\n+                System.out.println(\"Please input an integer to select pid.\");\n+                System.exit(1);\n+            }\n             if (pid < 0) {\n                 System.out.println(\"Please select an avaliable pid.\");\n                 System.exit(1);\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -12,6 +12,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Scanner;\n+import java.util.InputMismatchException;\n \n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ExecutingCommand;\n@@ -44,7 +45,8 @@ public static String getPid() {\n         return PID;\n     }\n \n-    public static int select(boolean v) {\n+    @SuppressWarnings(\"resource\")\n+    public static int select(boolean v) throws InputMismatchException {\n         Map<Integer, String> processMap = listProcessByJps(v);\n \n         if (processMap.isEmpty()) {",
    "output": "More user-friendly prompts when selecting pid.\nWhen users accidentally enter a non-integer, prompt instead of printing\nstack trace."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -225,9 +225,10 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             System.exit(0);\n         }\n \n-        if (JavaVersionUtils.isJava6()) {\n+        if (JavaVersionUtils.isJava6() || JavaVersionUtils.isJava7()) {\n             bootStrap.setuseHttp(true);\n-            AnsiLog.debug(\"Java version is 1.6, only support http, set useHttp to true.\");\n+            AnsiLog.debug(\"Java version is {}, only support http, set useHttp to true.\",\n+                            System.getProperty(\"java.specification.version\"));\n         }\n \n         // check telnet/http port\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/JavaVersionUtils.java\n@@ -6,11 +6,12 @@\n  *\n  */\n public class JavaVersionUtils {\n-    public static void main(String[] args) {\n-        System.err.println(JavaVersionUtils.isJava8());\n-    }\n+    private static final String javaVersionStr = System.getProperty(\"java.specification.version\");\n+    private static final float javaVersion = Float.parseFloat(javaVersionStr);\n \n-    private static final float javaVersion = Float.parseFloat(System.getProperty(\"java.specification.version\"));\n+    public static String javaVersionStr() {\n+        return javaVersionStr;\n+    }\n \n     public static float javaVersion() {\n         return javaVersion;",
    "output": "when using jdk7, use http to download to avoid SSL Exception. fix #349"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -5,6 +5,8 @@\n import java.io.InputStream;\n import java.lang.management.ManagementFactory;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -94,6 +96,8 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n             jps = jpsFile.getAbsolutePath();\n         }\n \n+        AnsiLog.debug(\"Try use jps to lis java process, jps: \" + jps);\n+\n         String[] command = null;\n         if (v) {\n             command = new String[] { jps, \"-v\" };\n@@ -212,30 +216,83 @@ private static File findJava() {\n         String javaHome = System.getProperty(\"java.home\");\n         String[] paths = { \"bin/java\", \"bin/java.exe\", \"../bin/java\", \"../bin/java.exe\" };\n \n+        List<File> javaList = new ArrayList<File>();\n         for (String path : paths) {\n-            File jpsFile = new File(javaHome, path);\n-            if (jpsFile.exists()) {\n-                return jpsFile;\n+            File javaFile = new File(javaHome, path);\n+            if (javaFile.exists()) {\n+                AnsiLog.debug(\"Found java: \" + javaFile.getAbsolutePath());\n+                javaList.add(javaFile);\n             }\n         }\n \n-        AnsiLog.debug(\"can not find java under current java home: \" + javaHome);\n-        return null;\n+        if (javaList.isEmpty()) {\n+            AnsiLog.debug(\"Can not find java under current java home: \" + javaHome);\n+            return null;\n+        }\n+\n+        // find the shortest path, jre path longer than jdk path\n+        if (javaList.size() > 1) {\n+            Collections.sort(javaList, new Comparator<File>() {\n+                @Override\n+                public int compare(File file1, File file2) {\n+                    try {\n+                        return file1.getCanonicalPath().length() - file2.getCanonicalPath().length();\n+                    } catch (IOException e) {\n+                        // ignore\n+                    }\n+                    return -1;\n+                }\n+            });\n+        }\n+        return javaList.get(0);\n     }\n \n     private static File findJps() {\n         String javaHome = System.getProperty(\"java.home\");\n         String[] paths = { \"bin/jps\", \"bin/jps.exe\", \"../bin/jps\", \"../bin/jps.exe\" };\n \n+        List<File> jpsList = new ArrayList<File>();\n         for (String path : paths) {\n             File jpsFile = new File(javaHome, path);\n             if (jpsFile.exists()) {\n-                return jpsFile;\n+                AnsiLog.debug(\"Found jps: \" + jpsFile.getAbsolutePath());\n+                jpsList.add(jpsFile);\n             }\n         }\n \n-        AnsiLog.debug(\"can not find jps under current java home: \" + javaHome);\n-        return null;\n+        if (jpsList.isEmpty()) {\n+            AnsiLog.debug(\"Can not find jps under :\" + javaHome);\n+            String javaHomeEnv = System.getenv(\"JAVA_HOME\");\n+            AnsiLog.debug(\"Try to find jps under env JAVA_HOME :\" + javaHomeEnv);\n+            for (String path : paths) {\n+                File jpsFile = new File(javaHomeEnv, path);\n+                if (jpsFile.exists()) {\n+                    AnsiLog.debug(\"Found jps: \" + jpsFile.getAbsolutePath());\n+                    jpsList.add(jpsFile);\n+                }\n+            }\n+        }\n+\n+        if (jpsList.isEmpty()) {\n+            AnsiLog.debug(\"Can not find jps under current java home: \" + javaHome);\n+            return null;\n+        }\n+\n+        // find the shortest path, jre path longer than jdk path\n+        if (jpsList.size() > 1) {\n+            Collections.sort(jpsList, new Comparator<File>() {\n+                @Override\n+                public int compare(File file1, File file2) {\n+                    try {\n+                        return file1.getCanonicalPath().length() - file2.getCanonicalPath().length();\n+                    } catch (IOException e) {\n+                        // ignore\n+                    }\n+                    return -1;\n+                }\n+            });\n+        }\n+        return jpsList.get(0);\n     }\n \n }",
    "output": "Prefer to use jps/java under jdk, not jre. close #338"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -86,7 +86,7 @@ public static List<String> readAllMavenVersion(String mavenMetaData) {\n     public static String readMavenMetaData(String repoMirror, boolean http) {\n         String repoUrl = getRepoUrl(repoMirror, http);\n         String metaDataUrl = MAVEN_METADATA_URL.replace(\"${REPO}\", repoUrl);\n-        AnsiLog.debug(\"Download maven-metadata.xml from: {}\", repoUrl);\n+        AnsiLog.debug(\"Download maven-metadata.xml from: {}\", metaDataUrl);\n         InputStream inputStream = null;\n         try {\n             URLConnection connection = openURLConnection(metaDataUrl);\n@@ -133,6 +133,8 @@ public static void downArthasPackaging(String repoMirror, boolean http, String a\n \n         File tempFile = File.createTempFile(\"arthas\", \"arthas\");\n \n+        AnsiLog.debug(\"Arthas download temp file: \" + tempFile.getAbsolutePath());\n+\n         String remoteDownloadUrl = REMOTE_DOWNLOAD_URL.replace(\"${REPO}\", repoUrl).replace(\"${VERSION}\", arthasVersion);\n         AnsiLog.info(\"Start download arthas from remote server: \" + remoteDownloadUrl);\n         saveUrl(tempFile.getAbsolutePath(), remoteDownloadUrl, true);\n@@ -176,7 +178,7 @@ public static void saveUrl(final String filename, final String urlString, boolea\n                 fout.write(data, 0, count);\n             }\n         } catch (javax.net.ssl.SSLException e) {\n-            AnsiLog.error(\"TLS connect error, please try to use --use-http argument.\");\n+            AnsiLog.error(\"TLS connect error, please try to add --use-http argument.\");\n             AnsiLog.error(\"URL: \" + urlString);\n             AnsiLog.error(e);\n         } finally {",
    "output": "add more log in DownloadUtils"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -42,10 +42,10 @@\n         \"  tt -t *StringUtils isEmpty\\n\" +\n         \"  tt -t *StringUtils isEmpty params[0].length==1\\n\" +\n         \"  tt -l\\n\" +\n-        \"  tt --delete-all\\n\" +\n-        \"  tt -i 1000 -w params[0]\\n\" +\n-        \"  tt -i 1000 -d\\n\" +\n         \"  tt -i 1000\\n\" +\n+        \"  tt -i 1000 -w params[0]\\n\" +\n+        \"  tt -i 1000 -p\\n\" +\n+        \"  tt --delete-all\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"tt\")\n public class TimeTunnelCommand extends EnhancerCommand {\n     // 时间隧道(时间碎片的集合)",
    "output": "update tt doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java\n@@ -22,11 +22,11 @@\n @Name(\"stack\")\n @Summary(\"Display the stack trace for the specified class and method\")\n @Description(Constants.EXPRESS_DESCRIPTION + Constants.EXAMPLE +\n-        \"  stack -E org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank\\n\" +\n         \"  stack org.apache.commons.lang.StringUtils isBlank\\n\" +\n         \"  stack *StringUtils isBlank\\n\" +\n         \"  stack *StringUtils isBlank params[0].length==1\\n\" +\n         \"  stack *StringUtils isBlank '#cost>100'\\n\" +\n+        \"  stack -E org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"stack\")\n public class StackCommand extends EnhancerCommand {\n     private String classPattern;",
    "output": "update trace doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java\n@@ -28,11 +28,11 @@\n @Name(\"trace\")\n @Summary(\"Trace the execution time of specified method invocation.\")\n @Description(value = Constants.EXPRESS_DESCRIPTION + Constants.EXAMPLE +\n-        \"  trace -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils isBlank\\n\" +\n         \"  trace org.apache.commons.lang.StringUtils isBlank\\n\" +\n         \"  trace *StringUtils isBlank\\n\" +\n         \"  trace *StringUtils isBlank params[0].length==1\\n\" +\n         \"  trace *StringUtils isBlank '#cost>100'\\n\" +\n+        \"  trace -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils isBlank\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"trace\")\n public class TraceCommand extends EnhancerCommand {\n ",
    "output": "update trace doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/Constants.java b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/Constants.java\n@@ -2,6 +2,7 @@\n \n /**\n  * @author ralf0131 2016-12-14 17:21.\n+ * @author hengyunabc 2018-12-03\n  */\n public interface Constants {\n \n@@ -12,7 +13,8 @@ public interface Constants {\n             \"          target : the object\\n\" +\n             \"           clazz : the object's class\\n\" +\n             \"          method : the constructor or method\\n\" +\n-            \"    params[0..n] : the parameters of method\\n\" +\n+            \"          params : the parameters array of method\\n\" +\n+            \"    params[0..n] : the element of parameters array\\n\" +\n             \"       returnObj : the returned object of method\\n\" +\n             \"        throwExp : the throw exception of method\\n\" +\n             \"        isReturn : the method ended by return\\n\" +\n@@ -26,6 +28,7 @@ public interface Constants {\n     String WIKI_HOME = \"  https://alibaba.github.io/arthas/\";\n \n     String EXPRESS_EXAMPLES =   \"Examples:\\n\" +\n+                                \"  params\\n\" +\n                                 \"  params[0]\\n\" +\n                                 \"  'params[0]+params[1]'\\n\" +\n                                 \"  returnObj\\n\" +",
    "output": "update watch doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java\n@@ -14,13 +14,13 @@\n @Name(\"watch\")\n @Summary(\"Display the input/output parameter, return object, and thrown exception of specified method invocation\")\n @Description(Constants.EXPRESS_DESCRIPTION + \"\\nExamples:\\n\" +\n-        \"  watch -Eb org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank params[0]\\n\" +\n         \"  watch -b org.apache.commons.lang.StringUtils isBlank params[0]\\n\" +\n         \"  watch -f org.apache.commons.lang.StringUtils isBlank returnObj\\n\" +\n         \"  watch -bf *StringUtils isBlank params[0]\\n\" +\n         \"  watch *StringUtils isBlank params[0]\\n\" +\n         \"  watch *StringUtils isBlank params[0] params[0].length==1\\n\" +\n         \"  watch *StringUtils isBlank '#cost>100'\\n\" +\n+        \"  watch -E -b org\\\\.apache\\\\.commons\\\\.lang\\\\.StringUtils isBlank params[0]\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"watch\")\n public class WatchCommand extends EnhancerCommand {\n ",
    "output": "update watch doc"
  },
  {
    "input": "diff --git a/demo/src/main/java/demo/MathGame.java b/demo/src/main/java/demo/MathGame.java\n--- a/demo/src/main/java/demo/MathGame.java\n+++ b/demo/src/main/java/demo/MathGame.java\n@@ -8,7 +8,7 @@\n public class MathGame {\n     private static Random random = new Random();\n \n-    private int illegalArgumentCount = 0;\n+    public int illegalArgumentCount = 0;\n \n     public static void main(String[] args) throws InterruptedException {\n         MathGame game = new MathGame();",
    "output": "update demo"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java b/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/OgnlExpress.java\n@@ -5,6 +5,7 @@\n \n import ognl.ClassResolver;\n import ognl.DefaultMemberAccess;\n+import ognl.MemberAccess;\n import ognl.Ognl;\n import ognl.OgnlContext;\n \n@@ -13,7 +14,7 @@\n  * @author hengyunabc 2018-10-18\n  */\n public class OgnlExpress implements Express {\n-\n+    private static final MemberAccess MEMBER_ACCESS = new DefaultMemberAccess(true);\n     Logger logger = LogUtil.getArthasLogger();\n \n     private Object bindObject;\n@@ -27,7 +28,7 @@ public OgnlExpress(ClassResolver classResolver) {\n         context = new OgnlContext();\n         context.setClassResolver(classResolver);\n         // allow private field access\n-        context.setMemberAccess(new DefaultMemberAccess(true));\n+        context.setMemberAccess(MEMBER_ACCESS);\n     }\n \n     @Override\n@@ -62,6 +63,8 @@ public Express bind(String name, Object value) {\n     public Express reset() {\n         context.clear();\n         context.setClassResolver(CustomClassResolver.customClassResolver);\n+        // allow private field access\n+        context.setMemberAccess(MEMBER_ACCESS);\n         return this;\n     }\n }",
    "output": "ognl express support get private field. fix #336"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java\n@@ -46,7 +46,7 @@\n         \"  classloader -c 327a647b -r META-INF/MANIFEST.MF\\n\" +\n         \"  classloader -a\\n\" +\n         \"  classloader -a -c 327a647b\\n\" +\n-        \"  classloader -c 659e0bfd --load com.test.Demo\\n\" +\n+        \"  classloader -c 659e0bfd --load demo.MathGame\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"classloader\")\n public class ClassLoaderCommand extends AnnotatedCommand {\n     private boolean isTree = false;\n@@ -202,7 +202,8 @@ private void processResources(CommandProcess process, Instrumentation inst) {\n             }\n         }\n         process.write(com.taobao.arthas.core.util.Constants.EMPTY_STRING);\n-        process.write(affect.rCnt(rowCount) + \"\\n\");\n+        affect.rCnt(rowCount);\n+        process.write(affect + \"\\n\");\n         process.end();\n     }\n ",
    "output": "update classloader doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -38,7 +38,8 @@\n @Name(\"jad\")\n @Summary(\"Decompile class\")\n @Description(Constants.EXAMPLE +\n-        \"  jad -c 39eb305e org.apache.log4j.Logger\\n\" +\n+        \"  jad java.lang.String\\n\" +\n+        \"  jad java.lang.String toString\\n\" +\n         \"  jad -c 39eb305e org/apache/log4j/Logger\\n\" +\n         \"  jad -c 39eb305e -E org\\\\\\\\.apache\\\\\\\\.*\\\\\\\\.StringUtils\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"jad\")",
    "output": "update jad doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java\n@@ -36,10 +36,10 @@\n @Name(\"dump\")\n @Summary(\"Dump class byte array from JVM\")\n @Description(Constants.EXAMPLE +\n-        \"  dump -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils\\n\" +\n-        \"  dump org.apache.commons.lang.StringUtils\\n\" +\n+        \"  dump java.lang.String\\n\" +\n         \"  dump org/apache/commons/lang/StringUtils\\n\" +\n         \"  dump *StringUtils\\n\" +\n+        \"  dump -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"dump\")\n public class DumpClassCommand extends AnnotatedCommand {\n     private static final Logger logger = LogUtil.getArthasLogger();",
    "output": "update dump doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java\n@@ -37,11 +37,11 @@\n @Name(\"sm\")\n @Summary(\"Search the method of classes loaded by JVM\")\n @Description(Constants.EXAMPLE +\n-        \"  sm -Ed org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\.StringUtils .*\\n\" +\n-        \"  sm org.apache.commons.????.StringUtils *\\n\" +\n+        \"  sm java.lang.String\\n\" +\n         \"  sm -d org.apache.commons.lang.StringUtils\\n\" +\n         \"  sm -d org/apache/commons/lang/StringUtils\\n\" +\n-        \"  sm *String????s *\\n\" +\n+        \"  sm *StringUtils *\\n\" +\n+        \"  sm -Ed org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\.StringUtils .*\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"sm\")\n public class SearchMethodCommand extends AnnotatedCommand {\n ",
    "output": "update sm doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -29,10 +29,11 @@\n @Name(\"sc\")\n @Summary(\"Search all the classes loaded by JVM\")\n @Description(Constants.EXAMPLE +\n-        \"  sc -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils\\n\" +\n         \"  sc -d org.apache.commons.lang.StringUtils\\n\" +\n         \"  sc -d org/apache/commons/lang/StringUtils\\n\" +\n         \"  sc -d *StringUtils\\n\" +\n+        \"  sc -d -f org.apache.commons.lang.StringUtils\\n\" +\n+        \"  sc -E org\\\\\\\\.apache\\\\\\\\.commons\\\\\\\\.lang\\\\\\\\.StringUtils\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"sc\")\n public class SearchClassCommand extends AnnotatedCommand {\n     private String classPattern;",
    "output": "update sc doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n@@ -40,7 +40,8 @@\n \n @Name(\"getstatic\")\n @Summary(\"Show the static field of a class\")\n-@Description(Constants.EXAMPLE + \"  getstatic -c 39eb305e org.apache.log4j.LogManager DEFAULT_CONFIGURATION_FILE\\n\"\n+@Description(Constants.EXAMPLE + \"  getstatic getstatic demo.MathGame random\\n\"\n+                + \"  getstatic -c 39eb305e org.apache.log4j.LogManager DEFAULT_CONFIGURATION_FILE\\n\"\n              + Constants.WIKI + Constants.WIKI_HOME + \"getstatic\")\n public class GetStaticCommand extends AnnotatedCommand {\n ",
    "output": "update getstatic command doc"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java\n@@ -27,7 +27,7 @@\n @Summary(\"Execute ognl expression.\")\n @Description(Constants.EXAMPLE\n                 + \"  ognl '@java.lang.System@out.println(\\\"hello\\\")' \\n\"\n-                + \"  ognl -x 2 '@Singleton@getInstance() \\n\"\n+                + \"  ognl -x 2 '@Singleton@getInstance()' \\n\"\n                 + \"  ognl '@Demo@staticFiled' \\n\"\n                 + \"  ognl '#value1=@System@getProperty(\\\"java.home\\\"), #value2=@System@getProperty(\\\"java.runtime.name\\\"), {#value1, #value2}'\\n\"\n                 + \"  ognl -c 5d113a51 '@com.taobao.arthas.core.GlobalOptions@isDump' \\n\"",
    "output": "add ognl command doc. #240"
  },
  {
    "input": "diff --git a/demo/src/main/java/demo/MathGame.java b/demo/src/main/java/demo/MathGame.java\n--- a/demo/src/main/java/demo/MathGame.java\n+++ b/demo/src/main/java/demo/MathGame.java\n@@ -0,0 +1,63 @@\n+package demo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MathGame {\n+    private static Random random = new Random();\n+\n+    private int illegalArgumentCount = 0;\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        MathGame game = new MathGame();\n+        while (true) {\n+            game.run();\n+            TimeUnit.SECONDS.sleep(1);\n+        }\n+    }\n+\n+    public void run() throws InterruptedException {\n+        try {\n+            int number = random.nextInt();\n+            List<Integer> primeFactors = primeFactors(number);\n+            print(number, primeFactors);\n+\n+        } catch (Exception e) {\n+            System.out.println(String.format(\"illegalArgumentCount:%3d, \", illegalArgumentCount) + e.getMessage());\n+        }\n+    }\n+\n+    public static void print(int number, List<Integer> primeFactors) {\n+        StringBuffer sb = new StringBuffer(number + \"=\");\n+        for (int factor : primeFactors) {\n+            sb.append(factor).append('*');\n+        }\n+        if (sb.charAt(sb.length() - 1) == '*') {\n+            sb.deleteCharAt(sb.length() - 1);\n+        }\n+        System.out.println(sb);\n+    }\n+\n+    public List<Integer> primeFactors(int number) {\n+        if (number < 2) {\n+            illegalArgumentCount++;\n+            throw new IllegalArgumentException(\"number is: \" + number + \", need >= 2\");\n+        }\n+\n+        List<Integer> result = new ArrayList<Integer>();\n+        int i = 2;\n+        while (i <= number) {\n+            if (number % i == 0) {\n+                result.add(i);\n+                number = number / i;\n+                i = 2;\n+            } else {\n+                i++;\n+            }\n+        }\n+\n+        return result;\n+    }\n+}",
    "output": "add demo module. #260"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.java\n@@ -23,7 +23,7 @@ public class AnnotatedCommandImpl extends Command {\n \n     public AnnotatedCommandImpl(Class<? extends AnnotatedCommand> clazz) {\n         this.clazz = clazz;\n-        cli = CLIConfigurator.define(clazz);\n+        cli = CLIConfigurator.define(clazz, true);\n         cli.addOption(new Option().setArgName(\"help\").setFlag(true).setShortName(\"h\").setLongName(\"help\")\n                 .setDescription(\"this help\").setHelp(true));\n     }",
    "output": "upgrade cli to 1.0.2 to support case sensitive options. close #322"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -15,6 +15,7 @@\n import com.taobao.middleware.cli.annotations.Summary;\n \n import io.termd.core.readline.Readline;\n+import io.termd.core.util.Helper;\n \n /**\n  *\n@@ -62,9 +63,7 @@ public void process(CommandProcess process) {\n                 for (int i = 0; i < n; ++i) {\n                     int[] line = history.get(n - i - 1);\n                     sb.append(String.format(\"%5s  \", size - (n - i - 1)));\n-                    for (int codePoint : line) {\n-                        sb.append(Character.toChars(codePoint));\n-                    }\n+                    Helper.appendCodePoints(line, sb);\n                     sb.append('\\n');\n                 }\n ",
    "output": "improve history command"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n@@ -7,6 +7,7 @@\n import com.taobao.text.Color;\n import com.taobao.text.Decoration;\n import com.taobao.text.Style;\n+import com.taobao.text.ui.RowElement;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n@@ -63,16 +64,31 @@ public void usage(StringBuilder builder, String prefix, CLI cli) {\n         if (!cli.getOptions().isEmpty() || !cli.getArguments().isEmpty()) {\n             table.add(row().add(\"\"));\n             table.row(label(\"OPTIONS:\").style(getHighlightedStyle()));\n-            for (Option option: cli.getOptions()) {\n-                if (option.acceptValue()) {\n-                    table.add(row().add(label(\"-\" + option.getShortName() + \", --\" + option.getLongName() + \" <value>\")\n-                            .style(getHighlightedStyle()))\n-                            .add(option.getDescription()));\n+            for (Option option : cli.getOptions()) {\n+                StringBuilder optionSb = new StringBuilder(32);\n+\n+                // short name\n+                if (isNullOrEmpty(option.getShortName())) {\n+                    optionSb.append(\"   \");\n                 } else {\n-                    table.add(row().add(label(\"-\" + option.getShortName() + \", --\" + option.getLongName())\n-                            .style(getHighlightedStyle()))\n-                            .add(option.getDescription()));\n+                    optionSb.append('-').append(option.getShortName());\n+                    if (isNullOrEmpty(option.getLongName())) {\n+                        optionSb.append(' ');\n+                    } else {\n+                        optionSb.append(',');\n+                    }\n                 }\n+                // long name\n+                if (!isNullOrEmpty(option.getLongName())) {\n+                    optionSb.append(\" --\").append(option.getLongName());\n+                }\n+\n+                if (option.acceptValue()) {\n+                    optionSb.append(\" <value>\");\n+                }\n+\n+                table.add(row().add(label(optionSb.toString()).style(getHighlightedStyle()))\n+                                .add(option.getDescription()));\n             }\n \n             for (Argument argument: cli.getArguments()) {",
    "output": "improve help format"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/cli/CompletionUtils.java\n@@ -99,7 +99,12 @@ private static void complete(Completion completion, String prefix, List<String>\n         } else {\n             String commonPrefix = CompletionUtils.findLongestCommonPrefix(candidates);\n             if (commonPrefix.length() > 0) {\n-                completion.complete(commonPrefix, false);\n+                if (commonPrefix.length() == prefix.length()) {\n+                    completion.complete(candidates);\n+                } else {\n+                    completion.complete(commonPrefix.substring(prefix.length(), commonPrefix.length()), false);\n+                }\n+\n             } else {\n                 completion.complete(candidates);\n             }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java\n@@ -49,9 +49,11 @@ public void complete(List<String> candidates) {\n                 CliToken lastToken = tokens.get(tokens.size() - 1);\n                 if (!commonPrefix.equals(lastToken.value())) {\n                     // only complete if the common prefix is longer than the last token\n-                    String strToComplete = commonPrefix.substring(lastToken.value().length());\n-                    completion.complete(io.termd.core.util.Helper.toCodePoints(strToComplete), false);\n-                    return;\n+                    if (commonPrefix.length() > lastToken.value().length()) {\n+                        String strToComplete = commonPrefix.substring(lastToken.value().length());\n+                        completion.complete(io.termd.core.util.Helper.toCodePoints(strToComplete), false);\n+                        return;\n+                    }\n                 }\n             }\n         }",
    "output": "fix long name option completion. close #318"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java\n@@ -42,7 +42,7 @@\n         \"  tt -t *StringUtils isEmpty\\n\" +\n         \"  tt -t *StringUtils isEmpty params[0].length==1\\n\" +\n         \"  tt -l\\n\" +\n-        \"  tt -D\\n\" +\n+        \"  tt --delete-all\\n\" +\n         \"  tt -i 1000 -w params[0]\\n\" +\n         \"  tt -i 1000 -d\\n\" +\n         \"  tt -i 1000\\n\" +\n@@ -106,7 +106,7 @@ public void setList(boolean list) {\n         isList = list;\n     }\n \n-    @Option(shortName = \"D\", longName = \"delete-all\", flag = true)\n+    @Option(longName = \"delete-all\", flag = true)\n     @Description(\"Delete all the time fragments\")\n     public void setDeleteAll(boolean deleteAll) {\n         isDeleteAll = deleteAll;",
    "output": "change tt -D to --delete-all. fix #219"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -102,7 +102,7 @@ public class Bootstrap {\n     private String batchFile;\n \n     @Argument(argName = \"pid\", index = 0, required = false)\n-    @Description(\"target pid\")\n+    @Description(\"Target pid\")\n     public void setPid(int pid) {\n         this.pid = pid;\n     }\n@@ -168,7 +168,7 @@ public void setuseHttp(boolean useHttp) {\n     }\n \n     @Option(longName = \"attach-only\", flag = true)\n-    @Description(\"attach target process only, do not connect\")\n+    @Description(\"Attach target process only, do not connect\")\n     public void setAttachOnly(boolean attachOnly) {\n         this.attachOnly = attachOnly;\n     }",
    "output": "as.sh support -v options. #130"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -20,6 +20,7 @@\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.JavaVersionUtils;\n import com.taobao.arthas.common.SocketUtils;\n+import com.taobao.arthas.common.UsageRender;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.UsageMessageFormatter;\n@@ -442,7 +443,7 @@ private static String usage(CLI cli) {\n         UsageMessageFormatter usageMessageFormatter = new UsageMessageFormatter();\n         usageMessageFormatter.setOptionComparator(null);\n         cli.usage(usageStringBuilder, usageMessageFormatter);\n-        return usageStringBuilder.toString();\n+        return UsageRender.render(usageStringBuilder.toString());\n     }\n \n     public String getArthasHome() {\n\ndiff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -18,6 +18,7 @@\n import org.apache.commons.net.telnet.WindowSizeOptionHandler;\n \n import com.taobao.arthas.common.OSUtils;\n+import com.taobao.arthas.common.UsageRender;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.UsageMessageFormatter;\n@@ -309,7 +310,7 @@ private static String usage(CLI cli) {\n         UsageMessageFormatter usageMessageFormatter = new UsageMessageFormatter();\n         usageMessageFormatter.setOptionComparator(null);\n         cli.usage(usageStringBuilder, usageMessageFormatter);\n-        return usageStringBuilder.toString();\n+        return UsageRender.render(usageStringBuilder.toString());\n     }\n \n     public String getTargetIp() {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -66,6 +66,10 @@ public abstract class AnsiLog {\n         }\n     }\n \n+    public static boolean enableColor() {\n+        return enableColor;\n+    }\n+\n     /**\n      * set logger Level\n      *\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/UsageRender.java b/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n--- a/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n+++ b/common/src/main/java/com/taobao/arthas/common/UsageRender.java\n@@ -0,0 +1,30 @@\n+package com.taobao.arthas.common;\n+\n+/**\n+ *\n+ * @author hengyunabc 2018-11-22\n+ *\n+ */\n+public class UsageRender {\n+\n+    public static String render(String usage) {\n+        if (AnsiLog.enableColor()) {\n+            StringBuilder sb = new StringBuilder(1024);\n+            String lines[] = usage.split(\"\\\\r?\\\\n\");\n+            for (String line : lines) {\n+                if (line.startsWith(\"Usage: \")) {\n+                    sb.append(AnsiLog.green(\"Usage: \"));\n+                    sb.append(line.substring(\"Usage: \".length()));\n+                } else if (!line.startsWith(\" \") && line.endsWith(\":\")) {\n+                    sb.append(AnsiLog.green(line));\n+                } else {\n+                    sb.append(line);\n+                }\n+                sb.append('\\n');\n+            }\n+            return sb.toString();\n+        } else {\n+            return usage;\n+        }\n+    }\n+}",
    "output": "Print usage support ansi color. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -37,8 +37,15 @@\n @Name(\"arthas-boot\")\n @Summary(\"Bootstrap Arthas\")\n @Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0 --telnet-port 9999 \\n\"\n-                + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\")\n+                + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0\\n\"\n+                + \"  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\\n\"\n+                + \"  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\\n\"\n+                + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\"\n+                + \"  java -jar arthas-boot.jar --use-version 3.0.5\\n\"\n+                + \"  java -jar arthas-boot.jar --session-timeout 3600\\n\"\n+                + \"  java -jar arthas-boot.jar --attach-only\\n\"\n+                + \"  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\\n\"\n+                + \"WIKI:\\n\" + \"  https://alibaba.github.io/arthas\\n\")\n public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;\n@@ -120,7 +127,7 @@ public void setHttpPort(int httpPort) {\n     }\n \n     @Option(longName = \"session-timeout\")\n-    @Description(\"The session timeout seconds, default 3000\")\n+    @Description(\"The session timeout seconds, default 300\")\n     public void setSessionTimeout(Long sessionTimeout) {\n         this.sessionTimeout = sessionTimeout;\n     }",
    "output": "update arthas-boot usage. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -43,6 +43,8 @@ public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;\n     private static final String DEFAULT_TARGET_IP = \"127.0.0.1\";\n+    private static final File ARTHAS_LIB_DIR = new File(\n+                    System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n \n     private boolean help = false;\n \n@@ -258,6 +260,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             // try to find from ~/.arthas/lib\n             File specialVersionDir = new File(System.getProperty(\"user.home\"), \".arthas\" + File.separator + \"lib\"\n                             + File.separator + bootStrap.getUseVersion() + File.separator + \"arthas\");\n+            if (!specialVersionDir.exists()) {\n+                // try to download arthas from remote server.\n+                DownloadUtils.downArthasPackaging(bootStrap.getRepoMirror(), bootStrap.isuseHttp(),\n+                                bootStrap.getUseVersion(), ARTHAS_LIB_DIR.getAbsolutePath());\n+            }\n             verifyArthasHome(specialVersionDir.getAbsolutePath());\n             arthasHomeDir = specialVersionDir;\n         }\n@@ -279,9 +286,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         // try to download from remote server\n         if (arthasHomeDir == null) {\n-            File arthasLibDir = new File(\n-                            System.getProperty(\"user.home\") + File.separator + \".arthas\" + File.separator + \"lib\");\n-            arthasLibDir.mkdirs();\n+            ARTHAS_LIB_DIR.mkdirs();\n \n             /**\n              * <pre>\n@@ -290,7 +295,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n              * 3. compare two version\n              * </pre>\n              */\n-            List<String> versionList = listNames(arthasLibDir);\n+            List<String> versionList = listNames(ARTHAS_LIB_DIR);\n             Collections.sort(versionList);\n \n             String localLastestVersion = null;\n@@ -305,7 +310,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             if (localLastestVersion == null) {\n                 if (remoteLastestVersion == null) {\n                     // exit\n-                    AnsiLog.error(\"Can not find Arthas under local: {} and remote: {}\", arthasLibDir,\n+                    AnsiLog.error(\"Can not find Arthas under local: {} and remote: {}\", ARTHAS_LIB_DIR,\n                                     bootStrap.getRepoMirror());\n                     System.exit(1);\n                 } else {\n@@ -323,12 +328,12 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             if (needDownload) {\n                 // try to download arthas from remote server.\n                 DownloadUtils.downArthasPackaging(bootStrap.getRepoMirror(), bootStrap.isuseHttp(),\n-                                remoteLastestVersion, arthasLibDir.getAbsolutePath());\n+                                remoteLastestVersion, ARTHAS_LIB_DIR.getAbsolutePath());\n                 localLastestVersion = remoteLastestVersion;\n             }\n \n             // get the latest version\n-            arthasHomeDir = new File(arthasLibDir, localLastestVersion + File.separator + \"arthas\");\n+            arthasHomeDir = new File(ARTHAS_LIB_DIR, localLastestVersion + File.separator + \"arthas\");\n         }\n \n         verifyArthasHome(arthasHomeDir.getAbsolutePath());\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -134,13 +134,14 @@ public static void saveUrl(final String filename, final String urlString, boolea\n             long lastPrintTime = System.currentTimeMillis();\n             while ((count = in.read(data, 0, 1024 * 1024)) != -1) {\n                 totalCount += count;\n-                long now = System.currentTimeMillis();\n-                if (now - lastPrintTime > 3000) {\n-                    AnsiLog.info(\"File size: {}, Downloaded size: {}, Downloading ...\", formatFileSize(fileSize),\n-                                    formatFileSize(totalCount));\n-                    lastPrintTime = now;\n+                if (printProgress) {\n+                    long now = System.currentTimeMillis();\n+                    if (now - lastPrintTime > 1000) {\n+                        AnsiLog.info(\"File size: {}, downloaded size: {}, downloading ...\", formatFileSize(fileSize),\n+                                        formatFileSize(totalCount));\n+                        lastPrintTime = now;\n+                    }\n                 }\n-\n                 fout.write(data, 0, count);\n             }\n         } catch (javax.net.ssl.SSLException e) {\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/IOUtils.java b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/IOUtils.java\n@@ -72,7 +72,7 @@ public static void unzip(String zipFile, String extractFolder) throws IOExceptio\n         File file = new File(zipFile);\n         ZipFile zip = null;\n         try {\n-            int BUFFER = 2048;\n+            int BUFFER = 1024 * 8;\n \n             zip = new ZipFile(file);\n             String newPath = extractFolder;",
    "output": "arthas-boot support download specify version by --use-version. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -46,10 +46,7 @@ public class DownloadUtils {\n     public static String readMavenReleaseVersion(String mavenMetaDataUrl) {\n         InputStream inputStream = null;\n         try {\n-            URLConnection connection = new URL(mavenMetaDataUrl).openConnection();\n-            if (connection instanceof HttpURLConnection) {\n-                ((HttpURLConnection) connection).setConnectTimeout(CONNECTION_TIMEOUT);\n-            }\n+            URLConnection connection = openURLConnection(mavenMetaDataUrl);\n             inputStream = connection.getInputStream();\n \n             DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n@@ -104,7 +101,7 @@ public static void downArthasPackaging(String repoMirror, boolean https, String\n         String remoteDownloadUrl = REMOTE_DOWNLOAD_URL.replace(\"${REPO}\", repoUrl).replace(\"${VERSION}\", arthasVersion);\n         AnsiLog.info(\"Start download arthas from remote server: \" + remoteDownloadUrl);\n         saveUrl(tempFile.getAbsolutePath(), remoteDownloadUrl, true);\n-\n+        AnsiLog.info(\"Download arthas success.\");\n         IOUtils.unzip(tempFile.getAbsolutePath(), unzipDir.getAbsolutePath());\n     }\n \n@@ -113,10 +110,7 @@ public static void saveUrl(final String filename, final String urlString, boolea\n         BufferedInputStream in = null;\n         FileOutputStream fout = null;\n         try {\n-            URLConnection connection = new URL(urlString).openConnection();\n-            if (connection instanceof HttpURLConnection) {\n-                ((HttpURLConnection) connection).setConnectTimeout(CONNECTION_TIMEOUT);\n-            }\n+            URLConnection connection = openURLConnection(urlString);\n             in = new BufferedInputStream(connection.getInputStream());\n             List<String> values = connection.getHeaderFields().get(\"Content-Length\");\n             int fileSize = 0;\n@@ -151,6 +145,32 @@ public static void saveUrl(final String filename, final String urlString, boolea\n         }\n     }\n \n+    /**\n+     * support redirect\n+     *\n+     * @param url\n+     * @return\n+     * @throws MalformedURLException\n+     * @throws IOException\n+     */\n+    private static URLConnection openURLConnection(String url) throws MalformedURLException, IOException {\n+        URLConnection connection = new URL(url).openConnection();\n+        if (connection instanceof HttpURLConnection) {\n+            ((HttpURLConnection) connection).setConnectTimeout(CONNECTION_TIMEOUT);\n+            // normally, 3xx is redirect\n+            int status = ((HttpURLConnection) connection).getResponseCode();\n+            if (status != HttpURLConnection.HTTP_OK) {\n+                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM\n+                                || status == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    String newUrl = ((HttpURLConnection) connection).getHeaderField(\"Location\");\n+                    AnsiLog.debug(\"Try to open url: {}, redirect to: {}\", url, newUrl);\n+                    return openURLConnection(newUrl);\n+                }\n+            }\n+        }\n+        return connection;\n+    }\n+\n     private static String formatFileSize(long size) {\n         String hrSize = null;\n ",
    "output": "DownloadUtils support http redirect. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -37,7 +37,7 @@\n @Summary(\"Bootstrap Arthas\")\n @Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n                 + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0 --telnet-port 9999 \\n\"\n-                + \"  java -jar arthas-boot.jar -f batch.as 127.0.0.1\\n\")\n+                + \"  java -jar arthas-boot.jar -f batch.as <pid>\\n\")\n public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;",
    "output": "update comment"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -36,7 +36,7 @@\n @Name(\"arthas-boot\")\n @Summary(\"Bootstrap Arthas\")\n @Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-boot.jar <pid>\\n\"\n-                + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0 --telnet-port 9999' \\n\"\n+                + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0 --telnet-port 9999 \\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as 127.0.0.1\\n\")\n public class Bootstrap {\n     private static final int DEFAULT_TELNET_PORT = 3658;\n@@ -132,7 +132,7 @@ public void setUseVersion(String useVersion) {\n     }\n \n     @Option(longName = \"repo-mirror\")\n-    @Description(\"Use special maven repository mirror\")\n+    @Description(\"Use special maven repository mirror, value is center/aliyun or http repo url.\")\n     public void setRepoMirror(String repoMirror) {\n         this.repoMirror = repoMirror;\n     }",
    "output": "update arthas-boot help info"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -222,13 +222,21 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         }\n \n         if (telnetPortPid > 0 && pid != telnetPortPid) {\n-            AnsiLog.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n+            AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootStrap.getTelnetPort());\n+            AnsiLog.error(\"If you still want to attach target process {}, Try to set a different telnet port by using --telnet-port argument.\",\n+                            pid);\n+            AnsiLog.error(\"Or try to shutdown the process {} using the telnet port first.\", telnetPortPid);\n+            System.exit(1);\n         }\n \n         if (httpPortPid > 0 && pid != httpPortPid) {\n-            AnsiLog.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n+            AnsiLog.error(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootStrap.getHttpPort());\n+            AnsiLog.error(\"If you still want to attach target process {}, Try to set a different http port by using --http-port argument.\",\n+                            pid);\n+            AnsiLog.error(\"Or try to shutdown the process {} using the http port first.\", httpPortPid);\n+            System.exit(1);\n         }\n \n         // find arthas home\n@@ -285,32 +293,36 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         AnsiLog.info(\"arthas home: \" + arthasHomeDir);\n \n-        // start arthas-core.jar\n-        List<String> attachArgs = new ArrayList<String>();\n-        attachArgs.add(\"-jar\");\n-        attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n-        attachArgs.add(\"-pid\");\n-        attachArgs.add(\"\" + pid);\n-        attachArgs.add(\"-target-ip\");\n-        attachArgs.add(bootStrap.getTargetIp());\n-        attachArgs.add(\"-telnet-port\");\n-        attachArgs.add(\"\" + bootStrap.getTelnetPort());\n-        attachArgs.add(\"-http-port\");\n-        attachArgs.add(\"\" + bootStrap.getHttpPort());\n-        attachArgs.add(\"-core\");\n-        attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n-        attachArgs.add(\"-agent\");\n-        attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n-        if (bootStrap.getSessionTimeout() != null) {\n-            attachArgs.add(\"-session-timeout\");\n-            attachArgs.add(\"\" + bootStrap.getSessionTimeout());\n-        }\n+        if (telnetPortPid > 0 && pid == telnetPortPid) {\n+            AnsiLog.info(\"The target process already listen port {}, skip attach.\", bootStrap.getTelnetPort());\n+        } else {\n+            // start arthas-core.jar\n+            List<String> attachArgs = new ArrayList<String>();\n+            attachArgs.add(\"-jar\");\n+            attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n+            attachArgs.add(\"-pid\");\n+            attachArgs.add(\"\" + pid);\n+            attachArgs.add(\"-target-ip\");\n+            attachArgs.add(bootStrap.getTargetIp());\n+            attachArgs.add(\"-telnet-port\");\n+            attachArgs.add(\"\" + bootStrap.getTelnetPort());\n+            attachArgs.add(\"-http-port\");\n+            attachArgs.add(\"\" + bootStrap.getHttpPort());\n+            attachArgs.add(\"-core\");\n+            attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n+            attachArgs.add(\"-agent\");\n+            attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n+            if (bootStrap.getSessionTimeout() != null) {\n+                attachArgs.add(\"-session-timeout\");\n+                attachArgs.add(\"\" + bootStrap.getSessionTimeout());\n+            }\n \n-        AnsiLog.info(\"Try to attach process \" + pid);\n-        AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n-        ProcessUtils.startArthasCore(pid, attachArgs);\n+            AnsiLog.info(\"Try to attach process \" + pid);\n+            AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n+            ProcessUtils.startArthasCore(pid, attachArgs);\n \n-        AnsiLog.info(\"Attach process {} success.\", pid);\n+            AnsiLog.info(\"Attach process {} success.\", pid);\n+        }\n \n         if (bootStrap.isAttachOnly()) {\n             System.exit(0);\n@@ -337,6 +349,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         telnetArgs.add(bootStrap.getTargetIp());\n         telnetArgs.add(\"\" + bootStrap.getTelnetPort());\n \n+        AnsiLog.info(\"arthas-client connect {} {}\", bootStrap.getTargetIp(), bootStrap.getTelnetPort());\n         AnsiLog.debug(\"Start arthas-client.jar args: \" + telnetArgs);\n         mainMethod.invoke(null, new Object[] { telnetArgs.toArray(new String[0]) });\n     }",
    "output": "improve attach, skip attach logic. #278"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HelpCommand.java\n@@ -1,9 +1,12 @@\n package com.taobao.arthas.core.command.basic1000;\n \n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.Command;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.shell.command.CommandResolver;\n+import com.taobao.arthas.core.shell.session.Session;\n import com.taobao.arthas.core.util.usage.StyledUsageFormatter;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -42,12 +45,7 @@ public void setCmd(String cmd) {\n \n     @Override\n     public void process(CommandProcess process) {\n-        List<CommandResolver> commandResolvers = process.session().getCommandResolvers();\n-        List<Command> commands = new ArrayList<Command>();\n-        for (CommandResolver commandResolver : commandResolvers) {\n-            commands.addAll(commandResolver.commands());\n-        }\n-\n+        List<Command> commands = allCommands(process.session());\n         Command targetCmd = findCommand(commands);\n         String message;\n         if (targetCmd == null) {\n@@ -59,6 +57,21 @@ public void process(CommandProcess process) {\n         process.end();\n     }\n \n+    @Override\n+    public void complete(Completion completion) {\n+        List<Command> commands = allCommands(completion.session());\n+\n+        List<String> names = new ArrayList<String>(commands.size());\n+        for (Command command : commands) {\n+            CLI cli = command.cli();\n+            if (cli == null || cli.isHidden()) {\n+                continue;\n+            }\n+            names.add(command.name());\n+        }\n+        CompletionUtils.complete(completion, names);\n+    }\n+\n     private static String commandHelp(Command command, int width) {\n         return StyledUsageFormatter.styledUsage(command.cli(), width);\n     }\n@@ -77,6 +90,15 @@ private static Element mainHelp(List<Command> commands) {\n         return table;\n     }\n \n+    private List<Command> allCommands(Session session) {\n+        List<CommandResolver> commandResolvers = session.getCommandResolvers();\n+        List<Command> commands = new ArrayList<Command>();\n+        for (CommandResolver commandResolver : commandResolvers) {\n+            commands.addAll(commandResolver.commands());\n+        }\n+        return commands;\n+    }\n+\n     private Command findCommand(List<Command> commands) {\n         for (Command command : commands) {\n             if (command.name().equals(cmd)) {\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n@@ -25,7 +25,7 @@\n  */\n @Name(\"sysenv\")\n @Summary(\"Display the system env.\")\n-@Description(Constants.EXAMPLE + \"sysenv\\n\" + \"sysenv USER\\n\" + Constants.WIKI + Constants.WIKI_HOME + \"sysenv\")\n+@Description(Constants.EXAMPLE + \"  sysenv\\n\" + \"  sysenv USER\\n\" + Constants.WIKI + Constants.WIKI_HOME + \"sysenv\")\n public class SystemEnvCommand extends AnnotatedCommand {\n \n     private String envName;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n@@ -23,7 +23,7 @@\n  */\n @Name(\"sysprop\")\n @Summary(\"Display, and change the system properties.\")\n-@Description(Constants.EXAMPLE + \"sysprop\\n\"+ \"sysprop file.encoding\\n\" + \"sysprop production.mode true\\n\" +\n+@Description(Constants.EXAMPLE + \"  sysprop\\n\"+ \"  sysprop file.encoding\\n\" + \"  sysprop production.mode true\\n\" +\n         Constants.WIKI + Constants.WIKI_HOME + \"sysprop\")\n public class SystemPropertyCommand extends AnnotatedCommand {\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/usage/StyledUsageFormatter.java\n@@ -28,6 +28,9 @@ public StyledUsageFormatter(Color fontColor) {\n     }\n \n     public static String styledUsage(CLI cli, int width) {\n+        if(cli == null) {\n+            return \"\";\n+        }\n         StringBuilder usageBuilder = new StringBuilder();\n         UsageMessageFormatter formatter = new StyledUsageFormatter(Color.green);\n         formatter.setWidth(width);",
    "output": "help command support completion"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -2,6 +2,7 @@\n \n import com.taobao.arthas.core.command.basic1000.ClsCommand;\n import com.taobao.arthas.core.command.basic1000.HelpCommand;\n+import com.taobao.arthas.core.command.basic1000.HistoryCommand;\n import com.taobao.arthas.core.command.basic1000.KeymapCommand;\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n@@ -82,5 +83,6 @@ private static void initCommands() {\n         commands.add(Command.create(SystemPropertyCommand.class));\n         commands.add(Command.create(SystemEnvCommand.class));\n         commands.add(Command.create(RedefineCommand.class));\n+        commands.add(Command.create(HistoryCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java\n@@ -0,0 +1,77 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.shell.session.Session;\n+import com.taobao.arthas.core.shell.term.impl.TermImpl;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Option;\n+import com.taobao.middleware.cli.annotations.Summary;\n+\n+import io.termd.core.readline.Readline;\n+\n+/**\n+ *\n+ * @author hengyunabc 2018-11-18\n+ *\n+ */\n+@Name(\"history\")\n+@Summary(\"Display command history\")\n+@Description(Constants.EXAMPLE + \"  history\\n\" + \"  history -c\\n\" + \"  history 5\\n\")\n+public class HistoryCommand extends AnnotatedCommand {\n+    boolean clear = false;\n+    int n = -1;\n+\n+    @Option(shortName = \"c\", longName = \"clear\")\n+    @Description(\"clear history\")\n+    public void setClear(boolean clear) {\n+        this.clear = clear;\n+    }\n+\n+    @Argument(index = 0, argName = \"n\", required = false)\n+    @Description(\"how many history commnads to display\")\n+    public void setNumber(int n) {\n+        this.n = n;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        Session session = process.session();\n+        Object termObject = session.get(Session.TTY);\n+        if (termObject != null && termObject instanceof TermImpl) {\n+            TermImpl term = (TermImpl) termObject;\n+            Readline readline = term.getReadline();\n+            List<int[]> history = readline.getHistory();\n+\n+            if (clear) {\n+                readline.setHistory(new ArrayList<int[]>());\n+            } else {\n+                StringBuilder sb = new StringBuilder();\n+\n+                int size = history.size();\n+                if (n < 0) {\n+                    n = size;\n+                }\n+\n+                for (int i = 0; i < n; ++i) {\n+                    int[] line = history.get(n - i - 1);\n+                    sb.append(String.format(\"%5s  \", size - (n - i - 1)));\n+                    for (int codePoint : line) {\n+                        sb.append(Character.toChars(codePoint));\n+                    }\n+                    sb.append('\\n');\n+                }\n+\n+                process.write(sb.toString());\n+            }\n+        }\n+\n+        process.end();\n+    }\n+}",
    "output": "add history command. close #298"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -4,7 +4,6 @@\n import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.core.config.Configure;\n-import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n import com.taobao.middleware.cli.CommandLine;\n@@ -36,7 +35,7 @@ private Configure parse(String[] args) {\n         Option httpPort = new TypedOption<Integer>().setType(Integer.class)\n                 .setShortName(\"http-port\").setDefaultValue(DEFAULT_HTTP_PORT);\n         Option sessionTimeout = new TypedOption<Integer>().setType(Integer.class)\n-                        .setShortName(\"session-timeout\").setDefaultValue(\"\" + ShellServerOptions.DEFAULT_SESSION_TIMEOUT);\n+                        .setShortName(\"session-timeout\").setDefaultValue(\"\" + Configure.DEFAULT_SESSION_TIMEOUT_SECONDS);\n         CLI cli = CLIs.create(\"arthas\").addOption(pid).addOption(core).addOption(agent).addOption(target)\n                 .addOption(telnetPort).addOption(httpPort).addOption(sessionTimeout);\n         CommandLine commandLine = cli.parse(Arrays.asList(args));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -16,7 +16,7 @@\n  * @author hengyunabc 2018-11-12\n  */\n public class Configure {\n-\n+    public static final long DEFAULT_SESSION_TIMEOUT_SECONDS = ShellServerOptions.DEFAULT_SESSION_TIMEOUT/1000;\n     private String ip;\n     private int telnetPort;\n     private int httpPort;\n@@ -26,9 +26,8 @@ public class Configure {\n \n     /**\n      * session timeout seconds\n-     * @see com.taobao.arthas.core.shell.ShellServerOptions#DEFAULT_SESSION_TIMEOUT\n      */\n-    private long sessionTimeout = ShellServerOptions.DEFAULT_SESSION_TIMEOUT/1000;\n+    private long sessionTimeout = DEFAULT_SESSION_TIMEOUT_SECONDS;\n \n     public String getIp() {\n         return ip;",
    "output": "fix default timeout. #296"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -6,7 +6,6 @@\n import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.ClassUtils;\n import com.taobao.arthas.core.util.Decompiler;\n-import com.taobao.arthas.core.util.FileUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.SearchUtils;\n import com.taobao.arthas.core.util.TypeRenderUtils;\n@@ -24,20 +23,17 @@\n import com.taobao.text.ui.LabelElement;\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n-import org.benf.cfr.reader.Main;\n-import org.objectweb.asm.Type;\n \n import java.io.File;\n-import java.io.IOException;\n import java.lang.instrument.Instrumentation;\n-import java.nio.charset.Charset;\n import java.util.*;\n import java.util.regex.Pattern;\n \n import static com.taobao.text.ui.Element.label;\n \n /**\n  * @author diecui1202 on 15/11/24.\n+ * @author hengyunabc 2018-11-16\n  */\n @Name(\"jad\")\n @Summary(\"Decompile class\")\n@@ -49,9 +45,6 @@\n public class JadCommand extends AnnotatedCommand {\n     private static final Logger logger = LogUtil.getArthasLogger();\n     private static Pattern pattern = Pattern.compile(\"(?m)^/\\\\*\\\\s*\\\\*/\\\\s*$\" + System.getProperty(\"line.separator\"));\n-    private static final String OUTPUTOPTION = \"--outputdir\";\n-    private static final String COMMENTS = \"--comments\";\n-    private static final String DecompilePath = new File(LogUtil.LOGGER_FILE).getParent() + File.separator + \"decompile\";\n \n     private String classPattern;\n     private String methodName;\n@@ -95,8 +88,8 @@ public void process(CommandProcess process) {\n             } else if (matchedClasses.size() > 1) {\n                 processMatches(process, matchedClasses);\n             } else { // matchedClasses size is 1\n-                // find inner classes. TODO slow\n-                Set<Class<?>> withInnerClasses = SearchUtils.searchClassOnly(inst,  matchedClasses.iterator().next().getName() + \"(?!.*\\\\$\\\\$Lambda\\\\$).*\", true, code);\n+                // find inner classes.\n+                Set<Class<?>> withInnerClasses = SearchUtils.searchClassOnly(inst,  matchedClasses.iterator().next().getName() + \"$*\", false, code);\n                 if(withInnerClasses.isEmpty()) {\n                     withInnerClasses = matchedClasses;\n                 }\n@@ -119,8 +112,7 @@ private void processExactMatch(CommandProcess process, RowAffect affect, Instrum\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n \n-            String source;\n-            source = Decompiler.decompile(classFile.getAbsolutePath(), methodName);\n+            String source = Decompiler.decompile(classFile.getAbsolutePath(), methodName);\n             if (source != null) {\n                 source = pattern.matcher(source).replaceAll(\"\");\n             } else {\n@@ -164,21 +156,4 @@ private void processNoMatch(CommandProcess process) {\n         process.write(\"No class found for: \" + classPattern + \"\\n\");\n     }\n \n-    public static void main(String[] args) {\n-        String[] names = {\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$1$$Lambda$19/381016128\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$$Lambda$16/17741163\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$1\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$123\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$A\",\n-                \"com.taobao.container.web.arthas.mvc.AppInfoController$ABC\"\n-        };\n-\n-        String pattern = \"com.taobao.container.web.arthas.mvc.AppInfoController\" + \"(?!.*\\\\$\\\\$Lambda\\\\$).*\";\n-        for(String name : names) {\n-            System.out.println(name + \"    \" + Pattern.matches(pattern, name));\n-        }\n-\n-    }\n }",
    "output": "improve jad command inner class search. #301"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java\n@@ -90,7 +90,9 @@ public static Matcher<String> classNameMatcher(String classPattern, boolean isRe\n         if (StringUtils.isEmpty(classPattern)) {\n             classPattern = isRegEx ? \".*\" : \"*\";\n         }\n-        classPattern = StringUtils.replace(classPattern, \"/\", \".\");\n+        if (!classPattern.contains(\"$$Lambda\")) {\n+            classPattern = StringUtils.replace(classPattern, \"/\", \".\");\n+        }\n         return isRegEx ? new RegexMatcher(classPattern) : new WildcardMatcher(classPattern);\n     }\n ",
    "output": "fix class search for which classes created by lambda method. #302"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java\n@@ -93,8 +93,12 @@ public void process(CommandProcess process) {\n                 processNoMatch(process);\n             } else if (matchedClasses.size() > 1) {\n                 processMatches(process, matchedClasses);\n-            } else {\n-                Set<Class<?>> withInnerClasses = SearchUtils.searchClassOnly(inst,  classPattern + \"(?!.*\\\\$\\\\$Lambda\\\\$).*\", true, code);\n+            } else { // matchedClasses size is 1\n+                // find inner classes. TODO slow\n+                Set<Class<?>> withInnerClasses = SearchUtils.searchClassOnly(inst,  matchedClasses.iterator().next().getName() + \"(?!.*\\\\$\\\\$Lambda\\\\$).*\", true, code);\n+                if(withInnerClasses.isEmpty()) {\n+                    withInnerClasses = matchedClasses;\n+                }\n                 processExactMatch(process, affect, inst, matchedClasses, withInnerClasses);\n             }\n         } finally {\n@@ -105,11 +109,12 @@ public void process(CommandProcess process) {\n \n     private void processExactMatch(CommandProcess process, RowAffect affect, Instrumentation inst, Set<Class<?>> matchedClasses, Set<Class<?>> withInnerClasses) {\n         Class<?> c = matchedClasses.iterator().next();\n-        matchedClasses = withInnerClasses;\n+        Set<Class<?>> allClasses = new HashSet<Class<?>>(withInnerClasses);\n+        allClasses.add(c);\n \n         try {\n-            ClassDumpTransformer transformer = new ClassDumpTransformer(matchedClasses);\n-            Enhancer.enhance(inst, transformer, matchedClasses);\n+            ClassDumpTransformer transformer = new ClassDumpTransformer(allClasses);\n+            Enhancer.enhance(inst, transformer, allClasses);\n             Map<Class<?>, File> classFiles = transformer.getDumpResult();\n             File classFile = classFiles.get(c);\n ",
    "output": "fix jad command do not match inner class. close #301"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java\n@@ -18,7 +18,7 @@\n  * @author vlinux on 14/10/23.\n  */\n @Name(\"shutdown\")\n-@Summary(\"Shut down Arthas server and exit the console\")\n+@Summary(\"Shutdown Arthas server and exit the console\")\n public class ShutdownCommand extends AnnotatedCommand {\n     @Override\n     public void process(CommandProcess process) {",
    "output": "fix typo"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -104,10 +104,18 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n \n         int currentPid = Integer.parseInt(ProcessUtils.getPid());\n         for (String line : lines) {\n-            int pid = new Scanner(line).nextInt();\n+            String[] strings = line.trim().split(\"\\\\s+\");\n+            if (strings.length < 1) {\n+                continue;\n+            }\n+            int pid = Integer.parseInt(strings[0]);\n             if (pid == currentPid) {\n                 continue;\n             }\n+            if (strings.length >= 2 && strings[1].equals(\"Jps\")) { // skip jps\n+                continue;\n+            }\n+\n             result.put(pid, line);\n         }\n ",
    "output": "ignore jps when select java process. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -49,6 +49,10 @@ public class Bootstrap {\n     private String targetIp = DEFAULT_TARGET_IP;\n     private int telnetPort = DEFAULT_TELNET_PORT;\n     private int httpPort = DEFAULT_HTTP_PORT;\n+    /**\n+     * @see com.taobao.arthas.core.shell.ShellServerOptions#DEFAULT_SESSION_TIMEOUT\n+     */\n+    private Long sessionTimeout;\n \n     private boolean verbose = false;\n \n@@ -109,6 +113,12 @@ public void setHttpPort(int httpPort) {\n         this.httpPort = httpPort;\n     }\n \n+    @Option(longName = \"session-timeout\")\n+    @Description(\"The session timeout seconds, default 3000\")\n+    public void setSessionTimeout(Long sessionTimeout) {\n+        this.sessionTimeout = sessionTimeout;\n+    }\n+\n     @Option(longName = \"arthas-home\")\n     @Description(\"The arthas home\")\n     public void setArthasHome(String arthasHome) {\n@@ -291,6 +301,10 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         attachArgs.add(new File(arthasHomeDir, \"arthas-core.jar\").getAbsolutePath());\n         attachArgs.add(\"-agent\");\n         attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n+        if (bootStrap.getSessionTimeout() != null) {\n+            attachArgs.add(\"-session-timeout\");\n+            attachArgs.add(\"\" + bootStrap.getSessionTimeout());\n+        }\n \n         AnsiLog.info(\"Try to attach process \" + pid);\n         AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n@@ -411,4 +425,8 @@ public int getPid() {\n     public boolean isHelp() {\n         return help;\n     }\n+\n+    public Long getSessionTimeout() {\n+        return sessionTimeout;\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -4,6 +4,7 @@\n import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.core.config.Configure;\n+import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n import com.taobao.middleware.cli.CommandLine;\n@@ -34,14 +35,17 @@ private Configure parse(String[] args) {\n                 .setShortName(\"telnet-port\").setDefaultValue(DEFAULT_TELNET_PORT);\n         Option httpPort = new TypedOption<Integer>().setType(Integer.class)\n                 .setShortName(\"http-port\").setDefaultValue(DEFAULT_HTTP_PORT);\n+        Option sessionTimeout = new TypedOption<Integer>().setType(Integer.class)\n+                        .setShortName(\"session-timeout\").setDefaultValue(\"\" + ShellServerOptions.DEFAULT_SESSION_TIMEOUT);\n         CLI cli = CLIs.create(\"arthas\").addOption(pid).addOption(core).addOption(agent).addOption(target)\n-                .addOption(telnetPort).addOption(httpPort);\n+                .addOption(telnetPort).addOption(httpPort).addOption(sessionTimeout);\n         CommandLine commandLine = cli.parse(Arrays.asList(args));\n \n         Configure configure = new Configure();\n         configure.setJavaPid((Integer) commandLine.getOptionValue(\"pid\"));\n         configure.setArthasAgent((String) commandLine.getOptionValue(\"agent\"));\n         configure.setArthasCore((String) commandLine.getOptionValue(\"core\"));\n+        configure.setSessionTimeout((Integer)commandLine.getOptionValue(\"session-timeout\"));\n         if (commandLine.getOptionValue(\"target-ip\") == null) {\n             throw new IllegalStateException(\"as.sh is too old to support web console, \" +\n                     \"please run the following command to upgrade to latest version:\" +\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -1,5 +1,6 @@\n package com.taobao.arthas.core.config;\n \n+import com.taobao.arthas.core.shell.ShellServerOptions;\n import com.taobao.arthas.core.util.reflect.ArthasReflectUtils;\n \n import java.lang.reflect.Field;\n@@ -12,6 +13,7 @@\n  * 配置类\n  *\n  * @author vlinux\n+ * @author hengyunabc 2018-11-12\n  */\n public class Configure {\n \n@@ -22,6 +24,12 @@ public class Configure {\n     private String arthasCore;\n     private String arthasAgent;\n \n+    /**\n+     * session timeout seconds\n+     * @see com.taobao.arthas.core.shell.ShellServerOptions#DEFAULT_SESSION_TIMEOUT\n+     */\n+    private long sessionTimeout = ShellServerOptions.DEFAULT_SESSION_TIMEOUT/1000;\n+\n     public String getIp() {\n         return ip;\n     }\n@@ -70,6 +78,14 @@ public void setArthasCore(String arthasCore) {\n         this.arthasCore = arthasCore;\n     }\n \n+    public long getSessionTimeout() {\n+        return sessionTimeout;\n+    }\n+\n+    public void setSessionTimeout(long sessionTimeout) {\n+        this.sessionTimeout = sessionTimeout;\n+    }\n+\n     // 对象的编码解码器\n     private final static FeatureCodec codec = new FeatureCodec(';', '=');\n \n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -79,7 +79,10 @@ public void bind(Configure configure) throws Throwable {\n         }\n \n         try {\n-            ShellServerOptions options = new ShellServerOptions().setInstrumentation(instrumentation).setPid(pid);\n+            ShellServerOptions options = new ShellServerOptions()\n+                            .setInstrumentation(instrumentation)\n+                            .setPid(pid)\n+                            .setSessionTimeout(configure.getSessionTimeout() * 1000);\n             shellServer = new ShellServerImpl(options, this);\n             BuiltinCommandPack builtinCommands = new BuiltinCommandPack();\n             List<CommandResolver> resolvers = new ArrayList<CommandResolver>();",
    "output": "support session timeout config. #296"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -55,11 +55,15 @@ public abstract class AnsiLog {\n     static {\n         if (System.console() != null) {\n             enableColor = true;\n-            // under windows, only support cygwin and mingw\n-            if (OSUtils.isWindows() && !OSUtils.isCygwinOrMinGW()) {\n+            // windows dos, do not support color\n+            if (OSUtils.isWindows()) {\n                 enableColor = false;\n             }\n         }\n+        // cygwin and mingw support color\n+        if (OSUtils.isCygwinOrMinGW()) {\n+            enableColor = true;\n+        }\n     }\n \n     /**\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -40,7 +40,7 @@ public static boolean isMac() {\n     public static boolean isCygwinOrMinGW() {\n         if (isWindows()) {\n             if ((System.getenv(\"MSYSTEM\") != null && System.getenv(\"MSYSTEM\").startsWith(\"MINGW\"))\n-                            || \"/bin/shell\".equals(System.getenv(\"SHELL\"))) {\n+                            || \"/bin/bash\".equals(System.getenv(\"SHELL\"))) {\n                 return true;\n             }\n         }",
    "output": "fix AnsiLog cygw/mingw support"
  },
  {
    "input": "diff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -12,13 +12,13 @@ public class OSUtils {\n \n     static PlatformEnum platform;\n     static {\n-        if (OPERATING_SYSTEM_NAME.startsWith(\"Linux\")) {\n+        if (OPERATING_SYSTEM_NAME.startsWith(\"linux\")) {\n             platform = PlatformEnum.LINUX;\n-        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Mac\") || OPERATING_SYSTEM_NAME.startsWith(\"Darwin\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Mac\") || OPERATING_SYSTEM_NAME.startsWith(\"Darwin\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"mac\") || OPERATING_SYSTEM_NAME.startsWith(\"darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Windows\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"windows\")) {\n             platform = PlatformEnum.WINDOWS;\n         } else {\n             platform = PlatformEnum.UNKNOWN;",
    "output": "fix OSUtils"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -72,7 +72,7 @@ public class Bootstrap {\n      */\n     private String repoMirror = \"center\";\n \n-    private boolean useHttps = false;\n+    private boolean useHttps = true;\n \n     private boolean attachOnly = false;\n \n@@ -128,7 +128,7 @@ public void setRepoMirror(String repoMirror) {\n     }\n \n     @Option(longName = \"use-https\")\n-    @Description(\"Use https to download\")\n+    @Description(\"Use https to download, default true\")\n     public void setUseHttps(boolean useHttps) {\n         this.useHttps = useHttps;\n     }",
    "output": "arthas-boot use https by default."
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -11,6 +11,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.logging.Level;\n \n import javax.xml.parsers.ParserConfigurationException;\n \n@@ -154,6 +155,8 @@ public boolean isVerbose() {\n         return verbose;\n     }\n \n+    @Option(shortName = \"v\", longName = \"verbose\")\n+    @Description(\"Verbose, print debug info.\")\n     public void setVerbose(boolean verbose) {\n         this.verbose = verbose;\n     }\n@@ -174,6 +177,9 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             System.exit(1);\n         }\n \n+        if (bootStrap.isVerbose()) {\n+            AnsiLog.level(Level.ALL);\n+        }\n         if (bootStrap.isHelp()) {\n             System.out.println(usage(cli));\n             System.exit(0);\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -23,7 +23,7 @@ public abstract class AnsiLog {\n \n     static boolean enableColor;\n \n-    public static java.util.logging.Level LEVEL = java.util.logging.Level.INFO;\n+    public static java.util.logging.Level LEVEL = java.util.logging.Level.CONFIG;\n \n     private static final String RESET = \"\\033[0m\";\n ",
    "output": "arthas-boot support verbose"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -14,10 +14,9 @@\n \n import javax.xml.parsers.ParserConfigurationException;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.xml.sax.SAXException;\n \n+import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.SocketUtils;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CommandLine;\n@@ -39,7 +38,6 @@\n                 + \"  java -jar arthas-boot.jar --target-ip 0.0.0.0 --telnet-port 9999' \\n\"\n                 + \"  java -jar arthas-boot.jar -f batch.as 127.0.0.1\\n\")\n public class Bootstrap {\n-    private static final Logger logger = LoggerFactory.getLogger(Bootstrap.class);\n     private static final int DEFAULT_TELNET_PORT = 3658;\n     private static final int DEFAULT_HTTP_PORT = 8563;\n     private static final String DEFAULT_TARGET_IP = \"127.0.0.1\";\n@@ -187,13 +185,13 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         if (bootStrap.getTelnetPort() > 0) {\n             telnetPortPid = SocketUtils.findTcpListenProcess(bootStrap.getTelnetPort());\n             if (telnetPortPid > 0) {\n-                logger.info(\"Process {} already using port {}\", telnetPortPid, bootStrap.getTelnetPort());\n+                AnsiLog.info(\"Process {} already using port {}\", telnetPortPid, bootStrap.getTelnetPort());\n             }\n         }\n         if (bootStrap.getHttpPort() > 0) {\n             httpPortPid = SocketUtils.findTcpListenProcess(bootStrap.getHttpPort());\n             if (httpPortPid > 0) {\n-                logger.info(\"Process {} already using port {}\", httpPortPid, bootStrap.getHttpPort());\n+                AnsiLog.info(\"Process {} already using port {}\", httpPortPid, bootStrap.getHttpPort());\n             }\n         }\n \n@@ -208,12 +206,12 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         }\n \n         if (telnetPortPid > 0 && pid != telnetPortPid) {\n-            logger.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n+            AnsiLog.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootStrap.getTelnetPort());\n         }\n \n         if (httpPortPid > 0 && pid != httpPortPid) {\n-            logger.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n+            AnsiLog.warn(\"Target process {} is not the process using port {}, you will connect to an unexpected process.\",\n                             pid, bootStrap.getHttpPort());\n         }\n \n@@ -269,7 +267,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         verifyArthasHome(arthasHomeDir.getAbsolutePath());\n \n-        logger.info(\"arthas home: \" + arthasHomeDir);\n+        AnsiLog.info(\"arthas home: \" + arthasHomeDir);\n \n         // start arthas-core.jar\n         List<String> attachArgs = new ArrayList<String>();\n@@ -288,11 +286,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         attachArgs.add(\"-agent\");\n         attachArgs.add(new File(arthasHomeDir, \"arthas-agent.jar\").getAbsolutePath());\n \n-        logger.info(\"Try to attach process \" + pid);\n-        logger.debug(\"Start arthas-core.jar args: \" + attachArgs);\n+        AnsiLog.info(\"Try to attach process \" + pid);\n+        AnsiLog.debug(\"Start arthas-core.jar args: \" + attachArgs);\n         ProcessUtils.startArthasCore(pid, attachArgs);\n \n-        logger.info(\"Attach process {} success.\", pid);\n+        AnsiLog.info(\"Attach process {} success.\", pid);\n \n         if (bootStrap.isAttachOnly()) {\n             System.exit(0);\n@@ -319,7 +317,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n         telnetArgs.add(bootStrap.getTargetIp());\n         telnetArgs.add(\"\" + bootStrap.getTelnetPort());\n \n-        logger.debug(\"Start arthas-client.jar args: \" + telnetArgs);\n+        AnsiLog.debug(\"Start arthas-client.jar args: \" + telnetArgs);\n         mainMethod.invoke(null, new Object[] { telnetArgs.toArray(new String[0]) });\n     }\n \n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/DownloadUtils.java\n@@ -12,12 +12,11 @@\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.w3c.dom.Document;\n import org.w3c.dom.NodeList;\n import org.xml.sax.SAXException;\n \n+import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.IOUtils;\n \n /**\n@@ -26,9 +25,6 @@\n  *\n  */\n public class DownloadUtils {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(DownloadUtils.class);\n-\n     private static final String MAVEN_METADATA_URL = \"${REPO}/com/taobao/arthas/arthas-packaging/maven-metadata.xml\";\n     private static final String REMOTE_DOWNLOAD_URL = \"${REPO}/com/taobao/arthas/arthas-packaging/${VERSION}/arthas-packaging-${VERSION}-bin.zip\";\n \n@@ -83,7 +79,7 @@ public static void downArthasPackaging(String repoMirror, boolean https, String\n         File tempFile = File.createTempFile(\"arthas\", \"arthas\");\n \n         String remoteDownloadUrl = REMOTE_DOWNLOAD_URL.replace(\"${REPO}\", repoUrl).replace(\"${VERSION}\", arthasVersion);\n-        logger.info(\"Start download arthas from remote server: \" + remoteDownloadUrl);\n+        AnsiLog.info(\"Start download arthas from remote server: \" + remoteDownloadUrl);\n         saveUrl(tempFile.getAbsolutePath(), remoteDownloadUrl);\n \n         IOUtils.unzip(tempFile.getAbsolutePath(), unzipDir.getAbsolutePath());\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -1,10 +1,8 @@\n package com.taobao.arthas.boot;\n \n-import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n import java.lang.management.ManagementFactory;\n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -13,9 +11,7 @@\n import java.util.Map;\n import java.util.Scanner;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.common.ExecutingCommand;\n import com.taobao.arthas.common.IOUtils;\n \n@@ -25,8 +21,6 @@\n  *\n  */\n public class ProcessUtils {\n-    private static final Logger logger = LoggerFactory.getLogger(ProcessUtils.class);\n-\n     private static String PID = \"-1\";\n \n     static {\n@@ -51,7 +45,7 @@ public static int select(boolean v) {\n         Map<Integer, String> processMap = listProcessByJps(v);\n \n         if (processMap.isEmpty()) {\n-            logger.info(\"Can not find java process.\");\n+            AnsiLog.info(\"Can not find java process. Try to pass pid in command line.\");\n             return -1;\n         }\n \n@@ -118,7 +112,6 @@ private static Map<Integer, String> listProcessByJps(boolean v) {\n         }\n \n         return result;\n-\n     }\n \n     public static void startArthasCore(int targetPid, List<String> attachArgs) {\n@@ -199,7 +192,7 @@ public void run() {\n \n             int exitValue = proc.exitValue();\n             if (exitValue != 0) {\n-                logger.error(\"attach fail, targetPid: \" + targetPid);\n+                AnsiLog.error(\"attach fail, targetPid: \" + targetPid);\n                 System.exit(1);\n             }\n         } catch (Throwable e) {\n@@ -219,7 +212,7 @@ private static File findJava() {\n             }\n         }\n \n-        logger.debug(\"can not find java under current java home: \" + javaHome);\n+        AnsiLog.debug(\"can not find java under current java home: \" + javaHome);\n         return null;\n     }\n \n@@ -234,7 +227,7 @@ private static File findJps() {\n             }\n         }\n \n-        logger.debug(\"can not find jps under current java home: \" + javaHome);\n+        AnsiLog.debug(\"can not find jps under current java home: \" + javaHome);\n         return null;\n     }\n ",
    "output": "arthas-boot remove logback dependency"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/OSUtils.java b/client/src/main/java/com/taobao/arthas/client/OSUtils.java\n--- a/client/src/main/java/com/taobao/arthas/client/OSUtils.java\n+++ b/client/src/main/java/com/taobao/arthas/client/OSUtils.java\n@@ -1,13 +0,0 @@\n-package com.taobao.arthas.client;\n-\n-public class OSUtils {\n-\n-    public static boolean isWindowsOS() {\n-        boolean isWindowsOS = false;\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.toLowerCase().indexOf(\"windows\") > -1) {\n-            isWindowsOS = true;\n-        }\n-        return isWindowsOS;\n-    }\n-}\n\ndiff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -17,6 +17,7 @@\n import org.apache.commons.net.telnet.TelnetOptionHandler;\n import org.apache.commons.net.telnet.WindowSizeOptionHandler;\n \n+import com.taobao.arthas.common.OSUtils;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.UsageMessageFormatter;\n@@ -152,11 +153,8 @@ private static List<String> readLines(File batchFile) {\n \n     public static void main(String[] args) throws IOException {\n         // support mingw/cygw jline color\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            if ((System.getenv(\"MSYSTEM\") != null && System.getenv(\"MSYSTEM\").startsWith(\"MINGW\"))\n-                            || \"/bin/shell\".equals(System.getenv(\"SHELL\"))) {\n-                System.setProperty(\"jline.terminal\", System.getProperty(\"jline.terminal\", \"jline.UnixTerminal\"));\n-            }\n+        if (OSUtils.isCygwinOrMinGW()) {\n+            System.setProperty(\"jline.terminal\", System.getProperty(\"jline.terminal\", \"jline.UnixTerminal\"));\n         }\n \n         TelnetConsole telnetConsole = new TelnetConsole();\n@@ -220,7 +218,7 @@ public static void main(String[] args) throws IOException {\n                 } else {\n                     width = terminal.getWidth();\n                     // hack for windows dos\n-                    if (OSUtils.isWindowsOS()) {\n+                    if (OSUtils.isWindows()) {\n                         width--;\n                     }\n                 }\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -1,22 +1,24 @@\n package com.taobao.arthas.common;\n \n+import java.util.Locale;\n+\n /**\n  *\n  * @author hengyunabc 2018-11-08\n  *\n  */\n public class OSUtils {\n+    private static final String OPERATING_SYSTEM_NAME = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n \n     static PlatformEnum platform;\n     static {\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.startsWith(\"Linux\")) {\n+        if (OPERATING_SYSTEM_NAME.startsWith(\"Linux\")) {\n             platform = PlatformEnum.LINUX;\n-        } else if (osName.startsWith(\"Mac\") || osName.startsWith(\"Darwin\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Mac\") || OPERATING_SYSTEM_NAME.startsWith(\"Darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (osName.startsWith(\"Mac\") || osName.startsWith(\"Darwin\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Mac\") || OPERATING_SYSTEM_NAME.startsWith(\"Darwin\")) {\n             platform = PlatformEnum.MACOSX;\n-        } else if (osName.startsWith(\"Windows\")) {\n+        } else if (OPERATING_SYSTEM_NAME.startsWith(\"Windows\")) {\n             platform = PlatformEnum.WINDOWS;\n         } else {\n             platform = PlatformEnum.UNKNOWN;\n@@ -35,4 +37,14 @@ public static boolean isMac() {\n         return platform == PlatformEnum.MACOSX;\n     }\n \n+    public static boolean isCygwinOrMinGW() {\n+        if (isWindows()) {\n+            if ((System.getenv(\"MSYSTEM\") != null && System.getenv(\"MSYSTEM\").startsWith(\"MINGW\"))\n+                            || \"/bin/shell\".equals(System.getenv(\"SHELL\"))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n }",
    "output": "merge two OSUtils"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -18,6 +18,7 @@\n import org.slf4j.LoggerFactory;\n import org.xml.sax.SAXException;\n \n+import com.taobao.arthas.common.SocketUtils;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.UsageMessageFormatter;\n\ndiff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -16,6 +16,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.taobao.arthas.common.ExecutingCommand;\n+\n /**\n  *\n  * @author hengyunabc 2018-11-06\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n--- a/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n+++ b/common/src/main/java/com/taobao/arthas/common/AnsiLog.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.core.util;\n+package com.taobao.arthas.common;\n import java.util.regex.Matcher;\n \n /**\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/ExecutingCommand.java b/common/src/main/java/com/taobao/arthas/common/ExecutingCommand.java\n--- a/common/src/main/java/com/taobao/arthas/common/ExecutingCommand.java\n+++ b/common/src/main/java/com/taobao/arthas/common/ExecutingCommand.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.boot;\n+package com.taobao.arthas.common;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n@@ -10,6 +10,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.taobao.arthas.boot.IOUtils;\n+\n /**\n  * A class for executing on the command line and returning the result of\n  * execution.\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/OSUtils.java b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/OSUtils.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.boot;\n+package com.taobao.arthas.common;\n \n /**\n  *\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java b/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n--- a/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n+++ b/common/src/main/java/com/taobao/arthas/common/PlatformEnum.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.boot;\n+package com.taobao.arthas.common;\n \n /**\n  * Enum of supported operating systems.\n\ndiff --git a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n--- a/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n+++ b/common/src/main/java/com/taobao/arthas/common/SocketUtils.java\n@@ -1,4 +1,4 @@\n-package com.taobao.arthas.boot;\n+package com.taobao.arthas.common;\n \n import java.net.InetAddress;\n import java.net.ServerSocket;\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -2,8 +2,8 @@\n \n import com.sun.tools.attach.VirtualMachine;\n import com.sun.tools.attach.VirtualMachineDescriptor;\n+import com.taobao.arthas.common.AnsiLog;\n import com.taobao.arthas.core.config.Configure;\n-import com.taobao.arthas.core.util.AnsiLog;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n import com.taobao.middleware.cli.CommandLine;",
    "output": "add common module"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -151,6 +151,14 @@ private static List<String> readLines(File batchFile) {\n \t}\n \n \tpublic static void main(String[] args) throws IOException {\n+\t\t// support mingw/cygw jline color\n+\t\tif (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+\t\t\tif ((System.getenv(\"MSYSTEM\") != null && System.getenv(\"MSYSTEM\").startsWith(\"MINGW\"))\n+\t\t\t\t\t|| \"/bin/shell\".equals(System.getenv(\"SHELL\"))) {\n+\t\t\t\tSystem.setProperty(\"jline.terminal\", System.getProperty(\"jline.terminal\", \"jline.UnixTerminal\"));\n+\t\t\t}\n+\t\t}\n+\n \t\tTelnetConsole telnetConsole = new TelnetConsole();\n \n \t\tCLI cli = CLIConfigurator.define(TelnetConsole.class);",
    "output": "TelnetConsole support mingw/cygw color mode. #278"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/BuiltinCommandPack.java\n@@ -6,6 +6,7 @@\n import com.taobao.arthas.core.command.basic1000.ResetCommand;\n import com.taobao.arthas.core.command.basic1000.SessionCommand;\n import com.taobao.arthas.core.command.basic1000.ShutdownCommand;\n+import com.taobao.arthas.core.command.basic1000.SystemEnvCommand;\n import com.taobao.arthas.core.command.basic1000.SystemPropertyCommand;\n import com.taobao.arthas.core.command.basic1000.VersionCommand;\n import com.taobao.arthas.core.command.hidden.JulyCommand;\n@@ -79,6 +80,7 @@ private static void initCommands() {\n         commands.add(Command.create(ShutdownCommand.class));\n         commands.add(Command.create(SessionCommand.class));\n         commands.add(Command.create(SystemPropertyCommand.class));\n+        commands.add(Command.create(SystemEnvCommand.class));\n         commands.add(Command.create(RedefineCommand.class));\n     }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemEnvCommand.java\n@@ -0,0 +1,77 @@\n+package com.taobao.arthas.core.command.basic1000;\n+\n+import static com.taobao.text.ui.Element.label;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import com.taobao.arthas.core.command.Constants;\n+import com.taobao.arthas.core.shell.cli.Completion;\n+import com.taobao.arthas.core.shell.cli.CompletionUtils;\n+import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.StringUtils;\n+import com.taobao.middleware.cli.annotations.Argument;\n+import com.taobao.middleware.cli.annotations.Description;\n+import com.taobao.middleware.cli.annotations.Name;\n+import com.taobao.middleware.cli.annotations.Summary;\n+import com.taobao.text.Decoration;\n+import com.taobao.text.ui.TableElement;\n+import com.taobao.text.util.RenderUtil;\n+\n+/**\n+ * @author hengyunabc 2018-11-09\n+ *\n+ */\n+@Name(\"sysenv\")\n+@Summary(\"Display the system env.\")\n+@Description(Constants.EXAMPLE + \"sysenv\\n\" + \"sysenv USER\\n\" + Constants.WIKI + Constants.WIKI_HOME + \"sysenv\")\n+public class SystemEnvCommand extends AnnotatedCommand {\n+\n+    private String envName;\n+\n+    @Argument(index = 0, argName = \"env-name\", required = false)\n+    @Description(\"env name\")\n+    public void setOptionName(String envName) {\n+        this.envName = envName;\n+    }\n+\n+    @Override\n+    public void process(CommandProcess process) {\n+        try {\n+            if (StringUtils.isBlank(envName)) {\n+                // show all system env\n+                process.write(renderEnv(System.getenv(), process.width()));\n+            } else {\n+                // view the specified system env\n+                String value = System.getenv(envName);\n+                process.write(envName + \"=\" + value + \"\\n\");\n+            }\n+        } finally {\n+            process.end();\n+        }\n+    }\n+\n+    /**\n+     * First, try to complete with the sysenv command scope. If completion is\n+     * failed, delegates to super class.\n+     *\n+     * @param completion\n+     *            the completion object\n+     */\n+    @Override\n+    public void complete(Completion completion) {\n+        CompletionUtils.complete(completion, System.getenv().keySet());\n+    }\n+\n+    private String renderEnv(Map<String, String> envMap, int width) {\n+        TableElement table = new TableElement(1, 4).leftCellPadding(1).rightCellPadding(1);\n+        table.row(true, label(\"KEY\").style(Decoration.bold.bold()), label(\"VALUE\").style(Decoration.bold.bold()));\n+\n+        for (Entry<String, String> entry : envMap.entrySet()) {\n+            table.row(entry.getKey(), entry.getValue());\n+        }\n+\n+        return RenderUtil.render(table, width);\n+    }\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java\n@@ -19,7 +19,6 @@\n import static com.taobao.text.ui.Element.label;\n \n /**\n- * A command to display all the keymap for the specified connection.\n  * @author ralf0131 2017-01-09 14:03.\n  */\n @Name(\"sysprop\")",
    "output": "add sysenv command. close #288"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java\n@@ -43,6 +43,8 @@ public class Bootstrap {\n     private static final int DEFAULT_HTTP_PORT = 8563;\n     private static final String DEFAULT_TARGET_IP = \"127.0.0.1\";\n \n+    private boolean help = false;\n+\n     private int pid = -1;\n     private String targetIp = DEFAULT_TARGET_IP;\n     private int telnetPort = DEFAULT_TELNET_PORT;\n@@ -83,6 +85,12 @@ public void setPid(int pid) {\n         this.pid = pid;\n     }\n \n+    @Option(shortName = \"h\", longName = \"help\", flag = true)\n+    @Description(\"Print usage\")\n+    public void setHelp(boolean help) {\n+        this.help = help;\n+    }\n+\n     @Option(longName = \"target-ip\")\n     @Description(\"The target jvm listen ip, default 127.0.0.1\")\n     public void setTargetIp(String targetIp) {\n@@ -125,7 +133,7 @@ public void setUseHttps(boolean useHttps) {\n         this.useHttps = useHttps;\n     }\n \n-    @Option(longName = \"attach-only\")\n+    @Option(longName = \"attach-only\", flag = true)\n     @Description(\"attach target process only, do not connect\")\n     public void setAttachOnly(boolean attachOnly) {\n         this.attachOnly = attachOnly;\n@@ -167,6 +175,11 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n             System.exit(1);\n         }\n \n+        if (bootStrap.isHelp()) {\n+            System.out.println(usage(cli));\n+            System.exit(0);\n+        }\n+\n         // check telnet/http port\n         int telnetPortPid = -1;\n         int httpPortPid = -1;\n@@ -280,6 +293,10 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE\n \n         logger.info(\"Attach process {} success.\", pid);\n \n+        if (bootStrap.isAttachOnly()) {\n+            System.exit(0);\n+        }\n+\n         // start java telnet client\n         // find arthas-client.jar\n         URLClassLoader classLoader = new URLClassLoader(\n@@ -385,4 +402,8 @@ public boolean isAttachOnly() {\n     public int getPid() {\n         return pid;\n     }\n+\n+    public boolean isHelp() {\n+        return help;\n+    }\n }",
    "output": "arthas-boot support attach-only and help. #278"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -294,6 +294,7 @@ private static void batchModeRun(TelnetClient telnet, List<String> commands) thr\n \t\t\t// read result from server and output\n \t\t\tString response = readUntil(inputStream, PROMPT);\n \t\t\tSystem.out.print(response);\n+\t\t\tSystem.out.flush();\n \t\t}\n \t}\n ",
    "output": "flush in batch mode"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java\n@@ -90,35 +90,28 @@ public static int select(boolean v) {\n     private static Map<Integer, String> listProcessByJps(boolean v) {\n         Map<Integer, String> result = new LinkedHashMap<Integer, String>();\n \n-        File jps = findJps();\n-        if (jps == null) {\n-            return result;\n+        String jps = \"jps\";\n+        File jpsFile = findJps();\n+        if (jpsFile != null) {\n+            jps = jpsFile.getAbsolutePath();\n         }\n \n         String[] command = null;\n         if (v) {\n-            command = new String[] { jps.getAbsolutePath(), \"-v\" };\n+            command = new String[] { jps, \"-v\" };\n         } else {\n-            command = new String[] { jps.getAbsolutePath() };\n+            command = new String[] { jps };\n         }\n \n-        ProcessBuilder pb = new ProcessBuilder(command);\n-        try {\n-            Process proc = pb.start();\n-            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n-\n-            // read the output from the command\n-            String line = null;\n-            int currentPid = Integer.parseInt(ProcessUtils.getPid());\n-            while ((line = stdInput.readLine()) != null) {\n-                int pid = new Scanner(line).nextInt();\n-                if (pid == currentPid) {\n-                    continue;\n-                }\n-                result.put(pid, line);\n+        List<String> lines = ExecutingCommand.runNative(command);\n+\n+        int currentPid = Integer.parseInt(ProcessUtils.getPid());\n+        for (String line : lines) {\n+            int pid = new Scanner(line).nextInt();\n+            if (pid == currentPid) {\n+                continue;\n             }\n-        } catch (Throwable e) {\n-            // ignore\n+            result.put(pid, line);\n         }\n \n         return result;",
    "output": "improve exec jps logic. #278"
  },
  {
    "input": "diff --git a/boot/src/main/java/com/taobao/arthas/boot/IOUtils.java b/boot/src/main/java/com/taobao/arthas/boot/IOUtils.java\n--- a/boot/src/main/java/com/taobao/arthas/boot/IOUtils.java\n+++ b/boot/src/main/java/com/taobao/arthas/boot/IOUtils.java\n@@ -29,21 +29,20 @@ public static void copy(InputStream in, OutputStream out) throws IOException {\n         }\n     }\n \n-\n     public static IOException close(InputStream input) {\n-        return close(input);\n+        return close((Closeable) input);\n     }\n \n     public static IOException close(OutputStream output) {\n-        return close(output);\n+        return close((Closeable) output);\n     }\n \n     public static IOException close(final Reader input) {\n-        return close(input);\n+        return close((Closeable) input);\n     }\n \n     public static IOException close(final Writer output) {\n-        return close(output);\n+        return close((Closeable) output);\n     }\n \n     public static IOException close(final Closeable closeable) {",
    "output": "fix IOUtils"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -266,7 +266,7 @@ public void actionPerformed(ActionEvent e) {\n \t\t\t}\n \n \t\t\tif (cmds.isEmpty()) {\n-\t\t\t\tIOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),\n+\t\t\t\tIOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,\n \t\t\t\t\t\tconsoleReader.getOutput());\n \t\t\t} else {\n \t\t\t\tbatchModeRun(telnet, cmds);",
    "output": "fix cygwin/mingw input support"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -60,7 +60,7 @@ public class TelnetConsole {\n \tprivate Integer width = null;\n \tprivate Integer height = null;\n \n-\t@Argument(argName = \"targetIp\", index = 0, required = false)\n+\t@Argument(argName = \"target-ip\", index = 0, required = false)\n \t@Description(\"Target ip\")\n \tpublic void setTargetIp(String targetIp) {\n \t\tthis.targetIp = targetIp;\n@@ -84,7 +84,7 @@ public void setCommand(String command) {\n \t\tthis.command = command;\n \t}\n \n-\t@Option(shortName = \"f\", longName = \"batchFile\")\n+\t@Option(shortName = \"f\", longName = \"batch-file\")\n \t@Description(\"The batch file to execute\")\n \tpublic void setBatchFile(String batchFile) {\n \t\tthis.batchFile = batchFile;",
    "output": "change TelnetConsole options to '-' style"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n--- a/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n+++ b/core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java\n@@ -85,10 +85,18 @@ public void bind(Configure configure) throws Throwable {\n             List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n             resolvers.add(builtinCommands);\n             // TODO: discover user provided command resolver\n-            shellServer.registerTermServer(new TelnetTermServer(\n-                    configure.getIp(), configure.getTelnetPort(), options.getConnectionTimeout()));\n-            shellServer.registerTermServer(new HttpTermServer(\n-                    configure.getIp(), configure.getHttpPort(), options.getConnectionTimeout()));\n+            if (configure.getTelnetPort() > 0) {\n+                shellServer.registerTermServer(new TelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n+                                options.getConnectionTimeout()));\n+            } else {\n+                logger.info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n+            }\n+            if (configure.getHttpPort() > 0) {\n+                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n+                                options.getConnectionTimeout()));\n+            } else {\n+                logger.info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n+            }\n \n             for (CommandResolver resolver : resolvers) {\n                 shellServer.registerCommandResolver(resolver);",
    "output": "allow skip bind telnet port or http port. fix #284"
  },
  {
    "input": "diff --git a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n--- a/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n+++ b/client/src/main/java/com/taobao/arthas/client/TelnetConsole.java\n@@ -18,7 +18,6 @@\n import org.apache.commons.net.telnet.WindowSizeOptionHandler;\n \n import com.taobao.middleware.cli.CLI;\n-import com.taobao.middleware.cli.CLIException;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.UsageMessageFormatter;\n import com.taobao.middleware.cli.annotations.Argument;\n@@ -40,6 +39,9 @@\n  */\n @Name(\"arthas-client\")\n @Summary(\"Arthas Telnet Client\")\n+@Description(\"EXAMPLES:\\n\" + \"  java -jar arthas-client.jar 127.0.0.1 3658\\n\"\n+\t\t+ \"  java -jar arthas-client.jar -c 'dashboard -n 1' \\n\"\n+\t\t+ \"  java -jar arthas-client.jar -f batch.as 127.0.0.1\\n\")\n public class TelnetConsole {\n \tprivate static final String PROMPT = \"$\";\n \tprivate static final int DEFAULT_CONNECTION_TIMEOUT = 5000; // 5000 ms\n@@ -59,25 +61,25 @@ public class TelnetConsole {\n \tprivate Integer height = null;\n \n \t@Argument(argName = \"targetIp\", index = 0, required = false)\n-\t@Description(\"target-ip\")\n+\t@Description(\"Target ip\")\n \tpublic void setTargetIp(String targetIp) {\n \t\tthis.targetIp = targetIp;\n \t}\n \n+\t@Argument(argName = \"port\", index = 1, required = false)\n+\t@Description(\"The remote server port\")\n+\tpublic void setPort(int port) {\n+\t\tthis.port = port;\n+\t}\n+\n \t@Option(longName = \"help\", flag = true)\n \t@Description(\"Print usage\")\n \tpublic void setHelp(boolean help) {\n \t\tthis.help = help;\n \t}\n \n-\t@Option(shortName = \"p\", longName = \"port\")\n-\t@Description(\"The remote server port\")\n-\tpublic void setPort(int port) {\n-\t\tthis.port = port;\n-\t}\n-\n \t@Option(shortName = \"c\", longName = \"command\")\n-\t@Description(\"The command to execute, multiple commands separated by ;\")\n+\t@Description(\"Command to execute, multiple commands separated by ;\")\n \tpublic void setCommand(String command) {\n \t\tthis.command = command;\n \t}\n@@ -152,129 +154,130 @@ public static void main(String[] args) throws IOException {\n \t\tTelnetConsole telnetConsole = new TelnetConsole();\n \n \t\tCLI cli = CLIConfigurator.define(TelnetConsole.class);\n-\t\tCommandLine commandLine = cli.parse(Arrays.asList(args));\n \n \t\ttry {\n-\t\t\tCLIConfigurator.inject(commandLine, telnetConsole);\n-\t\t} catch (CLIException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tSystem.out.println(usage(cli));\n-\t\t\tSystem.exit(1);\n-\t\t}\n+\t\t\tCommandLine commandLine = cli.parse(Arrays.asList(args));\n \n-\t\tif (telnetConsole.isHelp()) {\n-\t\t\tSystem.out.println(usage(cli));\n-\t\t\tSystem.exit(0);\n-\t\t}\n+\t\t\tCLIConfigurator.inject(commandLine, telnetConsole);\n \n-\t\t// Try to read cmds\n-\t\tList<String> cmds = new ArrayList<String>();\n-\t\tif (telnetConsole.getCommand() != null) {\n-\t\t\tfor (String c : telnetConsole.getCommand().split(\";\")) {\n-\t\t\t\tcmds.add(c.trim());\n+\t\t\tif (telnetConsole.isHelp()) {\n+\t\t\t\tSystem.out.println(usage(cli));\n+\t\t\t\tSystem.exit(0);\n \t\t\t}\n-\t\t} else if (telnetConsole.getBatchFile() != null) {\n-\t\t\tFile file = new File(telnetConsole.getBatchFile());\n-\t\t\tif (!file.exists()) {\n-\t\t\t\tthrow new IllegalArgumentException(\"batch file do not exist: \" + telnetConsole.getBatchFile());\n-\t\t\t} else {\n-\t\t\t\tcmds.addAll(readLines(file));\n+\n+\t\t\t// Try to read cmds\n+\t\t\tList<String> cmds = new ArrayList<String>();\n+\t\t\tif (telnetConsole.getCommand() != null) {\n+\t\t\t\tfor (String c : telnetConsole.getCommand().split(\";\")) {\n+\t\t\t\t\tcmds.add(c.trim());\n+\t\t\t\t}\n+\t\t\t} else if (telnetConsole.getBatchFile() != null) {\n+\t\t\t\tFile file = new File(telnetConsole.getBatchFile());\n+\t\t\t\tif (!file.exists()) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\"batch file do not exist: \" + telnetConsole.getBatchFile());\n+\t\t\t\t} else {\n+\t\t\t\t\tcmds.addAll(readLines(file));\n+\t\t\t\t}\n \t\t\t}\n-\t\t}\n \n-\t\tfinal ConsoleReader consoleReader = new ConsoleReader(System.in, System.out);\n-\t\tconsoleReader.setHandleUserInterrupt(true);\n-\t\tTerminal terminal = consoleReader.getTerminal();\n+\t\t\tfinal ConsoleReader consoleReader = new ConsoleReader(System.in, System.out);\n+\t\t\tconsoleReader.setHandleUserInterrupt(true);\n+\t\t\tTerminal terminal = consoleReader.getTerminal();\n \n-\t\tif (terminal instanceof TerminalSupport) {\n-\t\t\t((TerminalSupport) terminal).disableInterruptCharacter();\n-\t\t}\n+\t\t\tif (terminal instanceof TerminalSupport) {\n+\t\t\t\t((TerminalSupport) terminal).disableInterruptCharacter();\n+\t\t\t}\n \n-\t\t// support catch ctrl+c event\n-\t\tterminal.disableInterruptCharacter();\n-\t\tif (terminal instanceof UnixTerminal) {\n-\t\t\t((UnixTerminal) terminal).disableLitteralNextCharacter();\n-\t\t}\n+\t\t\t// support catch ctrl+c event\n+\t\t\tterminal.disableInterruptCharacter();\n+\t\t\tif (terminal instanceof UnixTerminal) {\n+\t\t\t\t((UnixTerminal) terminal).disableLitteralNextCharacter();\n+\t\t\t}\n \n-\t\tint width = TerminalSupport.DEFAULT_WIDTH;\n-\t\tint height = TerminalSupport.DEFAULT_HEIGHT;\n+\t\t\tint width = TerminalSupport.DEFAULT_WIDTH;\n+\t\t\tint height = TerminalSupport.DEFAULT_HEIGHT;\n \n-\t\t// 如果cmds 非空，则说明是batch mode\n-\t\t// 如果是 batch mode，如果没有设置 window size，则用默认的。\n-\t\tif (!cmds.isEmpty()) {\n-\t\t\tif (telnetConsole.getWidth() != null) {\n-\t\t\t\twidth = telnetConsole.getWidth();\n-\t\t\t}\n-\t\t\tif (telnetConsole.getheight() != null) {\n-\t\t\t\theight = telnetConsole.getheight();\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (telnetConsole.getWidth() != null) {\n-\t\t\t\twidth = telnetConsole.getWidth();\n-\t\t\t} else {\n-\t\t\t\twidth = terminal.getWidth();\n-\t\t\t\t// hack for windows dos\n-\t\t\t\tif (OSUtils.isWindowsOS()) {\n-\t\t\t\t\twidth--;\n+\t\t\tif (!cmds.isEmpty()) {\n+\t\t\t\t// batch mode\n+\t\t\t\tif (telnetConsole.getWidth() != null) {\n+\t\t\t\t\twidth = telnetConsole.getWidth();\n+\t\t\t\t}\n+\t\t\t\tif (telnetConsole.getheight() != null) {\n+\t\t\t\t\theight = telnetConsole.getheight();\n \t\t\t\t}\n-\t\t\t}\n-\t\t\tif (telnetConsole.getheight() != null) {\n-\t\t\t\theight = telnetConsole.getheight();\n \t\t\t} else {\n-\t\t\t\theight = terminal.getHeight();\n+\t\t\t\t// normal telnet client, get current terminal size\n+\t\t\t\tif (telnetConsole.getWidth() != null) {\n+\t\t\t\t\twidth = telnetConsole.getWidth();\n+\t\t\t\t} else {\n+\t\t\t\t\twidth = terminal.getWidth();\n+\t\t\t\t\t// hack for windows dos\n+\t\t\t\t\tif (OSUtils.isWindowsOS()) {\n+\t\t\t\t\t\twidth--;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (telnetConsole.getheight() != null) {\n+\t\t\t\t\theight = telnetConsole.getheight();\n+\t\t\t\t} else {\n+\t\t\t\t\theight = terminal.getHeight();\n+\t\t\t\t}\n \t\t\t}\n-\t\t}\n \n-\t\tfinal TelnetClient telnet = new TelnetClient();\n-\t\ttelnet.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);\n+\t\t\tfinal TelnetClient telnet = new TelnetClient();\n+\t\t\ttelnet.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);\n \n-\t\t// send init terminal size\n-\t\tTelnetOptionHandler sizeOpt = new WindowSizeOptionHandler(width, height, true, true, false, false);\n-\t\ttry {\n-\t\t\ttelnet.addOptionHandler(sizeOpt);\n-\t\t} catch (InvalidTelnetOptionException e) {\n-\t\t\t// ignore\n-\t\t}\n+\t\t\t// send init terminal size\n+\t\t\tTelnetOptionHandler sizeOpt = new WindowSizeOptionHandler(width, height, true, true, false, false);\n+\t\t\ttry {\n+\t\t\t\ttelnet.addOptionHandler(sizeOpt);\n+\t\t\t} catch (InvalidTelnetOptionException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n \n-\t\t// ctrl + c event callback\n-\t\tconsoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {\n-\t\t\t@Override\n-\t\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsoleReader.getCursorBuffer().clear(); // clear current line\n-\t\t\t\t\ttelnet.getOutputStream().write(CTRL_C);\n-\t\t\t\t\ttelnet.getOutputStream().flush();\n-\t\t\t\t} catch (Exception e1) {\n-\t\t\t\t\te1.printStackTrace();\n+\t\t\t// ctrl + c event callback\n+\t\t\tconsoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tconsoleReader.getCursorBuffer().clear(); // clear current line\n+\t\t\t\t\t\ttelnet.getOutputStream().write(CTRL_C);\n+\t\t\t\t\t\ttelnet.getOutputStream().flush();\n+\t\t\t\t\t} catch (Exception e1) {\n+\t\t\t\t\t\te1.printStackTrace();\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t});\n+\t\t\t});\n \n-\t\t// ctrl + d event call back\n-\t\tconsoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), new ActionListener() {\n-\t\t\t@Override\n-\t\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\t\tSystem.exit(0);\n+\t\t\t// ctrl + d event call back\n+\t\t\tconsoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), new ActionListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\t\t\tSystem.exit(0);\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\ttry {\n+\t\t\t\ttelnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tSystem.out.println(\"Connect to telnet server error: \" + telnetConsole.getTargetIp() + \" \"\n+\t\t\t\t\t\t+ telnetConsole.getPort());\n+\t\t\t\tthrow e;\n \t\t\t}\n-\t\t});\n \n-\t\ttry {\n-\t\t\ttelnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());\n-\t\t} catch (IOException e) {\n-\t\t\tSystem.out.println(\n-\t\t\t\t\t\"Connect to telnet server error: \" + telnetConsole.getTargetIp() + \" \" + telnetConsole.getPort());\n+\t\t\tif (cmds.isEmpty()) {\n+\t\t\t\tIOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),\n+\t\t\t\t\t\tconsoleReader.getOutput());\n+\t\t\t} else {\n+\t\t\t\tbatchModeRun(telnet, cmds);\n+\t\t\t\ttelnet.disconnect();\n+\t\t\t}\n+\t\t} catch (Throwable e) {\n \t\t\te.printStackTrace();\n+\t\t\tSystem.out.println(usage(cli));\n \t\t\tSystem.exit(1);\n \t\t}\n \n-\t\tif (cmds.isEmpty()) {\n-\t\t\tIOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),\n-\t\t\t\t\tconsoleReader.getOutput());\n-\t\t} else {\n-\t\t\tbatchModeRun(telnet, cmds);\n-\t\t\ttelnet.disconnect();\n-\t\t}\n \t}\n \n \tprivate static void batchModeRun(TelnetClient telnet, List<String> commands) throws IOException {",
    "output": "update TelnetConsole usage. #272"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java b/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/express/CustomClassResolver.java\n@@ -2,28 +2,27 @@\n \n import ognl.ClassResolver;\n \n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n /**\n  * @author diecui1202 on 2017/9/29.\n+ * @see ognl.DefaultClassResolver\n  */\n public class CustomClassResolver implements ClassResolver {\n \n     public static final CustomClassResolver customClassResolver = new CustomClassResolver();\n \n-    private static final ThreadLocal<ClassLoader> classLoader = new ThreadLocal<ClassLoader>();\n-\n-    private Map classes = new HashMap(101);\n+    private Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>(101);\n \n     private CustomClassResolver() {\n \n     }\n \n-    public Class classForName(String className, Map context) throws ClassNotFoundException {\n-        Class result = null;\n+    public Class<?> classForName(String className, Map context) throws ClassNotFoundException {\n+        Class<?> result = null;\n \n-        if ((result = (Class) classes.get(className)) == null) {\n+        if ((result = classes.get(className)) == null) {\n             try {\n                 ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                 if (classLoader != null) {",
    "output": "fix #256 CustomClassResolver multiple threads problem."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -8,7 +8,6 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.Set;\n \n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n@@ -90,11 +89,11 @@ public void process(CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        List<Class<?>> matchedClasses = new ArrayList(SearchUtils.searchClass(inst, classPattern, isRegEx));\n-        Collections.sort(matchedClasses, new Comparator() {\n+        List<Class<?>> matchedClasses = new ArrayList<Class<?>>(SearchUtils.searchClass(inst, classPattern, isRegEx));\n+        Collections.sort(matchedClasses, new Comparator<Class<?>>() {\n             @Override\n-            public int compare(Object o1, Object o2) {\n-                return StringUtils.classname((Class) o1).compareTo(StringUtils.classname((Class) o2));\n+            public int compare(Class<?> c1, Class<?> c2) {\n+                return StringUtils.classname(c1).compareTo(StringUtils.classname(c2));\n             }\n         });\n ",
    "output": "improve SearchClassCommand. #234"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java\n@@ -49,7 +49,7 @@ public class GetStaticCommand extends AnnotatedCommand {\n     private String classPattern;\n     private String fieldPattern;\n     private String express;\n-    private String code = null;\n+    private String hashCode = null;\n     private boolean isRegEx = false;\n     private int expand = 1;\n \n@@ -71,10 +71,10 @@ public void setExpress(String express) {\n         this.express = express;\n     }\n \n-    @Option(shortName = \"c\", longName = \"code\")\n+    @Option(shortName = \"c\", longName = \"classloader\")\n     @Description(\"The hash code of the special class's classLoader\")\n-    public void setCode(String code) {\n-        this.code = code;\n+    public void setCode(String hashCode) {\n+        this.hashCode = hashCode;\n     }\n \n     @Option(shortName = \"E\", longName = \"regex\", flag = true)\n@@ -93,7 +93,7 @@ public void setExpand(Integer expand) {\n     public void process(CommandProcess process) {\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        Set<Class<?>> matchedClasses = SearchUtils.searchClassOnly(inst, classPattern, isRegEx, code);\n+        Set<Class<?>> matchedClasses = SearchUtils.searchClassOnly(inst, classPattern, isRegEx, hashCode);\n \n         try {\n             if (matchedClasses == null || matchedClasses.isEmpty()) {",
    "output": "rename getstatic code to hashCode"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -1,5 +1,15 @@\n package com.taobao.arthas.core.command.klass100;\n \n+import static com.taobao.text.ui.Element.label;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.security.CodeSource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n@@ -17,12 +27,6 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.lang.instrument.Instrumentation;\n-import java.security.CodeSource;\n-import java.util.Set;\n-\n-import static com.taobao.text.ui.Element.label;\n-\n /**\n  * 展示类信息\n  *\n@@ -43,6 +47,14 @@ public class SearchClassCommand extends AnnotatedCommand {\n     private boolean isRegEx = false;\n     private Integer expand;\n \n+    public static String getCodeSource(final CodeSource cs) {\n+        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n+            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n+        }\n+\n+        return cs.getLocation().getFile();\n+    }\n+\n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -78,7 +90,13 @@ public void process(CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx);\n+        List<Class<?>> matchedClasses = new ArrayList(SearchUtils.searchClass(inst, classPattern, isRegEx));\n+        Collections.sort(matchedClasses, new Comparator() {\n+            @Override\n+            public int compare(Object o1, Object o2) {\n+                return StringUtils.classname((Class) o1).compareTo(StringUtils.classname((Class) o2));\n+            }\n+        });\n \n         for (Class<?> clazz : matchedClasses) {\n             processClass(process, clazz);\n@@ -127,12 +145,4 @@ private Element renderClassInfo(Class<?> clazz, boolean isPrintField) {\n         return table;\n     }\n \n-    public static String getCodeSource(final CodeSource cs) {\n-        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n-            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n-        }\n-\n-        return cs.getLocation().getFile();\n-    }\n-\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n@@ -1,19 +1,16 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n-import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n import com.taobao.arthas.core.view.ObjectView;\n import com.taobao.middleware.logger.Logger;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * @author beiwei30 on 29/11/2016.\n  */\n@@ -85,7 +82,7 @@ private void watching(Advice advice) {\n                 Object value = getExpressionResult(command.getExpress(), advice, cost);\n                 String result = StringUtils.objectToString(\n                         isNeedExpand() ? new ObjectView(value, command.getExpand(), command.getSizeLimit()).draw() : value);\n-                process.write(\"ts=\" + DateUtils.getCurrentDate() + \";result=\" + result + \"\\n\");\n+                process.write(\"ts=\" + DateUtils.getCurrentDate() + \"; [cost=\" + cost + \"ms] result=\" + result + \"\\n\");\n                 process.times().incrementAndGet();\n                 if (isLimitExceeded(command.getNumberOfLimit(), process.times().get())) {\n                     abortProcess(process, command.getNumberOfLimit());",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -1,5 +1,15 @@\n package com.taobao.arthas.core.command.klass100;\n \n+import static com.taobao.text.ui.Element.label;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.security.CodeSource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n@@ -17,12 +27,6 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.lang.instrument.Instrumentation;\n-import java.security.CodeSource;\n-import java.util.Set;\n-\n-import static com.taobao.text.ui.Element.label;\n-\n /**\n  * 展示类信息\n  *\n@@ -43,6 +47,14 @@ public class SearchClassCommand extends AnnotatedCommand {\n     private boolean isRegEx = false;\n     private Integer expand;\n \n+    public static String getCodeSource(final CodeSource cs) {\n+        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n+            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n+        }\n+\n+        return cs.getLocation().getFile();\n+    }\n+\n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -78,7 +90,13 @@ public void process(CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx);\n+        List<Class<?>> matchedClasses = new ArrayList(SearchUtils.searchClass(inst, classPattern, isRegEx));\n+        Collections.sort(matchedClasses, new Comparator() {\n+            @Override\n+            public int compare(Object o1, Object o2) {\n+                return StringUtils.classname((Class) o1).compareTo(StringUtils.classname((Class) o2));\n+            }\n+        });\n \n         for (Class<?> clazz : matchedClasses) {\n             processClass(process, clazz);\n@@ -127,12 +145,4 @@ private Element renderClassInfo(Class<?> clazz, boolean isPrintField) {\n         return table;\n     }\n \n-    public static String getCodeSource(final CodeSource cs) {\n-        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n-            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n-        }\n-\n-        return cs.getLocation().getFile();\n-    }\n-\n }",
    "output": "Merge pull request #234 from Hearen/sort-matched-classes\n\nsort sc command ouput"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java\n@@ -1,5 +1,15 @@\n package com.taobao.arthas.core.command.klass100;\n \n+import static com.taobao.text.ui.Element.label;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.security.CodeSource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n@@ -17,12 +27,6 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.lang.instrument.Instrumentation;\n-import java.security.CodeSource;\n-import java.util.Set;\n-\n-import static com.taobao.text.ui.Element.label;\n-\n /**\n  * 展示类信息\n  *\n@@ -43,6 +47,14 @@ public class SearchClassCommand extends AnnotatedCommand {\n     private boolean isRegEx = false;\n     private Integer expand;\n \n+    public static String getCodeSource(final CodeSource cs) {\n+        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n+            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n+        }\n+\n+        return cs.getLocation().getFile();\n+    }\n+\n     @Argument(argName = \"class-pattern\", index = 0)\n     @Description(\"Class name pattern, use either '.' or '/' as separator\")\n     public void setClassPattern(String classPattern) {\n@@ -78,7 +90,13 @@ public void process(CommandProcess process) {\n         // TODO: null check\n         RowAffect affect = new RowAffect();\n         Instrumentation inst = process.session().getInstrumentation();\n-        Set<Class<?>> matchedClasses = SearchUtils.searchClass(inst, classPattern, isRegEx);\n+        List<Class<?>> matchedClasses = new ArrayList(SearchUtils.searchClass(inst, classPattern, isRegEx));\n+        Collections.sort(matchedClasses, new Comparator() {\n+            @Override\n+            public int compare(Object o1, Object o2) {\n+                return StringUtils.classname((Class) o1).compareTo(StringUtils.classname((Class) o2));\n+            }\n+        });\n \n         for (Class<?> clazz : matchedClasses) {\n             processClass(process, clazz);\n@@ -127,12 +145,4 @@ private Element renderClassInfo(Class<?> clazz, boolean isPrintField) {\n         return table;\n     }\n \n-    public static String getCodeSource(final CodeSource cs) {\n-        if (null == cs || null == cs.getLocation() || null == cs.getLocation().getFile()) {\n-            return com.taobao.arthas.core.util.Constants.EMPTY_STRING;\n-        }\n-\n-        return cs.getLocation().getFile();\n-    }\n-\n }",
    "output": "make it easier to locate the class from so many matched"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n@@ -1,19 +1,16 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n-import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n import com.taobao.arthas.core.view.ObjectView;\n import com.taobao.middleware.logger.Logger;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * @author beiwei30 on 29/11/2016.\n  */\n@@ -85,7 +82,7 @@ private void watching(Advice advice) {\n                 Object value = getExpressionResult(command.getExpress(), advice, cost);\n                 String result = StringUtils.objectToString(\n                         isNeedExpand() ? new ObjectView(value, command.getExpand(), command.getSizeLimit()).draw() : value);\n-                process.write(\"ts=\" + DateUtils.getCurrentDate() + \";result=\" + result + \"\\n\");\n+                process.write(\"ts=\" + DateUtils.getCurrentDate() + \"; [cost=\" + cost + \"ms] result=\" + result + \"\\n\");\n                 process.times().incrementAndGet();\n                 if (isLimitExceeded(command.getNumberOfLimit(), process.times().get())) {\n                     abortProcess(process, command.getNumberOfLimit());",
    "output": "Merge pull request #227 from Hearen/adding-time-cost-for-invoking-in-watch\n\nadding time cost for watching methods"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java\n@@ -1,19 +1,16 @@\n package com.taobao.arthas.core.command.monitor200;\n \n-import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n-import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.advisor.Advice;\n import com.taobao.arthas.core.advisor.ArthasMethod;\n+import com.taobao.arthas.core.advisor.ReflectAdviceListenerAdapter;\n+import com.taobao.arthas.core.shell.command.CommandProcess;\n import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.ThreadLocalWatch;\n import com.taobao.arthas.core.view.ObjectView;\n import com.taobao.middleware.logger.Logger;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n /**\n  * @author beiwei30 on 29/11/2016.\n  */\n@@ -85,7 +82,7 @@ private void watching(Advice advice) {\n                 Object value = getExpressionResult(command.getExpress(), advice, cost);\n                 String result = StringUtils.objectToString(\n                         isNeedExpand() ? new ObjectView(value, command.getExpand(), command.getSizeLimit()).draw() : value);\n-                process.write(\"ts=\" + DateUtils.getCurrentDate() + \";result=\" + result + \"\\n\");\n+                process.write(\"ts=\" + DateUtils.getCurrentDate() + \"; [cost=\" + cost + \"ms] result=\" + result + \"\\n\");\n                 process.times().incrementAndGet();\n                 if (isLimitExceeded(command.getNumberOfLimit(), process.times().get())) {\n                     abortProcess(process, command.getNumberOfLimit());",
    "output": "adding time cost for watching methods"
  },
  {
    "input": "diff --git a/core/src/test/java/LocalDebugTest.java b/core/src/test/java/LocalDebugTest.java\n--- a/core/src/test/java/LocalDebugTest.java\n+++ b/core/src/test/java/LocalDebugTest.java\n@@ -1,79 +0,0 @@\n-import com.taobao.arthas.core.Arthas;\n-import sun.management.VMManagement;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.RuntimeMXBean;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-\n-/**\n- * 本机调试\n- * @author BlueT\n- * 2018/9/17 23:34\n- */\n-public class LocalDebugTest {\n-\n-    /**\n-     * 首先执行./mvnw clean package -DskipTests打包，生成的zip在 packaging/target/ 下面，然后解压。\n-     * 以debug方式执行此方法，\n-     *\n-     * @param args\n-     * @throws InterruptedException\n-     */\n-    public static void main(String[] args) throws InterruptedException {\n-        final int pid = getCurrentJVMPid();\n-        System.out.println(\"pid:\"+pid);\n-        String path = LocalDebugTest.class.getResource(\"/\").getPath();\n-        final String npath = path.substring(1, path.indexOf(\"core\")) + \"packaging/target/\";\n-        Thread thread = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Arthas.main(new String[]{\n-                        \"-jar\",\n-                        npath + \"arthas-core.jar\",\n-                        \"-pid\",\n-                        pid + \"\",\n-                        \"-target-ip\",\n-                        \"127.0.0.1\",\n-                        //\"-telnet-port\",\n-                        //\"3658\",\n-                        //\"-http-port\",\n-                        //\"8563\",\n-                        \"-core\",\n-                        npath + \"arthas-core.jar\",\n-                        \"-agent\",\n-                        npath + \"arthas-agent.jar\"\n-                });\n-            }\n-        });\n-        thread.start();\n-        thread.join();\n-        System.out.println(\"代码植入成功\");\n-        Thread.sleep(10000000);\n-    }\n-\n-    private static int getCurrentJVMPid() {\n-        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-\n-        try {\n-            Field jvm = runtime.getClass().getDeclaredField(\"jvm\");\n-            jvm.setAccessible(true);\n-            VMManagement mgmt = (VMManagement) jvm.get(runtime);\n-            Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n-            pid_method.setAccessible(true);\n-            return (int) (Integer) pid_method.invoke(mgmt);\n-        } catch (NoSuchFieldException e) {\n-            e.printStackTrace();\n-        } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        }\n-\n-        throw new RuntimeException(\"Wow!\");\n-\n-    }\n-}",
    "output": "remove LocalDebugTest. fix #196"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -21,6 +21,7 @@\n import com.taobao.arthas.core.shell.system.impl.JobImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n+import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n \n@@ -119,7 +120,7 @@ public ShellImpl init() {\n         if (welcome != null && welcome.length() > 0) {\n             term.write(welcome + \"\\n\");\n             term.write(\"pid: \" + session.get(Session.PID) + \"\\n\");\n-            term.write(\"timestamp: \" + System.currentTimeMillis() + \"\\n\\n\");\n+            term.write(\"time: \" + DateUtils.getCurrentDate() + \"\\n\\n\");\n         }\n         return this;\n     }",
    "output": "Merge pull request #213 from Hearen/fix-timestamp\n\nwelcome timestamp replace with readable date time"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -64,12 +64,12 @@ public void process(CommandProcess process) {\n         for (String path : paths) {\n             File file = new File(path);\n             if (!file.exists()) {\n-                process.write(\"path is not exists, path:\" + path + \"\\n\");\n+                process.write(\"file does not exist, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }\n             if (!file.isFile()) {\n-                process.write(\"path is not a normal file, path:\" + path + \"\\n\");\n+                process.write(\"not a normal file, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }",
    "output": "Merge branch 'master' into fix-timestamp"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -64,12 +64,12 @@ public void process(CommandProcess process) {\n         for (String path : paths) {\n             File file = new File(path);\n             if (!file.exists()) {\n-                process.write(\"path is not exists, path:\" + path + \"\\n\");\n+                process.write(\"file does not exist, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }\n             if (!file.isFile()) {\n-                process.write(\"path is not a normal file, path:\" + path + \"\\n\");\n+                process.write(\"not a normal file, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }",
    "output": "Merge pull request #209 from Hearen/typo-fix-in-prompts\n\nfix some typos in error prompts"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -21,6 +21,7 @@\n import com.taobao.arthas.core.shell.system.impl.JobImpl;\n import com.taobao.arthas.core.shell.term.Term;\n import com.taobao.arthas.core.util.Constants;\n+import com.taobao.arthas.core.util.DateUtils;\n import com.taobao.arthas.core.util.LogUtil;\n import com.taobao.middleware.logger.Logger;\n \n@@ -119,7 +120,7 @@ public ShellImpl init() {\n         if (welcome != null && welcome.length() > 0) {\n             term.write(welcome + \"\\n\");\n             term.write(\"pid: \" + session.get(Session.PID) + \"\\n\");\n-            term.write(\"timestamp: \" + System.currentTimeMillis() + \"\\n\\n\");\n+            term.write(\"time: \" + DateUtils.getCurrentDate() + \"\\n\\n\");\n         }\n         return this;\n     }",
    "output": "welcome timestamp replace with readable date time"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java\n@@ -64,12 +64,12 @@ public void process(CommandProcess process) {\n         for (String path : paths) {\n             File file = new File(path);\n             if (!file.exists()) {\n-                process.write(\"path is not exists, path:\" + path + \"\\n\");\n+                process.write(\"file does not exist, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }\n             if (!file.isFile()) {\n-                process.write(\"path is not a normal file, path:\" + path + \"\\n\");\n+                process.write(\"not a normal file, path:\" + path + \"\\n\");\n                 process.end();\n                 return;\n             }",
    "output": "fix some typos in error prompts"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n@@ -0,0 +1,28 @@\n+package com.taobao.arthas.core.util;\n+ import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.junit.Assert;\n+import org.junit.Test;\n+ /**\n+ * \n+ * @author brijeshprasad89\n+ *\n+ */\n+public class DateUtilsTest {\n+\t\n+    @Test\n+    public void testGetCurrentDateWithCorrectFormat() {\n+    \t\n+    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); //supported date format\n+    \tAssert.assertEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n+        \n+    }\n+    \n+    @Test\n+    public void testGetCurrentDateWithInCorrectFormat() {\n+    \t\n+    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\"); // Not supported Date format\n+    \tAssert.assertNotEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n+        \n+    }\n+ }\n\\ No newline at end of file",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/DateUtilsTest.java\n@@ -0,0 +1,28 @@\n+package com.taobao.arthas.core.util;\n+ import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.junit.Assert;\n+import org.junit.Test;\n+ /**\n+ * \n+ * @author brijeshprasad89\n+ *\n+ */\n+public class DateUtilsTest {\n+\t\n+    @Test\n+    public void testGetCurrentDateWithCorrectFormat() {\n+    \t\n+    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); //supported date format\n+    \tAssert.assertEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n+        \n+    }\n+    \n+    @Test\n+    public void testGetCurrentDateWithInCorrectFormat() {\n+    \t\n+    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\"); // Not supported Date format\n+    \tAssert.assertNotEquals(DateUtils.getCurrentDate(),dateFormat.format(new Date()).toString());\n+        \n+    }\n+ }\n\\ No newline at end of file",
    "output": "Test case for DateUtils (#195)"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n--- a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n+++ b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.taobao.arthas.core.testtool;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import org.junit.Assert;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * @author earayu\n+ */\n+public class TestUtils {\n+\n+    public static <T> List<T> newArrayList(T ... items){\n+        List<T> list = new ArrayList<T>();\n+        if(items!=null) {\n+            Collections.addAll(list, items);\n+        }\n+        return list;\n+    }\n+\n+    /**\n+     * copied from https://github.com/apache/commons-io/blob/master/src/test/java/org/apache/commons/io/testtools/TestUtils.java\n+     * Assert that the content of a file is equal to that in a byte[].\n+     *\n+     * @param b0   the expected contents\n+     * @param file the file to check\n+     * @throws IOException If an I/O error occurs while reading the file contents\n+     */\n+    public static void assertEqualContent(final byte[] b0, final File file) throws IOException {\n+        int count = 0, numRead = 0;\n+        final byte[] b1 = new byte[b0.length];\n+        InputStream is = null;\n+        try {\n+            is = new FileInputStream(file);\n+            while (count < b0.length && numRead >= 0) {\n+                numRead = is.read(b1, count, b0.length);\n+                count += numRead;\n+            }\n+            Assert.assertEquals(\"Different number of bytes: \", b0.length, count);\n+            for (int i = 0; i < count; i++) {\n+                Assert.assertEquals(\"byte \" + i + \" differs\", b0[i], b1[i]);\n+            }\n+        }finally {\n+            if(is!=null){\n+                is.close();\n+            }\n+        }\n+    }\n+\n+}\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n@@ -0,0 +1,118 @@\n+package com.taobao.arthas.core.util;\n+\n+import com.taobao.arthas.core.testtool.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+import static org.hamcrest.CoreMatchers.endsWith;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+\n+public class FileUtilsTest {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    private File getTestDirectory() {\n+        return temporaryFolder.getRoot();\n+    }\n+\n+\n+    @Test\n+    public void testGetTestDirectory(){\n+        Assert.assertNotNull(getTestDirectory());\n+    }\n+\n+    @Test\n+    public void testOpenOutputStreamIsDirectory() throws IOException {\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' exists but is a directory\")));\n+        FileUtils.openOutputStream(getTestDirectory(), true);\n+\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' exists but is a directory\")));\n+        FileUtils.openOutputStream(getTestDirectory(), false);\n+    }\n+\n+    @Test\n+    public void testOpenOutputStreamCannotWrite() throws IOException {\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' cannot be written to\")));\n+        File targetFile = temporaryFolder.newFile(\"cannotWrite.txt\");\n+        targetFile.setWritable(false);\n+        FileUtils.openOutputStream(targetFile, true);\n+    }\n+\n+    @Test\n+    public void testOpenOutputStream() throws IOException {\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileOutputStream outputStream = FileUtils.openOutputStream(targetFile, true);\n+        Assert.assertNotNull(outputStream);\n+        outputStream.close();\n+    }\n+\n+    @Test\n+    public void testWriteByteArrayToFile() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes());\n+        TestUtils.assertEqualContent(data.getBytes(), targetFile);\n+    }\n+\n+    @Test\n+    public void testWriteByteArrayToFileWithAppend() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes(), true);\n+        TestUtils.assertEqualContent(data.getBytes(), targetFile);\n+    }\n+\n+\n+    @Test\n+    public void testReadFileToString() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes(), true);\n+        String content = FileUtils.readFileToString(targetFile, Charset.defaultCharset());\n+        TestUtils.assertEqualContent(content.getBytes(), targetFile);\n+    }\n+\n+\n+    @Test\n+    public void testSaveCommandHistory() throws IOException {\n+        //cls\n+        int[] command1 = new int[]{99,108,115};\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.saveCommandHistory(TestUtils.newArrayList(command1), targetFile);\n+        TestUtils.assertEqualContent(\"cls\\n\".getBytes(), targetFile);\n+    }\n+\n+    @Test\n+    public void testLoadCommandHistory() throws IOException {\n+        //cls\n+        int[] command1 = new int[]{99,108,115};\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.saveCommandHistory(TestUtils.newArrayList(command1), targetFile);\n+        List<int[]> content = FileUtils.loadCommandHistory(targetFile);\n+        Assert.assertArrayEquals(command1, content.get(0));\n+    }\n+\n+\n+\n+\n+\n+\n+\n+}",
    "output": "Testcase for file utils"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n--- a/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n+++ b/core/src/test/java/com/taobao/arthas/core/testtool/TestUtils.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.taobao.arthas.core.testtool;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import org.junit.Assert;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * @author earayu\n+ */\n+public class TestUtils {\n+\n+    public static <T> List<T> newArrayList(T ... items){\n+        List<T> list = new ArrayList<T>();\n+        if(items!=null) {\n+            Collections.addAll(list, items);\n+        }\n+        return list;\n+    }\n+\n+    /**\n+     * copied from https://github.com/apache/commons-io/blob/master/src/test/java/org/apache/commons/io/testtools/TestUtils.java\n+     * Assert that the content of a file is equal to that in a byte[].\n+     *\n+     * @param b0   the expected contents\n+     * @param file the file to check\n+     * @throws IOException If an I/O error occurs while reading the file contents\n+     */\n+    public static void assertEqualContent(final byte[] b0, final File file) throws IOException {\n+        int count = 0, numRead = 0;\n+        final byte[] b1 = new byte[b0.length];\n+        InputStream is = null;\n+        try {\n+            is = new FileInputStream(file);\n+            while (count < b0.length && numRead >= 0) {\n+                numRead = is.read(b1, count, b0.length);\n+                count += numRead;\n+            }\n+            Assert.assertEquals(\"Different number of bytes: \", b0.length, count);\n+            for (int i = 0; i < count; i++) {\n+                Assert.assertEquals(\"byte \" + i + \" differs\", b0[i], b1[i]);\n+            }\n+        }finally {\n+            if(is!=null){\n+                is.close();\n+            }\n+        }\n+    }\n+\n+}\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/FileUtilsTest.java\n@@ -0,0 +1,118 @@\n+package com.taobao.arthas.core.util;\n+\n+import com.taobao.arthas.core.testtool.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+import static org.hamcrest.CoreMatchers.endsWith;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+\n+public class FileUtilsTest {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    private File getTestDirectory() {\n+        return temporaryFolder.getRoot();\n+    }\n+\n+\n+    @Test\n+    public void testGetTestDirectory(){\n+        Assert.assertNotNull(getTestDirectory());\n+    }\n+\n+    @Test\n+    public void testOpenOutputStreamIsDirectory() throws IOException {\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' exists but is a directory\")));\n+        FileUtils.openOutputStream(getTestDirectory(), true);\n+\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' exists but is a directory\")));\n+        FileUtils.openOutputStream(getTestDirectory(), false);\n+    }\n+\n+    @Test\n+    public void testOpenOutputStreamCannotWrite() throws IOException {\n+        thrown.expectMessage(allOf(startsWith(\"File '\") ,endsWith(\"' cannot be written to\")));\n+        File targetFile = temporaryFolder.newFile(\"cannotWrite.txt\");\n+        targetFile.setWritable(false);\n+        FileUtils.openOutputStream(targetFile, true);\n+    }\n+\n+    @Test\n+    public void testOpenOutputStream() throws IOException {\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileOutputStream outputStream = FileUtils.openOutputStream(targetFile, true);\n+        Assert.assertNotNull(outputStream);\n+        outputStream.close();\n+    }\n+\n+    @Test\n+    public void testWriteByteArrayToFile() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes());\n+        TestUtils.assertEqualContent(data.getBytes(), targetFile);\n+    }\n+\n+    @Test\n+    public void testWriteByteArrayToFileWithAppend() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes(), true);\n+        TestUtils.assertEqualContent(data.getBytes(), targetFile);\n+    }\n+\n+\n+    @Test\n+    public void testReadFileToString() throws IOException {\n+        String data = \"test data\";\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.writeByteArrayToFile(targetFile, data.getBytes(), true);\n+        String content = FileUtils.readFileToString(targetFile, Charset.defaultCharset());\n+        TestUtils.assertEqualContent(content.getBytes(), targetFile);\n+    }\n+\n+\n+    @Test\n+    public void testSaveCommandHistory() throws IOException {\n+        //cls\n+        int[] command1 = new int[]{99,108,115};\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.saveCommandHistory(TestUtils.newArrayList(command1), targetFile);\n+        TestUtils.assertEqualContent(\"cls\\n\".getBytes(), targetFile);\n+    }\n+\n+    @Test\n+    public void testLoadCommandHistory() throws IOException {\n+        //cls\n+        int[] command1 = new int[]{99,108,115};\n+        File targetFile = temporaryFolder.newFile(\"targetFile.txt\");\n+        FileUtils.saveCommandHistory(TestUtils.newArrayList(command1), targetFile);\n+        List<int[]> content = FileUtils.loadCommandHistory(targetFile);\n+        Assert.assertArrayEquals(command1, content.get(0));\n+    }\n+\n+\n+\n+\n+\n+\n+\n+}",
    "output": "add test for FileUtils"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n@@ -0,0 +1,117 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Test;\n+\n+import java.io.Serializable;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class TypeRenderUtilsTest {\n+\n+\n+    public class TestClass implements Serializable {\n+        private int testField;\n+        public char anotherTestField;\n+\n+        public int testMethod(int i, boolean b) {\n+            return 0;\n+        }\n+\n+        public void anotherTestMethod() throws NullPointerException {\n+\n+        }\n+    }\n+\n+    @Test\n+    public void testDrawInterface() {\n+        assertThat(TypeRenderUtils.drawInterface(String.class), is(equalTo(\"java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\")));\n+        assertThat(TypeRenderUtils.drawInterface(TestClass.class), is(equalTo(\"java.io.Serializable\")));\n+        assertThat(TypeRenderUtils.drawInterface(Serializable.class), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawParametersForMethod() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"int\\nboolean\")));\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"\")));\n+\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getMethod(\"charAt\", int.class)), is(equalTo(\"int\")));\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getMethod(\"isEmpty\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawParametersForMethodThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawParametersForConstructor() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[3];\n+        classesOfParameters[0] = char[].class;\n+        classesOfParameters[1] = int.class;\n+        classesOfParameters[2] = int.class;\n+\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getConstructor(classesOfParameters)), is(equalTo(\"[]\\nint\\nint\")));\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawParametersForConstructorThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawReturn() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"int\")));\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"void\")));\n+\n+        assertThat(TypeRenderUtils.drawReturn(String.class.getMethod(\"isEmpty\")), is(equalTo(\"boolean\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawReturnThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawExceptionsForMethod() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"\")));\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"java.lang.NullPointerException\")));\n+\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getMethod(\"getBytes\", String.class)), is(equalTo(\"java.io.UnsupportedEncodingException\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawExceptionsForMethodThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawExceptionsForConstructor() throws NoSuchMethodException {\n+        Class[] classesOfConstructorParameters = new Class[2];\n+        classesOfConstructorParameters[0] = byte[].class;\n+        classesOfConstructorParameters[1] = String.class;\n+\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getConstructor()), is(equalTo(\"\")));\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getConstructor(classesOfConstructorParameters)), is(equalTo(\"java.io.UnsupportedEncodingException\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawExceptionsForConstructorThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for a couple of methods of TypeRenderUtils"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TypeRenderUtilsTest.java\n@@ -0,0 +1,117 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Test;\n+\n+import java.io.Serializable;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class TypeRenderUtilsTest {\n+\n+\n+    public class TestClass implements Serializable {\n+        private int testField;\n+        public char anotherTestField;\n+\n+        public int testMethod(int i, boolean b) {\n+            return 0;\n+        }\n+\n+        public void anotherTestMethod() throws NullPointerException {\n+\n+        }\n+    }\n+\n+    @Test\n+    public void testDrawInterface() {\n+        assertThat(TypeRenderUtils.drawInterface(String.class), is(equalTo(\"java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\")));\n+        assertThat(TypeRenderUtils.drawInterface(TestClass.class), is(equalTo(\"java.io.Serializable\")));\n+        assertThat(TypeRenderUtils.drawInterface(Serializable.class), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawParametersForMethod() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"int\\nboolean\")));\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"\")));\n+\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getMethod(\"charAt\", int.class)), is(equalTo(\"int\")));\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getMethod(\"isEmpty\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawParametersForMethodThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawParametersForConstructor() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[3];\n+        classesOfParameters[0] = char[].class;\n+        classesOfParameters[1] = int.class;\n+        classesOfParameters[2] = int.class;\n+\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getConstructor(classesOfParameters)), is(equalTo(\"[]\\nint\\nint\")));\n+        assertThat(TypeRenderUtils.drawParameters(String.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawParametersForConstructorThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawParameters(TestClass.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawReturn() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"int\")));\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"void\")));\n+\n+        assertThat(TypeRenderUtils.drawReturn(String.class.getMethod(\"isEmpty\")), is(equalTo(\"boolean\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawReturnThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawReturn(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawExceptionsForMethod() throws NoSuchMethodException {\n+        Class[] classesOfParameters = new Class[2];\n+        classesOfParameters[0] = int.class;\n+        classesOfParameters[1] = boolean.class;\n+\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"testMethod\", classesOfParameters)), is(equalTo(\"\")));\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"anotherTestMethod\")), is(equalTo(\"java.lang.NullPointerException\")));\n+\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getMethod(\"getBytes\", String.class)), is(equalTo(\"java.io.UnsupportedEncodingException\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawExceptionsForMethodThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getMethod(\"method\")), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    public void testDrawExceptionsForConstructor() throws NoSuchMethodException {\n+        Class[] classesOfConstructorParameters = new Class[2];\n+        classesOfConstructorParameters[0] = byte[].class;\n+        classesOfConstructorParameters[1] = String.class;\n+\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getConstructor()), is(equalTo(\"\")));\n+        assertThat(TypeRenderUtils.drawExceptions(String.class.getConstructor(classesOfConstructorParameters)), is(equalTo(\"java.io.UnsupportedEncodingException\")));\n+    }\n+\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testDrawExceptionsForConstructorThrowsException() throws NoSuchMethodException {\n+        assertThat(TypeRenderUtils.drawExceptions(TestClass.class.getConstructor()), is(equalTo(\"\")));\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for a couple of methods of TypeRenderUtils"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n@@ -8,6 +8,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.TimeZone;\n \n /**\n  * @author ralf0131 2018-07-10 10:55.\n@@ -190,13 +191,14 @@ public void testThrowable() {\n \n     @Test\n     public void testDate() {\n-        Date d = new Date(1531204354961L);\n+        Date d = new Date(1531204354961L - TimeZone.getDefault().getRawOffset()\n+                        + TimeZone.getTimeZone(\"GMT+8\").getRawOffset());\n         ObjectView objectView = new ObjectView(d, 3);\n         String expected = \"@Date[2018-07-10 14:32:34,961]\";\n         Assert.assertEquals(expected, objectView.draw());\n     }\n \n-  @Test\n+    @Test\n     public void testNestedClass() {\n         ObjectView objectView = new ObjectView(new NestedClass(100), 3);\n ",
    "output": "fix ObjectViewTest TimeZone problem."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ApplicationUtils.java b/core/src/main/java/com/taobao/arthas/core/util/ApplicationUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ApplicationUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ApplicationUtils.java\n@@ -0,0 +1,32 @@\n+package com.taobao.arthas.core.util;\n+\n+import java.lang.management.ManagementFactory;\n+\n+/**\n+ *\n+ * @author hengyunabc 2018-09-30\n+ *\n+ */\n+public class ApplicationUtils {\n+\n+    private static String PID = \"-1\";\n+\n+    static {\n+        // https://stackoverflow.com/a/7690178\n+        String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n+        int index = jvmName.indexOf('@');\n+\n+        if (index > 0) {\n+            try {\n+                PID = Long.toString(Long.parseLong(jvmName.substring(0, index)));\n+            } catch (Throwable e) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n+    public static String getPid() {\n+        return PID;\n+    }\n+\n+}\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/Constants.java b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/Constants.java\n@@ -1,7 +1,6 @@\n package com.taobao.arthas.core.util;\n \n import java.io.File;\n-import java.lang.management.ManagementFactory;\n \n import com.taobao.arthas.core.view.Ansi;\n \n@@ -46,7 +45,7 @@ public interface Constants {\n     /**\n      * 当前进程PID\n      */\n-    String PID = ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0];\n+    String PID = ApplicationUtils.getPid();\n \n     /**\n      * 缓存目录",
    "output": "improve get pid logic"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -35,9 +35,9 @@ public class AgentBootstrap {\n     static {\n         try {\n             File log = new File(System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator\n-                    + \".arthas\" + File.separator + \"arthas.log\");\n+                    + \"arthas\" + File.separator + \"arthas.log\");\n             if (!log.exists()) {\n-                log.getParentFile().mkdir();\n+                log.getParentFile().mkdirs();\n                 log.createNewFile();\n             }\n             ps = new PrintStream(new FileOutputStream(log, true));",
    "output": "fix log path error. #168"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n@@ -1,41 +1,65 @@\n package com.taobao.arthas.core.util;\n \n import java.util.List;\n-\n import com.taobao.arthas.core.shell.cli.CliToken;\n \n /**\n- * tokens处理的辅助类\n+ * tokenizer helper\n  *  \n- * @author gehui 2017年7月27日 上午11:39:56\n+ * @author gehui 2017-07-27 11:39:56\n  */\n public class TokenUtils {\n \n+    /**\n+     * find the first text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findFirstTextToken(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         CliToken first = null;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 first = token;\n                 break;\n             }\n         }\n         return first;\n     }\n \n+    /**\n+     * find the last text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findLastTextToken(List<CliToken> tokens) {\n-        for (int i = tokens.size() - 1; i > 0; i--) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n+        //#165\n+        for (int i = tokens.size() - 1; i >= 0; i--) {\n             CliToken token = tokens.get(i);\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 return token;\n             }\n         }\n         return null;\n     }\n \n+    /**\n+     * find the second text token's text\n+     * @param tokens\n+     * @return\n+     */\n     public static String findSecondTokenText(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         boolean first = true;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 if (first) {\n                     first = false;\n                 } else {\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n@@ -0,0 +1,126 @@\n+package com.taobao.arthas.core.util;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.impl.CliTokenImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * @author earayu\n+ */\n+public class TokenUtilsTest {\n+\n+    private List<CliToken> newCliTokenList(CliToken ... tokens){\n+        List<CliToken> cliTokens = new ArrayList<CliToken>();\n+        if(tokens!=null) {\n+            Collections.addAll(cliTokens, tokens);\n+        }\n+        return cliTokens;\n+    }\n+\n+    @Test\n+    public void testFindFirstTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+\n+    @Test\n+    public void testFindLastTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, null, nonTextCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+    @Test\n+    public void testFindSecondTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken, textCliToken})));\n+\n+    }\n+\n+}",
    "output": "Merge branch 'master' of github.com:alibaba/arthas"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n@@ -1,41 +1,65 @@\n package com.taobao.arthas.core.util;\n \n import java.util.List;\n-\n import com.taobao.arthas.core.shell.cli.CliToken;\n \n /**\n- * tokens处理的辅助类\n+ * tokenizer helper\n  *  \n- * @author gehui 2017年7月27日 上午11:39:56\n+ * @author gehui 2017-07-27 11:39:56\n  */\n public class TokenUtils {\n \n+    /**\n+     * find the first text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findFirstTextToken(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         CliToken first = null;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 first = token;\n                 break;\n             }\n         }\n         return first;\n     }\n \n+    /**\n+     * find the last text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findLastTextToken(List<CliToken> tokens) {\n-        for (int i = tokens.size() - 1; i > 0; i--) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n+        //#165\n+        for (int i = tokens.size() - 1; i >= 0; i--) {\n             CliToken token = tokens.get(i);\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 return token;\n             }\n         }\n         return null;\n     }\n \n+    /**\n+     * find the second text token's text\n+     * @param tokens\n+     * @return\n+     */\n     public static String findSecondTokenText(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         boolean first = true;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 if (first) {\n                     first = false;\n                 } else {\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n@@ -0,0 +1,126 @@\n+package com.taobao.arthas.core.util;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.impl.CliTokenImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * @author earayu\n+ */\n+public class TokenUtilsTest {\n+\n+    private List<CliToken> newCliTokenList(CliToken ... tokens){\n+        List<CliToken> cliTokens = new ArrayList<CliToken>();\n+        if(tokens!=null) {\n+            Collections.addAll(cliTokens, tokens);\n+        }\n+        return cliTokens;\n+    }\n+\n+    @Test\n+    public void testFindFirstTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+\n+    @Test\n+    public void testFindLastTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, null, nonTextCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+    @Test\n+    public void testFindSecondTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken, textCliToken})));\n+\n+    }\n+\n+}",
    "output": "Merge pull request #166 from earayu/test-case\n\nbugfix&test case. #165"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/TokenUtils.java\n@@ -1,41 +1,65 @@\n package com.taobao.arthas.core.util;\n \n import java.util.List;\n-\n import com.taobao.arthas.core.shell.cli.CliToken;\n \n /**\n- * tokens处理的辅助类\n+ * tokenizer helper\n  *  \n- * @author gehui 2017年7月27日 上午11:39:56\n+ * @author gehui 2017-07-27 11:39:56\n  */\n public class TokenUtils {\n \n+    /**\n+     * find the first text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findFirstTextToken(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         CliToken first = null;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 first = token;\n                 break;\n             }\n         }\n         return first;\n     }\n \n+    /**\n+     * find the last text token\n+     * @param tokens\n+     * @return\n+     */\n     public static CliToken findLastTextToken(List<CliToken> tokens) {\n-        for (int i = tokens.size() - 1; i > 0; i--) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n+        //#165\n+        for (int i = tokens.size() - 1; i >= 0; i--) {\n             CliToken token = tokens.get(i);\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 return token;\n             }\n         }\n         return null;\n     }\n \n+    /**\n+     * find the second text token's text\n+     * @param tokens\n+     * @return\n+     */\n     public static String findSecondTokenText(List<CliToken> tokens) {\n+        if(tokens==null || tokens.isEmpty()){\n+            return null;\n+        }\n         boolean first = true;\n         for (CliToken token : tokens) {\n-            if (token.isText()) {\n+            if (token!=null && token.isText()) {\n                 if (first) {\n                     first = false;\n                 } else {\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/TokenUtilsTest.java\n@@ -0,0 +1,126 @@\n+package com.taobao.arthas.core.util;\n+\n+import com.taobao.arthas.core.shell.cli.CliToken;\n+import com.taobao.arthas.core.shell.cli.impl.CliTokenImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * @author earayu\n+ */\n+public class TokenUtilsTest {\n+\n+    private List<CliToken> newCliTokenList(CliToken ... tokens){\n+        List<CliToken> cliTokens = new ArrayList<CliToken>();\n+        if(tokens!=null) {\n+            Collections.addAll(cliTokens, tokens);\n+        }\n+        return cliTokens;\n+    }\n+\n+    @Test\n+    public void testFindFirstTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findFirstTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+\n+    @Test\n+    public void testFindLastTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findLastTextToken(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, null, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, null, nonTextCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken,\n+                TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken})));\n+\n+    }\n+\n+\n+    @Test\n+    public void testFindSecondTextToken(){\n+        CliToken textCliToken = new CliTokenImpl(true,\"textCliToken\");\n+        CliToken nonTextCliToken = new CliTokenImpl(false,\"nonTextCliToken\");\n+\n+        //null list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(null));\n+\n+        //empty list\n+        Assert.assertEquals(null, TokenUtils.findSecondTokenText(new ArrayList<CliToken>()));\n+\n+        //list with null value\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null, nonTextCliToken, textCliToken, textCliToken})));\n+\n+        //list with normal inputs\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken})));\n+        Assert.assertEquals(null,\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken, textCliToken})));\n+        Assert.assertEquals(textCliToken.value(),\n+                TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken, nonTextCliToken, textCliToken})));\n+\n+    }\n+\n+}",
    "output": "bugfix"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java b/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n@@ -8,6 +8,12 @@ public class WildcardMatcher implements Matcher<String> {\n \n     private final String pattern;\n \n+    private static final Character ASTERISK = '*';\n+    private static final Character QUESTION_MARK = '?';\n+    private static final Character ESCAPE = '\\\\';\n+\n+\n+\n     public WildcardMatcher(String pattern) {\n         this.pattern = pattern;\n     }\n@@ -21,51 +27,61 @@ public boolean matching(String target) {\n     /**\n      * Internal matching recursive function.\n      */\n-    private boolean match(String string, String pattern, int stringStartNdx, int patternStartNdx) {\n+    private boolean match(String target, String pattern, int stringStartNdx, int patternStartNdx) {\n+        //#135\n+        if(target==null || pattern==null){\n+            return false;\n+        }\n         int pNdx = patternStartNdx;\n         int sNdx = stringStartNdx;\n         int pLen = pattern.length();\n         if (pLen == 1) {\n-            if (pattern.charAt(0) == '*') {     // speed-up\n+            // speed-up\n+            if (pattern.charAt(0) == ASTERISK) {\n                 return true;\n             }\n         }\n-        int sLen = string.length();\n+        int sLen = target.length();\n         boolean nextIsNotWildcard = false;\n \n         while (true) {\n \n             // check if end of string and/or pattern occurred\n-            if ((sNdx >= sLen)) {   // end of string still may have pending '*' callback pattern\n-                while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) {\n+            if ((sNdx >= sLen)) {\n+                // end of string still may have pending '*' callback pattern\n+                while ((pNdx < pLen) && (pattern.charAt(pNdx) == ASTERISK)) {\n                     pNdx++;\n                 }\n                 return pNdx >= pLen;\n             }\n-            if (pNdx >= pLen) {         // end of pattern, but not end of the string\n+            // end of pattern, but not end of the string\n+            if (pNdx >= pLen) {\n                 return false;\n             }\n-            char p = pattern.charAt(pNdx);    // pattern char\n+            // pattern char\n+            char p = pattern.charAt(pNdx);\n \n             // perform logic\n             if (!nextIsNotWildcard) {\n \n-                if (p == '\\\\') {\n+                if (p == ESCAPE) {\n                     pNdx++;\n                     nextIsNotWildcard = true;\n                     continue;\n                 }\n-                if (p == '?') {\n+                if (p == QUESTION_MARK) {\n                     sNdx++;\n                     pNdx++;\n                     continue;\n                 }\n-                if (p == '*') {\n-                    char pnext = 0;           // next pattern char\n+                if (p == ASTERISK) {\n+                    // next pattern char\n+                    char pnext = 0;\n                     if (pNdx + 1 < pLen) {\n                         pnext = pattern.charAt(pNdx + 1);\n                     }\n-                    if (pnext == '*') {         // double '*' have the same effect as one '*'\n+                    // double '*' have the same effect as one '*'\n+                    if (pnext == ASTERISK) {\n                         pNdx++;\n                         continue;\n                     }\n@@ -74,8 +90,8 @@ private boolean match(String string, String pattern, int stringStartNdx, int pat\n \n                     // find recursively if there is any substring from the end of the\n                     // line that matches the rest of the pattern !!!\n-                    for (i = string.length(); i >= sNdx; i--) {\n-                        if (match(string, pattern, i, pNdx)) {\n+                    for (i = target.length(); i >= sNdx; i--) {\n+                        if (match(target, pattern, i, pNdx)) {\n                             return true;\n                         }\n                     }\n@@ -86,7 +102,7 @@ private boolean match(String string, String pattern, int stringStartNdx, int pat\n             }\n \n             // check if pattern char and string char are equals\n-            if (p != string.charAt(sNdx)) {\n+            if (p != target.charAt(sNdx)) {\n                 return false;\n             }\n \n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java b/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n@@ -0,0 +1,36 @@\n+package com.taobao.arthas.core.util.matcher;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author earayu\n+ */\n+public class WildcardMatcherTest {\n+\n+    @Test\n+    public void testMatching(){\n+        Assert.assertFalse(new WildcardMatcher(null).matching(null));\n+        Assert.assertFalse(new WildcardMatcher(null).matching(\"foo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\").matching(null));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\").matching(\"foo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\").matching(\"bar\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo*\").matching(\"foo\"));\n+        Assert.assertTrue(new WildcardMatcher(\"foo*\").matching(\"fooooooobar\"));\n+        Assert.assertTrue(new WildcardMatcher(\"f*r\").matching(\"fooooooobar\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo*\").matching(\"fo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo*\").matching(\"bar\"));\n+\n+        Assert.assertFalse(new WildcardMatcher(\"foo?\").matching(\"foo\"));\n+        Assert.assertTrue(new WildcardMatcher(\"foo?\").matching(\"foob\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\\\\*\").matching(\"foo*\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\\\\*\").matching(\"foooooo\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\\\\?\").matching(\"foo?\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\\\\?\").matching(\"foob\"));\n+    }\n+\n+}",
    "output": "Bugfix wildcardmatcher"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n@@ -5,55 +5,52 @@\n import java.util.Enumeration;\n \n /**\n- * @author weipeng2k 2015年1月30日 下午3:06:47\n+ * @author weipeng2k 2015-01-30 15:06:47\n  */\n public class IPUtils {\n \n+    private static final String WINDOWS = \"windows\";\n+    private static final String OS_NAME = \"os.name\";\n+\n     /**\n-     * 判断当前操作是否Windows.\n-     * \n-     * @return true---是Windows操作系统\n+     * check: whether current operating system is windows\n+     *\n+     * @return true---is windows\n      */\n     public static boolean isWindowsOS() {\n-        boolean isWindowsOS = false;\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.toLowerCase().indexOf(\"windows\") > -1) {\n-            isWindowsOS = true;\n-        }\n-        return isWindowsOS;\n+        String osName = System.getProperty(OS_NAME);\n+        return osName.toLowerCase().contains(WINDOWS);\n     }\n \n     /**\n-     * 获取本机IP地址，并自动区分Windows还是Linux操作系统\n-     * \n+     * get IP address, automatically distinguish the operating system.（windows or linux）\n+     *\n      * @return String\n      */\n     public static String getLocalIP() {\n-        String sIP = null;\n         InetAddress ip = null;\n         try {\n             if (isWindowsOS()) {\n                 ip = InetAddress.getLocalHost();\n             } else {\n-                // 如果是回环地址则扫描所有的NetWorkInterface\n+                //scan all NetWorkInterfaces if it's loopback address\n                 if (!InetAddress.getLocalHost().isLoopbackAddress()) {\n                     ip = InetAddress.getLocalHost();\n                 } else {\n                     boolean bFindIP = false;\n-                    Enumeration<NetworkInterface> netInterfaces = (Enumeration<NetworkInterface>) NetworkInterface.getNetworkInterfaces();\n+                    Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n                     while (netInterfaces.hasMoreElements()) {\n                         if (bFindIP) {\n                             break;\n                         }\n-                        NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();\n+                        NetworkInterface ni = netInterfaces.nextElement();\n                         // ----------特定情况，可以考虑用ni.getName判断\n-                        // 遍历所有ip\n+                        // iterator all IPs\n                         Enumeration<InetAddress> ips = ni.getInetAddresses();\n                         while (ips.hasMoreElements()) {\n-                            ip = (InetAddress) ips.nextElement();\n-                            // 127.开头的都是lookback地址\n-                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress()\n-                                && ip.getHostAddress().indexOf(\":\") == -1) {\n+                            ip = ips.nextElement();\n+                            // IP starts with 127. is loopback address\n+                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress() && !ip.getHostAddress().contains(\":\")) {\n                                 bFindIP = true;\n                                 break;\n                             }\n@@ -65,13 +62,7 @@ public static String getLocalIP() {\n         } catch (Exception e) {\n         }\n \n-        if (ip != null) {\n-            sIP = ip.getHostAddress();\n-        }\n-        return sIP;\n+        return ip == null ? null : ip.getHostAddress();\n     }\n \n-    public static void main(String[] args) {\n-        System.out.println(getLocalIP());\n-    }\n }",
    "output": "IPUtils.java: comments and some minimum refactor"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/IPUtils.java\n@@ -5,55 +5,52 @@\n import java.util.Enumeration;\n \n /**\n- * @author weipeng2k 2015年1月30日 下午3:06:47\n+ * @author weipeng2k 2015-01-30 15:06:47\n  */\n public class IPUtils {\n \n+    private static final String WINDOWS = \"windows\";\n+    private static final String OS_NAME = \"os.name\";\n+\n     /**\n-     * 判断当前操作是否Windows.\n-     * \n-     * @return true---是Windows操作系统\n+     * check: whether current operating system is windows\n+     *\n+     * @return true---is windows\n      */\n     public static boolean isWindowsOS() {\n-        boolean isWindowsOS = false;\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.toLowerCase().indexOf(\"windows\") > -1) {\n-            isWindowsOS = true;\n-        }\n-        return isWindowsOS;\n+        String osName = System.getProperty(OS_NAME);\n+        return osName.toLowerCase().contains(WINDOWS);\n     }\n \n     /**\n-     * 获取本机IP地址，并自动区分Windows还是Linux操作系统\n-     * \n+     * get IP address, automatically distinguish the operating system.（windows or linux）\n+     *\n      * @return String\n      */\n     public static String getLocalIP() {\n-        String sIP = null;\n         InetAddress ip = null;\n         try {\n             if (isWindowsOS()) {\n                 ip = InetAddress.getLocalHost();\n             } else {\n-                // 如果是回环地址则扫描所有的NetWorkInterface\n+                //scan all NetWorkInterfaces if it's loopback address\n                 if (!InetAddress.getLocalHost().isLoopbackAddress()) {\n                     ip = InetAddress.getLocalHost();\n                 } else {\n                     boolean bFindIP = false;\n-                    Enumeration<NetworkInterface> netInterfaces = (Enumeration<NetworkInterface>) NetworkInterface.getNetworkInterfaces();\n+                    Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n                     while (netInterfaces.hasMoreElements()) {\n                         if (bFindIP) {\n                             break;\n                         }\n-                        NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();\n+                        NetworkInterface ni = netInterfaces.nextElement();\n                         // ----------特定情况，可以考虑用ni.getName判断\n-                        // 遍历所有ip\n+                        // iterator all IPs\n                         Enumeration<InetAddress> ips = ni.getInetAddresses();\n                         while (ips.hasMoreElements()) {\n-                            ip = (InetAddress) ips.nextElement();\n-                            // 127.开头的都是lookback地址\n-                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress()\n-                                && ip.getHostAddress().indexOf(\":\") == -1) {\n+                            ip = ips.nextElement();\n+                            // IP starts with 127. is loopback address\n+                            if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress() && !ip.getHostAddress().contains(\":\")) {\n                                 bFindIP = true;\n                                 break;\n                             }\n@@ -65,13 +62,7 @@ public static String getLocalIP() {\n         } catch (Exception e) {\n         }\n \n-        if (ip != null) {\n-            sIP = ip.getHostAddress();\n-        }\n-        return sIP;\n+        return ip == null ? null : ip.getHostAddress();\n     }\n \n-    public static void main(String[] args) {\n-        System.out.println(getLocalIP());\n-    }\n }",
    "output": "1. add some comments\n2. do some minimum refactor"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java b/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/matcher/WildcardMatcherTest.java\n@@ -0,0 +1,36 @@\n+package com.taobao.arthas.core.util.matcher;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author earayu\n+ */\n+public class WildcardMatcherTest {\n+\n+    @Test\n+    public void testMatching(){\n+        Assert.assertFalse(new WildcardMatcher(null).matching(null));\n+        Assert.assertFalse(new WildcardMatcher(null).matching(\"foo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\").matching(null));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\").matching(\"foo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\").matching(\"bar\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo*\").matching(\"foo\"));\n+        Assert.assertTrue(new WildcardMatcher(\"foo*\").matching(\"fooooooobar\"));\n+        Assert.assertTrue(new WildcardMatcher(\"f*r\").matching(\"fooooooobar\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo*\").matching(\"fo\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo*\").matching(\"bar\"));\n+\n+        Assert.assertFalse(new WildcardMatcher(\"foo?\").matching(\"foo\"));\n+        Assert.assertTrue(new WildcardMatcher(\"foo?\").matching(\"foob\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\\\\*\").matching(\"foo*\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\\\\*\").matching(\"foooooo\"));\n+\n+        Assert.assertTrue(new WildcardMatcher(\"foo\\\\?\").matching(\"foo?\"));\n+        Assert.assertFalse(new WildcardMatcher(\"foo\\\\?\").matching(\"foob\"));\n+    }\n+\n+}",
    "output": "unit test for WildcardMatcher"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java b/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/matcher/WildcardMatcher.java\n@@ -8,6 +8,12 @@ public class WildcardMatcher implements Matcher<String> {\n \n     private final String pattern;\n \n+    private static final Character ASTERISK = '*';\n+    private static final Character QUESTION_MARK = '?';\n+    private static final Character ESCAPE = '\\\\';\n+\n+\n+\n     public WildcardMatcher(String pattern) {\n         this.pattern = pattern;\n     }\n@@ -21,51 +27,61 @@ public boolean matching(String target) {\n     /**\n      * Internal matching recursive function.\n      */\n-    private boolean match(String string, String pattern, int stringStartNdx, int patternStartNdx) {\n+    private boolean match(String target, String pattern, int stringStartNdx, int patternStartNdx) {\n+        //#135\n+        if(target==null || pattern==null){\n+            return false;\n+        }\n         int pNdx = patternStartNdx;\n         int sNdx = stringStartNdx;\n         int pLen = pattern.length();\n         if (pLen == 1) {\n-            if (pattern.charAt(0) == '*') {     // speed-up\n+            // speed-up\n+            if (pattern.charAt(0) == ASTERISK) {\n                 return true;\n             }\n         }\n-        int sLen = string.length();\n+        int sLen = target.length();\n         boolean nextIsNotWildcard = false;\n \n         while (true) {\n \n             // check if end of string and/or pattern occurred\n-            if ((sNdx >= sLen)) {   // end of string still may have pending '*' callback pattern\n-                while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) {\n+            if ((sNdx >= sLen)) {\n+                // end of string still may have pending '*' callback pattern\n+                while ((pNdx < pLen) && (pattern.charAt(pNdx) == ASTERISK)) {\n                     pNdx++;\n                 }\n                 return pNdx >= pLen;\n             }\n-            if (pNdx >= pLen) {         // end of pattern, but not end of the string\n+            // end of pattern, but not end of the string\n+            if (pNdx >= pLen) {\n                 return false;\n             }\n-            char p = pattern.charAt(pNdx);    // pattern char\n+            // pattern char\n+            char p = pattern.charAt(pNdx);\n \n             // perform logic\n             if (!nextIsNotWildcard) {\n \n-                if (p == '\\\\') {\n+                if (p == ESCAPE) {\n                     pNdx++;\n                     nextIsNotWildcard = true;\n                     continue;\n                 }\n-                if (p == '?') {\n+                if (p == QUESTION_MARK) {\n                     sNdx++;\n                     pNdx++;\n                     continue;\n                 }\n-                if (p == '*') {\n-                    char pnext = 0;           // next pattern char\n+                if (p == ASTERISK) {\n+                    // next pattern char\n+                    char pnext = 0;\n                     if (pNdx + 1 < pLen) {\n                         pnext = pattern.charAt(pNdx + 1);\n                     }\n-                    if (pnext == '*') {         // double '*' have the same effect as one '*'\n+                    // double '*' have the same effect as one '*'\n+                    if (pnext == ASTERISK) {\n                         pNdx++;\n                         continue;\n                     }\n@@ -74,8 +90,8 @@ private boolean match(String string, String pattern, int stringStartNdx, int pat\n \n                     // find recursively if there is any substring from the end of the\n                     // line that matches the rest of the pattern !!!\n-                    for (i = string.length(); i >= sNdx; i--) {\n-                        if (match(string, pattern, i, pNdx)) {\n+                    for (i = target.length(); i >= sNdx; i--) {\n+                        if (match(target, pattern, i, pNdx)) {\n                             return true;\n                         }\n                     }\n@@ -86,7 +102,7 @@ private boolean match(String string, String pattern, int stringStartNdx, int pat\n             }\n \n             // check if pattern char and string char are equals\n-            if (p != string.charAt(sNdx)) {\n+            if (p != target.charAt(sNdx)) {\n                 return false;\n             }\n ",
    "output": "#135\n1. change the param's name, from 'string' to 'target'\n2. get rid of the magic value of: * ? \\\n3. bugfix: return false if the pattern or target is NULL"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n@@ -14,6 +14,7 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.lang.management.*;\n+import java.lang.reflect.Method;\n import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.util.Date;\n@@ -74,12 +75,27 @@ public void process(CommandProcess process) {\n         table.row(\"\", \"\");\n         table.row(true, label(\"THREAD\").style(Decoration.bold.bold()));\n         drawThreadTable(table);\n-\n+        table.row(\"\", \"\");\n+        table.row(true, label(\"FILE-DESCRIPTOR\").style(Decoration.bold.bold()));\n+        drawFileDescriptorTable(table);\n         process.write(RenderUtil.render(table, process.width()));\n         process.write(affect.toString()).write(\"\\n\");\n         process.end();\n     }\n \n+    private void drawFileDescriptorTable(TableElement table) {\n+        table.row(\"MAX-FILE-DESCRIPTOR-COUNT\", \"\" + invokeFileDescriptor(operatingSystemMXBean, \"getMaxFileDescriptorCount\"))\n+                .row(\"OPEN-FILE-DESCRIPTOR-COUNT\", \"\" + invokeFileDescriptor(operatingSystemMXBean, \"getOpenFileDescriptorCount\"));\n+    }\n+    private long invokeFileDescriptor(OperatingSystemMXBean os, String name) {\n+        try {\n+            final Method method = os.getClass().getDeclaredMethod(name);\n+            method.setAccessible(true);\n+            return (Long) method.invoke(os);\n+        } catch (Exception e) {\n+            return -1;\n+        }\n+    }\n     private String toCol(Collection<String> strings) {\n         final StringBuilder colSB = new StringBuilder();\n         if (strings.isEmpty()) {",
    "output": "Add file descriptor info."
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/config/Configure.java b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n--- a/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n+++ b/core/src/main/java/com/taobao/arthas/core/config/Configure.java\n@@ -27,7 +27,7 @@ public String getIp() {\n     }\n \n     public void setIp(String ip) {\n-        this.ip = normalizeIp(ip);\n+        this.ip = ip;\n     }\n \n     public int getTelnetPort() {\n@@ -124,12 +124,4 @@ public static Configure toConfigure(String toString) {\n         return configure;\n     }\n \n-    private String normalizeIp(String ip){\n-        if (\"127.0.0.1\".equals(ip)) {\n-            // bind to all network interfaces, allowing remote connections\n-            return \"0.0.0.0\";\n-        }\n-        return ip;\n-    }\n-\n }",
    "output": "remove the code that replaces 127.0.0.1 with 0.0.0.0. fix #131"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n@@ -14,6 +14,7 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.lang.management.*;\n+import java.lang.reflect.Method;\n import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.util.Date;\n@@ -74,12 +75,27 @@ public void process(CommandProcess process) {\n         table.row(\"\", \"\");\n         table.row(true, label(\"THREAD\").style(Decoration.bold.bold()));\n         drawThreadTable(table);\n-\n+        table.row(\"\", \"\");\n+        table.row(true, label(\"FILE-DESCRIPTOR\").style(Decoration.bold.bold()));\n+        drawFileDescriptorTable(table);\n         process.write(RenderUtil.render(table, process.width()));\n         process.write(affect.toString()).write(\"\\n\");\n         process.end();\n     }\n \n+    private void drawFileDescriptorTable(TableElement table) {\n+        table.row(\"MAX-FILE-DESCRIPTOR-COUNT\", \"\" + invokeFileDescriptor(operatingSystemMXBean, \"getMaxFileDescriptorCount\"))\n+                .row(\"OPEN-FILE-DESCRIPTOR-COUNT\", \"\" + invokeFileDescriptor(operatingSystemMXBean, \"getOpenFileDescriptorCount\"));\n+    }\n+    private long invokeFileDescriptor(OperatingSystemMXBean os, String name) {\n+        try {\n+            final Method method = os.getClass().getDeclaredMethod(name);\n+            method.setAccessible(true);\n+            return (Long) method.invoke(os);\n+        } catch (Exception e) {\n+            return -1;\n+        }\n+    }\n     private String toCol(Collection<String> strings) {\n         final StringBuilder colSB = new StringBuilder();\n         if (strings.isEmpty()) {",
    "output": "add jvm command display file descriptor count"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/ArrayUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/ArrayUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/ArrayUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/ArrayUtilsTest.java\n@@ -0,0 +1,40 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * @author earayu\n+ */\n+public class ArrayUtilsTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testEmptyLongArray() {\n+        Assert.assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, new long[0]);\n+    }\n+\n+    @Test\n+    public void testToPrimitive() {\n+        Assert.assertArrayEquals(ArrayUtils.toPrimitive(null), null);\n+        Assert.assertArrayEquals(ArrayUtils.toPrimitive(new Long[0]), new long[0]);\n+        Assert.assertArrayEquals(\n+                ArrayUtils.toPrimitive(new Long[]{\n+                        1L,\n+                        1763L,\n+                        54769975464L\n+                }),\n+                new long[]{\n+                        1L,\n+                        1763L,\n+                        54769975464L\n+                });\n+        //throws NullPointerException if array content is null\n+        thrown.expect(NullPointerException.class);\n+        Assert.assertArrayEquals(ArrayUtils.toPrimitive(new Long[]{null}), new long[]{1L});\n+    }\n+}",
    "output": "add ArrayUtils test case"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java\n@@ -3,6 +3,7 @@\n import com.taobao.arthas.core.command.Constants;\n import com.taobao.arthas.core.shell.command.AnnotatedCommand;\n import com.taobao.arthas.core.shell.command.CommandProcess;\n+import com.taobao.arthas.core.util.StringUtils;\n import com.taobao.arthas.core.util.affect.RowAffect;\n import com.taobao.middleware.cli.annotations.Description;\n import com.taobao.middleware.cli.annotations.Name;\n@@ -12,15 +13,7 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.lang.management.ClassLoadingMXBean;\n-import java.lang.management.CompilationMXBean;\n-import java.lang.management.GarbageCollectorMXBean;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.MemoryMXBean;\n-import java.lang.management.MemoryManagerMXBean;\n-import java.lang.management.OperatingSystemMXBean;\n-import java.lang.management.RuntimeMXBean;\n-import java.lang.management.ThreadMXBean;\n+import java.lang.management.*;\n import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.util.Date;\n@@ -180,24 +173,27 @@ private Element drawMemoryManagersTable(TableElement table) {\n     }\n \n     private Element drawMemoryTable(TableElement table) {\n+        MemoryUsage heapMemoryUsage = memoryMXBean.getHeapMemoryUsage();\n         table.row(\"HEAP-MEMORY-USAGE\\n[committed/init/max/used]\",\n-                memoryMXBean.getHeapMemoryUsage().getCommitted()\n-                        + \"/\" + memoryMXBean.getHeapMemoryUsage().getInit()\n-                        + \"/\" + memoryMXBean.getHeapMemoryUsage().getMax()\n-                        + \"/\" + memoryMXBean.getHeapMemoryUsage().getUsed()\n+                formatMemoryByte(heapMemoryUsage.getCommitted())\n+                        + \"/\" + formatMemoryByte(heapMemoryUsage.getInit())\n+                        + \"/\" + formatMemoryByte(heapMemoryUsage.getMax())\n+                        + \"/\" + formatMemoryByte(heapMemoryUsage.getUsed())\n         );\n-\n+        MemoryUsage nonHeapMemoryUsage = memoryMXBean.getNonHeapMemoryUsage();\n         table.row(\"NO-HEAP-MEMORY-USAGE\\n[committed/init/max/used]\",\n-                memoryMXBean.getNonHeapMemoryUsage().getCommitted()\n-                        + \"/\" + memoryMXBean.getNonHeapMemoryUsage().getInit()\n-                        + \"/\" + memoryMXBean.getNonHeapMemoryUsage().getMax()\n-                        + \"/\" + memoryMXBean.getNonHeapMemoryUsage().getUsed()\n+                formatMemoryByte(nonHeapMemoryUsage.getCommitted())\n+                        + \"/\" + formatMemoryByte(nonHeapMemoryUsage.getInit())\n+                        + \"/\" + formatMemoryByte(nonHeapMemoryUsage.getMax())\n+                        + \"/\" + formatMemoryByte(nonHeapMemoryUsage.getUsed())\n         );\n \n         table.row(\"PENDING-FINALIZE-COUNT\", \"\" + memoryMXBean.getObjectPendingFinalizationCount());\n         return table;\n     }\n-\n+    private String formatMemoryByte(long bytes){\n+        return String.format(\"%s(%s)\",bytes, StringUtils.humanReadableByteCount(bytes));\n+    }\n \n     private Element drawOperatingSystemMXBeanTable(TableElement table) {\n         table.row(\"OS\", operatingSystemMXBean.getName()).row(\"ARCH\", operatingSystemMXBean.getArch())\n@@ -210,9 +206,17 @@ private Element drawOperatingSystemMXBeanTable(TableElement table) {\n     private Element drawThreadTable(TableElement table) {\n         table.row(\"COUNT\", \"\" + threadMXBean.getThreadCount())\n                 .row(\"DAEMON-COUNT\", \"\" + threadMXBean.getDaemonThreadCount())\n-                .row(\"LIVE-COUNT\", \"\" + threadMXBean.getPeakThreadCount())\n-                .row(\"STARTED-COUNT\", \"\" + threadMXBean.getTotalStartedThreadCount());\n+                .row(\"PEAK-COUNT\", \"\" + threadMXBean.getPeakThreadCount())\n+                .row(\"STARTED-COUNT\", \"\" + threadMXBean.getTotalStartedThreadCount())\n+                .row(\"DEADLOCK-COUNT\",\"\" + getDeadlockedThreadsCount(threadMXBean));\n         return table;\n     }\n-\n+    private int getDeadlockedThreadsCount(ThreadMXBean threads) {\n+        final long[] ids = threads.findDeadlockedThreads();\n+        if (ids == null) {\n+            return 0;\n+        } else {\n+            return ids.length;\n+        }\n+    }\n }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/StringUtils.java\n@@ -20,6 +20,8 @@ public abstract class StringUtils {\n     private static final String TOP_PATH = \"..\";\n     private static final String CURRENT_PATH = \".\";\n     private static final char EXTENSION_SEPARATOR = '.';\n+    public static final int UNIT = 1024;\n+    public static final String STRING_UNITS = \"KMGTPE\";\n \n \n     /**\n@@ -872,4 +874,16 @@ public static String classLoaderHash(Class<?> clazz) {\n         if (clazz == null || clazz.getClassLoader() == null) return \"null\";\n         return Integer.toHexString(clazz.getClassLoader().hashCode());\n     }\n+\n+    /**\n+     * format byte size to human readable format\n+     * @param bytes byets\n+     * @return  human readable format\n+     */\n+    public static String humanReadableByteCount(long bytes) {\n+        if (bytes < UNIT) return bytes + \" B\";\n+        int exp = (int) (Math.log(bytes) / Math.log(UNIT));\n+        String pre =  STRING_UNITS.charAt(exp-1) +  \"i\";\n+        return String.format(\"%.2f %sB\", bytes / Math.pow(UNIT, exp), pre);\n+    }\n }\n\ndiff --git a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n@@ -0,0 +1,21 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author bohrqiu 2018-09-21 01:01\n+ */\n+public class StringUtilsTest {\n+\n+    @Test\n+    public void testHumanReadableByteCount() {\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1023L), \"1023 B\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L), \"1.00 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L), \"1.00 MiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L - 100), \"1023.90 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024L), \"1.00 GiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024L), \"1.00 TiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024 * 1024), \"1.00 PiB\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "Improve readability for JVM command."
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/util/StringUtilsTest.java\n@@ -0,0 +1,21 @@\n+package com.taobao.arthas.core.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author bohrqiu 2018-09-21 01:01\n+ */\n+public class StringUtilsTest {\n+\n+    @Test\n+    public void testHumanReadableByteCount() {\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1023L), \"1023 B\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L), \"1.00 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L), \"1.00 MiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024L - 100), \"1023.90 KiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024L), \"1.00 GiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024L), \"1.00 TiB\");\n+        Assert.assertEquals(StringUtils.humanReadableByteCount(1024L * 1024 * 1024 * 1024 * 1024), \"1.00 PiB\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "add humanReadableByteCount test case"
  },
  {
    "input": "diff --git a/core/src/test/java/LocalDebugTest.java b/core/src/test/java/LocalDebugTest.java\n--- a/core/src/test/java/LocalDebugTest.java\n+++ b/core/src/test/java/LocalDebugTest.java\n@@ -0,0 +1,79 @@\n+import com.taobao.arthas.core.Arthas;\n+import sun.management.VMManagement;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * 本机调试\n+ * @author BlueT\n+ * 2018/9/17 23:34\n+ */\n+public class LocalDebugTest {\n+\n+    /**\n+     * 首先执行./mvnw clean package -DskipTests打包，生成的zip在 packaging/target/ 下面，然后解压。\n+     * 以debug方式执行此方法，\n+     *\n+     * @param args\n+     * @throws InterruptedException\n+     */\n+    public static void main(String[] args) throws InterruptedException {\n+        final int pid = getCurrentJVMPid();\n+        System.out.println(\"pid:\"+pid);\n+        String path = LocalDebugTest.class.getResource(\"/\").getPath();\n+        final String npath = path.substring(1, path.indexOf(\"core\")) + \"packaging/target/\";\n+        Thread thread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Arthas.main(new String[]{\n+                        \"-jar\",\n+                        npath + \"arthas-core.jar\",\n+                        \"-pid\",\n+                        pid + \"\",\n+                        \"-target-ip\",\n+                        \"127.0.0.1\",\n+                        //\"-telnet-port\",\n+                        //\"3658\",\n+                        //\"-http-port\",\n+                        //\"8563\",\n+                        \"-core\",\n+                        npath + \"arthas-core.jar\",\n+                        \"-agent\",\n+                        npath + \"arthas-agent.jar\"\n+                });\n+            }\n+        });\n+        thread.start();\n+        thread.join();\n+        System.out.println(\"代码植入成功\");\n+        Thread.sleep(10000000);\n+    }\n+\n+    private static int getCurrentJVMPid() {\n+        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+\n+        try {\n+            Field jvm = runtime.getClass().getDeclaredField(\"jvm\");\n+            jvm.setAccessible(true);\n+            VMManagement mgmt = (VMManagement) jvm.get(runtime);\n+            Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n+            pid_method.setAccessible(true);\n+            return (int) (Integer) pid_method.invoke(mgmt);\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        }\n+\n+        throw new RuntimeException(\"Wow!\");\n+\n+    }\n+}",
    "output": "Remove unused script. Fix #62"
  },
  {
    "input": "diff --git a/core/src/test/java/LocalDebugTest.java b/core/src/test/java/LocalDebugTest.java\n--- a/core/src/test/java/LocalDebugTest.java\n+++ b/core/src/test/java/LocalDebugTest.java\n@@ -0,0 +1,79 @@\n+import com.taobao.arthas.core.Arthas;\n+import sun.management.VMManagement;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * 本机调试\n+ * @author BlueT\n+ * 2018/9/17 23:34\n+ */\n+public class LocalDebugTest {\n+\n+    /**\n+     * 首先执行./mvnw clean package -DskipTests打包，生成的zip在 packaging/target/ 下面，然后解压。\n+     * 以debug方式执行此方法，\n+     *\n+     * @param args\n+     * @throws InterruptedException\n+     */\n+    public static void main(String[] args) throws InterruptedException {\n+        final int pid = getCurrentJVMPid();\n+        System.out.println(\"pid:\"+pid);\n+        String path = LocalDebugTest.class.getResource(\"/\").getPath();\n+        final String npath = path.substring(1, path.indexOf(\"core\")) + \"packaging/target/\";\n+        Thread thread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Arthas.main(new String[]{\n+                        \"-jar\",\n+                        npath + \"arthas-core.jar\",\n+                        \"-pid\",\n+                        pid + \"\",\n+                        \"-target-ip\",\n+                        \"127.0.0.1\",\n+                        //\"-telnet-port\",\n+                        //\"3658\",\n+                        //\"-http-port\",\n+                        //\"8563\",\n+                        \"-core\",\n+                        npath + \"arthas-core.jar\",\n+                        \"-agent\",\n+                        npath + \"arthas-agent.jar\"\n+                });\n+            }\n+        });\n+        thread.start();\n+        thread.join();\n+        System.out.println(\"代码植入成功\");\n+        Thread.sleep(10000000);\n+    }\n+\n+    private static int getCurrentJVMPid() {\n+        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+\n+        try {\n+            Field jvm = runtime.getClass().getDeclaredField(\"jvm\");\n+            jvm.setAccessible(true);\n+            VMManagement mgmt = (VMManagement) jvm.get(runtime);\n+            Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n+            pid_method.setAccessible(true);\n+            return (int) (Integer) pid_method.invoke(mgmt);\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        }\n+\n+        throw new RuntimeException(\"Wow!\");\n+\n+    }\n+}",
    "output": "add:local debug test"
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n@@ -240,7 +240,7 @@ public void testObjectTooLarge() {\n                 \"    c1=@NestedClass[\\n\" +\n                 \"        code=@Integer[1],\\n\" +\n                 \"        c1=...\\n\" +\n-                \"... Object size exceeds size limit:100\";\n+                \"... Object size exceeds size limit: 100, try to specify -M size_limit in your command, check the help command for more.\";\n         Assert.assertEquals(expected, objectView.draw());\n     }\n ",
    "output": "Fix unit test failure."
  },
  {
    "input": "diff --git a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n--- a/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n+++ b/core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java\n@@ -240,7 +240,7 @@ public void testObjectTooLarge() {\n                 \"    c1=@NestedClass[\\n\" +\n                 \"        code=@Integer[1],\\n\" +\n                 \"        c1=...\\n\" +\n-                \"... Object size exceeds size limit:100\";\n+                \"... Object size exceeds size limit: 100, try to specify -M size_limit in your command, check the help command for more.\";\n         Assert.assertEquals(expected, objectView.draw());\n     }\n ",
    "output": "fix:#42"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n--- a/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n+++ b/core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java\n@@ -140,7 +140,7 @@ protected void enhance(CommandProcess process) {\n                 process.write(\"No class or method is affected, try:\\n\"\n                               + \"1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\\n\"\n                               + \"2. reset CLASS_NAME and try again, your method body might be too large.\\n\"\n-                              + \"3. visit middleware-container/arthas/issues/278 for more detail\\n\");\n+                              + \"3. visit https://github.com/alibaba/arthas/issues/47 for more details.\\n\");\n                 process.end();\n                 return;\n             }",
    "output": "Fix broken links."
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -0,0 +1,110 @@\n+/*\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+*/\n+\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL =\n+            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: : \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n+        fos.close();\n+        rbc.close();\n+    }\n+\n+}",
    "output": "add maven wrapper. #39"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -3,13 +3,15 @@\n import com.sun.tools.attach.VirtualMachine;\n import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.core.config.Configure;\n+import com.taobao.arthas.core.util.AnsiLog;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.Option;\n import com.taobao.middleware.cli.TypedOption;\n \n import java.util.Arrays;\n+import java.util.Properties;\n \n /**\n  * Arthas启动器\n@@ -59,14 +61,26 @@ private void attachAgent(Configure configure) throws Exception {\n                 virtualMachineDescriptor = descriptor;\n             }\n         }\n-\n         VirtualMachine virtualMachine = null;\n         try {\n             if (null == virtualMachineDescriptor) { // 使用 attach(String pid) 这种方式\n                 virtualMachine = VirtualMachine.attach(\"\" + configure.getJavaPid());\n             } else {\n                 virtualMachine = VirtualMachine.attach(virtualMachineDescriptor);\n             }\n+\n+            Properties targetSystemProperties = virtualMachine.getSystemProperties();\n+            String targetJavaVersion = targetSystemProperties.getProperty(\"java.specification.version\");\n+            String currentJavaVersion = System.getProperty(\"java.specification.version\");\n+            if (targetJavaVersion != null && currentJavaVersion != null) {\n+                if (!targetJavaVersion.equals(currentJavaVersion)) {\n+                    AnsiLog.warn(\"Current VM java version: {} do not match target VM java version: {}, attach may fail.\",\n+                                    currentJavaVersion, targetJavaVersion);\n+                    AnsiLog.warn(\"Target VM JAVA_HOME is {}, try to set the same JAVA_HOME.\",\n+                                    targetSystemProperties.getProperty(\"java.home\"));\n+                }\n+            }\n+\n             virtualMachine.loadAgent(configure.getArthasAgent(),\n                             configure.getArthasCore() + \";\" + configure.toString());\n         } finally {\n@@ -81,7 +95,7 @@ public static void main(String[] args) {\n         try {\n             new Arthas(args);\n         } catch (Throwable t) {\n-            System.err.println(\"Start arthas failed, exception stack trace: \");\n+            AnsiLog.error(\"Start arthas failed, exception stack trace: \");\n             t.printStackTrace();\n             System.exit(-1);\n         }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/AnsiLog.java b/core/src/main/java/com/taobao/arthas/core/util/AnsiLog.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/AnsiLog.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/AnsiLog.java\n@@ -0,0 +1,77 @@\n+package com.taobao.arthas.core.util;\n+import java.util.regex.Matcher;\n+\n+/**\n+ *\n+ * @author hengyunabc 2017-05-03\n+ *\n+ */\n+public abstract class AnsiLog {\n+\n+    static boolean enable = System.console() != null;\n+\n+    /**\n+     *\n+     * @param msg\n+     */\n+    public static void red(String msg) {\n+        if (enable) {\n+            System.out.println(\"\u001b[31m\" + msg + \"\u001b[0m\");\n+        } else {\n+            System.err.println(msg);\n+        }\n+    }\n+\n+    public static void green(String msg) {\n+        if (enable) {\n+            System.out.println(\"\u001b[32m\" + msg + \"\u001b[0m\");\n+        } else {\n+            System.out.println(msg);\n+        }\n+    }\n+\n+    public static void yellow(String msg) {\n+        if (enable) {\n+            System.out.println(\"\u001b[33m\" + msg + \"\u001b[0m\");\n+        } else {\n+            System.out.println(msg);\n+        }\n+    }\n+\n+    public static void info(String msg) {\n+        green(msg);\n+    }\n+\n+    public static void info(String format, Object... arguments) {\n+        green(format(format, arguments));\n+    }\n+\n+    public static void warn(String msg) {\n+        yellow(msg);\n+    }\n+\n+    public static void warn(String format, Object... arguments) {\n+        yellow(format(format, arguments));\n+    }\n+\n+    public static void error(String msg) {\n+        red(msg);\n+    }\n+\n+    public static void error(String format, Object... arguments) {\n+        red(format(format, arguments));\n+    }\n+\n+    private static String format(String from, Object... arguments) {\n+        if (from != null) {\n+            String computed = from;\n+            if (arguments != null && arguments.length != 0) {\n+                for (Object argument : arguments) {\n+                    computed = computed.replaceFirst(\"\\\\{\\\\}\", Matcher.quoteReplacement(argument.toString()));\n+                }\n+            }\n+            return computed;\n+        }\n+        return null;\n+    }\n+}",
    "output": "check vm java version before attach. fixed #6"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -1,15 +1,15 @@\n package com.taobao.arthas.core;\n \n+import com.sun.tools.attach.VirtualMachine;\n+import com.sun.tools.attach.VirtualMachineDescriptor;\n import com.taobao.arthas.core.config.Configure;\n import com.taobao.middleware.cli.CLI;\n import com.taobao.middleware.cli.CLIs;\n import com.taobao.middleware.cli.CommandLine;\n import com.taobao.middleware.cli.Option;\n import com.taobao.middleware.cli.TypedOption;\n \n-import java.lang.reflect.Method;\n import java.util.Arrays;\n-import java.util.List;\n \n /**\n  * Arthas启动器\n@@ -52,30 +52,26 @@ private Configure parse(String[] args) {\n     }\n \n     private void attachAgent(Configure configure) throws Exception {\n-        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-        Class<?> vmdClass = loader.loadClass(\"com.sun.tools.attach.VirtualMachineDescriptor\");\n-        Class<?> vmClass = loader.loadClass(\"com.sun.tools.attach.VirtualMachine\");\n-\n-        Object attachVmdObj = null;\n-        for (Object obj : (List<?>) vmClass.getMethod(\"list\", (Class<?>[]) null).invoke(null, (Object[]) null)) {\n-            Object pid = vmdClass.getMethod(\"id\", (Class<?>[]) null).invoke(obj, (Object[]) null);\n+        VirtualMachineDescriptor virtualMachineDescriptor = null;\n+        for (VirtualMachineDescriptor descriptor : VirtualMachine.list()) {\n+            String pid = descriptor.id();\n             if (pid.equals(Integer.toString(configure.getJavaPid()))) {\n-                attachVmdObj = obj;\n+                virtualMachineDescriptor = descriptor;\n             }\n         }\n \n-        Object vmObj = null;\n+        VirtualMachine virtualMachine = null;\n         try {\n-            if (null == attachVmdObj) { // 使用 attach(String pid) 这种方式\n-                vmObj = vmClass.getMethod(\"attach\", String.class).invoke(null, \"\" + configure.getJavaPid());\n+            if (null == virtualMachineDescriptor) { // 使用 attach(String pid) 这种方式\n+                virtualMachine = VirtualMachine.attach(\"\" + configure.getJavaPid());\n             } else {\n-                vmObj = vmClass.getMethod(\"attach\", vmdClass).invoke(null, attachVmdObj);\n+                virtualMachine = VirtualMachine.attach(virtualMachineDescriptor);\n             }\n-            Method loadAgent = vmClass.getMethod(\"loadAgent\", String.class, String.class);\n-            loadAgent.invoke(vmObj, configure.getArthasAgent(), configure.getArthasCore() + \";\" + configure.toString());\n+            virtualMachine.loadAgent(configure.getArthasAgent(),\n+                            configure.getArthasCore() + \";\" + configure.toString());\n         } finally {\n-            if (null != vmObj) {\n-                vmClass.getMethod(\"detach\", (Class<?>[]) null).invoke(vmObj, (Object[]) null);\n+            if (null != virtualMachine) {\n+                virtualMachine.detach();\n             }\n         }\n     }\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -7,7 +7,6 @@\n import com.taobao.text.ui.TableElement;\n import com.taobao.text.util.RenderUtil;\n \n-import java.io.IOException;\n import java.io.InputStream;\n \n import static com.taobao.text.ui.Element.label;",
    "output": "remove reflect call to VirtualMachine. #23"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/Arthas.java b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n--- a/core/src/main/java/com/taobao/arthas/core/Arthas.java\n+++ b/core/src/main/java/com/taobao/arthas/core/Arthas.java\n@@ -43,7 +43,7 @@ private Configure parse(String[] args) {\n         if (commandLine.getOptionValue(\"target-ip\") == null) {\n             throw new IllegalStateException(\"as.sh is too old to support web console, \" +\n                     \"please run the following command to upgrade to latest version:\" +\n-                    \"\\ncurl -sLk http://arthas.io/arthas/install.sh | sh\");\n+                    \"\\ncurl -sLk https://alibaba.github.io/arthas/install.sh | sh\");\n         }\n         configure.setIp((String) commandLine.getOptionValue(\"target-ip\"));\n         configure.setTelnetPort((Integer) commandLine.getOptionValue(\"telnet-port\"));\n\ndiff --git a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java\n@@ -66,8 +66,9 @@ public static void destroy() {\n \n     static class RemoteJob implements Runnable {\n \n-        // private StringBuilder link      = new StringBuilder(\"http://arthas.io/api/\");\n-        private StringBuilder link = new StringBuilder(\"http://arthas.io/api/\");\n+//        private StringBuilder link = new StringBuilder(\"http://arthas.io/api/\");\n+        // disable stat\n+        private StringBuilder link = null;\n \n         private String resource;\n \n@@ -89,6 +90,9 @@ public void appendQueryData(String key, String value) {\n \n         @Override\n         public void run() {\n+            if (link == null) {\n+                return;\n+            }\n             try {\n                 link.append(resource);\n                 if (queryData.length() != 0) {",
    "output": "disable user stat. #21"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -84,7 +84,7 @@ public class GlobalOptions {\n             name = \"save-result\",\n             summary = \"Option to print command's result to log file\",\n             description = \"This option enables to save each command's result to log file, \" +\n-                    \"which path is ${user.home}/logs/arthas/result.log.\"\n+                    \"which path is ${user.home}/logs/arthas-cache/result.log.\"\n     )\n     public static volatile boolean isSaveResult = false;\n ",
    "output": "Merge pull request #18 from nzomkxia/master\n\nFix path in description"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n--- a/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n+++ b/core/src/main/java/com/taobao/arthas/core/GlobalOptions.java\n@@ -84,7 +84,7 @@ public class GlobalOptions {\n             name = \"save-result\",\n             summary = \"Option to print command's result to log file\",\n             description = \"This option enables to save each command's result to log file, \" +\n-                    \"which path is ${user.home}/logs/arthas/result.log.\"\n+                    \"which path is ${user.home}/logs/arthas-cache/result.log.\"\n     )\n     public static volatile boolean isSaveResult = false;\n ",
    "output": "fix path in description"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -19,7 +19,7 @@ public class ArthasBanner {\n     private static final String LOGO_LOCATION = \"/com/taobao/arthas/core/res/logo.txt\";\n     private static final String CREDIT_LOCATION = \"/com/taobao/arthas/core/res/thanks.txt\";\n     private static final String VERSION_LOCATION = \"/com/taobao/arthas/core/res/version\";\n-    private static final String WIKI = \"middleware-container/arthas/wikis/home\";\n+    private static final String WIKI = \"https://alibaba.github.io/arthas\";\n \n     private static String LOGO = \"Welcome to Arthas\";\n     private static String VERSION = \"unknown\";",
    "output": "update wiki link"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -33,7 +33,7 @@ public class ArthasBanner {\n             THANKS = IOUtils.toString(ShellServerOptions.class.getResourceAsStream(CREDIT_LOCATION));\n             InputStream versionInputStream = ShellServerOptions.class.getResourceAsStream(VERSION_LOCATION);\n             if (versionInputStream != null) {\n-                VERSION = IOUtils.toString(versionInputStream);\n+                VERSION = IOUtils.toString(versionInputStream).trim();\n             } else {\n                 String implementationVersion = ArthasBanner.class.getPackage().getImplementationVersion();\n                 if (implementationVersion != null) {",
    "output": "improve welcome msg"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n--- a/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n+++ b/core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java\n@@ -117,7 +117,7 @@ public ShellImpl init() {\n         term.closeHandler(new CloseHandler(this));\n \n         if (welcome != null && welcome.length() > 0) {\n-            term.write(welcome);\n+            term.write(welcome + \"\\n\");\n             term.write(\"pid: \" + session.get(Session.PID) + \"\\n\");\n             term.write(\"timestamp: \" + System.currentTimeMillis() + \"\\n\\n\");\n         }",
    "output": "improve welcome msg"
  },
  {
    "input": "diff --git a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n--- a/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n+++ b/core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java\n@@ -8,6 +8,7 @@\n import com.taobao.text.util.RenderUtil;\n \n import java.io.IOException;\n+import java.io.InputStream;\n \n import static com.taobao.text.ui.Element.label;\n \n@@ -30,7 +31,15 @@ public class ArthasBanner {\n         try {\n             String logoText = IOUtils.toString(ShellServerOptions.class.getResourceAsStream(LOGO_LOCATION));\n             THANKS = IOUtils.toString(ShellServerOptions.class.getResourceAsStream(CREDIT_LOCATION));\n-            VERSION = IOUtils.toString(ShellServerOptions.class.getResourceAsStream(VERSION_LOCATION));\n+            InputStream versionInputStream = ShellServerOptions.class.getResourceAsStream(VERSION_LOCATION);\n+            if (versionInputStream != null) {\n+                VERSION = IOUtils.toString(versionInputStream);\n+            } else {\n+                String implementationVersion = ArthasBanner.class.getPackage().getImplementationVersion();\n+                if (implementationVersion != null) {\n+                    VERSION = implementationVersion;\n+                }\n+            }\n \n             StringBuilder sb = new StringBuilder();\n             String[] LOGOS = new String[6];\n@@ -53,8 +62,8 @@ public class ArthasBanner {\n                     label(LOGOS[4]).style(Decoration.bold.fg(Color.green)),\n                     label(LOGOS[5]).style(Decoration.bold.fg(Color.blue)));\n             LOGO = RenderUtil.render(logoTable);\n-        } catch (IOException ioe) {\n-            ioe.printStackTrace();\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n         }\n     }\n ",
    "output": "support Implementation-Version"
  },
  {
    "input": "diff --git a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n--- a/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n+++ b/agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java\n@@ -35,7 +35,7 @@ public class AgentBootstrap {\n     static {\n         try {\n             File log = new File(System.getProperty(\"user.home\") + File.separator + \"logs\" + File.separator\n-                    + \"arthas\" + File.separator + \"arthas.log\");\n+                    + \".arthas\" + File.separator + \"arthas.log\");\n             if (!log.exists()) {\n                 log.getParentFile().mkdir();\n                 log.createNewFile();",
    "output": "fix log path error"
  }
]