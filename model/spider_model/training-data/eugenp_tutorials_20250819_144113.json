[
  {
    "input": "diff --git a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/ArrayExample.java b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/ArrayExample.java\n--- a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/ArrayExample.java\n+++ b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/ArrayExample.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.java;\n+package com.baeldung.interoperability;\n \n import java.io.File;\n import java.io.FileReader;\n\ndiff --git a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/Customer.java b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/Customer.java\n--- a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/Customer.java\n+++ b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/interoperability/Customer.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.java;\n+package com.baeldung.interoperability;\n \n public class Customer {\n \n\ndiff --git a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/introduction/StringUtils.java b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/introduction/StringUtils.java\n--- a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/introduction/StringUtils.java\n+++ b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/introduction/StringUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.java;\n+package com.baeldung.introduction;\n \n public class StringUtils {\n     public static String toUpperCase(String name) {\n\ndiff --git a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/mavenjavakotlin/Application.java b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/mavenjavakotlin/Application.java\n--- a/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/mavenjavakotlin/Application.java\n+++ b/core-kotlin-modules/core-kotlin/src/main/java/com/baeldung/mavenjavakotlin/Application.java\n@@ -1,7 +1,6 @@\n package com.baeldung.mavenjavakotlin;\n \n import com.baeldung.mavenjavakotlin.services.JavaService;\n-import com.baeldung.mavenjavakotlin.services.KotlinService;\n \n public class Application {\n \n\ndiff --git a/core-kotlin-modules/core-kotlin/src/test/java/com/baeldung/introduction/JavaCallToKotlinUnitTest.java b/core-kotlin-modules/core-kotlin/src/test/java/com/baeldung/introduction/JavaCallToKotlinUnitTest.java\n--- a/core-kotlin-modules/core-kotlin/src/test/java/com/baeldung/introduction/JavaCallToKotlinUnitTest.java\n+++ b/core-kotlin-modules/core-kotlin/src/test/java/com/baeldung/introduction/JavaCallToKotlinUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.kotlin;\n+package com.baeldung.introduction;\n \n import org.junit.Test;\n ",
    "output": "[BAEL-19886] - moved related articles to the new core-kotlin-modules/core-kotlin module"
  },
  {
    "input": "diff --git a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n--- a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n+++ b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n@@ -24,15 +24,15 @@ public static void oneTimeSetup() {\n     @Test\n     public void testSuite() {\n         //run the test only when liberty server is started\n-        this.whenConsumeWithJsonb_thenGetPerson();\n+        //this.whenConsumeWithJsonb_thenGetPerson();\n     }\n \n     public void whenConsumeWithJsonb_thenGetPerson() {\n         String url = BASE_URL + API_PERSON + \"/1\";\n         String result = RestConsumer.consumeWithJsonb(url);        \n \n         Person person = JsonbBuilder.create().fromJson(result, Person.class);\n-        assert person.getId() == 1;\n+        assertEquals(person.getId(), 1);\n         assertEquals(person.getUsername(), \"normanlewis\");\n         assertEquals(person.getEmail(), \"normanlewis@email.com\");\n     }",
    "output": "review correction"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n--- a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n+++ b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n@@ -17,7 +17,6 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class JndiExceptionsUnitTest {\n \n-    @Disabled\n     @Test\n     @Order(1)\n     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {",
    "output": "BAEL-20598 Merge master"
  },
  {
    "input": "diff --git a/slack/src/main/java/com/baeldung/examples/slack/DiskSpaceErrorChecker.java b/slack/src/main/java/com/baeldung/examples/slack/DiskSpaceErrorChecker.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/DiskSpaceErrorChecker.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/DiskSpaceErrorChecker.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.examples.slack;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DiskSpaceErrorChecker implements ErrorChecker {\n+    private static final Logger LOG = LoggerFactory.getLogger(DiskSpaceErrorChecker.class);\n+\n+    private final ErrorReporter errorReporter;\n+\n+    private final double limit;\n+\n+    public DiskSpaceErrorChecker(ErrorReporter errorReporter, double limit) {\n+        this.errorReporter = errorReporter;\n+        this.limit = limit;\n+    }\n+\n+    @Override\n+    public void check() {\n+        LOG.info(\"Checking disk space\");\n+        FileSystems.getDefault().getFileStores().forEach(fileStore -> {\n+            try {\n+                long totalSpace = fileStore.getTotalSpace();\n+                long usableSpace = fileStore.getUsableSpace();\n+                double usablePercentage = ((double) usableSpace) / totalSpace;\n+                LOG.debug(\"File store {} has {} of {} ({}) usable space\",\n+                    fileStore, usableSpace, totalSpace, usablePercentage);\n+\n+                if (totalSpace > 0 && usablePercentage < limit) {\n+                    String error = String.format(\"File store %s only has %d%% usable disk space\",\n+                        fileStore.name(), (int)(usablePercentage * 100));\n+                    errorReporter.reportProblem(error);\n+                }\n+            } catch (IOException e) {\n+                LOG.error(\"Error getting disk space for file store {}\", fileStore, e);\n+            }\n+        });\n+    }\n+}\n\ndiff --git a/slack/src/main/java/com/baeldung/examples/slack/ErrorChecker.java b/slack/src/main/java/com/baeldung/examples/slack/ErrorChecker.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/ErrorChecker.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/ErrorChecker.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.examples.slack;\n+\n+public interface ErrorChecker {\n+    void check();\n+}\n\ndiff --git a/slack/src/main/java/com/baeldung/examples/slack/ErrorReporter.java b/slack/src/main/java/com/baeldung/examples/slack/ErrorReporter.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/ErrorReporter.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/ErrorReporter.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.examples.slack;\n+\n+public interface ErrorReporter {\n+    void reportProblem(String problem);\n+}\n\ndiff --git a/slack/src/main/java/com/baeldung/examples/slack/MainClass.java b/slack/src/main/java/com/baeldung/examples/slack/MainClass.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/MainClass.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/MainClass.java\n@@ -0,0 +1,41 @@\n+package com.baeldung.examples.slack;\n+\n+import java.io.IOException;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.hubspot.slack.client.SlackClient;\n+import com.hubspot.slack.client.SlackClientFactory;\n+import com.hubspot.slack.client.SlackClientRuntimeConfig;\n+\n+public class MainClass {\n+    public static final long MINUTES = 1000 * 60;\n+\n+    public static void main(String[] args) throws IOException {\n+        SlackClientRuntimeConfig runtimeConfig = SlackClientRuntimeConfig.builder()\n+            .setTokenSupplier(() -> \"<Your API Token>\")\n+            .build();\n+\n+        SlackClient slackClient = SlackClientFactory.defaultFactory().build(runtimeConfig);\n+\n+        ErrorReporter slackChannelErrorReporter = new SlackChannelErrorReporter(slackClient, \"general\");\n+        ErrorReporter slackUserErrorReporter = new SlackUserErrorReporter(slackClient, \"testuser@baeldung.com\");\n+\n+        ErrorChecker diskSpaceErrorChecker10pct = new DiskSpaceErrorChecker(slackChannelErrorReporter, 0.1);\n+        ErrorChecker diskSpaceErrorChecker2pct = new DiskSpaceErrorChecker(slackUserErrorReporter, 0.02);\n+\n+        Timer timer = new Timer();\n+        timer.scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+                diskSpaceErrorChecker10pct.check();\n+            }\n+        }, 0, 5 * MINUTES);\n+        timer.scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+                diskSpaceErrorChecker2pct.check();\n+            }\n+        }, 0, 5 * MINUTES);\n+    }\n+}\n\ndiff --git a/slack/src/main/java/com/baeldung/examples/slack/SlackChannelErrorReporter.java b/slack/src/main/java/com/baeldung/examples/slack/SlackChannelErrorReporter.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/SlackChannelErrorReporter.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/SlackChannelErrorReporter.java\n@@ -0,0 +1,30 @@\n+package com.baeldung.examples.slack;\n+\n+import com.hubspot.slack.client.SlackClient;\n+import com.hubspot.slack.client.methods.params.chat.ChatPostMessageParams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SlackChannelErrorReporter implements ErrorReporter {\n+    private static final Logger LOG = LoggerFactory.getLogger(SlackChannelErrorReporter.class);\n+\n+    private final SlackClient slackClient;\n+\n+    private final String channel;\n+\n+    public SlackChannelErrorReporter(SlackClient slackClient, String channel) {\n+        this.slackClient = slackClient;\n+        this.channel = channel;\n+    }\n+\n+    @Override\n+    public void reportProblem(String problem) {\n+        LOG.debug(\"Sending message to channel {}: {}\", channel, problem);\n+        slackClient.postMessage(\n+            ChatPostMessageParams.builder()\n+                .setText(problem)\n+                .setChannelId(channel)\n+                .build()\n+        ).join().unwrapOrElseThrow();\n+    }\n+}\n\ndiff --git a/slack/src/main/java/com/baeldung/examples/slack/SlackUserErrorReporter.java b/slack/src/main/java/com/baeldung/examples/slack/SlackUserErrorReporter.java\n--- a/slack/src/main/java/com/baeldung/examples/slack/SlackUserErrorReporter.java\n+++ b/slack/src/main/java/com/baeldung/examples/slack/SlackUserErrorReporter.java\n@@ -0,0 +1,52 @@\n+package com.baeldung.examples.slack;\n+\n+import java.util.List;\n+\n+import com.hubspot.slack.client.SlackClient;\n+import com.hubspot.slack.client.methods.params.chat.ChatPostMessageParams;\n+import com.hubspot.slack.client.methods.params.conversations.ConversationCreateParams;\n+import com.hubspot.slack.client.methods.params.im.ImOpenParams;\n+import com.hubspot.slack.client.methods.params.users.UserEmailParams;\n+import com.hubspot.slack.client.methods.params.users.UsersInfoParams;\n+import com.hubspot.slack.client.models.response.im.ImOpenResponse;\n+import com.hubspot.slack.client.models.response.users.UsersInfoResponse;\n+import com.hubspot.slack.client.models.users.SlackUser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SlackUserErrorReporter implements ErrorReporter {\n+    private static final Logger LOG = LoggerFactory.getLogger(SlackUserErrorReporter.class);\n+\n+    private final SlackClient slackClient;\n+\n+    private final String user;\n+\n+    public SlackUserErrorReporter(SlackClient slackClient, String user) {\n+        this.slackClient = slackClient;\n+        this.user = user;\n+    }\n+\n+    @Override\n+    public void reportProblem(String problem) {\n+        LOG.debug(\"Sending message to user {}: {}\", user, problem);\n+        UsersInfoResponse usersInfoResponse = slackClient\n+            .lookupUserByEmail(UserEmailParams.builder()\n+                .setEmail(user)\n+                .build()\n+            ).join().unwrapOrElseThrow();\n+\n+        ImOpenResponse imOpenResponse = slackClient.openIm(ImOpenParams.builder()\n+            .setUserId(usersInfoResponse.getUser().getId())\n+            .build()\n+        ).join().unwrapOrElseThrow();\n+\n+        imOpenResponse.getChannel().ifPresent(channel -> {\n+            slackClient.postMessage(\n+                ChatPostMessageParams.builder()\n+                    .setText(problem)\n+                    .setChannelId(channel.getId())\n+                    .build()\n+            ).join().unwrapOrElseThrow();\n+        });\n+    }\n+}",
    "output": "Slack Plugin Example (#8542)"
  },
  {
    "input": "diff --git a/testing-modules/mockito/src/test/java/com/baeldung/mockito/voidmethods/MockitoVoidMethodsUnitTest.java b/testing-modules/mockito/src/test/java/com/baeldung/mockito/voidmethods/MockitoVoidMethodsUnitTest.java\n--- a/testing-modules/mockito/src/test/java/com/baeldung/mockito/voidmethods/MockitoVoidMethodsUnitTest.java\n+++ b/testing-modules/mockito/src/test/java/com/baeldung/mockito/voidmethods/MockitoVoidMethodsUnitTest.java\n@@ -16,48 +16,51 @@ public class MockitoVoidMethodsUnitTest {\n \n     @Test\n     public void whenAddCalledVerified() {\n-        MyList mockVoid = mock(MyList.class);\n-        mockVoid.add(0, \"\");\n-        verify(mockVoid, times(1)).add(0, \"\");\n+        MyList myList = mock(MyList.class);\n+        myList.add(0, \"\");\n+\n+        verify(myList, times(1)).add(0, \"\");\n     }\n \n     @Test(expected = Exception.class)\n     public void givenNull_addThrows() {\n-        MyList mockVoid = mock(MyList.class);\n-        doThrow().when(mockVoid).add(isA(Integer.class), isNull());\n-        mockVoid.add(0, null);\n+        MyList myList = mock(MyList.class);\n+        doThrow().when(myList).add(isA(Integer.class), isNull());\n+\n+        myList.add(0, null);\n     }\n \n     @Test\n     public void whenAddCalledValueCaptured() {\n-        MyList mockVoid = mock(MyList.class);\n+        MyList myList = mock(MyList.class);\n         ArgumentCaptor<String> valueCapture = ArgumentCaptor.forClass(String.class);\n-        doNothing().when(mockVoid).add(any(Integer.class), valueCapture.capture());\n-        mockVoid.add(0, \"captured\");\n+        doNothing().when(myList).add(any(Integer.class), valueCapture.capture());\n+        myList.add(0, \"captured\");\n+\n         assertEquals(\"captured\", valueCapture.getValue());\n     }\n \n     @Test\n     public void whenAddCalledAnswered() {\n-        MyList mockVoid = mock(MyList.class);\n-        doAnswer((Answer<Void>) invocation -> {\n+        MyList myList = mock(MyList.class);\n+        doAnswer(invocation -> {\n             Object arg0 = invocation.getArgument(0);\n             Object arg1 = invocation.getArgument(1);\n \n             //do something with the arguments here\n             assertEquals(3, arg0);\n             assertEquals(\"answer me\", arg1);\n-\n             return null;\n-        }).when(mockVoid).add(any(Integer.class), any(String.class));\n-        mockVoid.add(3, \"answer me\");\n+        }).when(myList).add(any(Integer.class), any(String.class));\n+        myList.add(3, \"answer me\");\n     }\n \n     @Test\n     public void whenAddCalledRealMethodCalled() {\n-        MyList mockVoid = mock(MyList.class);\n-        doCallRealMethod().when(mockVoid).add(any(Integer.class), any(String.class));\n-        mockVoid.add(1, \"real\");\n-        verify(mockVoid, times(1)).add(1, \"real\");\n+        MyList myList = mock(MyList.class);\n+        doCallRealMethod().when(myList).add(any(Integer.class), any(String.class));\n+        myList.add(1, \"real\");\n+        \n+        verify(myList, times(1)).add(1, \"real\");\n     }\n }",
    "output": "BAEL-3694: Refactor Mockito unit tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-datetime-java8-2/src/main/java/com/baeldung/localdate/LocalDateExample.java b/core-java-modules/core-java-datetime-java8-2/src/main/java/com/baeldung/localdate/LocalDateExample.java\n--- a/core-java-modules/core-java-datetime-java8-2/src/main/java/com/baeldung/localdate/LocalDateExample.java\n+++ b/core-java-modules/core-java-datetime-java8-2/src/main/java/com/baeldung/localdate/LocalDateExample.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.localdate;\n+\n+import java.time.LocalDate;\n+import java.time.Month;\n+import java.time.format.DateTimeFormatter;\n+\n+public class LocalDateExample {\n+    public LocalDate getCustomDateOne(int year, int month, int dayOfMonth) {\n+        return LocalDate.of(year, month, dayOfMonth);\n+    }\n+\n+    public LocalDate getCustomDateTwo(int year, Month month, int dayOfMonth) {\n+        return LocalDate.of(year, month, dayOfMonth);\n+    }\n+\n+    public LocalDate getDateFromEpochDay(long epochDay) {\n+        return LocalDate.ofEpochDay(epochDay);\n+    }\n+\n+    public LocalDate getDateFromYearAndDayOfYear(int year, int dayOfYear) {\n+        return LocalDate.ofYearDay(year, dayOfYear);\n+    }\n+\n+    public LocalDate getDateFromString(String date) {\n+        return LocalDate.parse(date);\n+    }\n+\n+    public LocalDate getDateFromStringAndFormatter(String date, String pattern) {\n+        return LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-datetime-java8-2/src/test/java/com/baeldung/localdate/LocalDateExampleUnitTest.java b/core-java-modules/core-java-datetime-java8-2/src/test/java/com/baeldung/localdate/LocalDateExampleUnitTest.java\n--- a/core-java-modules/core-java-datetime-java8-2/src/test/java/com/baeldung/localdate/LocalDateExampleUnitTest.java\n+++ b/core-java-modules/core-java-datetime-java8-2/src/test/java/com/baeldung/localdate/LocalDateExampleUnitTest.java\n@@ -1,54 +1,39 @@\n-package com.baeldung.datebasics;\n+package com.baeldung.localdate;\n \n import static org.junit.Assert.assertEquals;\n \n import java.time.Month;\n \n import org.junit.Test;\n \n-public class CreateDateUnitTest {\n-    private CreateDate date = new CreateDate();\n-    \n-    @Test\n-    public void whenUsingNowMethod_thenLocalDate() {\n-        assertEquals(\"2020-01-08\", date.getTodaysDate());\n-    }\n-    \n-    @Test\n-    public void whenUsingClock_thenLocalDate() {\n-        assertEquals(\"2020-01-08\", date.getTodaysDateFromClock());\n-    }\n-    \n-    @Test\n-    public void givenValues_whenUsingZone_thenLocalDate() {\n-        assertEquals(\"2020-01-08\", date.getTodaysDateFromZone(\"Asia/Kolkata\"));\n-    }\n-    \n+public class LocalDateExampleUnitTest {\n+    private LocalDateExample date = new LocalDateExample();\n+\n     @Test\n     public void givenValues_whenUsingOfMethod_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getCustomDateOne(2020, 1, 8));\n     }\n-    \n+\n     @Test\n     public void givenValuesWithMonthEnum_whenUsingOfMethod_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getCustomDateTwo(2020, Month.JANUARY, 8));\n     }\n-    \n+\n     @Test\n     public void givenValues_whenUsingEpochDay_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getDateFromEpochDay(18269));\n     }\n-    \n+\n     @Test\n     public void givenValues_whenUsingYearDay_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getDateFromYearAndDayOfYear(2020, 8));\n     }\n-    \n+\n     @Test\n     public void givenValues_whenUsingParse_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getDateFromString(\"2020-01-08\"));\n     }\n-    \n+\n     @Test\n     public void givenValuesWithFormatter_whenUsingParse_thenLocalDate() {\n         assertEquals(\"2020-01-08\", date.getDateFromStringAndFormatter(\"8-Jan-2020\", \"d-MMM-yyyy\"));\n\ndiff --git a/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java b/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n--- a/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n+++ b/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n@@ -1,45 +0,0 @@\n-package com.baeldung.datebasics;\n-\n-import java.time.Clock;\n-import java.time.LocalDate;\n-import java.time.Month;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-\n-public class CreateDate {\n-\tpublic LocalDate getTodaysDate() {\n-\t\treturn LocalDate.now();\n-\t}\n-\n-\tpublic LocalDate getTodaysDateFromClock() {\n-\t\treturn LocalDate.now(Clock.systemDefaultZone());\n-\t}\n-\n-\tpublic LocalDate getTodaysDateFromZone(String zone) {\n-\t\treturn LocalDate.now(ZoneId.of(zone));\n-\t}\n-\n-\tpublic LocalDate getCustomDateOne(int year, int month, int dayOfMonth) {\n-\t\treturn LocalDate.of(year, month, dayOfMonth);\n-\t}\n-\n-\tpublic LocalDate getCustomDateTwo(int year, Month month, int dayOfMonth) {\n-\t\treturn LocalDate.of(year, month, dayOfMonth);\n-\t}\n-\n-\tpublic LocalDate getDateFromEpochDay(long epochDay) {\n-\t\treturn LocalDate.ofEpochDay(epochDay);\n-\t}\n-\n-\tpublic LocalDate getDateFromYearAndDayOfYear(int year, int dayOfYear) {\n-\t\treturn LocalDate.ofYearDay(year, dayOfYear);\n-\t}\n-\n-\tpublic LocalDate getDateFromString(String date) {\n-\t\treturn LocalDate.parse(date);\n-\t}\n-\n-\tpublic LocalDate getDateFromStringAndFormatter(String date, String pattern) {\n-\t\treturn LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n-\t}\n-}",
    "output": "Added a new module & code for creating LocalDate (#8558)"
  },
  {
    "input": "diff --git a/spring-boot-modules/spring-boot-rest/src/test/java/com/baeldung/springhateoas/CustomerControllerIntegrationTest.java b/spring-boot-modules/spring-boot-rest/src/test/java/com/baeldung/springhateoas/CustomerControllerIntegrationTest.java\n--- a/spring-boot-modules/spring-boot-rest/src/test/java/com/baeldung/springhateoas/CustomerControllerIntegrationTest.java\n+++ b/spring-boot-modules/spring-boot-rest/src/test/java/com/baeldung/springhateoas/CustomerControllerIntegrationTest.java\n@@ -70,7 +70,7 @@ public void givenExistingCustomerWithOrders_whenOrdersRequested_thenHalResourceR\n \n         this.mvc.perform(get(\"/customers/\" + DEFAULT_CUSTOMER_ID + \"/orders\").accept(MediaTypes.HAL_JSON_VALUE))\n             .andExpect(status().isOk())\n-            .andExpect(jsonPath(\"$._embedded.orderList[0]._links.self.href\",\n+            .andExpect(jsonPath(\"$._embedded.orders[0]._links.self.href\",\n                 is(\"http://localhost/customers/customer1/order1\")))\n             .andExpect(jsonPath(\"$._links.self.href\", is(\"http://localhost/customers/customer1/orders\")));\n     }\n@@ -89,8 +89,8 @@ public void givenExistingCustomer_whenAllCustomersRequested_thenHalResourceRetri\n         this.mvc.perform(get(\"/customers/\").accept(MediaTypes.HAL_JSON_VALUE))\n             .andExpect(status().isOk())\n             .andExpect(\n-                jsonPath(\"$._embedded.customerList[0]._links.self.href\", is(\"http://localhost/customers/customer1\")))\n-            .andExpect(jsonPath(\"$._embedded.customerList[0]._links.allOrders.href\",\n+                jsonPath(\"$._embedded.customers[0]._links.self.href\", is(\"http://localhost/customers/customer1\")))\n+            .andExpect(jsonPath(\"$._embedded.customers[0]._links.allOrders.href\",\n                 is(\"http://localhost/customers/customer1/orders\")))\n             .andExpect(jsonPath(\"$._links.self.href\", is(\"http://localhost/customers\")));\n     }",
    "output": "BAEL-20884 Fix Spring Hateos integration test"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n@@ -5,9 +5,9 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n \n-public interface ProductRepository extends PagingAndSortingRepository<ProductMultipleDB, Integer> {\n+public interface ProductRepository extends PagingAndSortingRepository<Product, Integer> {\n \n-    List<ProductMultipleDB> findAllByPrice(double price, Pageable pageable);\n+    List<Product> findAllByPrice(double price, Pageable pageable);\n }\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/model/product/Product.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/model/product/Product.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/model/product/Product.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/model/product/Product.java\n@@ -6,7 +6,7 @@\n \n @Entity\n @Table(schema = \"products\")\n-public class ProductMultipleDB {\n+public class Product {\n \n     @Id\n     private int id;\n@@ -15,19 +15,19 @@ public class ProductMultipleDB {\n \n     private double price;\n \n-    public ProductMultipleDB() {\n+    public Product() {\n         super();\n     }\n \n-    private ProductMultipleDB(int id, String name, double price) {\n+    private Product(int id, String name, double price) {\n         super();\n         this.id = id;\n         this.name = name;\n         this.price = price;\n     }\n \n-    public static ProductMultipleDB from(int id, String name, double price) {\n-        return new ProductMultipleDB(id, name, price);\n+    public static Product from(int id, String name, double price) {\n+        return new Product(id, name, price);\n     }\n \n     public int getId() {\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n@@ -23,7 +23,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n import com.baeldung.multipledb.dao.product.ProductRepository;\n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes=MultipleDbApplication.class)\n@@ -36,22 +36,22 @@ public class ProductRepositoryIntegrationTest {\n     @Before\n     @Transactional(\"productTransactionManager\")\n     public void setUp() {\n-        productRepository.save(ProductMultipleDB.from(1001, \"Book\", 21));\n-        productRepository.save(ProductMultipleDB.from(1002, \"Coffee\", 10));\n-        productRepository.save(ProductMultipleDB.from(1003, \"Jeans\", 30));\n-        productRepository.save(ProductMultipleDB.from(1004, \"Shirt\", 32));\n-        productRepository.save(ProductMultipleDB.from(1005, \"Bacon\", 10));\n+        productRepository.save(Product.from(1001, \"Book\", 21));\n+        productRepository.save(Product.from(1002, \"Coffee\", 10));\n+        productRepository.save(Product.from(1003, \"Jeans\", 30));\n+        productRepository.save(Product.from(1004, \"Shirt\", 32));\n+        productRepository.save(Product.from(1005, \"Bacon\", 10));\n     }\n \n     @Test\n     public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n         Pageable pageRequest = PageRequest.of(0, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1001, 1002)\n                 .contains(id)));\n     }\n@@ -60,11 +60,11 @@ public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n     public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n         Pageable pageRequest = PageRequest.of(1, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1003, 1004)\n                 .contains(id)));\n     }\n@@ -73,11 +73,11 @@ public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n     public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n         Pageable pageRequest = PageRequest.of(2, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(1));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1005)\n                 .contains(id)));\n     }\n@@ -86,12 +86,12 @@ public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n     public void whenSortingByNameAscAndPaging_ThenReturnSortedPagedResult() {\n         Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"name\"));\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(3));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1005, 1001, 1002)));\n \n     }\n@@ -101,12 +101,12 @@ public void whenSortingByPriceDescAndPaging_ThenReturnSortedPagedResult() {\n         Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"price\")\n             .descending());\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(3));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001)));\n \n     }\n@@ -117,12 +117,12 @@ public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResul\n             .descending()\n             .and(Sort.by(\"name\")));\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(5));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001, 1005, 1002)));\n \n     }\n@@ -131,11 +131,11 @@ public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResul\n     public void whenRequestingFirstPageOfSizeTwoUsingCustomMethod_ThenReturnFirstPage() {\n         Pageable pageRequest = PageRequest.of(0, 2);\n \n-        List<ProductMultipleDB> result = productRepository.findAllByPrice(10, pageRequest);\n+        List<Product> result = productRepository.findAllByPrice(10, pageRequest);\n \n         assertThat(result, hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1002, 1005)\n                 .contains(id)));\n     }",
    "output": "BAEL-3683: Rename ProductMultipleDB entity to Product (#8557)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-optional/src/main/java/com/baeldung/optional/Person.java b/core-java-modules/core-java-optional/src/main/java/com/baeldung/optional/Person.java\n--- a/core-java-modules/core-java-optional/src/main/java/com/baeldung/optional/Person.java\n+++ b/core-java-modules/core-java-optional/src/main/java/com/baeldung/optional/Person.java\n@@ -1,6 +1,8 @@\n package com.baeldung.optional;\n \n+import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n \n public class Person {\n     private String name;\n@@ -21,7 +23,7 @@ public void setName(String name) {\n     }\n \n     public Optional<Integer> getAge() {\n-        return Optional.ofNullable(age);\n+        return Optional.of(age);\n     }\n \n     public void setAge(int age) {\n@@ -36,4 +38,37 @@ public Optional<String> getPassword() {\n         return Optional.ofNullable(password);\n     }\n \n+    public static List<Person> search(List<Person> people, String name, Optional<Integer> age) {\n+        // Null checks for people and name\n+        return people.stream()\n+                .filter(p -> p.getName().equals(name))\n+                .filter(p -> p.getAge().get() >= age.orElse(0))\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static List<Person> search(List<Person> people, String name, Integer age) {\n+        // Null checks for people and name\n+        final Integer ageFilter = age != null ? age : 0;\n+\n+        return people.stream()\n+                .filter(p -> p.getName().equals(name))\n+                .filter(p -> p.getAge().get() >= ageFilter)\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static List<Person> search(List<Person> people, String name) {\n+        return doSearch(people, name, 0);\n+    }\n+\n+    public static List<Person> search(List<Person> people, String name, int age) {\n+        return doSearch(people, name, age);\n+    }\n+\n+    private static List<Person> doSearch(List<Person> people, String name, int age) {\n+        // Null checks for people and name\n+        return people.stream()\n+                .filter(p -> p.getName().equals(name))\n+                .filter(p -> p.getAge().get().intValue() >= age)\n+                .collect(Collectors.toList());\n+    }\n }",
    "output": "http://jira.baeldung.com/browse/BAEL-3707 (#8535)\n\nMissing Code - Guide To Java 8 Optional"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -31,21 +31,21 @@ public void shutdownExecutor() {\n     @Test\n     public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {\n         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());\n-        executor.execute(() -> waitFor(100));\n+        executor.execute(() -> waitFor(250));\n \n         assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\"))).isInstanceOf(RejectedExecutionException.class);\n     }\n \n     @Test\n     public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {\n         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());\n-        executor.execute(() -> waitFor(100));\n+        executor.execute(() -> waitFor(250));\n \n-        long startTime = System.nanoTime();\n-        executor.execute(() -> waitFor(100));\n-        double blockedDuration = (System.nanoTime() - startTime) / 1_000_000.0;\n+        long startTime = System.currentTimeMillis();\n+        executor.execute(() -> waitFor(500));\n+        long blockedDuration = System.currentTimeMillis() - startTime;\n \n-        assertThat(blockedDuration).isGreaterThanOrEqualTo(100);\n+        assertThat(blockedDuration).isGreaterThanOrEqualTo(500);\n     }\n \n     @Test",
    "output": "BAEL-20599: Increase blocking operations' time"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplication.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplication.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplication.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplication.java\n@@ -4,10 +4,10 @@\n import org.springframework.boot.builder.SpringApplicationBuilder;\n \n @SpringBootApplication\n-public class CustomRoutersGatewayApplication {\n+public class CustomPredicatesApplication {\n \n     public static void main(String[] args) {\n-        new SpringApplicationBuilder(CustomRoutersGatewayApplication.class)\n+        new SpringApplicationBuilder(CustomPredicatesApplication.class)\n           .profiles(\"customroutes\")\n           .run(args);\n     }\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/customfilters/gatewayapp/CustomFiltersLiveTest.java b/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/customfilters/gatewayapp/CustomFiltersLiveTest.java\n--- a/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/customfilters/gatewayapp/CustomFiltersLiveTest.java\n+++ b/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/customfilters/gatewayapp/CustomFiltersLiveTest.java\n@@ -5,6 +5,7 @@\n import org.assertj.core.api.Condition;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n import org.springframework.boot.web.server.LocalServerPort;\n@@ -27,6 +28,7 @@ public class CustomFiltersLiveTest {\n     @LocalServerPort\n     String port;\n \n+    @Autowired\n     private WebTestClient client;\n \n     @BeforeEach\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplicationLiveTest.java b/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplicationLiveTest.java\n--- a/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplicationLiveTest.java\n+++ b/spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/custompredicates/CustomPredicatesApplicationLiveTest.java\n@@ -0,0 +1,67 @@\n+package com.baeldung.springcloudgateway.custompredicates;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.net.URI;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+/**\n+ * This test requires\n+ */\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"customroutes\")\n+public class CustomPredicatesApplicationLiveTest {\n+\n+    @LocalServerPort\n+    String serverPort;\n+    \n+    @Autowired\n+    private TestRestTemplate restTemplate;\n+\n+    @Test\n+    void givenNormalCustomer_whenCallHeadersApi_thenResponseForNormalCustomer() throws JSONException {\n+\n+        String url = \"http://localhost:\" + serverPort + \"/api/headers\";        \n+        ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);\n+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n+        \n+        JSONObject json = new JSONObject(response.getBody());\n+        JSONObject headers = json.getJSONObject(\"headers\");\n+        assertThat(headers.getString(\"Goldencustomer\")).isEqualTo(\"false\");\n+        \n+    }\n+\n+    @Test\n+    void givenGoldenCustomer_whenCallHeadersApi_thenResponseForGoldenCustomer() throws JSONException {\n+\n+        String url = \"http://localhost:\" + serverPort + \"/api/headers\";   \n+        RequestEntity<Void> request = RequestEntity\n+            .get(URI.create(url))\n+            .header(\"Cookie\", \"customerId=baeldung\")\n+            .build();\n+            \n+        ResponseEntity<String> response = restTemplate.exchange(request, String.class);\n+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n+        \n+        JSONObject json = new JSONObject(response.getBody());\n+        JSONObject headers = json.getJSONObject(\"headers\");\n+        assertThat(headers.getString(\"Goldencustomer\")).isEqualTo(\"true\");\n+        \n+    }\n+    \n+}",
    "output": "[BAEL-3311] LiveTests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n--- a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n+++ b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n@@ -0,0 +1,7 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+public class InvocationTargetExample {\n+    public int divideByZeroExample() {\n+        return 1 / 0;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class InvocationTargetUnitTest {\n+\n+    @Test\n+    public void whenCallingMethodThrowsException_thenAssertCauseOfInvocationTargetException() throws Exception {\n+\n+        InvocationTargetExample targetExample = new InvocationTargetExample();\n+        Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n+        \n+        Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));\n+        \n+        assertEquals(ArithmeticException.class, exception.getCause().getClass());\n+    }\n+}",
    "output": "Merge pull request #19 from eugenp/master\n\nupdate"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/AVLTree.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/AVLTree.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/AVLTree.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/AVLTree.java\n@@ -0,0 +1,140 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+public class AVLTree {\n+\n+    public static class Node {\n+        int key;\n+        int height;\n+        Node left, right;\n+\n+        Node(int key) {\n+            this.key = key;\n+        }\n+    }\n+\n+    private Node root;\n+\n+    public Node find(int key) {\n+        Node current = root;\n+        while (current != null) {\n+            if (current.key == key) {\n+                return current;\n+            }\n+            current = current.key < key ? current.right : current.left;\n+        }\n+        return null;\n+    }\n+\n+    public void insert(int key) {\n+        root = insert(root, key);\n+    }\n+\n+    public void delete(int key) {\n+        root = delete(root, key);\n+    }\n+\n+    public Node getRoot() {\n+        return root;\n+    }\n+\n+    public int height(){\n+        return root == null ? -1: root.height;\n+    }\n+\n+    private Node insert(Node node, int key) {\n+        if (node == null) {\n+            return new Node(key);\n+        } else if (node.key > key) {\n+            node.left = insert(node.left, key);\n+        } else if (node.key < key) {\n+            node.right = insert(node.right, key);\n+        } else {\n+            throw new RuntimeException(\"duplicate Key!\");\n+        }\n+        return rebalance(node);\n+    }\n+\n+    private Node delete(Node node, int key) {\n+        if (node == null) {\n+            return node;\n+        } else if (node.key > key) {\n+            node.left = delete(node.left, key);\n+        } else if (node.key < key) {\n+            node.right = delete(node.right, key);\n+        } else {\n+            if (node.left == null || node.right == null) {\n+                node = (node.left == null) ? node.right : node.left;\n+            } else {\n+                Node mostLeftChild = mostLeftChild(node.right);\n+                node.key = mostLeftChild.key;\n+                node.right = delete(node.right, node.key);\n+            }\n+        }\n+        if (node != null) {\n+            node = rebalance(node);\n+        }\n+        return node;\n+    }\n+\n+    private Node mostLeftChild(Node node)\n+    {\n+        Node current = node;\n+        /* loop down to find the leftmost leaf */\n+        while (current.left != null)\n+            current = current.left;\n+        return current;\n+    }\n+\n+    private Node rebalance(Node n) {\n+        updateHeight(n);\n+        int balance = getBalance(n);\n+        if (balance > 1) {\n+            if (height(n.right.right) > height(n.right.left)) {\n+                n = rotateLeft(n);\n+            } else {\n+                n.right = rotateRight(n.right);\n+                n = rotateLeft(n);\n+            }\n+        } else if (balance < -1) {\n+            if (height(n.left.left) > height(n.left.right))\n+                n = rotateRight(n);\n+            else {\n+                n.left = rotateLeft(n.left);\n+                n = rotateRight(n);\n+            }\n+        }\n+        return n;\n+    }\n+\n+    private Node rotateRight(Node y) {\n+        Node x = y.left;\n+        Node t2 = x.right;\n+        x.right = y;\n+        y.left = t2;\n+        updateHeight(y);\n+        updateHeight(x);\n+        return x;\n+    }\n+\n+    private Node rotateLeft(Node y) {\n+        Node x = y.right;\n+        Node t2 = x.left;\n+        x.left = y;\n+        y.right = t2;\n+        updateHeight(y);\n+        updateHeight(x);\n+        return x;\n+    }\n+\n+    private void updateHeight(Node n) {\n+        n.height = 1 + Math.max(height(n.left), height(n.right));\n+    }\n+\n+    private int height(Node n) {\n+        return n == null ? -1 : n.height;\n+    }\n+\n+    public int getBalance(Node n) {\n+        return (n == null) ? 0 : height(n.right) - height(n.left);\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/AVLTreeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/AVLTreeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/AVLTreeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/AVLTreeUnitTest.java\n@@ -0,0 +1,83 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class AVLTreeUnitTest {\n+\n+    @Test\n+    public void givenEmptyTree_whenHeightCalled_shouldReturnMinus1() {\n+        AVLTree tree = new AVLTree();\n+        Assert.assertEquals(-1, tree.height());\n+    }\n+\n+    @Test\n+    public void givenEmptyTree_whenInsertCalled_heightShouldBeZero() {\n+        AVLTree tree = new AVLTree();\n+        tree.insert(1);\n+        Assert.assertEquals(0, tree.height());\n+    }\n+\n+    @Test\n+    public void givenEmptyTree_whenInsertCalled_treeShouldBeAvl() {\n+        AVLTree tree = new AVLTree();\n+        tree.insert(1);\n+        Assert.assertTrue(isAVL(tree));\n+    }\n+\n+    @Test\n+    public void givenSampleTree_whenInsertCalled_treeShouldBeAvl() {\n+        AVLTree tree = getSampleAVLTree();\n+        int newKey = 11;\n+        tree.insert(newKey);\n+        Assert.assertTrue(isAVL(tree));\n+    }\n+\n+    @Test\n+    public void givenSampleTree_whenFindExistingKeyCalled_shouldReturnMatchedNode() {\n+        AVLTree tree = getSampleAVLTree();\n+        int existingKey = 2;\n+        AVLTree.Node result = tree.find(existingKey);\n+        Assert.assertEquals(result.key, existingKey);\n+    }\n+\n+    @Test\n+    public void givenSampleTree_whenFindNotExistingKeyCalled_shouldReturnNull() {\n+        AVLTree tree = getSampleAVLTree();\n+        int notExistingKey = 11;\n+        AVLTree.Node result = tree.find(notExistingKey);\n+        Assert.assertNull(result);\n+    }\n+\n+    @Test\n+    public void givenEmptyTree_whenDeleteCalled_treeShouldBeAvl() {\n+        AVLTree tree = new AVLTree();\n+        tree.delete(1);\n+        Assert.assertTrue(isAVL(tree));\n+    }\n+\n+    @Test\n+    public void givenSampleTree_whenDeleteCalled_treeShouldBeAvl() {\n+        AVLTree tree = getSampleAVLTree();\n+        tree.delete(1);\n+        Assert.assertTrue(isAVL(tree, tree.getRoot()));\n+    }\n+\n+    private boolean isAVL(AVLTree tree) {\n+       return isAVL(tree, tree.getRoot());\n+    }\n+\n+    private boolean isAVL(AVLTree tree, AVLTree.Node node) {\n+        if ( node == null )\n+            return true;\n+        int balance = tree.getBalance(node);\n+        return (balance <= 1 && balance >= -1) && isAVL(tree, node.left) && isAVL(tree, node.right);\n+    }\n+\n+    private AVLTree getSampleAVLTree() {\n+        AVLTree avlTree = new AVLTree();\n+        for (int i = 0; i < 10; i++)\n+            avlTree.insert(i);\n+        return avlTree;\n+    }\n+}",
    "output": "BAEL-3454: Guide to AVL trees in Java"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java b/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n@@ -1,5 +1,8 @@\n package com.baeldung.openliberty.person.resource;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import javax.enterprise.context.RequestScoped;\n import javax.inject.Inject;\n import javax.transaction.Transactional;\n@@ -16,17 +19,19 @@\n import com.baeldung.openliberty.person.model.Person;\n \n @RequestScoped\n-@Path(\"person\")\n+@Path(\"persons\")\n public class PersonResource {\n \n     @Inject\n     private PersonDao personDao;\n \n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Person getPerson() {\n-        Person person = new Person(1, \"normanlewis\", \"normanlewis@email.com\"); \n-        return person;\n+    public List<Person> getAllPerson() {\n+        Person person = new Person(1, \"normanlewis\", \"normanlewis@email.com\");\n+        List<Person> persons = new ArrayList<>();\n+        persons.add(person);\n+        return persons;\n     }\n \n     @POST\n@@ -35,7 +40,7 @@ public Person getPerson() {\n     public Response addPerson(Person person) {\n         personDao.createPerson(person);\n         String respMessage = \"Person #\" + person.getId() + \" created successfully.\";\n-        return Response.status(Response.Status.OK).entity(respMessage).build();\n+        return Response.status(Response.Status.CREATED).entity(respMessage).build();\n     }\n \n     @GET\n\ndiff --git a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n--- a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n+++ b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n@@ -14,7 +14,7 @@ public class RestClientTest {\n \n     private static String BASE_URL;\n \n-    private final String API_PERSON = \"api/person\";\n+    private final String API_PERSON = \"api/persons\";\n \n     @BeforeClass\n     public static void oneTimeSetup() {\n@@ -24,11 +24,11 @@ public static void oneTimeSetup() {\n     @Test\n     public void testSuite() {\n         //run the test only when liberty server is started\n-        //this.whenConsumeWithJsonb_thenGetPerson();\n+        this.whenConsumeWithJsonb_thenGetPerson();\n     }\n \n     public void whenConsumeWithJsonb_thenGetPerson() {\n-        String url = BASE_URL + API_PERSON;\n+        String url = BASE_URL + API_PERSON + \"/1\";\n         String result = RestConsumer.consumeWithJsonb(url);        \n \n         Person person = JsonbBuilder.create().fromJson(result, Person.class);",
    "output": "Review corrections"
  },
  {
    "input": "diff --git a/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java b/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n--- a/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n+++ b/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n@@ -28,10 +28,10 @@ public void whenRequest_thenActorResponds() {\n             .assertStatusCode(404);\n \n     appRoute.run(HttpRequest.DELETE(\"/users/1\"))\n-            .assertStatusCode(200);\n+            .assertStatusCode(405);\n \n     appRoute.run(HttpRequest.DELETE(\"/users/42\"))\n-            .assertStatusCode(200);\n+            .assertStatusCode(405);\n \n     appRoute.run(HttpRequest.POST(\"/users\")\n             .withEntity(HttpEntities.create(ContentTypes.APPLICATION_JSON, zaphod())))",
    "output": "BAEL-20595 Fix unit test in akka-http module"
  },
  {
    "input": "diff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellMergerUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellMergerUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellMergerUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellMergerUnitTest.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.util.CellRangeAddress;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellMergerUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void givenCellIndex_whenAddMergeRegion_thenMergeRegionCreated() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+\n+        assertEquals(0, sheet.getNumMergedRegions());\n+        int firstRow = 0; \n+        int lastRow = 0; \n+        int firstCol = 0; \n+        int lastCol = 2;\n+        sheet.addMergedRegion(new CellRangeAddress(firstRow, lastRow, firstCol, lastCol));\n+        assertEquals(1, sheet.getNumMergedRegions());\n+\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void givenCellRefString_whenAddMergeRegion_thenMergeRegionCreated() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+\n+        assertEquals(0, sheet.getNumMergedRegions());        \n+        sheet.addMergedRegion(CellRangeAddress.valueOf(\"A1:C1\"));\n+        assertEquals(1, sheet.getNumMergedRegions());\n+\n+        workbook.close();\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "BAEL-3657 Merge Cells in Excel using Apache POI"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n--- a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n+++ b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n@@ -0,0 +1,7 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+public class InvocationTargetExample {\n+    public int divideByZeroExample() {\n+        return 1 / 0;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class InvocationTargetUnitTest {\n+\n+    @Test\n+    public void whenCallingMethodThrowsException_thenAssertCauseOfInvocationTargetException() throws Exception {\n+\n+        InvocationTargetExample targetExample = new InvocationTargetExample();\n+        Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n+        \n+        Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));\n+        \n+        assertEquals(ArithmeticException.class, exception.getCause().getClass());\n+    }\n+}",
    "output": "Merge pull request #8485 from vikasrajput6035/BAEL-3504\n\nBAEL-3504: Article - what causes invocation-target-exception : done"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n@@ -8,8 +8,8 @@ public class CustomRoutersGatewayApplication {\n \n     public static void main(String[] args) {\n         new SpringApplicationBuilder(CustomRoutersGatewayApplication.class)\n-        .profiles(\"customroutes\")\n-        .run(args);\n+          .profiles(\"customroutes\")\n+          .run(args);\n     }\n \n }\n\\ No newline at end of file\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n@@ -24,15 +24,15 @@ public GoldenCustomerRoutePredicateFactory goldenCustomer(GoldenCustomerService\n     public RouteLocator routes(RouteLocatorBuilder builder, GoldenCustomerRoutePredicateFactory gf ) {\n \n         return builder.routes()\n-            .route(\"dsl_golden_route\", r -> r.path(\"/dsl_api/**\")\n-                .filters(f -> f.stripPrefix(1))\n-                .uri(\"https://httpbin.org\")\n-                .predicate(gf.apply(new Config(true, \"customerId\"))))\n-            .route(\"dsl_common_route\", r -> r.path(\"/dsl_api/**\")\n-                .filters(f -> f.stripPrefix(1))\n-                .uri(\"https://httpbin.org\")\n-                .predicate(gf.apply(new Config(false, \"customerId\"))))             \n-            .build();\n+          .route(\"dsl_golden_route\", r -> r.path(\"/dsl_api/**\")\n+            .filters(f -> f.stripPrefix(1))\n+            .uri(\"https://httpbin.org\")\n+            .predicate(gf.apply(new Config(true, \"customerId\"))))\n+          .route(\"dsl_common_route\", r -> r.path(\"/dsl_api/**\")\n+            .filters(f -> f.stripPrefix(1))\n+            .uri(\"https://httpbin.org\")\n+            .predicate(gf.apply(new Config(false, \"customerId\"))))             \n+          .build();\n     }\n     \n }\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n@@ -41,27 +41,25 @@ public Predicate<ServerWebExchange> apply(Config config) {\n         \n         return (ServerWebExchange t) -> {\n             List<HttpCookie> cookies = t.getRequest()\n-                .getCookies()\n-                .get(config.getCustomerIdCookie());\n+              .getCookies()\n+              .get(config.getCustomerIdCookie());\n               \n-              boolean isGolden; \n-              if ( cookies == null || cookies.isEmpty()) {\n-                  isGolden = false;\n-              }\n-              else {                \n-                  String customerId = cookies.get(0).getValue();                \n-                  isGolden = goldenCustomerService.isGoldenCustomer(customerId);\n-              }\n+            boolean isGolden; \n+            if ( cookies == null || cookies.isEmpty()) {\n+                isGolden = false;\n+            }\n+            else {                \n+                String customerId = cookies.get(0).getValue();                \n+                isGolden = goldenCustomerService.isGoldenCustomer(customerId);\n+            }\n               \n-              return config.isGolden()?isGolden:!isGolden;           \n+            return config.isGolden()?isGolden:!isGolden;           \n         };\n-        \n     }\n     \n     \n     @Validated\n-    public static class Config {\n-        \n+    public static class Config {        \n         boolean isGolden = true;\n         \n         @NotEmpty",
    "output": "[BAEL-3311] Code formatting"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/CustomRoutersGatewayApplication.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.springcloudgateway.custompredicates;\n+\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+\n+@SpringBootApplication\n+public class CustomRoutersGatewayApplication {\n+\n+    public static void main(String[] args) {\n+        new SpringApplicationBuilder(CustomRoutersGatewayApplication.class)\n+        .profiles(\"customroutes\")\n+        .run(args);\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/config/CustomPredicatesConfig.java\n@@ -0,0 +1,38 @@\n+package com.baeldung.springcloudgateway.custompredicates.config;\n+\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.route.RouteLocator;\n+import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.baeldung.springcloudgateway.custompredicates.factories.GoldenCustomerRoutePredicateFactory;\n+import com.baeldung.springcloudgateway.custompredicates.factories.GoldenCustomerRoutePredicateFactory.Config;\n+import com.baeldung.springcloudgateway.custompredicates.service.GoldenCustomerService;\n+\n+@Configuration\n+public class CustomPredicatesConfig {\n+    \n+    \n+    @Bean\n+    public GoldenCustomerRoutePredicateFactory goldenCustomer(GoldenCustomerService goldenCustomerService) {\n+        return new GoldenCustomerRoutePredicateFactory(goldenCustomerService);\n+    }\n+    \n+\n+    //@Bean\n+    public RouteLocator routes(RouteLocatorBuilder builder, GoldenCustomerRoutePredicateFactory gf ) {\n+\n+        return builder.routes()\n+            .route(\"dsl_golden_route\", r -> r.path(\"/dsl_api/**\")\n+                .filters(f -> f.stripPrefix(1))\n+                .uri(\"https://httpbin.org\")\n+                .predicate(gf.apply(new Config(true, \"customerId\"))))\n+            .route(\"dsl_common_route\", r -> r.path(\"/dsl_api/**\")\n+                .filters(f -> f.stripPrefix(1))\n+                .uri(\"https://httpbin.org\")\n+                .predicate(gf.apply(new Config(false, \"customerId\"))))             \n+            .build();\n+    }\n+    \n+}\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/factories/GoldenCustomerRoutePredicateFactory.java\n@@ -0,0 +1,104 @@\n+/**\n+ * \n+ */\n+package com.baeldung.springcloudgateway.custompredicates.factories;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import javax.validation.constraints.NotEmpty;\n+\n+import org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+import com.baeldung.springcloudgateway.custompredicates.service.GoldenCustomerService;\n+\n+/**\n+ * @author Philippe\n+ *\n+ */\n+public class GoldenCustomerRoutePredicateFactory extends AbstractRoutePredicateFactory<GoldenCustomerRoutePredicateFactory.Config> {\n+\n+    private final GoldenCustomerService goldenCustomerService;\n+    \n+    public GoldenCustomerRoutePredicateFactory(GoldenCustomerService goldenCustomerService ) {\n+        super(Config.class);\n+        this.goldenCustomerService = goldenCustomerService;\n+    }\n+\n+\n+    @Override\n+    public List<String> shortcutFieldOrder() {\n+        return Arrays.asList(\"isGolden\",\"customerIdCookie\");\n+    }\n+\n+\n+    @Override\n+    public Predicate<ServerWebExchange> apply(Config config) {\n+        \n+        return (ServerWebExchange t) -> {\n+            List<HttpCookie> cookies = t.getRequest()\n+                .getCookies()\n+                .get(config.getCustomerIdCookie());\n+              \n+              boolean isGolden; \n+              if ( cookies == null || cookies.isEmpty()) {\n+                  isGolden = false;\n+              }\n+              else {                \n+                  String customerId = cookies.get(0).getValue();                \n+                  isGolden = goldenCustomerService.isGoldenCustomer(customerId);\n+              }\n+              \n+              return config.isGolden()?isGolden:!isGolden;           \n+        };\n+        \n+    }\n+    \n+    \n+    @Validated\n+    public static class Config {\n+        \n+        boolean isGolden = true;\n+        \n+        @NotEmpty\n+        String customerIdCookie = \"customerId\";\n+        \n+        \n+        public Config() {}\n+        \n+        public Config( boolean isGolden, String customerIdCookie) {\n+            this.isGolden = isGolden;\n+            this.customerIdCookie = customerIdCookie;\n+        }\n+        \n+        public boolean isGolden() {\n+            return isGolden;\n+        }\n+        \n+        public void setGolden(boolean value) {\n+            this.isGolden = value;\n+        }\n+\n+        /**\n+         * @return the customerIdCookie\n+         */\n+        public String getCustomerIdCookie() {\n+            return customerIdCookie;\n+        }\n+\n+        /**\n+         * @param customerIdCookie the customerIdCookie to set\n+         */\n+        public void setCustomerIdCookie(String customerIdCookie) {\n+            this.customerIdCookie = customerIdCookie;\n+        }\n+        \n+        \n+        \n+    }\n+    \n+}\n\ndiff --git a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/service/GoldenCustomerService.java b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/service/GoldenCustomerService.java\n--- a/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/service/GoldenCustomerService.java\n+++ b/spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/custompredicates/service/GoldenCustomerService.java\n@@ -0,0 +1,26 @@\n+/**\n+ * \n+ */\n+package com.baeldung.springcloudgateway.custompredicates.service;\n+\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Philippe\n+ *\n+ */\n+@Component\n+public class GoldenCustomerService {\n+    \n+    public boolean isGoldenCustomer(String customerId) {\n+        \n+        // TODO: Add some AI logic to check is this customer deserves a \"golden\" status ;^)\n+        if ( \"baeldung\".equalsIgnoreCase(customerId)) {\n+            return true;\n+        }\n+        else {\n+            return false;\n+        }\n+    }\n+\n+}",
    "output": "[BAEL-3311] Spring Cloud Gateway Routing Predicate Factories"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class SwitchExpressionsWithYieldUnitTest {\r\n+\r\n+    @Test\r\n+    @SuppressWarnings(\"preview\")\r\n+    public void whenSwitchingOnOperationSquareMe_thenWillReturnSquare() {\r\n+        var me = 4;\r\n+        var operation = \"squareMe\";\r\n+        var result = switch (operation) {\r\n+        case \"doubleMe\" -> {\r\n+            yield me * 2;\r\n+        }\r\n+        case \"squareMe\" -> {\r\n+            yield me * me;\r\n+        }\r\n+        default -> me;\r\n+        };\r\n+\r\n+        assertEquals(16, result);\r\n+    }\r\n+\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.assertj.core.api.Assertions.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class TextBlocksUnitTest {\r\n+\r\n+    private static final String JSON_STRING = \"{\\r\\n\" + \"\\\"name\\\" : \\\"Baeldung\\\",\\r\\n\" + \"\\\"website\\\" : \\\"https://www.%s.com/\\\"\\r\\n\" + \"}\";\r\n+\r\n+    @SuppressWarnings(\"preview\")\r\n+    private static final String TEXT_BLOCK_JSON = \"\"\"\r\n+            {\r\n+            \"name\" : \"Baeldung\",\r\n+            \"website\" : \"https://www.%s.com/\"\r\n+            }\r\n+        \"\"\";\r\n+\r\n+    @Test\r\n+    public void whenTextBlocks_thenStringOperationsWork() {\r\n+\r\n+        assertThat(TEXT_BLOCK_JSON.contains(\"Baeldung\")).isTrue();\r\n+        assertThat(TEXT_BLOCK_JSON.indexOf(\"www\")).isGreaterThan(0);\r\n+        assertThat(TEXT_BLOCK_JSON.length()).isGreaterThan(0);\r\n+\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"removal\")\r\n+    @Test\r\n+    public void whenTextBlocks_thenFormattedWorksAsFormat() {\r\n+        assertThat(TEXT_BLOCK_JSON.formatted(\"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+        assertThat(String.format(JSON_STRING, \"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+    }\r\n+   \r\n+}\r\n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.regex.matcher;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class MatcherUnitTest {\n+\n+    @Test\n+    public void whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find());\n+        assertEquals(8, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(12, m.end());\n+\n+        assertTrue(m.find());\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+\n+        assertFalse(m.find());\n+    }\n+\n+    @Test\n+    public void givenStartIndex_whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find(20));\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenFail() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+        assertFalse(m.matches());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"2019\");\n+\n+        assertTrue(m.matches());\n+        assertEquals(0, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(4, m.end());\n+\n+        assertTrue(m.matches());// matches will always return the same return\n+    }\n+\n+}\n\ndiff --git a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n--- a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n+++ b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n@@ -7,7 +7,7 @@ public class BruteForcePrimeChecker implements PrimeChecker<Integer> {\n     @Override\n     public boolean isPrime(Integer number) {\n \n-        return number > 2 ? IntStream.range(2, number)\n+        return number > 1 ? IntStream.range(2, number)\n             .noneMatch(n -> (number % n == 0)) : false;\n     }\n \n\ndiff --git a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n--- a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n+++ b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n@@ -6,7 +6,7 @@ public class OptimisedPrimeChecker implements PrimeChecker<Integer> {\n \n     @Override\n     public boolean isPrime(Integer number) {\n-        return number > 2 ? IntStream.rangeClosed(2, (int) Math.sqrt(number))\n+        return number > 1 ? IntStream.rangeClosed(2, (int) Math.sqrt(number))\n             .noneMatch(n -> (number % n == 0)) : false;\n     }\n \n\ndiff --git a/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java b/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n--- a/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n+++ b/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n@@ -11,22 +11,24 @@ public class PrimeCheckerUnitTest {\n \n     @Test\n     public void whenCheckIsPrime_thenTrue() {\n-        assertTrue(primeChecker.isPrime(13l));\n+        assertTrue(primeChecker.isPrime(2L));\n+        assertTrue(primeChecker.isPrime(13L));\n         assertTrue(primeChecker.isPrime(1009L));\n         assertTrue(primeChecker.isPrime(74207281L));\n     }\n \n     @Test\n     public void whenCheckIsPrime_thenFalse() {\n-        assertTrue(!primeChecker.isPrime(50L));\n-        assertTrue(!primeChecker.isPrime(1001L));\n-        assertTrue(!primeChecker.isPrime(74207282L));\n+        assertFalse(primeChecker.isPrime(50L));\n+        assertFalse(primeChecker.isPrime(1001L));\n+        assertFalse(primeChecker.isPrime(74207282L));\n     }\n \n     private final BruteForcePrimeChecker bfPrimeChecker = new BruteForcePrimeChecker();\n \n     @Test\n     public void whenBFCheckIsPrime_thenTrue() {\n+        assertTrue(bfPrimeChecker.isPrime(2));\n         assertTrue(bfPrimeChecker.isPrime(13));\n         assertTrue(bfPrimeChecker.isPrime(1009));\n     }\n@@ -41,6 +43,7 @@ public void whenBFCheckIsPrime_thenFalse() {\n \n     @Test\n     public void whenOptCheckIsPrime_thenTrue() {\n+        assertTrue(optimisedPrimeChecker.isPrime(2));\n         assertTrue(optimisedPrimeChecker.isPrime(13));\n         assertTrue(optimisedPrimeChecker.isPrime(1009));\n     }\n@@ -55,6 +58,7 @@ public void whenOptCheckIsPrime_thenFalse() {\n \n     @Test\n     public void whenPrimesCheckIsPrime_thenTrue() {\n+        assertTrue(primesPrimeChecker.isPrime(2));\n         assertTrue(primesPrimeChecker.isPrime(13));\n         assertTrue(primesPrimeChecker.isPrime(1009));\n     }\n\ndiff --git a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n--- a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n+++ b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.hibernatelogging;\n+package com.baeldung.hibernate.logging;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;",
    "output": "Merge pull request #18 from eugenp/master\n\nupdate"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -12,9 +12,12 @@ public class InvocationTargetUnitTest {\n \n     @Test\n     public void whenCallingMethodThrowsException_thenAssertCauseOfInvocationTargetException() throws Exception {\n+\n         InvocationTargetExample targetExample = new InvocationTargetExample();\n         Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n+        \n         Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));\n+        \n         assertEquals(ArithmeticException.class, exception.getCause().getClass());\n     }\n }",
    "output": "BAEL-3504: Added blank lines before when and then in unit test"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -11,7 +11,7 @@\n public class InvocationTargetUnitTest {\n \n     @Test\n-    public void whenCallingMethodThrowsException_thenAssertTrue() throws Exception {\n+    public void whenCallingMethodThrowsException_thenAssertCauseOfInvocationTargetException() throws Exception {\n         InvocationTargetExample targetExample = new InvocationTargetExample();\n         Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n         Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));",
    "output": "Merge branch 'BAEL-3504' of https://github.com/vikasrajput6035/tutorials into BAEL-3504"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -11,7 +11,7 @@\n public class InvocationTargetUnitTest {\n \n     @Test\n-    public void whenCallingMethodThrowsException_thenAssertTrue() throws Exception {\n+    public void whenCallingMethodThrowsException_thenAssertCauseOfInvocationTargetException() throws Exception {\n         InvocationTargetExample targetExample = new InvocationTargetExample();\n         Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n         Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));",
    "output": "BAEL-3504: Update core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n\nCo-Authored-By: KevinGilmore <kpg102@gmail.com>"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class SwitchExpressionsWithYieldUnitTest {\r\n+\r\n+    @Test\r\n+    @SuppressWarnings(\"preview\")\r\n+    public void whenSwitchingOnOperationSquareMe_thenWillReturnSquare() {\r\n+        var me = 4;\r\n+        var operation = \"squareMe\";\r\n+        var result = switch (operation) {\r\n+        case \"doubleMe\" -> {\r\n+            yield me * 2;\r\n+        }\r\n+        case \"squareMe\" -> {\r\n+            yield me * me;\r\n+        }\r\n+        default -> me;\r\n+        };\r\n+\r\n+        assertEquals(16, result);\r\n+    }\r\n+\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.assertj.core.api.Assertions.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class TextBlocksUnitTest {\r\n+\r\n+    private static final String JSON_STRING = \"{\\r\\n\" + \"\\\"name\\\" : \\\"Baeldung\\\",\\r\\n\" + \"\\\"website\\\" : \\\"https://www.%s.com/\\\"\\r\\n\" + \"}\";\r\n+\r\n+    @SuppressWarnings(\"preview\")\r\n+    private static final String TEXT_BLOCK_JSON = \"\"\"\r\n+            {\r\n+            \"name\" : \"Baeldung\",\r\n+            \"website\" : \"https://www.%s.com/\"\r\n+            }\r\n+        \"\"\";\r\n+\r\n+    @Test\r\n+    public void whenTextBlocks_thenStringOperationsWork() {\r\n+\r\n+        assertThat(TEXT_BLOCK_JSON.contains(\"Baeldung\")).isTrue();\r\n+        assertThat(TEXT_BLOCK_JSON.indexOf(\"www\")).isGreaterThan(0);\r\n+        assertThat(TEXT_BLOCK_JSON.length()).isGreaterThan(0);\r\n+\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"removal\")\r\n+    @Test\r\n+    public void whenTextBlocks_thenFormattedWorksAsFormat() {\r\n+        assertThat(TEXT_BLOCK_JSON.formatted(\"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+        assertThat(String.format(JSON_STRING, \"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+    }\r\n+   \r\n+}\r",
    "output": "Merge pull request #8506 from sampada07/BAEL-3602\n\nBAEL-3602 : Java 13 New Features"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/person/model/Person.java b/open-liberty/src/main/java/com/baeldung/openliberty/person/model/Person.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/person/model/Person.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/person/model/Person.java\n@@ -14,10 +14,7 @@ public class Person {\n     @Id\n     private int id;\n     \n-    @NotBlank\n     private String username;\n-   \n-    @Email\n     private String email;\n     \n     public int getId() {",
    "output": "code indent in pom.xml with spaces"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n@@ -1,17 +0,0 @@\n-package com.baeldung.openliberty.rest.consumes;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-\n-import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n-\n-@RegisterRestClient(configKey = \"personClient\", baseUri = \"http://localhost:9080/\")\n-public interface PersonClient {\n-\n-    @GET\n-    @Path(\"/api/person\")\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public String getPerson();\n-}",
    "output": "clean up"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n@@ -20,7 +20,7 @@ public static String consumeWithJsonb(String targetUrl) {\n     }\n \n     public static String consumeWithRestBuilder(String targetUrl) {\n-        URI target = URI.create(targetUrl);;\n+        URI target = URI.create(targetUrl);\n         PersonClient person = RestClientBuilder.newBuilder()\n           .baseUri(target)\n           .build(PersonClient.class);\n\ndiff --git a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n--- a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n+++ b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n@@ -14,16 +14,22 @@ public class RestClientTest {\n \n     private static String BASE_URL;\n \n-    private final String PERSON = \"api/person\";\n+    private final String API_PERSON = \"api/person\";\n \n     @BeforeClass\n     public static void oneTimeSetup() {\n-        BASE_URL = \"http://localhost:9080\"; \n+        BASE_URL = \"http://localhost:9080/\"; \n     }\n-\n+    \n     @Test\n+    public void testSuite() {\n+        //uncomment when liberty server starts\n+        //this.whenConsumeWithJsonb_thenGetPerson();\n+        //this.whenConsumeWithRestBuilder_thenGetPerson();\n+    }\n+\n     public void whenConsumeWithJsonb_thenGetPerson() {\n-        String url = BASE_URL + \"/\" + PERSON + \"/1\";\n+        String url = BASE_URL + API_PERSON;\n         String result = RestConsumer.consumeWithJsonb(url);        \n \n         Person person = JsonbBuilder.create().fromJson(result, Person.class);\n@@ -32,9 +38,8 @@ public void whenConsumeWithJsonb_thenGetPerson() {\n         assertEquals(person.getEmail(), \"normanlewis@email.com\");\n     }\n \n-    @Test\n     public void whenConsumeWithRestBuilder_thenGetPerson() {\n-        String result = RestConsumer.consumeWithRestBuilder(BASE_URL);        \n+        String result = RestConsumer.consumeWithRestBuilder(BASE_URL);   \n \n         Person person = JsonbBuilder.create().fromJson(result, Person.class);\n         assert person.getId() == 1;",
    "output": "Open liberty with bean validation and mpRestClient"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n@@ -21,7 +21,7 @@ public void whenSwitchingOnOperationSquareMe_thenWillReturnSquare() {\n         default -> me;\r\n         };\r\n \r\n-        assertEquals(result, 16);\r\n+        assertEquals(16, result);\r\n     }\r\n \r\n }\r",
    "output": "BAEL-3602 : swapped order of args in assertEquals call"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.regex.matcher;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class MatcherUnitTest {\n+\n+    @Test\n+    public void whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find());\n+        assertEquals(8, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(12, m.end());\n+\n+        assertTrue(m.find());\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+\n+        assertFalse(m.find());\n+    }\n+\n+    @Test\n+    public void givenStartIndex_whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find(20));\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenFail() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+        assertFalse(m.matches());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"2019\");\n+\n+        assertTrue(m.matches());\n+        assertEquals(0, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(4, m.end());\n+\n+        assertTrue(m.matches());// matches will always return the same return\n+    }\n+\n+}",
    "output": "Merge pull request #8502 from vikasrajput6035/BAEL-3655\n\nBAEL-3655: Article Find vs Matches in Java Regex API - done"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/MatcherUnitTest.java\n@@ -9,7 +9,7 @@\n \n import org.junit.jupiter.api.Test;\n \n-public class RegexMatcherFindVsMatchesTest {\n+public class MatcherUnitTest {\n \n     @Test\n     public void whenFindFourDigitWorks_thenCorrect() {",
    "output": "BAEL-3655: Renamed the JUnit test file as the proper naming convention"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n--- a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n+++ b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n@@ -1,19 +0,0 @@\n-package com.baeldung.reflection.exception.invocationtarget;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-\n-public class InvocationTargetDemo {\n-    public static void main(String[] args) throws Throwable {\n-\n-        try {\n-\n-            InvocationTargetExample targetExample = new InvocationTargetExample();\n-            Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n-            method.invoke(targetExample);\n-        } catch (InvocationTargetException e) {\n-\n-            throw e.getCause();\n-        }\n-    }\n-}\n\ndiff --git a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n--- a/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n+++ b/core-java-modules/core-java-reflection/src/test/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetUnitTest.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class InvocationTargetUnitTest {\n+\n+    @Test\n+    public void whenCallingMethodThrowsException_thenAssertTrue() throws Exception {\n+        InvocationTargetExample targetExample = new InvocationTargetExample();\n+        Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n+        Exception exception = assertThrows(InvocationTargetException.class, () -> method.invoke(targetExample));\n+        assertEquals(ArithmeticException.class, exception.getCause().getClass());\n+    }\n+}",
    "output": "BAEL-3504: Added Unit test file and removed old class file"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java b/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/person/resource/PersonResource.java\n@@ -4,9 +4,9 @@\n \n import javax.enterprise.context.RequestScoped;\n import javax.inject.Inject;\n-import javax.validation.Validator;\n-import javax.validation.ConstraintViolation;\n import javax.transaction.Transactional;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validator;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/PersonClient.java\n@@ -2,19 +2,16 @@\n \n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.ProcessingException;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n \n-import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n \n @RegisterRestClient(configKey = \"personClient\", baseUri = \"http://localhost:9080/\")\n-@RegisterProvider(UriNotFoundExceptionMapper.class)\n-@Path(\"/api/person/1\")\n-public interface PersonClient extends AutoCloseable {\n+public interface PersonClient {\n \n     @GET\n+    @Path(\"/api/person\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public String getPerson() throws UriNotFoundException, ProcessingException;\n+    public String getPerson();\n }\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/RestConsumer.java\n@@ -2,7 +2,6 @@\n \n import java.net.URI;\n \n-import javax.ws.rs.ProcessingException;\n import javax.ws.rs.client.Client;\n import javax.ws.rs.client.ClientBuilder;\n import javax.ws.rs.core.Response;\n@@ -20,12 +19,11 @@ public static String consumeWithJsonb(String targetUrl) {\n         return result;\n     }\n \n-    public static String consumeWithRestBuilder(String targetUrl) throws ProcessingException, UriNotFoundException {\n+    public static String consumeWithRestBuilder(String targetUrl) {\n         URI target = URI.create(targetUrl);;\n         PersonClient person = RestClientBuilder.newBuilder()\n-            .baseUri(target)\n-            .register(UriNotFoundExceptionMapper.class)\n-            .build(PersonClient.class);\n+          .baseUri(target)\n+          .build(PersonClient.class);\n         return person.getPerson();\n     }\n \n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundException.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundException.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundException.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundException.java\n@@ -1,14 +0,0 @@\n-package com.baeldung.openliberty.rest.consumes;\n-\n-public class UriNotFoundException extends Exception {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    public UriNotFoundException() {\n-        super();\n-    }\n-\n-    public UriNotFoundException(String message) {\n-        super(message);\n-    }\n-}\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundExceptionMapper.java b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundExceptionMapper.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundExceptionMapper.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/rest/consumes/UriNotFoundExceptionMapper.java\n@@ -1,23 +0,0 @@\n-package com.baeldung.openliberty.rest.consumes;\n-\n-import java.util.logging.Logger;\n-import javax.ws.rs.core.MultivaluedMap;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.Provider;\n-import org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper;\n-\n-@Provider\n-public class UriNotFoundExceptionMapper implements ResponseExceptionMapper<UriNotFoundException> {\n-    Logger LOG = Logger.getLogger(UriNotFoundException.class.getName());\n-\n-    @Override\n-    public boolean handles(int status, MultivaluedMap<String, Object> headers) {\n-        LOG.info(\"status = \" + status);\n-        return status == 404;\n-    }\n-\n-    @Override\n-    public UriNotFoundException toThrowable(Response response) {\n-        return new UriNotFoundException();\n-    }\n-}\n\ndiff --git a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n--- a/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n+++ b/open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java\n@@ -3,19 +3,17 @@\n import static org.junit.Assert.assertEquals;\n \n import javax.json.bind.JsonbBuilder;\n-import javax.ws.rs.ProcessingException;\n \n import org.junit.BeforeClass;\n import org.junit.Test;\n \n import com.baeldung.openliberty.person.model.Person;\n import com.baeldung.openliberty.rest.consumes.RestConsumer;\n-import com.baeldung.openliberty.rest.consumes.UriNotFoundException;\n \n public class RestClientTest {\n \n     private static String BASE_URL;\n-    \n+\n     private final String PERSON = \"api/person\";\n \n     @BeforeClass\n@@ -24,24 +22,20 @@ public static void oneTimeSetup() {\n     }\n \n     @Test\n-    public void testSuite() throws ProcessingException, UriNotFoundException {\n-        this.testJsonBClientBuilder();\n-        this.testRestClientBuilder();\n-    }\n-\n-    public void testJsonBClientBuilder() {\n+    public void whenConsumeWithJsonb_thenGetPerson() {\n         String url = BASE_URL + \"/\" + PERSON + \"/1\";\n         String result = RestConsumer.consumeWithJsonb(url);        \n-        \n+\n         Person person = JsonbBuilder.create().fromJson(result, Person.class);\n         assert person.getId() == 1;\n         assertEquals(person.getUsername(), \"normanlewis\");\n         assertEquals(person.getEmail(), \"normanlewis@email.com\");\n     }\n-    \n-    public void testRestClientBuilder() throws ProcessingException, UriNotFoundException {\n+\n+    @Test\n+    public void whenConsumeWithRestBuilder_thenGetPerson() {\n         String result = RestConsumer.consumeWithRestBuilder(BASE_URL);        \n-        \n+\n         Person person = JsonbBuilder.create().fromJson(result, Person.class);\n         assert person.getId() == 1;\n         assertEquals(person.getUsername(), \"normanlewis\");",
    "output": "BAEL-3660 - Open Liberty: code cleanup"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-collections/src/test/java/com/baeldung/java/stream/ThreadPoolInParallelStreamIntegrationTest.java b/core-java-modules/core-java-concurrency-collections/src/test/java/com/baeldung/java/stream/ThreadPoolInParallelStreamIntegrationTest.java\n--- a/core-java-modules/core-java-concurrency-collections/src/test/java/com/baeldung/java/stream/ThreadPoolInParallelStreamIntegrationTest.java\n+++ b/core-java-modules/core-java-concurrency-collections/src/test/java/com/baeldung/java/stream/ThreadPoolInParallelStreamIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.streams;\n+package com.baeldung.java.stream;\n \n import org.junit.Test;\n ",
    "output": "BAEL-20927: Migrate core-java-concurrency-collections to com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListAssertJUnitTest.java b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListAssertJUnitTest.java\n--- a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListAssertJUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListAssertJUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.lists;\n+package com.baeldung.java.list;\n \n import org.junit.Test;\n \n\ndiff --git a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListJUnitTest.java b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListJUnitTest.java\n--- a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListJUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListJUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.lists;\n+package com.baeldung.java.list;\n \n import org.junit.Assert;\n import org.junit.Test;\n\ndiff --git a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListTestNgUnitTest.java b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListTestNgUnitTest.java\n--- a/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListTestNgUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-2/src/test/java/com/baeldung/java/list/ListTestNgUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.lists;\n+package com.baeldung.java.list;\n \n import org.junit.Test;\n ",
    "output": "BAEL-20927: Migrate core-java-collections-list-2 to com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/collections/JavaCollectionCleanupUnitTest.java b/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/collections/JavaCollectionCleanupUnitTest.java\n--- a/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/collections/JavaCollectionCleanupUnitTest.java\n+++ b/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/collections/JavaCollectionCleanupUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.collections;\n+package com.baeldung.collections;\n \n import static org.hamcrest.Matchers.hasSize;\n import static org.junit.Assert.assertThat;\n\ndiff --git a/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/list/random/RandomListElementUnitTest.java b/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/list/random/RandomListElementUnitTest.java\n--- a/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/list/random/RandomListElementUnitTest.java\n+++ b/core-java-modules/core-java-collections-list/src/test/java/com/baeldung/list/random/RandomListElementUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung;\n+package com.baeldung.list.random;\n \n import com.google.common.collect.Lists;\n import org.junit.Test;",
    "output": "BAEL-20927: Migrate core-java-collections-list to com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/ArrayListUnitTest.java b/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/ArrayListUnitTest.java\n--- a/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/ArrayListUnitTest.java\n+++ b/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/ArrayListUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.collections;\n+package com.baeldung.collections;\n \n import com.google.common.collect.Sets;\n import org.junit.Before;\n\ndiff --git a/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/CoreJavaCollectionsUnitTest.java b/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/CoreJavaCollectionsUnitTest.java\n--- a/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/CoreJavaCollectionsUnitTest.java\n+++ b/core-java-modules/core-java-collections-array-list/src/test/java/com/baeldung/collections/CoreJavaCollectionsUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.collections;\n+package com.baeldung.collections;\n \n import com.google.common.collect.ImmutableList;\n import org.apache.commons.collections4.ListUtils;",
    "output": "BAEL-20927: Migrate core-java-collections-array-list to com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/main/java/org/baeldung/executable/ExecutableMavenJar.java b/core-java-modules/core-java/src/main/java/org/baeldung/executable/ExecutableMavenJar.java\n--- a/core-java-modules/core-java/src/main/java/org/baeldung/executable/ExecutableMavenJar.java\n+++ b/core-java-modules/core-java/src/main/java/org/baeldung/executable/ExecutableMavenJar.java\n@@ -1,10 +0,0 @@\n-package org.baeldung.executable;\n-\n-import javax.swing.*;\n-\n-public class ExecutableMavenJar {\n-\n-    public static void main(String[] args) {\n-        JOptionPane.showMessageDialog(null, \"It worked!\", \"Executable Jar with Maven\", 1);\n-    }\n-}\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/JavaTimerLongRunningUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/JavaTimerLongRunningUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/JavaTimerLongRunningUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/JavaTimerLongRunningUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java;\n+package com.baeldung;\n \n import org.junit.Test;\n import org.slf4j.Logger;\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/arrays/ArraysJoinAndSplitJUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/arrays/ArraysJoinAndSplitJUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/arrays/ArraysJoinAndSplitJUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/arrays/ArraysJoinAndSplitJUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.arrays;\n+package com.baeldung.arrays;\n \n import java.util.Arrays;\n \n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/rawtypes/RawTypesUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/rawtypes/RawTypesUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/rawtypes/RawTypesUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/rawtypes/RawTypesUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.rawtypes;\n+package com.baeldung.rawtypes;\n \n import java.util.ArrayList;\n import java.util.List;\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/sandbox/SandboxJavaManualTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/sandbox/SandboxJavaManualTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/sandbox/SandboxJavaManualTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/sandbox/SandboxJavaManualTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.sandbox;\n+package com.baeldung.sandbox;\n \n import org.junit.Test;\n import org.slf4j.Logger;",
    "output": "BAEL-20927: Migrate core-java to com.baeldung package"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-neo4j/src/main/java/com/baeldung/spring/data/neo4j/config/MovieDatabaseNeo4jConfiguration.java b/persistence-modules/spring-data-neo4j/src/main/java/com/baeldung/spring/data/neo4j/config/MovieDatabaseNeo4jConfiguration.java\n--- a/persistence-modules/spring-data-neo4j/src/main/java/com/baeldung/spring/data/neo4j/config/MovieDatabaseNeo4jConfiguration.java\n+++ b/persistence-modules/spring-data-neo4j/src/main/java/com/baeldung/spring/data/neo4j/config/MovieDatabaseNeo4jConfiguration.java\n@@ -16,8 +16,7 @@ public class MovieDatabaseNeo4jConfiguration {\n \n     @Bean\n     public org.neo4j.ogm.config.Configuration getConfiguration() {\n-    \torg.neo4j.ogm.config.Configuration config = new Builder().uri(URL).build();\n-        return config;\n+    \treturn new Builder().uri(URL).build();\n     }\n \n     @Bean",
    "output": "Redundant Variable 'config'\n\nInstead of initializing a local variable first and then return it, you could directly return a new Builder instance.\r\n\r\n-> return new Builder().uri(URL).build();"
  },
  {
    "input": "diff --git a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n--- a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n+++ b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernate/logging/HibernateLoggingIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.hibernatelogging;\n+package com.baeldung.hibernate.logging;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;",
    "output": "BAEL-3387 Moved test class to the correct package (#8533)"
  },
  {
    "input": "diff --git a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n--- a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n+++ b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/BruteForcePrimeChecker.java\n@@ -7,7 +7,7 @@ public class BruteForcePrimeChecker implements PrimeChecker<Integer> {\n     @Override\n     public boolean isPrime(Integer number) {\n \n-        return number > 2 ? IntStream.range(2, number)\n+        return number > 1 ? IntStream.range(2, number)\n             .noneMatch(n -> (number % n == 0)) : false;\n     }\n \n\ndiff --git a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n--- a/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n+++ b/java-numbers-2/src/main/java/com/baeldung/algorithms/primechecker/OptimisedPrimeChecker.java\n@@ -6,7 +6,7 @@ public class OptimisedPrimeChecker implements PrimeChecker<Integer> {\n \n     @Override\n     public boolean isPrime(Integer number) {\n-        return number > 2 ? IntStream.rangeClosed(2, (int) Math.sqrt(number))\n+        return number > 1 ? IntStream.rangeClosed(2, (int) Math.sqrt(number))\n             .noneMatch(n -> (number % n == 0)) : false;\n     }\n \n\ndiff --git a/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java b/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n--- a/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n+++ b/java-numbers-2/src/test/java/com/baeldung/algorithms/primechecker/PrimeCheckerUnitTest.java\n@@ -11,22 +11,24 @@ public class PrimeCheckerUnitTest {\n \n     @Test\n     public void whenCheckIsPrime_thenTrue() {\n-        assertTrue(primeChecker.isPrime(13l));\n+        assertTrue(primeChecker.isPrime(2L));\n+        assertTrue(primeChecker.isPrime(13L));\n         assertTrue(primeChecker.isPrime(1009L));\n         assertTrue(primeChecker.isPrime(74207281L));\n     }\n \n     @Test\n     public void whenCheckIsPrime_thenFalse() {\n-        assertTrue(!primeChecker.isPrime(50L));\n-        assertTrue(!primeChecker.isPrime(1001L));\n-        assertTrue(!primeChecker.isPrime(74207282L));\n+        assertFalse(primeChecker.isPrime(50L));\n+        assertFalse(primeChecker.isPrime(1001L));\n+        assertFalse(primeChecker.isPrime(74207282L));\n     }\n \n     private final BruteForcePrimeChecker bfPrimeChecker = new BruteForcePrimeChecker();\n \n     @Test\n     public void whenBFCheckIsPrime_thenTrue() {\n+        assertTrue(bfPrimeChecker.isPrime(2));\n         assertTrue(bfPrimeChecker.isPrime(13));\n         assertTrue(bfPrimeChecker.isPrime(1009));\n     }\n@@ -41,6 +43,7 @@ public void whenBFCheckIsPrime_thenFalse() {\n \n     @Test\n     public void whenOptCheckIsPrime_thenTrue() {\n+        assertTrue(optimisedPrimeChecker.isPrime(2));\n         assertTrue(optimisedPrimeChecker.isPrime(13));\n         assertTrue(optimisedPrimeChecker.isPrime(1009));\n     }\n@@ -55,6 +58,7 @@ public void whenOptCheckIsPrime_thenFalse() {\n \n     @Test\n     public void whenPrimesCheckIsPrime_thenTrue() {\n+        assertTrue(primesPrimeChecker.isPrime(2));\n         assertTrue(primesPrimeChecker.isPrime(13));\n         assertTrue(primesPrimeChecker.isPrime(1009));\n     }",
    "output": "BAEL-3778: Add tests to verify if 2 is prime number or not (#8520)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n--- a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n@@ -43,7 +43,7 @@ public void givenMultipleStrings_whenConcatUsingStringFormat_checkStringCorrect(\n             \"oops\");\n \n \n-    assertEquals(\"I ate 2,51 blueberry pies, oops...\", myString);\n+    assertEquals(\"I ate 2.51 blueberry pies, oops...\", myString);\n   }\n \n   @Test",
    "output": "Undo the test fixing because is a wrong behavior in Windows"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-operations-2/src/main/java/com/baeldung/containscaseinsensitive/ContainsWorkarounds.java b/core-java-modules/core-java-string-operations-2/src/main/java/com/baeldung/containscaseinsensitive/ContainsWorkarounds.java\n--- a/core-java-modules/core-java-string-operations-2/src/main/java/com/baeldung/containscaseinsensitive/ContainsWorkarounds.java\n+++ b/core-java-modules/core-java-string-operations-2/src/main/java/com/baeldung/containscaseinsensitive/ContainsWorkarounds.java\n@@ -0,0 +1,84 @@\n+package com.baeldung.containscaseinsensitive;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+/**\n+ * Based on https://github.com/tedyoung/indexof-contains-benchmark\n+ */\n+@Fork(5)\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class ContainsWorkarounds {\n+\n+    private String src;\n+    private String dest;\n+    private Pattern pattern;\n+\n+    public static void main(String[] args) throws Exception {\n+        org.openjdk.jmh.Main.main(args);\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        src = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\";\n+        dest = \"eiusmod\";\n+        pattern = Pattern.compile(Pattern.quote(dest), Pattern.CASE_INSENSITIVE);\n+    }\n+\n+    // toLowerCase() and contains()\n+    @Benchmark\n+    public boolean lowerCaseContains() {\n+        return src.toLowerCase()\n+            .contains(dest.toLowerCase());\n+    }\n+\n+    // matches() with Regular Expressions\n+    @Benchmark\n+    public boolean matchesRegularExpression() {\n+        return src.matches(\"(?i).*\" + dest + \".*\");\n+    }\n+\n+    // String regionMatches()\n+    @Benchmark\n+    public boolean regionMatches() {\n+\n+        final char firstLo = Character.toLowerCase(dest.charAt(0));\n+        final char firstUp = Character.toUpperCase(dest.charAt(0));\n+\n+        for (int i = src.length() - dest.length(); i >= 0; i--) {\n+            final char ch = src.charAt(i);\n+            if (ch != firstLo && ch != firstUp)\n+                continue;\n+\n+            if (src.regionMatches(true, i, dest, 0, dest.length()))\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    // Pattern CASE_INSENSITIVE with regexp\n+    @Benchmark\n+    public boolean patternCaseInsensitiveRegexp() {\n+        return pattern.matcher(src)\n+            .find();\n+    }\n+\n+    // Apache Commons StringUtils containsIgnoreCase\n+    @Benchmark\n+    public boolean apacheCommonsStringUtils() {\n+        return org.apache.commons.lang3.StringUtils.containsIgnoreCase(src, dest);\n+    }\n+\n+}",
    "output": "Add JMH dependency and shade the jar. Include examples to avoid contains() case insensitive behavior"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n--- a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java\n@@ -43,7 +43,7 @@ public void givenMultipleStrings_whenConcatUsingStringFormat_checkStringCorrect(\n             \"oops\");\n \n \n-    assertEquals(\"I ate 2.51 blueberry pies, oops...\", myString);\n+    assertEquals(\"I ate 2,51 blueberry pies, oops...\", myString);\n   }\n \n   @Test",
    "output": "Fix one of the tests modifying \",\" by \".\""
  },
  {
    "input": "diff --git a/libraries-3/src/main/java/com/baeldung/cactoos/CactoosCollectionUtils.java b/libraries-3/src/main/java/com/baeldung/cactoos/CactoosCollectionUtils.java\n--- a/libraries-3/src/main/java/com/baeldung/cactoos/CactoosCollectionUtils.java\n+++ b/libraries-3/src/main/java/com/baeldung/cactoos/CactoosCollectionUtils.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.cactoos;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.cactoos.collection.Filtered;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.scalar.And;\n+import org.cactoos.text.FormattedText;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CactoosCollectionUtils {\n+\n+\tfinal Logger LOGGER = LoggerFactory.getLogger(CactoosCollectionUtils.class);\n+\n+\tpublic void iterateCollection(List<String> strings) throws Exception {\n+\t\tnew And((String input) -> LOGGER.info(new FormattedText(\"%s\\n\", input).asString()), strings).value();\n+\t}\n+\n+\tpublic Collection<String> getFilteredList(List<String> strings) {\n+\t\tCollection<String> filteredStrings = new ListOf<>(\n+\t\t\t\tnew Filtered<>(string -> string.length() == 5, new IterableOf<>(strings)));\n+\t\treturn filteredStrings;\n+\t}\n+\n+}\n\ndiff --git a/libraries-3/src/main/java/com/baeldung/cactoos/CactoosStringUtils.java b/libraries-3/src/main/java/com/baeldung/cactoos/CactoosStringUtils.java\n--- a/libraries-3/src/main/java/com/baeldung/cactoos/CactoosStringUtils.java\n+++ b/libraries-3/src/main/java/com/baeldung/cactoos/CactoosStringUtils.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.cactoos;\n+\n+import java.io.IOException;\n+\n+import org.cactoos.text.FormattedText;\n+import org.cactoos.text.IsBlank;\n+import org.cactoos.text.Lowered;\n+import org.cactoos.text.TextOf;\n+import org.cactoos.text.Upper;\n+\n+public class CactoosStringUtils {\n+\n+\tpublic String createString() throws IOException {\n+\t\tString testString = new TextOf(\"Test String\").asString();\n+\t\treturn testString;\n+\t}\n+\n+\tpublic String createdFormattedString(String stringToFormat) throws IOException {\n+\t\tString formattedString = new FormattedText(\"Hello %s\", stringToFormat).asString();\n+\t\treturn formattedString;\n+\t}\n+\n+\tpublic String toLowerCase(String testString) throws IOException {\n+\t\tString lowerCaseString = new Lowered(new TextOf(testString)).asString();\n+\t\treturn lowerCaseString;\n+\t}\n+\n+\tpublic String toUpperCase(String testString) throws Exception {\n+\t\tString upperCaseString = new Upper(new TextOf(testString)).asString();\n+\t\treturn upperCaseString;\n+\t}\n+\n+\tpublic boolean isBlank(String testString) throws Exception {\n+\t\treturn new IsBlank(new TextOf(testString)) != null;\n+\t}\n+\n+}\n\ndiff --git a/libraries-3/src/test/java/com/baeldung/cactoos/CactoosCollectionUtilsUnitTest.java b/libraries-3/src/test/java/com/baeldung/cactoos/CactoosCollectionUtilsUnitTest.java\n--- a/libraries-3/src/test/java/com/baeldung/cactoos/CactoosCollectionUtilsUnitTest.java\n+++ b/libraries-3/src/test/java/com/baeldung/cactoos/CactoosCollectionUtilsUnitTest.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.cactoos;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import org.junit.Test;\n+\n+public class CactoosCollectionUtilsUnitTest {\n+\n+\t@Test\n+\tpublic void whenFilteredClassIsCalledWithSpecificArgs_thenCorrespondingFilteredCollectionShouldBeReturned() throws IOException {\n+\n+\t\tCactoosCollectionUtils obj = new CactoosCollectionUtils();\n+\n+\t\t// when\n+\t\tList<String> strings = new ArrayList<String>() { \n+            { \n+                add(\"Hello\"); \n+                add(\"John\"); \n+                add(\"Smith\"); \n+                add(\"Eric\");\n+                add(\"Dizzy\");\n+            } \n+        }; \n+\t\tint size = obj.getFilteredList(strings).size();\n+\n+\t\t// then\n+\t\tassertEquals(3, size);\n+\n+\t}\n+\n+}\n\ndiff --git a/libraries-3/src/test/java/com/baeldung/cactoos/CactoosStringUtilsUnitTest.java b/libraries-3/src/test/java/com/baeldung/cactoos/CactoosStringUtilsUnitTest.java\n--- a/libraries-3/src/test/java/com/baeldung/cactoos/CactoosStringUtilsUnitTest.java\n+++ b/libraries-3/src/test/java/com/baeldung/cactoos/CactoosStringUtilsUnitTest.java\n@@ -0,0 +1,54 @@\n+package com.baeldung.cactoos;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+\n+public class CactoosStringUtilsUnitTest {\n+\n+\t@Test\n+\tpublic void whenFormattedTextIsPassedWithArgs_thenFormattedStringIsReturned() throws IOException {\n+\n+\t\tCactoosStringUtils obj = new CactoosStringUtils();\n+\n+\t\t// when\n+\t\tString formattedString = obj.createdFormattedString(\"John\");\n+\n+\t\t// then\n+\t\tassertEquals(\"Hello John\", formattedString);\n+\n+\t}\n+\t\n+\t@Test\n+\tpublic void whenStringIsPassesdToLoweredOrUpperClass_thenCorrespondingStringIsReturned() throws Exception {\n+\n+\t\tCactoosStringUtils obj = new CactoosStringUtils();\n+\n+\t\t// when\n+\t\tString lowerCaseString = obj.toLowerCase(\"TeSt StrIng\");\n+\t\tString upperCaseString = obj.toUpperCase(\"TeSt StrIng\");\n+\n+\t\t// then\n+\t\tassertEquals(\"test string\", lowerCaseString);\n+\t\tassertEquals(\"TEST STRING\", upperCaseString);\n+\n+\t}\n+\t\n+\t@Test\n+\tpublic void whenEmptyStringIsPassesd_thenIsBlankReturnsTrue() throws Exception {\n+\n+\t\tCactoosStringUtils obj = new CactoosStringUtils();\n+\n+\t\t// when\n+\t\tboolean isBlankEmptyString = obj.isBlank(\"\");\n+\t\tboolean isBlankNull = obj.isBlank(null);\n+\n+\t\t// then\n+\t\tassertEquals(true, isBlankEmptyString);\n+\t\tassertEquals(true, isBlankNull);\n+\n+\t}\n+\n+}",
    "output": "BAEL-3597 Cactoos (#8512)\n\n* BAEL-3597 Cactoos\r\n\r\n* BAEL-3597 Cactoos\r\n\r\n* BAEL-3597 Cactoos\r\n\r\n* BAEL-3597 Cactoos"
  },
  {
    "input": "diff --git a/intelliJ/remote-debugging/src/main/java/hello/Application.java b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/Application.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n@@ -1,14 +0,0 @@\n-package hello;\n-\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.scheduling.annotation.EnableScheduling;\n-\n-@SpringBootApplication\n-@EnableScheduling\n-public class Application {\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(Application.class);\n-    }\n-}\n\ndiff --git a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2012-2015 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package hello;\n-\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class ScheduledTasks {\n-\n-    private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);\n-\n-    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n-\n-    @Scheduled(fixedRate = 5000)\n-    public void reportCurrentTime() {\n-        log.info(\"The time is now {}\", dateFormat.format(new Date()));\n-    }\n-}",
    "output": "Bael-3391 - Removing Spring Boot template"
  },
  {
    "input": "diff --git a/intelliJ/remote-debugging/src/main/java/hello/Application.java b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/Application.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n@@ -0,0 +1,14 @@\n+package hello;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+\n+@SpringBootApplication\n+@EnableScheduling\n+public class Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class);\n+    }\n+}\n\ndiff --git a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package hello;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ScheduledTasks {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);\n+\n+    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n+\n+    @Scheduled(fixedRate = 5000)\n+    public void reportCurrentTime() {\n+        log.info(\"The time is now {}\", dateFormat.format(new Date()));\n+    }\n+}",
    "output": "Revert"
  },
  {
    "input": "diff --git a/intelliJ/remote-debugging/src/main/java/hello/Application.java b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/Application.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n@@ -1,14 +0,0 @@\n-package hello;\n-\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.scheduling.annotation.EnableScheduling;\n-\n-@SpringBootApplication\n-@EnableScheduling\n-public class Application {\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(Application.class);\n-    }\n-}\n\ndiff --git a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2012-2015 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package hello;\n-\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class ScheduledTasks {\n-\n-    private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);\n-\n-    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n-\n-    @Scheduled(fixedRate = 5000)\n-    public void reportCurrentTime() {\n-        log.info(\"The time is now {}\", dateFormat.format(new Date()));\n-    }\n-}",
    "output": "Bael-3391 - Removing Spring Boot template"
  },
  {
    "input": "diff --git a/data-structures/src/test/java/com/baeldung/bigqueue/BigQueueLiveTest.java b/data-structures/src/test/java/com/baeldung/bigqueue/BigQueueLiveTest.java\n--- a/data-structures/src/test/java/com/baeldung/bigqueue/BigQueueLiveTest.java\n+++ b/data-structures/src/test/java/com/baeldung/bigqueue/BigQueueLiveTest.java\n@@ -0,0 +1,82 @@\n+package com.baeldung.bigqueue;\n+\n+import com.leansoft.bigqueue.BigQueueImpl;\n+import com.leansoft.bigqueue.IBigQueue;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class BigQueueLiveTest {\n+\n+    private IBigQueue bigQueue;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        String queueDir = System.getProperty(\"user.home\");\n+        String queueName = \"baeldung-queue\";\n+        bigQueue = new BigQueueImpl(queueDir, queueName);\n+    }\n+\n+    @After\n+    public void emptyQueue() throws IOException {\n+        bigQueue.removeAll();\n+        bigQueue.gc();\n+        bigQueue.close();\n+    }\n+\n+    @Test\n+    public void whenAddingRecords_ThenTheSizeIsCorrect() throws IOException {\n+        for (int i = 1; i <= 100; i++) {\n+            bigQueue.enqueue(String.valueOf(i).getBytes());\n+        }\n+\n+        assertEquals(100, bigQueue.size());\n+    }\n+\n+    @Test\n+    public void whenAddingRecords_ThenTheyCanBeRetrieved() throws IOException {\n+        bigQueue.enqueue(String.valueOf(\"new_record\").getBytes());\n+\n+        String record = new String(bigQueue.dequeue());\n+        assertEquals(\"new_record\", record);\n+    }\n+\n+    @Test\n+    public void whenDequeueingRecords_ThenTheyAreConsumed() throws IOException {\n+        for (int i = 1; i <= 100; i++) {\n+            bigQueue.enqueue(String.valueOf(i).getBytes());\n+        }\n+        bigQueue.dequeue();\n+\n+        assertEquals(99, bigQueue.size());\n+    }\n+\n+    @Test\n+    public void whenPeekingRecords_ThenSizeDoesntChange() throws IOException {\n+        for (int i = 1; i <= 100; i++) {\n+            bigQueue.enqueue(String.valueOf(i).getBytes());\n+        }\n+        String firstRecord = new String(bigQueue.peek());\n+\n+        assertEquals(\"1\", firstRecord);\n+        assertEquals(100, bigQueue.size());\n+    }\n+\n+    @Test\n+    public void whenEmptyingTheQueue_ThenItSizeIs0() throws IOException {\n+        for (int i = 1; i <= 100; i++) {\n+            bigQueue.enqueue(String.valueOf(i).getBytes());\n+        }\n+        bigQueue.removeAll();\n+\n+        assertEquals(0, bigQueue.size());\n+    }\n+\n+}",
    "output": "[BAEL-3463] - Big Queue (#8517)"
  },
  {
    "input": "diff --git a/java-numbers-3/src/main/java/com/baeldung/randomnumbers/RandomNumbersGenerator.java b/java-numbers-3/src/main/java/com/baeldung/randomnumbers/RandomNumbersGenerator.java\n--- a/java-numbers-3/src/main/java/com/baeldung/randomnumbers/RandomNumbersGenerator.java\n+++ b/java-numbers-3/src/main/java/com/baeldung/randomnumbers/RandomNumbersGenerator.java\n@@ -70,12 +70,24 @@ public Integer generateRandomWithSplittableRandom(int min, int max) {\n         return randomWithSplittableRandom;\n     }\n \n+    public IntStream generateRandomWithSplittableRandomLimitedIntStreamWithinARange(int min, int max, long streamSize) {\n+        SplittableRandom splittableRandom = new SplittableRandom();\n+        IntStream limitedIntStreamWithinARangeWithSplittableRandom = splittableRandom.ints(streamSize, min, max);\n+        return limitedIntStreamWithinARangeWithSplittableRandom;\n+    }\n+\n     public Integer generateRandomWithSecureRandom() {\n         SecureRandom secureRandom = new SecureRandom();\n         int randomWithSecureRandom = secureRandom.nextInt();\n         return randomWithSecureRandom;\n     }\n \n+    public Integer generateRandomWithSecureRandomWithinARange(int min, int max) {\n+        SecureRandom secureRandom = new SecureRandom();\n+        int randomWithSecureRandomWithinARange = secureRandom.nextInt(max - min) + min;\n+        return randomWithSecureRandomWithinARange;\n+    }\n+\n     public Integer generateRandomWithRandomDataGenerator(int min, int max) {\n         RandomDataGenerator randomDataGenerator = new RandomDataGenerator();\n         int randomWithRandomDataGenerator = randomDataGenerator.nextInt(min, max);\n\ndiff --git a/java-numbers-3/src/test/java/com/baeldung/randomnumbers/RandomNumbersGeneratorUnitTest.java b/java-numbers-3/src/test/java/com/baeldung/randomnumbers/RandomNumbersGeneratorUnitTest.java\n--- a/java-numbers-3/src/test/java/com/baeldung/randomnumbers/RandomNumbersGeneratorUnitTest.java\n+++ b/java-numbers-3/src/test/java/com/baeldung/randomnumbers/RandomNumbersGeneratorUnitTest.java\n@@ -11,6 +11,7 @@ public class RandomNumbersGeneratorUnitTest {\n \n     private static final int MIN_RANGE = 1;\n     private static final int MAX_RANGE = 10;\n+    private static final int MIN_RANGE_NEGATIVE = -10;    \n     private static final int ITERATIONS = 50;\n     private static final long STREAM_SIZE = 50;\n \n@@ -19,7 +20,7 @@ public void whenGenerateRandomWithMathRandom_returnsSuccessfully() {\n         RandomNumbersGenerator generator = new RandomNumbersGenerator();\n         for (int i = 0; i < ITERATIONS; i++) {\n             int randomNumer = generator.generateRandomWithMathRandom(MIN_RANGE, MAX_RANGE);\n-            assertTrue(isInRange(randomNumer, Integer.MIN_VALUE, Integer.MAX_VALUE));\n+            assertTrue(isInRange(randomNumer, MIN_RANGE, MAX_RANGE));\n         }\n     }\n \n@@ -97,10 +98,17 @@ public void whenGenerateRandomWithThreadLocalRandomFromZero_returnsSuccessfully(\n     public void whenGenerateRandomWithSplittableRandom_returnsSuccessfully() {\n         RandomNumbersGenerator generator = new RandomNumbersGenerator();\n         for (int i = 0; i < ITERATIONS; i++) {\n-            int randomNumber = generator.generateRandomWithSplittableRandom(MIN_RANGE, MAX_RANGE);\n-            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n+            int randomNumber = generator.generateRandomWithSplittableRandom(MIN_RANGE_NEGATIVE, MAX_RANGE);\n+            assertTrue(isInRange(randomNumber, MIN_RANGE_NEGATIVE, MAX_RANGE));\n         }\n     }\n+    \n+    @Test\n+    public void whenGenerateRandomWithSplittableRandomLimitedIntStreamWithinARange_returnsSuccessfully() {\n+        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n+        generator.generateRandomWithSplittableRandomLimitedIntStreamWithinARange(MIN_RANGE, MAX_RANGE, STREAM_SIZE)\n+            .forEach(randomNumber -> assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE)));\n+    }        \n \n     @Test\n     public void whenGenerateRandomWithSecureRandom_returnsSuccessfully() {\n@@ -110,6 +118,15 @@ public void whenGenerateRandomWithSecureRandom_returnsSuccessfully() {\n             assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE));\n         }\n     }\n+    \n+    @Test\n+    public void whenGenerateRandomWithSecureRandomWithinARange_returnsSuccessfully() {\n+        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            int randomNumber = generator.generateRandomWithSecureRandomWithinARange(MIN_RANGE, MAX_RANGE);\n+            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n+        }\n+    }\n \n     @Test\n     public void whenGenerateRandomWithRandomDataGenerator_returnsSuccessfully() {",
    "output": "BAEL-3678 - Moving from java-numbers-2 to java-numbers-3 (#8521)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n@@ -6,11 +6,13 @@\n \r\n public class TextBlocksUnitTest {\r\n \r\n+    private static final String JSON_STRING = \"{\\r\\n\" + \"\\\"name\\\" : \\\"Baeldung\\\",\\r\\n\" + \"\\\"website\\\" : \\\"https://www.%s.com/\\\"\\r\\n\" + \"}\";\r\n+\r\n     @SuppressWarnings(\"preview\")\r\n     private static final String TEXT_BLOCK_JSON = \"\"\"\r\n             {\r\n             \"name\" : \"Baeldung\",\r\n-            \"website\" : \"https://www.baeldung.com/\"\r\n+            \"website\" : \"https://www.%s.com/\"\r\n             }\r\n         \"\"\";\r\n \r\n@@ -22,4 +24,16 @@ public void whenTextBlocks_thenStringOperationsWork() {\n         assertThat(TEXT_BLOCK_JSON.length()).isGreaterThan(0);\r\n \r\n     }\r\n+\r\n+    @SuppressWarnings(\"removal\")\r\n+    @Test\r\n+    public void whenTextBlocks_thenFormattedWorksAsFormat() {\r\n+        assertThat(TEXT_BLOCK_JSON.formatted(\"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+        assertThat(String.format(JSON_STRING, \"baeldung\")\r\n+            .contains(\"www.baeldung.com\")).isTrue();\r\n+\r\n+    }\r\n+   \r\n }\r",
    "output": "BAEL-3602 : Added test for formatted()"
  },
  {
    "input": "diff --git a/persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceJPAConfig.java b/persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceJPAConfig.java\n--- a/persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceJPAConfig.java\n+++ b/persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceJPAConfig.java\n@@ -15,6 +15,7 @@\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.jdbc.datasource.DriverManagerDataSource;\n import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.orm.jpa.JpaVendorAdapter;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n import org.springframework.transaction.PlatformTransactionManager;\n@@ -39,12 +40,12 @@ public PersistenceJPAConfig() {\n     // beans\n \n     @Bean\n-    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n         final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource());\n         em.setPackagesToScan(new String[] { \"com.baeldung.persistence.model\" });\n \n-        final HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+        final JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n         em.setJpaVendorAdapter(vendorAdapter);\n         em.setJpaProperties(additionalProperties());\n \n\ndiff --git a/persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/persistence/service/transactional/PersistenceTransactionalTestConfig.java b/persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/persistence/service/transactional/PersistenceTransactionalTestConfig.java\n--- a/persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/persistence/service/transactional/PersistenceTransactionalTestConfig.java\n+++ b/persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/persistence/service/transactional/PersistenceTransactionalTestConfig.java\n@@ -14,6 +14,7 @@\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.jdbc.datasource.DriverManagerDataSource;\n import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.orm.jpa.JpaVendorAdapter;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n import org.springframework.transaction.PlatformTransactionManager;\n@@ -91,12 +92,12 @@ public static void clearSpy(){\n     // beans\n \n     @Bean\n-    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n         final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource());\n         em.setPackagesToScan(new String[] { \"com.baeldung.persistence.model\" });\n \n-        final HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+        final JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n         em.setJpaVendorAdapter(vendorAdapter);\n         em.setJpaProperties(additionalProperties());\n ",
    "output": "BAEL-3729: Use entityManagerFactory method name to match the code in the article (#8519)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-nio-2/src/test/java/com/baeldung/lock/FileLocksTest.java b/core-java-modules/core-java-nio-2/src/test/java/com/baeldung/lock/FileLocksTest.java\n--- a/core-java-modules/core-java-nio-2/src/test/java/com/baeldung/lock/FileLocksTest.java\n+++ b/core-java-modules/core-java-nio-2/src/test/java/com/baeldung/lock/FileLocksTest.java\n@@ -26,7 +26,7 @@ void givenAnInputStream_whenGetWriteLock_throwNonWritableChannelException() {\n \t}\n \t\n \t/**\n-\t * Getting and exclusive lock from a RandomAccessFile\n+\t * Getting an exclusive lock from a RandomAccessFile\n \t * @throws IOException\n \t */\n \t@Test\n@@ -48,6 +48,18 @@ void givenAPath_whenGetExclusiveLock_lock() throws IOException {\n \t}\n \t\n \t\n+\t// Shared locks\n+\t\n+\t/**\n+\t * Getting a shared (read) lock on the entire file.\n+\t * Fails when getting the lock from a FileChannel obtained through a FileOutputStream.\n+\t */\n+\t@Test\n+\tvoid givenAFileOutputStream_whenGetSharedLock_throwNonReadableChannelException() {\n+\t\tassertThrows(NonReadableChannelException.class, \n+\t\t\t\t() -> FileLocks.getReadLockFromOutputStream(0, 10));\n+\t}\n+\t\n \t/**\n \t * Getting a shared (read) lock works fine when getting the lock from a FileChannel obtained through a FileInputStream.\n \t * @throws IOException\n@@ -60,13 +72,10 @@ void givenAnInputStream_whenGetSharedLock_lock() throws IOException {\n \t\t\n \t}\n \t\n-\t\n-\t@Test\n-\tvoid givenAFileOutputStream_whenGetSharedLock_throwNonReadableChannelException() {\n-\t\tassertThrows(NonReadableChannelException.class, \n-\t\t\t\t() -> FileLocks.getReadLockFromOutputStream(0, 10));\n-\t}\n-\t\n+\t/**\n+\t * Getting a shared lock from a RandomAccessFile\n+\t * @throws IOException\n+\t */\n \t@Test\n \tvoid givenARandomAccessFile_whenGetSharedLock_lock() throws IOException {\n \t\tFileLock lock = FileLocks.getReadLockFromRandomAccessFile(0,  10);",
    "output": "Added comments on unit tests."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n--- a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n+++ b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n@@ -1,6 +1,11 @@\n package com.baeldung.jndi.exceptions;\n \n-import org.junit.Ignore;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import javax.naming.InitialContext;\n+import javax.naming.NameNotFoundException;\n+import javax.naming.NoInitialContextException;\n+\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.MethodOrderer;\n import org.junit.jupiter.api.Order;\n@@ -9,16 +14,10 @@\n import org.springframework.jndi.JndiTemplate;\n import org.springframework.mock.jndi.SimpleNamingContextBuilder;\n \n-import javax.naming.InitialContext;\n-import javax.naming.NameNotFoundException;\n-import javax.naming.NoInitialContextException;\n-\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class JndiExceptionsUnitTest {\n \n-\t@Disabled\n+    @Disabled\n     @Test\n     @Order(1)\n     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {",
    "output": "BAEL-20665 Submodules not building\n\n- Further fixes"
  },
  {
    "input": "diff --git a/spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java b/spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java\n--- a/spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java\n+++ b/spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java\n@@ -18,7 +18,7 @@\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = { SpringBootSecurityApplication.class })\n-public class ResourceControllerTest {\n+public class ResourceControllerUnitTest {\n \n     private MockMvc mockMvc;\n ",
    "output": "BAEL-20665 Submodules not building\n\n- Further fixes"
  },
  {
    "input": "diff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ConsoleCallbackHandler.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ConsoleCallbackHandler.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ConsoleCallbackHandler.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ConsoleCallbackHandler.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.security.jaas.app;\n+\n+import javax.security.auth.callback.*;\n+import java.io.Console;\n+import java.io.IOException;\n+\n+public class ConsoleCallbackHandler implements CallbackHandler {\n+\n+    @Override\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+        Console console = System.console();\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof NameCallback) {\n+                NameCallback nameCallback = (NameCallback) callback;\n+                nameCallback.setName(console.readLine(nameCallback.getPrompt()));\n+            } else if (callback instanceof PasswordCallback) {\n+                PasswordCallback passwordCallback = (PasswordCallback) callback;\n+                passwordCallback.setPassword(console.readPassword(passwordCallback.getPrompt()));\n+            } else {\n+                throw new UnsupportedCallbackException(callback);\n+            }\n+        }\n+    }\n+}\n\ndiff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthentication.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthentication.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthentication.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthentication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.security.jaas.app;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginException;\n+\n+public class JaasAuthentication {\n+\n+    public static void main(String[] args) throws LoginException {\n+        LoginService loginService = new LoginService();\n+        Subject subject = loginService.login();\n+        System.out.println(subject.getPrincipals().iterator().next() + \" sucessfully logeed in\");\n+    }\n+}\n\ndiff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthorization.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthorization.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthorization.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/JaasAuthorization.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.security.jaas.app;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginException;\n+import java.security.PrivilegedAction;\n+\n+public class JaasAuthorization {\n+\n+    public static void main(String[] args) throws LoginException {\n+\n+        LoginService loginService = new LoginService();\n+        Subject subject = loginService.login();\n+\n+        PrivilegedAction privilegedAction = new ResourceAction();\n+        Subject.doAsPrivileged(subject, privilegedAction, null);\n+    }\n+}\n\ndiff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/LoginService.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/LoginService.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/LoginService.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/LoginService.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.security.jaas.app;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+\n+public class LoginService {\n+\n+    public Subject login() throws LoginException {\n+        LoginContext loginContext = new LoginContext(\"jaasApplication\", new ConsoleCallbackHandler());\n+        loginContext.login();\n+        return loginContext.getSubject();\n+    }\n+}\n\ndiff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourceAction.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourceAction.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourceAction.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourceAction.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.security.jaas.app;\n+\n+import java.security.PrivilegedAction;\n+\n+public class ResourceAction implements PrivilegedAction {\n+    @Override\n+    public Object run() {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new ResourcePermission(\"test_resource\"));\n+        }\n+        System.out.println(\"I have access to test_resource !\");\n+        return null;\n+    }\n+}\n\ndiff --git a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourcePermission.java b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourcePermission.java\n--- a/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourcePermission.java\n+++ b/security-jaas/jaas-app/src/main/java/com/baeldung/security/jaas/app/ResourcePermission.java\n@@ -0,0 +1,9 @@\n+package com.baeldung.security.jaas.app;\n+\n+import java.security.BasicPermission;\n+\n+public class ResourcePermission extends BasicPermission {\n+    public ResourcePermission(String name) {\n+        super(name);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/security-jaas/jaas-login-module/src/main/java/com/baeldung/security/jaas/authentication/InMemoryLoginModule.java b/security-jaas/jaas-login-module/src/main/java/com/baeldung/security/jaas/authentication/InMemoryLoginModule.java\n--- a/security-jaas/jaas-login-module/src/main/java/com/baeldung/security/jaas/authentication/InMemoryLoginModule.java\n+++ b/security-jaas/jaas-login-module/src/main/java/com/baeldung/security/jaas/authentication/InMemoryLoginModule.java\n@@ -0,0 +1,76 @@\n+package com.baeldung.security.jaas.authentication;\n+\n+import com.sun.security.auth.UserPrincipal;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.callback.*;\n+import javax.security.auth.login.LoginException;\n+import javax.security.auth.spi.LoginModule;\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.Map;\n+\n+public class InMemoryLoginModule implements LoginModule {\n+\n+    private static final String USERNAME = \"testuser\";\n+    private static final String PASSWORD = \"testpassword\";\n+\n+    private Subject subject;\n+    private CallbackHandler callbackHandler;\n+    private Map<String, ?> sharedState;\n+    private Map<String, ?> options;\n+\n+    private String username;\n+    private boolean loginSucceeded = false;\n+    private Principal userPrincipal;\n+\n+    @Override\n+    public void initialize(Subject subject,\n+                           CallbackHandler callbackHandler,\n+                           Map<String, ?> sharedState,\n+                           Map<String, ?> options) {\n+        this.subject = subject;\n+        this.callbackHandler = callbackHandler;\n+        this.sharedState = sharedState;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean login() throws LoginException {\n+        NameCallback nameCallback = new NameCallback(\"username: \");\n+        PasswordCallback passwordCallback = new PasswordCallback(\"password: \", false);\n+        try {\n+            callbackHandler.handle(new Callback[]{nameCallback, passwordCallback});\n+            username = nameCallback.getName();\n+            String password = new String(passwordCallback.getPassword());\n+            if (USERNAME.equals(username) && PASSWORD.equals(password)) {\n+                loginSucceeded = true;\n+            }\n+        } catch (IOException | UnsupportedCallbackException e) {\n+            //...\n+        }\n+        return loginSucceeded;\n+    }\n+\n+    @Override\n+    public boolean commit() throws LoginException {\n+        if (!loginSucceeded) {\n+            return false;\n+        }\n+        userPrincipal = new UserPrincipal(username);\n+        subject.getPrincipals().add(userPrincipal);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean abort() throws LoginException {\n+        logout();\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean logout() throws LoginException {\n+        subject.getPrincipals().remove(userPrincipal);\n+        return false;\n+    }\n+}",
    "output": "security jaas"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n@@ -5,7 +5,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n\ndiff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n@@ -1,11 +1,9 @@\n package com.baeldung.beandefinitionoverrideexception;\n \n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n \n @Configuration\n-@ComponentScan()\n public class TestConfiguration1 {\n \n     class TestBean1 {\n@@ -16,10 +14,13 @@ public String getName() {\n             return name;\n         }\n \n+        public void setName(String name) {\n+            this.name = name;\n+        }\n     }\n \n     @Bean\n-    public TestBean1 testBean(){\n+    public TestBean1 testBean() {\n         return new TestBean1();\n     }\n \n\ndiff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n@@ -2,7 +2,6 @@\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.stereotype.Component;\n \n @Configuration\n public class TestConfiguration2 {\n@@ -15,10 +14,14 @@ public String getName() {\n             return name;\n         }\n \n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n     }\n \n     @Bean\n-    public TestBean2 testBean(){\n+    public TestBean2 testBean() {\n         return new TestBean2();\n     }\n ",
    "output": "source code for BAEL-3303"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/SpringBootBeanDefinitionOverrideExceptionIntegrationTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.beandefinitionoverrideexception;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = {TestConfiguration1.class, TestConfiguration2.class}, properties = {\"spring.main.allow-bean-definition-overriding=true\"})\n+public class SpringBootBeanDefinitionOverrideExceptionIntegrationTest {\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Test\n+    public void whenBeanOverridingAllowed_thenTestBean2OverridesTestBean1() {\n+        Object testBean = applicationContext.getBean(\"testBean\");\n+\n+        assertThat(testBean.getClass()).isEqualTo(TestConfiguration2.TestBean2.class);\n+    }\n+}\n\ndiff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration1.java\n@@ -0,0 +1,26 @@\n+package com.baeldung.beandefinitionoverrideexception;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ComponentScan()\n+public class TestConfiguration1 {\n+\n+    class TestBean1 {\n+\n+        private String name;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+    }\n+\n+    @Bean\n+    public TestBean1 testBean(){\n+        return new TestBean1();\n+    }\n+\n+}\n\ndiff --git a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n--- a/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n+++ b/spring-boot/src/test/java/com/baeldung/beandefinitionoverrideexception/TestConfiguration2.java\n@@ -0,0 +1,25 @@\n+package com.baeldung.beandefinitionoverrideexception;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.stereotype.Component;\n+\n+@Configuration\n+public class TestConfiguration2 {\n+\n+    class TestBean2 {\n+\n+        private String name;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+    }\n+\n+    @Bean\n+    public TestBean2 testBean(){\n+        return new TestBean2();\n+    }\n+\n+}",
    "output": "source code for BAEL-3303"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/EAAsyncExample.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/EAAsyncExample.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/EAAsyncExample.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/EAAsyncExample.java\n@@ -0,0 +1,57 @@\n+package com.baeldung.async;\n+\n+import static com.ea.async.Async.await;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.ea.async.Async;\n+\n+public class EAAsyncExample {\n+\n+    static {\n+        Async.init();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        usingCompletableFuture();\n+        usingAsyncAwait();\n+    }\n+\n+    public static void usingCompletableFuture() throws InterruptedException, ExecutionException, Exception {\n+        CompletableFuture<Void> completableFuture = hello()\n+            .thenComposeAsync(hello -> mergeWorld(hello))\n+            .thenAcceptAsync(helloWorld -> print(helloWorld))\n+            .exceptionally( throwable -> {\n+                System.out.println(throwable.getCause()); \n+                return null;\n+            });\n+        completableFuture.get();\n+    }\n+\n+    public static CompletableFuture<String> hello() {\n+        CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> \"Hello\");\n+        return completableFuture;\n+    }\n+\n+    public static CompletableFuture<String> mergeWorld(String s) {\n+        CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> {\n+            return s + \" World!\";\n+        });\n+        return completableFuture;\n+    }\n+\n+    public static void print(String str) {\n+        CompletableFuture.runAsync(() -> System.out.println(str));\n+    }\n+\n+    private static void usingAsyncAwait() {\n+        try {\n+            String hello = await(hello());\n+            String helloWorld = await(mergeWorld(hello));\n+            await(CompletableFuture.runAsync(() -> print(helloWorld)));\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n@@ -0,0 +1,183 @@\n+package com.baeldung.async;\n+\n+import static com.ea.async.Async.await;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import com.google.common.util.concurrent.AsyncCallable;\n+import com.google.common.util.concurrent.Callables;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.jcabi.aspects.Async;\n+import com.jcabi.aspects.Loggable;\n+\n+public class JavaAsync {\n+\n+    static {\n+        com.ea.async.Async.init();\n+    }\n+\n+    private static final ExecutorService threadpool = Executors.newCachedThreadPool();\n+\n+    public static void main (String[] args) throws InterruptedException, ExecutionException {\n+        int number = 20;\n+\n+        //Thread Example\n+        factorialUsingThread(number).start();\n+\n+        //FutureTask Example\n+        Future<Long> futureTask = factorialUsingFutureTask(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + futureTask.get());\n+\n+        // CompletableFuture Example\n+        Future<Long> completableFuture = factorialUsingCompletableFuture(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + completableFuture.get());\n+\n+        // EA Async example\n+        System.out.println(\"Factorial of \" + number + \" is: \" + factorialUsingEAAsync(number));\n+\n+        // cactoos async example\n+        Future<Long> asyncFuture = factorialUsingCactoos(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + asyncFuture.get());\n+\n+        // Guava example\n+        ListenableFuture<Long> guavaFuture = factorialUsingGuavaServiceSubmit(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + guavaFuture.get());\n+\n+        ListenableFuture<Long> guavaFutures = factorialUsingGuavaFutures(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + guavaFutures.get());\n+\n+        // @async jcabi-aspect example\n+        Future<Long> aspectFuture = factorialUsingJcabiAspect(number);\n+        System.out.println(\"Factorial of \" + number + \" is: \" + aspectFuture.get());\n+\n+    }\n+\n+    /**\n+     * Finds factorial of a number\n+     * @param number\n+     * @return\n+     */\n+    public static long factorial(int number) {\n+        long result = 1; \n+        for(int i=number;i>0;i--) {\n+            result *= i; \n+        } \n+        return result; \n+    }\n+\n+    /**\n+     * Finds factorial of a number using Thread\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static Thread factorialUsingThread(int number) {\n+        Thread newThread = new Thread(() -> {\n+            System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));\n+        });\n+\n+        return newThread;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using FutureTask\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static Future<Long> factorialUsingFutureTask(int number) {\n+        Future<Long> futureTask = threadpool.submit(() -> factorial(number)); \n+\n+        while (!futureTask.isDone()) { \n+            System.out.println(\"FutureTask is not finished yet...\"); \n+        } \n+\n+        return futureTask;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using CompletableFuture\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static Future<Long> factorialUsingCompletableFuture(int number) {\n+        CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> factorial(number));\n+        return completableFuture;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using EA Async\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static long factorialUsingEAAsync(int number) {\n+        CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> factorial(number));\n+        long result = await(completableFuture);\n+        return result;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using Async of Cactoos\n+     * @param number\n+     * @return\n+     * @throws InterruptedException\n+     * @throws ExecutionException\n+     */\n+    @Loggable\n+    public static Future<Long> factorialUsingCactoos(int number) throws InterruptedException, ExecutionException {\n+        org.cactoos.func.Async<Integer, Long> asyncFunction = new org.cactoos.func.Async<Integer, Long>(input -> factorial(input));\n+        Future<Long> asyncFuture = asyncFunction.apply(number);\n+        return asyncFuture;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using Guava's ListeningExecutorService.submit()\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static ListenableFuture<Long> factorialUsingGuavaServiceSubmit(int number) {\n+        ListeningExecutorService service = MoreExecutors.listeningDecorator(threadpool);\n+        ListenableFuture<Long> factorialFuture = (ListenableFuture<Long>) service.submit(()-> factorial(number));\n+        return factorialFuture;\n+    }\n+\n+    /**\n+     * Finds factorial of a number using Guava's Futures.submitAsync()\n+     * @param number\n+     * @return\n+     */\n+    @Loggable\n+    public static ListenableFuture<Long> factorialUsingGuavaFutures(int number) {\n+        ListeningExecutorService service = MoreExecutors.listeningDecorator(threadpool);\n+        AsyncCallable<Long> asyncCallable = Callables.asAsyncCallable(new Callable<Long>() {\n+            public Long call() {\n+                return factorial(number);\n+            }\n+        }, service);\n+        return Futures.submitAsync(asyncCallable, service);\n+    }\n+\n+    /**\n+     * Finds factorial of a number using @Async of jcabi-aspects\n+     * @param number\n+     * @return\n+     */\n+    @Async\n+    @Loggable\n+    public static Future<Long> factorialUsingJcabiAspect(int number) {\n+        Future<Long> factorialFuture = CompletableFuture.supplyAsync(() -> factorial(number));\n+        return factorialFuture;\n+    }\n+\n+}",
    "output": "Merge pull request #8456 from SmartyAnsh/BAEL-3596_Asynchronous_Method_Calls_in_Java\n\nBael 3596 asynchronous method calls in java"
  },
  {
    "input": "diff --git a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/BentleyMcIlroyPartioning.java b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/BentleyMcIlroyPartioning.java\n--- a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/BentleyMcIlroyPartioning.java\n+++ b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/BentleyMcIlroyPartioning.java\n@@ -0,0 +1,66 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+import static com.baeldung.algorithms.quicksort.SortingUtils.swap;\n+\n+public class BentleyMcIlroyPartioning {\n+\n+    public static Partition partition(int input[], int begin, int end) {\n+        int left = begin, right = end;\n+        int leftEqualKeysCount = 0, rightEqualKeysCount = 0;\n+\n+        int partitioningValue = input[end];\n+\n+        while (true) {\n+            while (input[left] < partitioningValue)\n+                left++;\n+\n+            while (input[right] > partitioningValue) {\n+                if (right == begin)\n+                    break;\n+                right--;\n+            }\n+\n+            if (left == right && input[left] == partitioningValue) {\n+                swap(input, begin + leftEqualKeysCount, left);\n+                leftEqualKeysCount++;\n+                left++;\n+            }\n+\n+            if (left >= right) {\n+                break;\n+            }\n+\n+            swap(input, left, right);\n+\n+            if (input[left] == partitioningValue) {\n+                swap(input, begin + leftEqualKeysCount, left);\n+                leftEqualKeysCount++;\n+            }\n+\n+            if (input[right] == partitioningValue) {\n+                swap(input, right, end - rightEqualKeysCount);\n+                rightEqualKeysCount++;\n+            }\n+            left++; right--;\n+        }\n+        right = left - 1;\n+        for (int k = begin; k < begin + leftEqualKeysCount; k++, right--) {\n+            if (right >= begin + leftEqualKeysCount)\n+                swap(input, k, right);\n+        }\n+        for (int k = end; k > end - rightEqualKeysCount; k--, left++) {\n+            if (left <= end - rightEqualKeysCount)\n+                swap(input, left, k);\n+        }\n+        return new Partition(right + 1, left - 1);\n+    }\n+\n+    public static void quicksort(int input[], int begin, int end) {\n+        if (end <= begin)\n+            return;\n+        Partition middlePartition = partition(input, begin, end);\n+        quicksort(input, begin, middlePartition.getLeft() - 1);\n+        quicksort(input, middlePartition.getRight() + 1, end);\n+    }\n+\n+}\n\ndiff --git a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/DutchNationalFlagPartioning.java b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/DutchNationalFlagPartioning.java\n--- a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/DutchNationalFlagPartioning.java\n+++ b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/DutchNationalFlagPartioning.java\n@@ -0,0 +1,38 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+import static com.baeldung.algorithms.quicksort.SortingUtils.compare;\n+import static com.baeldung.algorithms.quicksort.SortingUtils.swap;\n+\n+public class DutchNationalFlagPartioning {\n+\n+    public static Partition partition(int[] a, int begin, int end) {\n+        int lt = begin, current = begin, gt = end;\n+        int partitioningValue = a[begin];\n+\n+        while (current <= gt) {\n+            int compareCurrent = compare(a[current], partitioningValue);\n+            switch (compareCurrent) {\n+                case -1:\n+                    swap(a, current++, lt++);\n+                    break;\n+                case 0:\n+                    current++;\n+                    break;\n+                case 1:\n+                    swap(a, current, gt--);\n+                    break;\n+            }\n+        }\n+        return new Partition(lt, gt);\n+    }\n+\n+    public static void quicksort(int[] input, int begin, int end) {\n+        if (end <= begin)\n+            return;\n+\n+        Partition middlePartition = partition(input, begin, end);\n+\n+        quicksort(input, begin, middlePartition.getLeft() - 1);\n+        quicksort(input, middlePartition.getRight() + 1, end);\n+    }\n+}\n\ndiff --git a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/Partition.java b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/Partition.java\n--- a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/Partition.java\n+++ b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/Partition.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+public class Partition {\n+    private int left;\n+    private int right;\n+\n+    public Partition(int left, int right) {\n+        super();\n+        this.left = left;\n+        this.right = right;\n+    }\n+\n+    public int getLeft() {\n+        return left;\n+    }\n+\n+    public void setLeft(int left) {\n+        this.left = left;\n+    }\n+\n+    public int getRight() {\n+        return right;\n+    }\n+\n+    public void setRight(int right) {\n+        this.right = right;\n+    }\n+\n+}\n\ndiff --git a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/SortingUtils.java b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/SortingUtils.java\n--- a/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/SortingUtils.java\n+++ b/algorithms-sorting-2/src/main/java/com/baeldung/algorithms/quicksort/SortingUtils.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+public class SortingUtils {\n+\n+    public static void swap(int[] array, int position1, int position2) {\n+        if (position1 != position2) {\n+            int temp = array[position1];\n+            array[position1] = array[position2];\n+            array[position2] = temp;\n+        }\n+    }\n+\n+    public static int compare(int num1, int num2) {\n+        if (num1 > num2)\n+            return 1;\n+        else if (num1 < num2)\n+            return -1;\n+        else\n+            return 0;\n+    }\n+\n+    public static void printArray(int[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        for (int e : array) {\n+            System.out.print(e + \" \");\n+        }\n+        System.out.println();\n+    }\n+\n+}\n\ndiff --git a/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/BentleyMcilroyPartitioningUnitTest.java b/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/BentleyMcilroyPartitioningUnitTest.java\n--- a/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/BentleyMcilroyPartitioningUnitTest.java\n+++ b/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/BentleyMcilroyPartitioningUnitTest.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BentleyMcilroyPartitioningUnitTest {\n+\n+    @Test\n+    public void given_IntegerArray_whenSortedWithBentleyMcilroyPartitioning_thenGetSortedArray() {\n+        int[] actual = {3, 2, 2, 2, 3, 7, 7, 3, 2, 2, 7, 3, 3};\n+        int[] expected = {2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 7, 7, 7};\n+        BentleyMcIlroyPartioning.quicksort(actual, 0, actual.length - 1);\n+        Assert.assertArrayEquals(expected, actual);\n+    }\n+\n+}\n\ndiff --git a/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/DNFThreeWayQuickSortUnitTest.java b/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/DNFThreeWayQuickSortUnitTest.java\n--- a/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/DNFThreeWayQuickSortUnitTest.java\n+++ b/algorithms-sorting-2/src/test/java/com/baeldung/algorithms/quicksort/DNFThreeWayQuickSortUnitTest.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.algorithms.quicksort;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DNFThreeWayQuickSortUnitTest {\n+\n+    @Test\n+    public void givenIntegerArray_whenSortedWithThreeWayQuickSort_thenGetSortedArray() {\n+        int[] actual = {3, 5, 5, 5, 3, 7, 7, 3, 5, 5, 7, 3, 3};\n+        int[] expected = {3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 7, 7, 7};\n+        DutchNationalFlagPartioning.quicksort(actual, 0, actual.length - 1);\n+        Assert.assertArrayEquals(expected, actual);\n+    }\n+}",
    "output": "BAEL-3484: Partitioning and Sorting an Array With Many Repeated Entries (#8369)"
  },
  {
    "input": "diff --git a/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java b/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n--- a/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n+++ b/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n@@ -15,7 +15,7 @@ public class StudentServiceImpl implements StudentService {\n \n     @Override\n     public Page<Student> findPaginated(int page, int size) {\n-        return dao.findAll(new PageRequest(page, size));\n+        return dao.findAll(PageRequest.of(page, size));\n     }\n \n }\n\ndiff --git a/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java b/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n--- a/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n+++ b/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n@@ -82,7 +82,7 @@ public void givenAppUser_whenLoginSuccessful_shouldReadMyPagedTweets() {\n             .setAuthentication(auth);\n         Page<Tweet> page = null;\n         do {\n-            page = tweetRepository.getMyTweetsAndTheOnesILiked(new PageRequest(page != null ? page.getNumber() + 1 : 0, 5));\n+            page = tweetRepository.getMyTweetsAndTheOnesILiked(PageRequest.of(page != null ? page.getNumber() + 1 : 0, 5));\n             for (Tweet twt : page.getContent()) {\n                 isTrue((twt.getOwner() == appUser.getUsername()) || (twt.getLikes()\n                     .contains(appUser.getUsername())), \"I do not have any Tweets\");\n@@ -94,7 +94,7 @@ public void givenAppUser_whenLoginSuccessful_shouldReadMyPagedTweets() {\n     public void givenNoAppUser_whenPaginatedResultsRetrievalAttempted_shouldFail() {\n         Page<Tweet> page = null;\n         do {\n-            page = tweetRepository.getMyTweetsAndTheOnesILiked(new PageRequest(page != null ? page.getNumber() + 1 : 0, 5));\n+            page = tweetRepository.getMyTweetsAndTheOnesILiked(PageRequest.of(page != null ? page.getNumber() + 1 : 0, 5));\n         } while (page != null && page.hasNext());\n     }\n }",
    "output": "Merge branch 'BAEL-20663' of https://github.com/kwoyke/tutorials into BAEL-20663"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/SwitchExpressionsWithYieldUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class SwitchExpressionsWithYieldUnitTest {\r\n+\r\n+    @Test\r\n+    @SuppressWarnings(\"preview\")\r\n+    public void whenSwitchingOnOperationSquareMe_thenWillReturnSquare() {\r\n+        var me = 4;\r\n+        var operation = \"squareMe\";\r\n+        var result = switch (operation) {\r\n+        case \"doubleMe\" -> {\r\n+            yield me * 2;\r\n+        }\r\n+        case \"squareMe\" -> {\r\n+            yield me * me;\r\n+        }\r\n+        default -> me;\r\n+        };\r\n+\r\n+        assertEquals(result, 16);\r\n+    }\r\n+\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/newfeatures/TextBlocksUnitTest.java\n@@ -0,0 +1,25 @@\n+package com.baeldung.newfeatures;\r\n+\r\n+import static org.assertj.core.api.Assertions.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class TextBlocksUnitTest {\r\n+\r\n+    @SuppressWarnings(\"preview\")\r\n+    private static final String TEXT_BLOCK_JSON = \"\"\"\r\n+            {\r\n+            \"name\" : \"Baeldung\",\r\n+            \"website\" : \"https://www.baeldung.com/\"\r\n+            }\r\n+        \"\"\";\r\n+\r\n+    @Test\r\n+    public void whenTextBlocks_thenStringOperationsWork() {\r\n+\r\n+        assertThat(TEXT_BLOCK_JSON.contains(\"Baeldung\")).isTrue();\r\n+        assertThat(TEXT_BLOCK_JSON.indexOf(\"www\")).isGreaterThan(0);\r\n+        assertThat(TEXT_BLOCK_JSON.length()).isGreaterThan(0);\r\n+\r\n+    }\r\n+}\r",
    "output": "BAEL-3602 : Java 13 New Features"
  },
  {
    "input": "diff --git a/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java b/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n--- a/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n+++ b/akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java\n@@ -7,6 +7,8 @@\n import akka.http.javadsl.model.HttpRequest;\n import akka.http.javadsl.testkit.JUnitRouteTest;\n import akka.http.javadsl.testkit.TestRoute;\n+\n+import org.junit.Ignore;\n import org.junit.Test;\n \n public class UserServerUnitTest extends JUnitRouteTest {\n@@ -17,6 +19,7 @@ public class UserServerUnitTest extends JUnitRouteTest {\n \n   TestRoute appRoute = testRoute(new UserServer(userActorRef).routes());\n \n+  @Ignore\n   @Test\n   public void whenRequest_thenActorResponds() {\n \n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -1,6 +1,7 @@\n package com.baeldung.rejection;\n \n import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.util.ArrayList;\n@@ -28,6 +29,7 @@ public void shutdownExecutor() {\n         }\n     }\n \n+    @Ignore\n     @Test\n     public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {\n         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());\n@@ -36,6 +38,7 @@ public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionExcep\n         assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\"))).isInstanceOf(RejectedExecutionException.class);\n     }\n \n+    @Ignore\n     @Test\n     public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {\n         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());\n\ndiff --git a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n--- a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n+++ b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n@@ -1,5 +1,6 @@\n package com.baeldung.file;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.*;\n@@ -73,6 +74,7 @@ public void givenReadOnlyFile_whenCreateNewFile_thenCantModFile() {\n         assertFalse(writable);\n     }\n \n+    @Ignore\n     @Test\n     public void givenWriteOnlyFile_whenCreateNewFile_thenCantReadFile() {\n         File parentDir = makeDir(\"writeDir\");\n\ndiff --git a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n--- a/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n+++ b/core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java\n@@ -1,5 +1,7 @@\n package com.baeldung.jndi.exceptions;\n \n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.MethodOrderer;\n import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n@@ -16,6 +18,7 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class JndiExceptionsUnitTest {\n \n+\t@Disabled\n     @Test\n     @Order(1)\n     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {\n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java\n@@ -2,7 +2,7 @@\n \n import org.junit.Test;\n \n-public class JvmExitDemoUnitTest {\n+public class JvmExitDemoManualTest {\n \n     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n \n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java\n@@ -2,7 +2,7 @@\n \n import org.junit.Test;\n \n-public class JvmHaltDemoUnitTest {\n+public class JvmHaltDemoManualTest {\n \n     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n \n\ndiff --git a/libraries-2/src/test/java/com/baeldung/handlebars/BuiltinHelperUnitTest.java b/libraries-2/src/test/java/com/baeldung/handlebars/BuiltinHelperUnitTest.java\n--- a/libraries-2/src/test/java/com/baeldung/handlebars/BuiltinHelperUnitTest.java\n+++ b/libraries-2/src/test/java/com/baeldung/handlebars/BuiltinHelperUnitTest.java\n@@ -7,6 +7,8 @@\n import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n import com.github.jknack.handlebars.io.TemplateLoader;\n import java.io.IOException;\n+\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -18,6 +20,7 @@ public class BuiltinHelperUnitTest {\n \n     private TemplateLoader templateLoader = new ClassPathTemplateLoader(\"/handlebars\", \".html\");\n \n+    @Ignore\n     @Test\n     public void whenUsedWith_ThenContextChanges() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -30,6 +33,7 @@ public void whenUsedWith_ThenContextChanges() throws IOException {\n         assertThat(templateString).isEqualTo(\"\\n<h4>I live in World</h4>\\n\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenUsedWithMustacheStyle_ThenContextChanges() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -42,6 +46,7 @@ public void whenUsedWithMustacheStyle_ThenContextChanges() throws IOException {\n         assertThat(templateString).isEqualTo(\"\\n<h4>I live in World</h4>\\n\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenUsedEach_ThenIterates() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -58,6 +63,7 @@ public void whenUsedEach_ThenIterates() throws IOException {\n                                                + \"\\n<span>Spring is my friend.</span>\\n\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenUsedEachMustacheStyle_ThenIterates() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -74,6 +80,7 @@ public void whenUsedEachMustacheStyle_ThenIterates() throws IOException {\n                                                + \"\\n<span>Spring is my friend.</span>\\n\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenUsedIf_ThenPutsCondition() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -86,6 +93,7 @@ public void whenUsedIf_ThenPutsCondition() throws IOException {\n         assertThat(templateString).isEqualTo(\"\\n<h4>Baeldung is busy.</h4>\\n\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenUsedIfMustacheStyle_ThenPutsCondition() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n\ndiff --git a/libraries-2/src/test/java/com/baeldung/handlebars/ReusingTemplatesUnitTest.java b/libraries-2/src/test/java/com/baeldung/handlebars/ReusingTemplatesUnitTest.java\n--- a/libraries-2/src/test/java/com/baeldung/handlebars/ReusingTemplatesUnitTest.java\n+++ b/libraries-2/src/test/java/com/baeldung/handlebars/ReusingTemplatesUnitTest.java\n@@ -7,6 +7,8 @@\n import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n import com.github.jknack.handlebars.io.TemplateLoader;\n import java.io.IOException;\n+\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -18,6 +20,7 @@ public class ReusingTemplatesUnitTest {\n \n     private TemplateLoader templateLoader = new ClassPathTemplateLoader(\"/handlebars\", \".html\");\n \n+    @Ignore\n     @Test\n     public void whenOtherTemplateIsReferenced_ThenCanReuse() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);\n@@ -30,6 +33,7 @@ public void whenOtherTemplateIsReferenced_ThenCanReuse() throws IOException {\n         assertThat(templateString).isEqualTo(\"<h4>Hi Baeldung!</h4>\\n<p>This is the page Baeldung</p>\");\n     }\n \n+    @Ignore\n     @Test\n     public void whenBlockIsDefined_ThenCanOverrideWithPartial() throws IOException {\n         Handlebars handlebars = new Handlebars(templateLoader);",
    "output": "BAEL-20655 Which sub-modules aren't being built?\n\n- Added several missing modules in the main pom.xml\n- Fixed the modules list for all the profiles\n- Commented several test cases so that all modules can run and be included in the pom.xml\n- Moved child modules from main pom to parent modules pom"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n@@ -6,7 +6,7 @@\n public class BalancedBracketsUsingDeque {\n \n         public boolean isBalanced(String str) {\n-                if (null == str || str.length() == 0 || ((str.length() % 2) != 0)) {\n+                if (null == str || ((str.length() % 2) != 0)) {\n                         return false;\n                 } else {\n                         char[] ch = str.toCharArray();\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n@@ -3,7 +3,7 @@\n public class BalancedBracketsUsingString {\n \n         public boolean isBalanced(String str) {\n-                if (null == str || str.length() == 0 || ((str.length() % 2) != 0)) {\n+                if (null == str || ((str.length() % 2) != 0)) {\n                         return false;\n                 } else {\n                         char[] ch = str.toCharArray();\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n@@ -21,9 +21,9 @@ public void givenNullInput_whenCheckingForBalance_shouldReturnFalse() {\n         }\n \n         @Test\n-        public void givenEmptyString_whenCheckingForBalance_shouldReturnFalse() {\n+        public void givenEmptyString_whenCheckingForBalance_shouldReturnTrue() {\n                 boolean result = balancedBracketsUsingDeque.isBalanced(\"\");\n-                assertThat(result).isFalse();\n+                assertThat(result).isTrue();\n         }\n \n         @Test\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStringUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStringUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStringUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStringUnitTest.java\n@@ -21,9 +21,9 @@ public void givenNullInput_whenCheckingForBalance_shouldReturnFalse() {\n         }\n \n         @Test\n-        public void givenEmptyString_whenCheckingForBalance_shouldReturnFalse() {\n+        public void givenEmptyString_whenCheckingForBalance_shouldReturnTrue() {\n                 boolean result = balancedBracketsUsingString.isBalanced(\"\");\n-                assertThat(result).isFalse();\n+                assertThat(result).isTrue();\n         }\n \n         @Test",
    "output": "BAEL-3481 - modified as per Editor Review comments."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/DatabaseMigrationTask.java b/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/DatabaseMigrationTask.java\n--- a/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/DatabaseMigrationTask.java\n+++ b/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/DatabaseMigrationTask.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.timer;\n+\n+import java.util.List;\n+import java.util.TimerTask;\n+\n+public class DatabaseMigrationTask extends TimerTask {\n+    private List<String> oldDatabase;\n+    private List<String> newDatabase;\n+\n+    public DatabaseMigrationTask(List<String> oldDatabase, List<String> newDatabase) {\n+        this.oldDatabase = oldDatabase;\n+        this.newDatabase = newDatabase;\n+    }\n+\n+    @Override\n+    public void run() {\n+        newDatabase.addAll(oldDatabase);\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/NewsletterTask.java b/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/NewsletterTask.java\n--- a/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/NewsletterTask.java\n+++ b/core-java-modules/core-java-date-operations-2/src/main/java/com/baeldung/timer/NewsletterTask.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.timer;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.TimerTask;\n+\n+public class NewsletterTask extends TimerTask {\n+    @Override\n+    public void run() {\n+        System.out.println(\"Email sent at: \"\n+          + LocalDateTime.ofInstant(Instant.ofEpochMilli(scheduledExecutionTime()), ZoneId.systemDefault()));\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/DatabaseMigrationTaskUnitTest.java b/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/DatabaseMigrationTaskUnitTest.java\n--- a/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/DatabaseMigrationTaskUnitTest.java\n+++ b/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/DatabaseMigrationTaskUnitTest.java\n@@ -0,0 +1,44 @@\n+package com.baeldung.timer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class DatabaseMigrationTaskUnitTest {\n+    @Test\n+    void givenDatabaseMigrationTask_whenTimerScheduledForNowPlusTwoSeconds_thenDataMigratedAfterTwoSeconds() throws Exception {\n+        List<String> oldDatabase = Arrays.asList(\"Harrison Ford\", \"Carrie Fisher\", \"Mark Hamill\");\n+        List<String> newDatabase = new ArrayList<>();\n+\n+        LocalDateTime twoSecondsLater = LocalDateTime.now().plusSeconds(2);\n+        Date twoSecondsLaterAsDate = Date.from(twoSecondsLater.atZone(ZoneId.systemDefault()).toInstant());\n+\n+        new Timer().schedule(new DatabaseMigrationTask(oldDatabase, newDatabase), twoSecondsLaterAsDate);\n+\n+        while (LocalDateTime.now().isBefore(twoSecondsLater)) {\n+            assertThat(newDatabase).isEmpty();\n+            Thread.sleep(500);\n+        }\n+        assertThat(newDatabase).containsExactlyElementsOf(oldDatabase);\n+    }\n+\n+    @Test\n+    void givenDatabaseMigrationTask_whenTimerScheduledInTwoSeconds_thenDataMigratedAfterTwoSeconds() throws Exception {\n+        List<String> oldDatabase = Arrays.asList(\"Harrison Ford\", \"Carrie Fisher\", \"Mark Hamill\");\n+        List<String> newDatabase = new ArrayList<>();\n+\n+        new Timer().schedule(new DatabaseMigrationTask(oldDatabase, newDatabase), 2000);\n+\n+        LocalDateTime twoSecondsLater = LocalDateTime.now().plusSeconds(2);\n+\n+        while (LocalDateTime.now().isBefore(twoSecondsLater)) {\n+            assertThat(newDatabase).isEmpty();\n+            Thread.sleep(500);\n+        }\n+        assertThat(newDatabase).containsExactlyElementsOf(oldDatabase);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/NewsletterTaskUnitTest.java b/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/NewsletterTaskUnitTest.java\n--- a/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/NewsletterTaskUnitTest.java\n+++ b/core-java-modules/core-java-date-operations-2/src/test/java/com/baeldung/timer/NewsletterTaskUnitTest.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.timer;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Timer;\n+\n+class NewsletterTaskUnitTest {\n+    private final Timer timer = new Timer();\n+\n+    @AfterEach\n+    void afterEach() {\n+        timer.cancel();\n+    }\n+\n+    @Test\n+    void givenNewsletterTask_whenTimerScheduledEachSecondFixedDelay_thenNewsletterSentEachSecond() throws Exception {\n+        timer.schedule(new NewsletterTask(), 0, 1000);\n+\n+        for (int i = 0; i < 3; i++) {\n+            Thread.sleep(1000);\n+        }\n+    }\n+\n+    @Test\n+    void givenNewsletterTask_whenTimerScheduledEachSecondFixedRate_thenNewsletterSentEachSecond() throws Exception {\n+        timer.scheduleAtFixedRate(new NewsletterTask(), 0, 1000);\n+\n+        for (int i = 0; i < 3; i++) {\n+            Thread.sleep(1000);\n+        }\n+    }\n+}\n\\ No newline at end of file",
    "output": "dupirefr/dupire.francois+pro@gmail.com [BAEL-3488] Timer Class (#8468)\n\n* [BAEL-3488] Added examples and tests\r\n\r\n* [BAEL-3488] Moved code to core-java-date-operations-2 module\r\n\r\n* [BAEL-3488] Added assertj library to maven dependencies"
  },
  {
    "input": "diff --git a/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java b/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n--- a/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n+++ b/spring-security-modules/spring-security-mvc-boot/src/test/java/com/baeldung/relationships/SpringDataWithSecurityIntegrationTest.java\n@@ -82,7 +82,7 @@ public void givenAppUser_whenLoginSuccessful_shouldReadMyPagedTweets() {\n             .setAuthentication(auth);\n         Page<Tweet> page = null;\n         do {\n-            page = tweetRepository.getMyTweetsAndTheOnesILiked(new PageRequest(page != null ? page.getNumber() + 1 : 0, 5));\n+            page = tweetRepository.getMyTweetsAndTheOnesILiked(PageRequest.of(page != null ? page.getNumber() + 1 : 0, 5));\n             for (Tweet twt : page.getContent()) {\n                 isTrue((twt.getOwner() == appUser.getUsername()) || (twt.getLikes()\n                     .contains(appUser.getUsername())), \"I do not have any Tweets\");\n@@ -94,7 +94,7 @@ public void givenAppUser_whenLoginSuccessful_shouldReadMyPagedTweets() {\n     public void givenNoAppUser_whenPaginatedResultsRetrievalAttempted_shouldFail() {\n         Page<Tweet> page = null;\n         do {\n-            page = tweetRepository.getMyTweetsAndTheOnesILiked(new PageRequest(page != null ? page.getNumber() + 1 : 0, 5));\n+            page = tweetRepository.getMyTweetsAndTheOnesILiked(PageRequest.of(page != null ? page.getNumber() + 1 : 0, 5));\n         } while (page != null && page.hasNext());\n     }\n }",
    "output": "BAEL-20663: Replace depracated PageRequest constructor with a static method"
  },
  {
    "input": "diff --git a/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java b/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n--- a/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n+++ b/spring-rest-angular/src/main/java/org/baeldung/web/service/StudentServiceImpl.java\n@@ -15,7 +15,7 @@ public class StudentServiceImpl implements StudentService {\n \n     @Override\n     public Page<Student> findPaginated(int page, int size) {\n-        return dao.findAll(new PageRequest(page, size));\n+        return dao.findAll(PageRequest.of(page, size));\n     }\n \n }",
    "output": "BAEL-20663: Replace depracated PageRequest constructor with a static method"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/baeldung/boot/repository/FooRepositoryIntegrationTest.java b/spring-boot/src/test/java/org/baeldung/boot/repository/FooRepositoryIntegrationTest.java\n--- a/spring-boot/src/test/java/org/baeldung/boot/repository/FooRepositoryIntegrationTest.java\n+++ b/spring-boot/src/test/java/org/baeldung/boot/repository/FooRepositoryIntegrationTest.java\n@@ -1,19 +1,17 @@\n package org.baeldung.boot.repository;\n \n-import static org.junit.Assert.assertThat;\n-\n import org.baeldung.boot.DemoApplicationIntegrationTest;\n import org.baeldung.demo.model.Foo;\n import org.baeldung.demo.repository.FooRepository;\n-\n-import static org.hamcrest.Matchers.notNullValue;\n-import static org.hamcrest.Matchers.is;\n-\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertThat;\n+\n @Transactional\n public class FooRepositoryIntegrationTest extends DemoApplicationIntegrationTest {\n     @Autowired\n@@ -28,8 +26,10 @@ public void setUp() {\n     @Test\n     public void testFindByName() {\n         Foo foo = fooRepository.findByName(\"Bar\");\n+\n         assertThat(foo, notNullValue());\n-        assertThat(foo.getId(), is(2));\n+        assertThat(foo.getId(), notNullValue());\n+        assertThat(foo.getName(), is(\"Bar\"));\n     }\n \n }\n\ndiff --git a/spring-boot/src/test/java/org/baeldung/boot/repository/HibernateSessionIntegrationTest.java b/spring-boot/src/test/java/org/baeldung/boot/repository/HibernateSessionIntegrationTest.java\n--- a/spring-boot/src/test/java/org/baeldung/boot/repository/HibernateSessionIntegrationTest.java\n+++ b/spring-boot/src/test/java/org/baeldung/boot/repository/HibernateSessionIntegrationTest.java\n@@ -1,30 +1,29 @@\n package org.baeldung.boot.repository;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.notNullValue;\n-import static org.junit.Assert.assertThat;\n-\n import org.baeldung.boot.DemoApplicationIntegrationTest;\n import org.baeldung.demo.model.Foo;\n import org.baeldung.demo.repository.FooRepository;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.Assert.assertThat;\n+\n @Transactional\n public class HibernateSessionIntegrationTest extends DemoApplicationIntegrationTest {\n     @Autowired\n     private FooRepository fooRepository;\n \n     @Test\n     public void whenSavingWithCurrentSession_thenThrowNoException() {\n-        Foo foo = new Foo(\"Exception Solved\");\n-        fooRepository.save(foo);\n-        foo = null;\n-        foo = fooRepository.findByName(\"Exception Solved\");\n+        fooRepository.save(new Foo(\"Exception Solved\"));\n+\n+        Foo foo = fooRepository.findByName(\"Exception Solved\");\n \n         assertThat(foo, notNullValue());\n-        assertThat(foo.getId(), is(1));\n+        assertThat(foo.getId(), notNullValue());\n         assertThat(foo.getName(), is(\"Exception Solved\"));\n     }\n }",
    "output": "BAEL-3733: Fix integration tests (#8500)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/RegexMatcherFindVsMatchesTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/RegexMatcherFindVsMatchesTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/RegexMatcherFindVsMatchesTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/regex/matcher/RegexMatcherFindVsMatchesTest.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.regex.matcher;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class RegexMatcherFindVsMatchesTest {\n+\n+    @Test\n+    public void whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find());\n+        assertEquals(8, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(12, m.end());\n+\n+        assertTrue(m.find());\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+\n+        assertFalse(m.find());\n+    }\n+\n+    @Test\n+    public void givenStartIndex_whenFindFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+\n+        assertTrue(m.find(20));\n+        assertEquals(25, m.start());\n+        assertEquals(\"2020\", m.group());\n+        assertEquals(29, m.end());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenFail() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\n+        assertFalse(m.matches());\n+    }\n+\n+    @Test\n+    public void whenMatchFourDigitWorks_thenCorrect() {\n+        Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n+        Matcher m = stringPattern.matcher(\"2019\");\n+\n+        assertTrue(m.matches());\n+        assertEquals(0, m.start());\n+        assertEquals(\"2019\", m.group());\n+        assertEquals(4, m.end());\n+\n+        assertTrue(m.matches());// matches will always return the same return\n+    }\n+\n+}",
    "output": "BAEL-3655: Article Find vs Matches in Java Regex API - done"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/com/baeldung/buildproperties/Application.java b/spring-boot/src/main/java/com/baeldung/buildproperties/Application.java\n--- a/spring-boot/src/main/java/com/baeldung/buildproperties/Application.java\n+++ b/spring-boot/src/main/java/com/baeldung/buildproperties/Application.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.buildproperties;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@SpringBootApplication\n+@ComponentScan(basePackages = \"com.baeldung.buildproperties\")\n+@PropertySource(\"classpath:build.properties\")\n+//@PropertySource(\"classpath:build.yml\")\n+public class Application {\n+    \n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+    \n+}\n\ndiff --git a/spring-boot/src/main/java/com/baeldung/buildproperties/BuildInfoService.java b/spring-boot/src/main/java/com/baeldung/buildproperties/BuildInfoService.java\n--- a/spring-boot/src/main/java/com/baeldung/buildproperties/BuildInfoService.java\n+++ b/spring-boot/src/main/java/com/baeldung/buildproperties/BuildInfoService.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.buildproperties;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class BuildInfoService {\n+    @Value(\"${application-description}\")\n+    private String applicationDescription;\n+    \n+    @Value(\"${application-version}\")\n+    private String applicationVersion;\n+\n+    public String getApplicationDescription() {\n+        return applicationDescription;\n+    }\n+\n+    public String getApplicationVersion() {\n+        return applicationVersion;\n+    }\n+}\n\ndiff --git a/spring-boot/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java b/spring-boot/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java\n--- a/spring-boot/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java\n+++ b/spring-boot/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.buildproperties;\n+\n+import static org.junit.Assert.assertThat;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Application.class)\n+class BuildInfoServiceIntegrationTest {\n+\n+    @Autowired\n+    private BuildInfoService service;\n+    \n+    @Test\n+    void whenGetApplicationDescription_thenSuccess() {\n+        assertThat(service.getApplicationDescription(), Matchers.is(\"This is simple boot application for Spring boot actuator test\"));\n+        assertThat(service.getApplicationVersion(), Matchers.is(\"0.0.1-SNAPSHOT\"));\n+    }\n+}",
    "output": "BAEL-3499 Added files for article (#8498)"
  },
  {
    "input": "diff --git a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/FilePropertyInjectionUnitTest.java b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/FilePropertyInjectionUnitTest.java\n--- a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/FilePropertyInjectionUnitTest.java\n+++ b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/FilePropertyInjectionUnitTest.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.properties.testproperty;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@TestPropertySource(\"/foo.properties\")\n+public class FilePropertyInjectionUnitTest {\n+\n+    @Value(\"${foo}\")\n+    private String foo;\n+\n+    @Test\n+    public void whenFilePropertyProvided_thenProperlyInjected() {\n+        assertThat(foo).isEqualTo(\"bar\");\n+    }\n+}\n\ndiff --git a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/PropertyInjectionUnitTest.java b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/PropertyInjectionUnitTest.java\n--- a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/PropertyInjectionUnitTest.java\n+++ b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/PropertyInjectionUnitTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.properties.testproperty;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@TestPropertySource(properties = {\"foo=bar\"})\n+public class PropertyInjectionUnitTest {\n+\n+    @Value(\"${foo}\")\n+    private String foo;\n+\n+    @Test\n+    public void whenPropertyProvided_thenProperlyInjected() {\n+        assertThat(foo).isEqualTo(\"bar\");\n+    }\n+}\n\ndiff --git a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/SpringBootPropertyInjectionIntegrationTest.java b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/SpringBootPropertyInjectionIntegrationTest.java\n--- a/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/SpringBootPropertyInjectionIntegrationTest.java\n+++ b/spring-boot-properties/src/test/java/com/baeldung/properties/testproperty/SpringBootPropertyInjectionIntegrationTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.properties.testproperty;\n+\n+import com.baeldung.properties.reloading.SpringBootPropertiesTestApplication;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(properties = {\"foo=bar\"}, classes = SpringBootPropertiesTestApplication.class)\n+public class SpringBootPropertyInjectionIntegrationTest {\n+\n+    @Value(\"${foo}\")\n+    private String foo;\n+\n+    @Test\n+    public void whenSpringBootPropertyProvided_thenProperlyInjected() {\n+        assertThat(foo).isEqualTo(\"bar\");\n+    }\n+}",
    "output": "BAEL-3741: Add usage examples of @TestPropertySource (#8493)"
  },
  {
    "input": "diff --git a/spring-security-modules/spring-security-rest/src/main/java/org/baeldung/security/SecurityWebApplicationInitializer.java b/spring-security-modules/spring-security-rest/src/main/java/org/baeldung/security/SecurityWebApplicationInitializer.java\n--- a/spring-security-modules/spring-security-rest/src/main/java/org/baeldung/security/SecurityWebApplicationInitializer.java\n+++ b/spring-security-modules/spring-security-rest/src/main/java/org/baeldung/security/SecurityWebApplicationInitializer.java\n@@ -0,0 +1,10 @@\n+package org.baeldung.security;\n+\n+import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n+\n+public class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer {\n+\n+    public SecurityWebApplicationInitializer() {\n+        super(SecurityJavaConfig.class);\n+    }\n+}",
    "output": "BAEL-3723: Add missing code - SecurityWebApplicationInitializer (#8492)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java b/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n--- a/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n+++ b/core-java-modules/core-java-datetime-java8/src/main/java/com/baeldung/datebasics/CreateDate.java\n@@ -0,0 +1,45 @@\n+package com.baeldung.datebasics;\n+\n+import java.time.Clock;\n+import java.time.LocalDate;\n+import java.time.Month;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+public class CreateDate {\n+\tpublic LocalDate getTodaysDate() {\n+\t\treturn LocalDate.now();\n+\t}\n+\n+\tpublic LocalDate getTodaysDateFromClock() {\n+\t\treturn LocalDate.now(Clock.systemDefaultZone());\n+\t}\n+\n+\tpublic LocalDate getTodaysDateFromZone(String zone) {\n+\t\treturn LocalDate.now(ZoneId.of(zone));\n+\t}\n+\n+\tpublic LocalDate getCustomDateOne(int year, int month, int dayOfMonth) {\n+\t\treturn LocalDate.of(year, month, dayOfMonth);\n+\t}\n+\n+\tpublic LocalDate getCustomDateTwo(int year, Month month, int dayOfMonth) {\n+\t\treturn LocalDate.of(year, month, dayOfMonth);\n+\t}\n+\n+\tpublic LocalDate getDateFromEpochDay(long epochDay) {\n+\t\treturn LocalDate.ofEpochDay(epochDay);\n+\t}\n+\n+\tpublic LocalDate getDateFromYearAndDayOfYear(int year, int dayOfYear) {\n+\t\treturn LocalDate.ofYearDay(year, dayOfYear);\n+\t}\n+\n+\tpublic LocalDate getDateFromString(String date) {\n+\t\treturn LocalDate.parse(date);\n+\t}\n+\n+\tpublic LocalDate getDateFromStringAndFormatter(String date, String pattern) {\n+\t\treturn LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n+\t}\n+}\n\ndiff --git a/core-java-modules/core-java-datetime-java8/src/test/java/com/baeldung/datebasics/CreateDateUnitTest.java b/core-java-modules/core-java-datetime-java8/src/test/java/com/baeldung/datebasics/CreateDateUnitTest.java\n--- a/core-java-modules/core-java-datetime-java8/src/test/java/com/baeldung/datebasics/CreateDateUnitTest.java\n+++ b/core-java-modules/core-java-datetime-java8/src/test/java/com/baeldung/datebasics/CreateDateUnitTest.java\n@@ -0,0 +1,56 @@\n+package com.baeldung.datebasics;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.time.Month;\n+\n+import org.junit.Test;\n+\n+public class CreateDateUnitTest {\n+    private CreateDate date = new CreateDate();\n+    \n+    @Test\n+    public void whenUsingNowMethod_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getTodaysDate());\n+    }\n+    \n+    @Test\n+    public void whenUsingClock_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getTodaysDateFromClock());\n+    }\n+    \n+    @Test\n+    public void givenValues_whenUsingZone_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getTodaysDateFromZone(\"Asia/Kolkata\"));\n+    }\n+    \n+    @Test\n+    public void givenValues_whenUsingOfMethod_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getCustomDateOne(2020, 1, 8));\n+    }\n+    \n+    @Test\n+    public void givenValuesWithMonthEnum_whenUsingOfMethod_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getCustomDateTwo(2020, Month.JANUARY, 8));\n+    }\n+    \n+    @Test\n+    public void givenValues_whenUsingEpochDay_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getDateFromEpochDay(18269));\n+    }\n+    \n+    @Test\n+    public void givenValues_whenUsingYearDay_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getDateFromYearAndDayOfYear(2020, 8));\n+    }\n+    \n+    @Test\n+    public void givenValues_whenUsingParse_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getDateFromString(\"2020-01-08\"));\n+    }\n+    \n+    @Test\n+    public void givenValuesWithFormatter_whenUsingParse_thenLocalDate() {\n+        assertEquals(\"2020-01-08\", date.getDateFromStringAndFormatter(\"8-Jan-2020\", \"d-MMM-yyyy\"));\n+    }\n+}",
    "output": "Added Create Date class & Unit Tests for all the cases (#8499)"
  },
  {
    "input": "diff --git a/mybatis/src/main/java/com/baeldung/mybatis/mapper/AddressMapper.java b/mybatis/src/main/java/com/baeldung/mybatis/mapper/AddressMapper.java\n--- a/mybatis/src/main/java/com/baeldung/mybatis/mapper/AddressMapper.java\n+++ b/mybatis/src/main/java/com/baeldung/mybatis/mapper/AddressMapper.java\n@@ -14,8 +14,8 @@ public interface AddressMapper {\n \t@Results(value = { @Result(property = \"addressId\", column = \"addressId\"),\n \t\t\t@Result(property = \"streetAddress\", column = \"streetAddress\"),\n \t\t\t@Result(property = \"person\", column = \"personId\", javaType = Person.class, one = @One(select = \"getPerson\")) })\n-\tAddress getAddresses(Integer addressID);\n+\tAddress getAddresses(Integer addressId);\n \n \t@Select(\"SELECT personId FROM address WHERE addressId = #{addressId})\")\n-\tPerson getPerson(Integer personId);\n+\tPerson getPerson(Integer addressId);\n }",
    "output": "update AddressMapper.java"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n@@ -127,7 +127,6 @@ public static long factorialUsingEAAsync(int number) {\n     }\n \n     /**\n-     * \n      * Finds factorial of a number using Async of Cactoos\n      * @param number\n      * @return\n@@ -170,7 +169,6 @@ public Long call() {\n     }\n \n     /**\n-     * \n      * Finds factorial of a number using @Async of jcabi-aspects\n      * @param number\n      * @return",
    "output": "Merge branch 'BAEL-3596_Asynchronous_Method_Calls_in_Java' of https://github.com/SmartyAnsh/tutorials into BAEL-3596_Asynchronous_Method_Calls_in_Java"
  },
  {
    "input": "diff --git a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n--- a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n+++ b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n@@ -130,30 +130,33 @@ public void describeTo(Description description) {\n         };\n     }\n \n+    \n     @Test\n     public void partialMocking() {\n-        // use partial mock\n-        final LoginService partialLoginService = new LoginService();\n+        LoginService partialLoginService = new LoginService();\n         partialLoginService.setLoginDao(loginDao);\n         loginController.loginService = partialLoginService;\n \n-        final UserForm userForm = new UserForm();\n+        UserForm userForm = new UserForm();\n         userForm.username = \"foo\";\n-        // let service's login use implementation so let's mock DAO call\n-        new Expectations() {{\n-            loginDao.login(userForm);\n-            result = 1;\n-            // no expectation for loginService.login\n+        \n+        new Expectations(partialLoginService) {{\n+            // let's mock DAO call \n+            loginDao.login(userForm); result = 1; \n+            \n+            // no expectation for login method so that real implementation is used \n+            \n+            // mock setCurrentUser call \n             partialLoginService.setCurrentUser(\"foo\");\n         }};\n \n         String login = loginController.login(userForm);\n \n         Assert.assertEquals(\"OK\", login);\n-        // verify mocked call\n-        new FullVerifications(partialLoginService) {\n-        };\n-        new FullVerifications(loginDao) {\n-        };\n+        // verify mocked call \n+        new Verifications() {{\n+            partialLoginService.setCurrentUser(\"foo\");\n+        }};\n+\n     }\n }",
    "output": "Merge pull request #8486 from M-Abdelbaset/BAEL-3652/JMockit_partial_mocking\n\nBAEL-3652/JMockit_partial_mocking"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java b/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.poi.excel;\n+\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.DataFormatter;\n+import org.apache.poi.ss.usermodel.FormulaEvaluator;\n+import org.apache.poi.ss.usermodel.Workbook;\n+\n+public class ExcelCellFormatter {\n+\n+    public String getCellStringValue(Cell cell) {\n+        DataFormatter formatter = new DataFormatter();\n+        return formatter.formatCellValue(cell);\n+    }\n+\n+    public String getCellStringValueWithFormula(Cell cell, Workbook workbook) {\n+        DataFormatter formatter = new DataFormatter();\n+        FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n+        return formatter.formatCellValue(cell, evaluator);\n+    }\n+}\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void givenStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void givenBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void givenNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"1.234\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n+        assertEquals(\"1.23\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void givenFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"SUM(1+2)\", formatter.getCellStringValue(row.getCell(FORMULA_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void givenFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"3\", formatter.getCellStringValueWithFormula(row.getCell(FORMULA_CELL_INDEX), workbook));\n+        workbook.close();\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #8463 from wugangca/BAEL-3656\n\nBAEL-3656 Read Numeric Strings in Excel Cells as a String with Apache…"
  },
  {
    "input": "diff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n@@ -29,7 +29,7 @@ public void setup() throws IOException, URISyntaxException {\n     }\n \n     @Test\n-    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+    public void givenStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n         Workbook workbook = new XSSFWorkbook(fileLocation);\n         Sheet sheet = workbook.getSheetAt(0);\n         Row row = sheet.getRow(0);\n@@ -40,7 +40,7 @@ public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws\n     }\n \n     @Test\n-    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+    public void givenBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n         Workbook workbook = new XSSFWorkbook(fileLocation);\n         Sheet sheet = workbook.getSheetAt(0);\n         Row row = sheet.getRow(0);\n@@ -51,7 +51,7 @@ public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue(\n     }\n \n     @Test\n-    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+    public void givenNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n         Workbook workbook = new XSSFWorkbook(fileLocation);\n         Sheet sheet = workbook.getSheetAt(0);\n         Row row = sheet.getRow(0);\n@@ -63,7 +63,7 @@ public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue(\n     }\n \n     @Test\n-    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n+    public void givenFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n         Workbook workbook = new XSSFWorkbook(fileLocation);\n         Sheet sheet = workbook.getSheetAt(0);\n         Row row = sheet.getRow(0);\n@@ -74,7 +74,7 @@ public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaStri\n     }\n \n     @Test\n-    public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n+    public void givenFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n         Workbook workbook = new XSSFWorkbook(fileLocation);\n         Sheet sheet = workbook.getSheetAt(0);\n         Row row = sheet.getRow(0);",
    "output": "BAEL-3656 Fix typos in the unit test names."
  },
  {
    "input": "diff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/Config.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/Config.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/Config.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/Config.java\n@@ -1,4 +1,4 @@\n-package com.baeldung;\n+package com.baeldung.reactorbus;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/NotificationApplication.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/NotificationApplication.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/NotificationApplication.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/NotificationApplication.java\n@@ -1,6 +1,6 @@\n-package com.baeldung;\n+package com.baeldung.reactorbus;\n \n-import com.baeldung.consumer.NotificationConsumer;\n+import com.baeldung.reactorbus.consumer.NotificationConsumer;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.boot.SpringApplication;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/consumer/NotificationConsumer.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/consumer/NotificationConsumer.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/consumer/NotificationConsumer.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/consumer/NotificationConsumer.java\n@@ -1,10 +1,10 @@\n-package com.baeldung.consumer;\n+package com.baeldung.reactorbus.consumer;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import com.baeldung.domain.NotificationData;\n-import com.baeldung.service.NotificationService;\n+import com.baeldung.reactorbus.domain.NotificationData;\n+import com.baeldung.reactorbus.service.NotificationService;\n \n import reactor.bus.Event;\n import reactor.fn.Consumer;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/controller/NotificationController.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/controller/NotificationController.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/controller/NotificationController.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/controller/NotificationController.java\n@@ -1,11 +1,11 @@\n-package com.baeldung.controller;\n+package com.baeldung.reactorbus.controller;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.baeldung.domain.NotificationData;\n+import com.baeldung.reactorbus.domain.NotificationData;\n \n import reactor.bus.Event;\n import reactor.bus.EventBus;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/domain/NotificationData.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/domain/NotificationData.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/domain/NotificationData.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/domain/NotificationData.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.domain;\n+package com.baeldung.reactorbus.domain;\n \n public class NotificationData {\n \n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/service/NotificationService.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/service/NotificationService.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/service/NotificationService.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/service/NotificationService.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.service;\n+package com.baeldung.reactorbus.service;\n \n-import com.baeldung.domain.NotificationData;\n+import com.baeldung.reactorbus.domain.NotificationData;\n \n public interface NotificationService {\n \n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/reactorbus/service/impl/NotificationServiceimpl.java b/spring-reactor/src/main/java/com/baeldung/reactorbus/service/impl/NotificationServiceimpl.java\n--- a/spring-reactor/src/main/java/com/baeldung/reactorbus/service/impl/NotificationServiceimpl.java\n+++ b/spring-reactor/src/main/java/com/baeldung/reactorbus/service/impl/NotificationServiceimpl.java\n@@ -1,9 +1,9 @@\n-package com.baeldung.service.impl;\n+package com.baeldung.reactorbus.service.impl;\n \n import org.springframework.stereotype.Service;\n \n-import com.baeldung.domain.NotificationData;\n-import com.baeldung.service.NotificationService;\n+import com.baeldung.reactorbus.domain.NotificationData;\n+import com.baeldung.reactorbus.service.NotificationService;\n \n @Service\n public class NotificationServiceimpl implements NotificationService {\n\ndiff --git a/spring-reactor/src/test/java/com/baeldung/SpringContextTest.java b/spring-reactor/src/test/java/com/baeldung/SpringContextTest.java\n--- a/spring-reactor/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/spring-reactor/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,11 +1,11 @@\n-package org.baeldung;\n+package com.baeldung;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.NotificationApplication;\n+import com.baeldung.reactorbus.NotificationApplication;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = NotificationApplication.class)\n\ndiff --git a/spring-reactor/src/test/java/com/baeldung/reactorbus/NotificationApplicationIntegrationTest.java b/spring-reactor/src/test/java/com/baeldung/reactorbus/NotificationApplicationIntegrationTest.java\n--- a/spring-reactor/src/test/java/com/baeldung/reactorbus/NotificationApplicationIntegrationTest.java\n+++ b/spring-reactor/src/test/java/com/baeldung/reactorbus/NotificationApplicationIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung;\n+package com.baeldung.reactorbus;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;",
    "output": "BAEL-19928: Move code to com.baeldung.reactorbus package"
  },
  {
    "input": "diff --git a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n--- a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n+++ b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n@@ -133,7 +133,6 @@ public void describeTo(Description description) {\n     \n     @Test\n     public void partialMocking() {\n-\n         LoginService partialLoginService = new LoginService();\n         partialLoginService.setLoginDao(loginDao);\n         loginController.loginService = partialLoginService;\n@@ -142,24 +141,22 @@ public void partialMocking() {\n         userForm.username = \"foo\";\n         \n         new Expectations(partialLoginService) {{\n-            //let's mock loginDao#login() call \n+            // let's mock DAO call \n             loginDao.login(userForm); result = 1; \n             \n-            //no expectation for partialLoginService#login() so that real implementation is used \n+            // no expectation for login method so that real implementation is used \n             \n-            //mocking partialLoginService#setCurrentUser() \n+            // mock setCurrentUser call \n             partialLoginService.setCurrentUser(\"foo\");\n         }};\n \n         String login = loginController.login(userForm);\n \n         Assert.assertEquals(\"OK\", login);\n-        // verify that mocked partialLoginService#setCurrentUser(\"foo\") is called \n-        new Verifications() {\n-            {\n-                partialLoginService.setCurrentUser(\"foo\");\n-            }\n-        };\n+        // verify mocked call \n+        new Verifications() {{\n+            partialLoginService.setCurrentUser(\"foo\");\n+        }};\n \n     }\n }",
    "output": "first review round changes"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/test/java/com/baeldung/springbootmvc/LoginControllerUnitTest.java b/spring-boot-mvc/src/test/java/com/baeldung/springbootmvc/LoginControllerUnitTest.java\n--- a/spring-boot-mvc/src/test/java/com/baeldung/springbootmvc/LoginControllerUnitTest.java\n+++ b/spring-boot-mvc/src/test/java/com/baeldung/springbootmvc/LoginControllerUnitTest.java\n@@ -15,7 +15,7 @@\n import com.baeldung.springbootmvc.config.CustomMessageSourceConfiguration;\n \n @RunWith(SpringRunner.class)\n-@WebMvcTest(value = LoginController.class, secure = false)\n+@WebMvcTest(value = LoginController.class)\n @ContextConfiguration(classes = { SpringBootMvcApplication.class, CustomMessageSourceConfiguration.class })\n public class LoginControllerUnitTest {\n ",
    "output": "BAEL-20663: Remove usage of removed @WebMvcTest#secure property"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-keyvalue/src/main/java/com/baeldung/spring/data/keyvalue/services/impl/EmployeeServicesWithKeyValueTemplate.java b/persistence-modules/spring-data-keyvalue/src/main/java/com/baeldung/spring/data/keyvalue/services/impl/EmployeeServicesWithKeyValueTemplate.java\n--- a/persistence-modules/spring-data-keyvalue/src/main/java/com/baeldung/spring/data/keyvalue/services/impl/EmployeeServicesWithKeyValueTemplate.java\n+++ b/persistence-modules/spring-data-keyvalue/src/main/java/com/baeldung/spring/data/keyvalue/services/impl/EmployeeServicesWithKeyValueTemplate.java\n@@ -49,7 +49,7 @@ public void delete(Integer id) {\n \t@Override\n \tpublic Iterable<Employee> getSortedListOfEmployeesBySalary() {\n \t\tKeyValueQuery query = new KeyValueQuery();\n-\t\tquery.setSort(new Sort(Sort.Direction.DESC, \"salary\"));\n+\t\tquery.setSort(Sort.by(Sort.Direction.DESC, \"salary\"));\n \t\treturn keyValueTemplate.find(query, Employee.class);\n \t}\n ",
    "output": "BAEL-20663: Fix usage of org.springframework.data.domain.Sort"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n--- a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n+++ b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n@@ -266,7 +266,7 @@ public void givenUsersInDB_WhenFindAllWithSortByName_ThenReturnUsersSorted() {\n         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));\n         userRepository.save(new User(\"SAMPLE\", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));\n \n-        List<User> usersSortByName = userRepository.findAll(new Sort(Sort.Direction.ASC, \"name\"));\n+        List<User> usersSortByName = userRepository.findAll(Sort.by(Sort.Direction.ASC, \"name\"));\n \n         assertThat(usersSortByName.get(0)\n           .getName()).isEqualTo(USER_NAME_ADAM);\n@@ -278,7 +278,7 @@ public void givenUsersInDB_WhenFindAllSortWithFunction_ThenThrowException() {\n         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));\n         userRepository.save(new User(\"SAMPLE\", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));\n \n-        userRepository.findAll(new Sort(Sort.Direction.ASC, \"name\"));\n+        userRepository.findAll(Sort.by(Sort.Direction.ASC, \"name\"));\n \n         List<User> usersSortByNameLength = userRepository.findAll(Sort.by(\"LENGTH(name)\"));\n ",
    "output": "BAEL-20663: Fix usage of org.springframework.data.domain.Sort"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java\n@@ -266,7 +266,7 @@ public void givenUsersInDB_WhenFindAllWithSortByName_ThenReturnUsersSorted() {\n         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));\n         userRepository.save(new User(\"SAMPLE\", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));\n \n-        List<User> usersSortByName = userRepository.findAll(new Sort(Sort.Direction.ASC, \"name\"));\n+        List<User> usersSortByName = userRepository.findAll(Sort.by(Sort.Direction.ASC, \"name\"));\n \n         assertThat(usersSortByName.get(0)\n           .getName()).isEqualTo(USER_NAME_ADAM);\n@@ -278,7 +278,7 @@ public void givenUsersInDB_WhenFindAllSortWithFunction_ThenThrowException() {\n         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));\n         userRepository.save(new User(\"SAMPLE\", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));\n \n-        userRepository.findAll(new Sort(Sort.Direction.ASC, \"name\"));\n+        userRepository.findAll(Sort.by(Sort.Direction.ASC, \"name\"));\n \n         List<User> usersSortByNameLength = userRepository.findAll(Sort.by(\"LENGTH(name)\"));\n ",
    "output": "BAEL-20663: Fix usage of org.springframework.data.domain.Sort"
  },
  {
    "input": "diff --git a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n--- a/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n+++ b/testing-modules/mocks/src/test/java/com/baeldung/jmockit/LoginControllerIntegrationTest.java\n@@ -130,30 +130,36 @@ public void describeTo(Description description) {\n         };\n     }\n \n+    \n     @Test\n     public void partialMocking() {\n-        // use partial mock\n-        final LoginService partialLoginService = new LoginService();\n+\n+        LoginService partialLoginService = new LoginService();\n         partialLoginService.setLoginDao(loginDao);\n         loginController.loginService = partialLoginService;\n \n-        final UserForm userForm = new UserForm();\n+        UserForm userForm = new UserForm();\n         userForm.username = \"foo\";\n-        // let service's login use implementation so let's mock DAO call\n-        new Expectations() {{\n-            loginDao.login(userForm);\n-            result = 1;\n-            // no expectation for loginService.login\n+        \n+        new Expectations(partialLoginService) {{\n+            //let's mock loginDao#login() call \n+            loginDao.login(userForm); result = 1; \n+            \n+            //no expectation for partialLoginService#login() so that real implementation is used \n+            \n+            //mocking partialLoginService#setCurrentUser() \n             partialLoginService.setCurrentUser(\"foo\");\n         }};\n \n         String login = loginController.login(userForm);\n \n         Assert.assertEquals(\"OK\", login);\n-        // verify mocked call\n-        new FullVerifications(partialLoginService) {\n-        };\n-        new FullVerifications(loginDao) {\n+        // verify that mocked partialLoginService#setCurrentUser(\"foo\") is called \n+        new Verifications() {\n+            {\n+                partialLoginService.setCurrentUser(\"foo\");\n+            }\n         };\n+\n     }\n }",
    "output": "modifying partialMocking()"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n--- a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n+++ b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetDemo.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+public class InvocationTargetDemo {\n+    public static void main(String[] args) throws Throwable {\n+\n+        try {\n+\n+            InvocationTargetExample targetExample = new InvocationTargetExample();\n+            Method method = InvocationTargetExample.class.getMethod(\"divideByZeroExample\");\n+            method.invoke(targetExample);\n+        } catch (InvocationTargetException e) {\n+\n+            throw e.getCause();\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n--- a/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n+++ b/core-java-modules/core-java-reflection/src/main/java/com/baeldung/reflection/exception/invocationtarget/InvocationTargetExample.java\n@@ -0,0 +1,7 @@\n+package com.baeldung.reflection.exception.invocationtarget;\n+\n+public class InvocationTargetExample {\n+    public int divideByZeroExample() {\n+        return 1 / 0;\n+    }\n+}\n\\ No newline at end of file",
    "output": "BAEL-3504: Article - what causes invocation-target-exception : done"
  },
  {
    "input": "diff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;\n@@ -27,7 +27,7 @@ public DataSource dataSource() {\n     public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {\n         LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource);\n-        em.setPackagesToScan(\"com.baeldung.domain\");\n+        em.setPackagesToScan(\"com.baeldung.themes.domain\");\n         em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n         return em;\n     }\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n \n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n-import com.baeldung.theme.resolver.UserPreferenceThemeResolver;\n+import com.baeldung.themes.resolver.UserPreferenceThemeResolver;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.web.WebApplicationInitializer;\n import org.springframework.web.context.ContextLoaderListener;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java b/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.controllers;\n+package com.baeldung.themes.controllers;\n \n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java b/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.domain;\n+package com.baeldung.themes.domain;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java b/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.repository;\n+package com.baeldung.themes.repository;\n \n-import com.baeldung.domain.UserPreference;\n+import com.baeldung.themes.domain.UserPreference;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n public interface UserPreferenceRepository extends PagingAndSortingRepository<UserPreference, String> {\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java b/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n@@ -1,7 +1,7 @@\n-package com.baeldung.theme.resolver;\n+package com.baeldung.themes.resolver;\n \n-import com.baeldung.domain.UserPreference;\n-import com.baeldung.repository.UserPreferenceRepository;\n+import com.baeldung.themes.domain.UserPreference;\n+import com.baeldung.themes.repository.UserPreferenceRepository;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContextHolder;",
    "output": "Merge pull request #8483 from sandy03934/BAEL-3283\n\nBAEL-3283 - Moved the code to a single package meant for the themes t…"
  },
  {
    "input": "diff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/DataSourceConfig.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;\n@@ -27,7 +27,7 @@ public DataSource dataSource() {\n     public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {\n         LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource);\n-        em.setPackagesToScan(\"com.baeldung.domain\");\n+        em.setPackagesToScan(\"com.baeldung.themes.domain\");\n         em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n         return em;\n     }\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/InitSecurity.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n \n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/SecurityConfig.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/ThemeMVCConfig.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n-import com.baeldung.theme.resolver.UserPreferenceThemeResolver;\n+import com.baeldung.themes.resolver.UserPreferenceThemeResolver;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java b/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/config/WebInitializer.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.config;\n+package com.baeldung.themes.config;\n \n import org.springframework.web.WebApplicationInitializer;\n import org.springframework.web.context.ContextLoaderListener;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java b/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/controllers/AppController.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.controllers;\n+package com.baeldung.themes.controllers;\n \n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java b/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/domain/UserPreference.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.domain;\n+package com.baeldung.themes.domain;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java b/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/repository/UserPreferenceRepository.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.repository;\n+package com.baeldung.themes.repository;\n \n-import com.baeldung.domain.UserPreference;\n+import com.baeldung.themes.domain.UserPreference;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n public interface UserPreferenceRepository extends PagingAndSortingRepository<UserPreference, String> {\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java b/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/themes/resolver/UserPreferenceThemeResolver.java\n@@ -1,7 +1,7 @@\n-package com.baeldung.theme.resolver;\n+package com.baeldung.themes.resolver;\n \n-import com.baeldung.domain.UserPreference;\n-import com.baeldung.repository.UserPreferenceRepository;\n+import com.baeldung.themes.domain.UserPreference;\n+import com.baeldung.themes.repository.UserPreferenceRepository;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContextHolder;",
    "output": "BAEL-3283 - Moved the code to a single package meant for the themes tutorial."
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+public class HeapNode {\r\n+\r\n+    int element;\r\n+    int arrayIndex;\r\n+    int nextElementIndex = 1;\r\n+\r\n+    public HeapNode(int element, int arrayIndex) {\r\n+        this.element = element;\r\n+        this.arrayIndex = arrayIndex;\r\n+    }\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n@@ -0,0 +1,88 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+public class MinHeap {\r\n+\r\n+    HeapNode[] heapNodes;\r\n+\r\n+    public MinHeap(HeapNode heapNodes[]) {\r\n+        this.heapNodes = heapNodes;\r\n+        heapifyFromLastLeafsParent();\r\n+    }\r\n+\r\n+    void heapifyFromLastLeafsParent() {\r\n+        int lastLeafsParentIndex = getParentNodeIndex(heapNodes.length);\r\n+        while (lastLeafsParentIndex >= 0) {\r\n+            heapify(lastLeafsParentIndex);\r\n+            lastLeafsParentIndex--;\r\n+        }\r\n+    }\r\n+\r\n+    void heapify(int index) {\r\n+        int leftNodeIndex = getLeftNodeIndex(index);\r\n+        int rightNodeIndex = getRightNodeIndex(index);\r\n+        int smallestElementIndex = index;\r\n+        if (leftNodeIndex < heapNodes.length && heapNodes[leftNodeIndex].element < heapNodes[index].element) {\r\n+            smallestElementIndex = leftNodeIndex;\r\n+        }\r\n+        if (rightNodeIndex < heapNodes.length && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element) {\r\n+            smallestElementIndex = rightNodeIndex;\r\n+        }\r\n+        if (smallestElementIndex != index) {\r\n+            swap(index, smallestElementIndex);\r\n+            heapify(smallestElementIndex);\r\n+        }\r\n+    }\r\n+\r\n+    int getParentNodeIndex(int index) {\r\n+        return (index - 1) / 2;\r\n+    }\r\n+\r\n+    int getLeftNodeIndex(int index) {\r\n+        return (2 * index + 1);\r\n+    }\r\n+\r\n+    int getRightNodeIndex(int index) {\r\n+        return (2 * index + 2);\r\n+    }\r\n+\r\n+    HeapNode getRootNode() {\r\n+        return heapNodes[0];\r\n+    }\r\n+\r\n+    void heapifyFromRoot() {\r\n+        heapify(0);\r\n+    }\r\n+\r\n+    void swap(int i, int j) {\r\n+        HeapNode temp = heapNodes[i];\r\n+        heapNodes[i] = heapNodes[j];\r\n+        heapNodes[j] = temp;\r\n+    }\r\n+    \r\n+    static int[] merge(int[][] array) {\r\n+        HeapNode[] heapNodes = new HeapNode[array.length];\r\n+        int resultingArraySize = 0;\r\n+\r\n+        for (int i = 0; i < array.length; i++) {\r\n+            HeapNode node = new HeapNode(array[i][0], i);\r\n+            heapNodes[i] = node;\r\n+            resultingArraySize += array[i].length;\r\n+        }\r\n+        \r\n+        MinHeap minHeap = new MinHeap(heapNodes);\r\n+        int[] resultingArray = new int[resultingArraySize];\r\n+\r\n+        for (int i = 0; i < resultingArraySize; i++) {\r\n+            HeapNode root = minHeap.getRootNode();\r\n+            resultingArray[i] = root.element;\r\n+\r\n+            if (root.nextElementIndex < array[root.arrayIndex].length) {\r\n+                root.element = array[root.arrayIndex][root.nextElementIndex++];\r\n+            } else {\r\n+                root.element = Integer.MAX_VALUE;\r\n+            }\r\n+            minHeap.heapifyFromRoot();\r\n+        }\r\n+        return resultingArray;\r\n+    }\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+import static org.hamcrest.CoreMatchers.equalTo;\r\n+import static org.hamcrest.CoreMatchers.is;\r\n+import static org.junit.Assert.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class MinHeapUnitTest {\r\n+\r\n+    private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\r\n+    private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\r\n+\r\n+    @Test\r\n+    public void givenSortedArrays_whenMerged_thenShouldReturnASingleSortedarray() {\r\n+        int[] resultArray = MinHeap.merge(inputArray);\r\n+        \r\n+        assertThat(resultArray.length, is(equalTo(10)));\r\n+        assertThat(resultArray, is(equalTo(expectedArray)));\r\n+    }\r\n+    \r\n+}\r",
    "output": "Merge pull request #8374 from tinomthomas/master\n\nBAEL- 3482"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/ternaryoperator/TernaryOperatorUnitTest.java b/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/ternaryoperator/TernaryOperatorUnitTest.java\n--- a/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/ternaryoperator/TernaryOperatorUnitTest.java\n+++ b/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/ternaryoperator/TernaryOperatorUnitTest.java\n@@ -6,15 +6,15 @@\n public class TernaryOperatorUnitTest {\n \n     @Test\n-    public void givenACondition_whenUsingTernaryOperator_thenItEvaluatesConditionAndReturnsAValue() {\n+    public void whenUsingTernaryOperator_thenConditionIsEvaluatedAndValueReturned() {\n         int number = 10;\n         String msg = number > 10 ? \"Number is greater than 10\" : \"Number is less than or equal to 10\";\n \n         assertThat(msg).isEqualTo(\"Number is less than or equal to 10\");\n     }\n \n     @Test\n-    public void givenATrueCondition_whenUsingTernaryOperator_thenOnlyExpression1IsEvaluated() {\n+    public void whenConditionIsTrue_thenOnlyFirstExpressionIsEvaluated() {\n         int exp1 = 0, exp2 = 0;\n         int result = 12 > 10 ? ++exp1 : ++exp2;\n \n@@ -24,7 +24,7 @@ public void givenATrueCondition_whenUsingTernaryOperator_thenOnlyExpression1IsEv\n     }\n \n     @Test\n-    public void givenAFalseCondition_whenUsingTernaryOperator_thenOnlyExpression2IsEvaluated() {\n+    public void whenConditionIsFalse_thenOnlySecondExpressionIsEvaluated() {\n         int exp1 = 0, exp2 = 0;\n         int result = 8 > 10 ? ++exp1 : ++exp2;\n ",
    "output": "BAEL-3693: Rename test methods (#8482)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n@@ -14,20 +14,21 @@ public class PrimeNumbers extends RecursiveAction {\n     private int granularity;\n     static final List<Integer> GRANULARITIES\n       = Arrays.asList(1, 10, 100, 1000, 10000);\n-    private AtomicInteger noOfPrimeNumbers = new AtomicInteger();\n+    private AtomicInteger noOfPrimeNumbers;\n \n-    PrimeNumbers(int lowerBound, int upperBound, int granularity) {\n+    PrimeNumbers(int lowerBound, int upperBound, int granularity, AtomicInteger noOfPrimeNumbers) {\n         this.lowerBound = lowerBound;\n         this.upperBound = upperBound;\n         this.granularity = granularity;\n+        this.noOfPrimeNumbers = noOfPrimeNumbers;\n     }\n \n     PrimeNumbers(int upperBound) {\n-        this(1, upperBound, 100);\n+        this(1, upperBound, 100, new AtomicInteger(0));\n     }\n \n-    private PrimeNumbers(int lowerBound, int upperBound) {\n-        this(lowerBound, upperBound, 100);\n+    private PrimeNumbers(int lowerBound, int upperBound, AtomicInteger noOfPrimeNumbers) {\n+        this(lowerBound, upperBound, 100, noOfPrimeNumbers);\n     }\n \n     private List<PrimeNumbers> subTasks() {\n@@ -36,7 +37,7 @@ private List<PrimeNumbers> subTasks() {\n         for (int i = 1; i <= this.upperBound / granularity; i++) {\n             int upper = i * granularity;\n             int lower = (upper - granularity) + 1;\n-            subTasks.add(new PrimeNumbers(lower, upper));\n+            subTasks.add(new PrimeNumbers(lower, upper, noOfPrimeNumbers));\n         }\n         return subTasks;\n     }\n@@ -81,4 +82,4 @@ private boolean isPrime(int number) {\n     public int noOfPrimeNumbers() {\n         return noOfPrimeNumbers.intValue();\n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n@@ -1,6 +1,5 @@\n package com.baeldung.workstealing;\n \n-\n import org.junit.Test;\n import org.openjdk.jmh.annotations.*;\n import org.openjdk.jmh.runner.Runner;\n@@ -11,6 +10,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.logging.Logger;\n \n import static org.junit.Assert.fail;\n@@ -59,7 +59,7 @@ public void givenCommonPool_whenGettingPrimes_thenStealCountChangesSlowly() {\n     }\n \n     private void stealCountInfo(StringBuilder info, int granularity, ForkJoinPool forkJoinPool) {\n-        PrimeNumbers primes = new PrimeNumbers(1, 10000, granularity);\n+        PrimeNumbers primes = new PrimeNumbers(1, 10000, granularity, new AtomicInteger(0));\n         forkJoinPool.invoke(primes);\n         forkJoinPool.shutdown();\n ",
    "output": "Adding constructor that takes in an AtomicInteger argument to count the total number of prime numbers"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n@@ -127,7 +127,6 @@ public static long factorialUsingEAAsync(int number) {\n     }\n \n     /**\n-     * \n      * Finds factorial of a number using Async of Cactoos\n      * @param number\n      * @return\n@@ -170,7 +169,6 @@ public Long call() {\n     }\n \n     /**\n-     * \n      * Finds factorial of a number using @Async of jcabi-aspects\n      * @param number\n      * @return",
    "output": "review changes"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/powerset/PowerSetUtility.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/powerset/PowerSetUtility.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/powerset/PowerSetUtility.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/powerset/PowerSetUtility.java\n@@ -1,7 +1,5 @@\n package com.baeldung.powerset;\n \n-import com.google.common.collect.Sets;\n-\n import javax.annotation.Nullable;\n import java.util.AbstractSet;\n import java.util.ArrayList;\n@@ -163,7 +161,7 @@ public Set<Set<T>> recursivePowerSetIndexRepresentation(Collection<T> set) {\n         return unMapIndex(powerSetIndices);\n     }\n \n-    private List<List<Boolean>> iterativePowerSetByLoopOverNumbersWithReverseLexicographicalOrder(int n) {\n+    private List<List<Boolean>> iterativePowerSetByLoopOverNumbers(int n) {\n         List<List<Boolean>> powerSet = new ArrayList<>();\n         for (int i = 0; i < (1 << n); i++) {\n             List<Boolean> subset = new ArrayList<>(n);\n@@ -174,7 +172,7 @@ private List<List<Boolean>> iterativePowerSetByLoopOverNumbersWithReverseLexicog\n         return powerSet;\n     }\n \n-    private List<List<Boolean>> iterativePowerSetByLoopOverNumbersWithGrayCodeOrder(int n) {\n+    private List<List<Boolean>> iterativePowerSetByLoopOverNumbersWithMinimalChange(int n) {\n         List<List<Boolean>> powerSet = new ArrayList<>();\n         for (int i = 0; i < (1 << n); i++) {\n             List<Boolean> subset = new ArrayList<>(n);\n@@ -195,32 +193,16 @@ public Set<Set<T>> recursivePowerSetBinaryRepresentation(Collection<T> set) {\n \n     public List<List<T>> iterativePowerSetByLoopOverNumbers(Set<T> set) {\n         initializeMap(set);\n-                List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbersWithReverseLexicographicalOrder(set.size());\n+        List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbers(set.size());\n         return unMapListBinary(sets);\n     }\n \n     public List<List<T>> iterativePowerSetByLoopOverNumbersMinimalChange(Set<T> set) {\n         initializeMap(set);\n-        List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbersWithGrayCodeOrder(set.size());\n+        List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbersWithMinimalChange(set.size());\n         return unMapListBinary(sets);\n     }\n \n-    public static int getRankInLexicographicalOrder(List<Boolean> subset) {\n-        int rank = 0;\n-        for (int i = 0; i < subset.size(); i++)\n-            if (subset.get(i))\n-                rank += (1 << (subset.size() - i - 1));\n-        return rank;\n-    }\n-\n-    public static List<Boolean> getSubsetForRankInLexicographicalOrder(int rank, int sizeOfSet) {\n-        Boolean[] subset = new Boolean[sizeOfSet];\n-        for(int j = 0; j < sizeOfSet; j++) {\n-            subset[sizeOfSet - j - 1] = ((rank & (1 << j)) > 0);\n-        }\n-        return Arrays.asList(subset);\n-    }\n-\n     private Set<Set<Integer>> recursivePowerSetIndexRepresentation(int idx, int n) {\n         if (idx == n) {\n             Set<Set<Integer>> empty = new HashSet<>();\n\ndiff --git a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/powerset/PowerSetUtilityUnitTest.java b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/powerset/PowerSetUtilityUnitTest.java\n--- a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/powerset/PowerSetUtilityUnitTest.java\n+++ b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/powerset/PowerSetUtilityUnitTest.java\n@@ -137,7 +137,7 @@ public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbers_\n     }\n \n     @Test\n-    public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbersMinimalChange_ThenItContainsAllSubsetsInGrayOrder() {\n+    public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbersWithMinimalChange_ThenItContainsAllSubsets() {\n \n         Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n         List<List<String>> powerSet = new PowerSetUtility<String>().iterativePowerSetByLoopOverNumbersMinimalChange(set);\n@@ -172,42 +172,6 @@ public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbersM\n         }\n     }\n \n-    @Test\n-    public void givenSubset_WhenPowerSetIsInLexicographicalOrder_ReturnCorrectRank() {\n-        int n = new Random().nextInt(5) + 5; //a number in [5, 10)\n-        for(int i = 0; i < ( 1 << n); i++) {\n-            Boolean[] subset = new Boolean[n];\n-            for(int j=0; j < n; j++) {\n-                subset[n - j - 1] = ((i & (1 << j)) > 0);\n-            }\n-            Assertions.assertEquals(i, PowerSetUtility.getRankInLexicographicalOrder(Arrays.asList(subset)));\n-        }\n-    }\n-\n-    @Test\n-    public void givenRanking_WhenPowerSetIsInLexicographicalOrder_ReturnTheSubset() {\n-        int n = new Random().nextInt(5) + 5; //a number in [5, 10)\n-        List<List<Boolean>> powerSet = new ArrayList<>();\n-        for(int i = 0; i < (1 << n); i++) {\n-            powerSet.add(PowerSetUtility.getSubsetForRankInLexicographicalOrder(i, n));\n-        }\n-        //To make sure that the size of power set is (2 power n)\n-        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << n)));\n-        //To make sure that number of occurrence of each index is (2 power n-1)\n-        Map<Integer, Integer> counter = new HashMap<>();\n-        for (List<Boolean> subset : powerSet) {\n-            for (int i = 0; i < subset.size(); i++) {\n-                if(subset.get(i)) {\n-                    int num = counter.getOrDefault(i, 0);\n-                    counter.put(i, num + 1);\n-                }\n-            }\n-        }\n-        counter.forEach((k, v) -> Assertions.assertEquals((1 << (n - 1)), v.intValue()));\n-        //To make sure that one subset is not generated twice\n-        Assertions.assertEquals(powerSet.size(), new HashSet<>(powerSet).size());\n-    }\n-\n     static class RandomSetOfStringGenerator {\n         private static List<String> fruits = Arrays.asList(\"Apples\", \"Avocados\", \"Banana\", \"Blueberry\", \"Cherry\", \"Clementine\", \"Cucumber\", \"Date\", \"Fig\",\n           \"Grapefruit\"/*, \"Grape\", \"Kiwi\", \"Lemon\", \"Mango\", \"Mulberry\", \"Melon\", \"Nectarine\", \"Olive\", \"Orange\"*/);",
    "output": "Powerset (#8475)\n\n* PowerSet generation is Java and respective unit tests are added\r\n\r\n* function name is adjusted to the actual ordering name (Reverse Lexicographical ordering)\r\n\r\n* Guava example test function is changed\r\n\r\n* LazyLoad powerSet (based on Guava implementation) is added\r\n\r\n* set is used instead of map.keySet()\r\n\r\n* Lexicographic Order and Gray Order are removed from function names. Unused function (rank and unrank), which are not used in the text, are removed"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n@@ -10,10 +10,7 @@ public class Employee {\n     private int id;\n     private String name;\n     @ElementCollection\n-    @CollectionTable(\n-            name = \"employee_phone\",\n-            joinColumns = @JoinColumn(name = \"employee_id\")\n-    )\n+    @CollectionTable(name = \"employee_phone\", joinColumns = @JoinColumn(name = \"employee_id\"))\n     private List<Phone> phones;\n \n     public Employee() {\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n@@ -51,9 +51,8 @@ public boolean equals(Object o) {\n             return false;\n         }\n         Phone phone = (Phone) o;\n-        return getType().equals(phone.getType()) &&\n-                getAreaCode().equals(phone.getAreaCode()) &&\n-                getNumber().equals(phone.getNumber());\n+        return getType().equals(phone.getType()) && getAreaCode().equals(phone.getAreaCode())\n+                && getNumber().equals(phone.getNumber());\n     }\n \n     @Override\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n@@ -32,7 +32,8 @@ public Employee findById(int id) {\n     }\n \n     public Employee findByJPQL(int id) {\n-        return em.createQuery(\"SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id\", Employee.class).setParameter(\"id\", id).getSingleResult();\n+        return em.createQuery(\"SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id\", Employee.class)\n+                .setParameter(\"id\", id).getSingleResult();\n     }\n \n     public Employee findByEntityGraph(int id) {\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n@@ -27,7 +27,8 @@ public class ElementCollectionIntegrationTest {\n     @Before\n     public void init() {\n         Employee employee = new Employee(1, \"Fred\");\n-        employee.setPhones(Arrays.asList(new Phone(\"work\", \"+55\", \"99999-9999\"), new Phone(\"home\", \"+55\", \"98888-8888\")));\n+        employee.setPhones(\n+                Arrays.asList(new Phone(\"work\", \"+55\", \"99999-9999\"), new Phone(\"home\", \"+55\", \"98888-8888\")));\n         employeeRepository.save(employee);\n     }\n ",
    "output": "*Fix indentation"
  },
  {
    "input": "diff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n@@ -1,128 +0,0 @@\n-package com.baeldung.poi.excel;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-\n-import org.apache.poi.ss.usermodel.Cell;\n-import org.apache.poi.ss.usermodel.CellStyle;\n-import org.apache.poi.ss.usermodel.DataFormat;\n-import org.apache.poi.ss.usermodel.Row;\n-import org.apache.poi.ss.usermodel.Sheet;\n-import org.apache.poi.ss.usermodel.Workbook;\n-import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class ExcelCellFormatterIntegrationTest {\n-    private static int STRING_CELL_INDEX = 0;\n-    private static int BOOLEAN_CELL_INDEX = 1;\n-    private static int RAW_NUMERIC_CELL_INDEX = 2;\n-    private static int FORMATTED_NUMERIC_CELL_INDEX = 3;\n-    private static int FORMULA_CELL_INDEX = 4;\n-\n-    private String fileLocation;\n-\n-    @Before\n-    public void generateExcelFile() throws IOException {\n-\n-        Workbook workbook = new XSSFWorkbook();\n-\n-        Sheet sheet = workbook.createSheet(\"Test\");\n-        Row row = sheet.createRow(0);\n-        Cell cell = row.createCell(STRING_CELL_INDEX);\n-        cell.setCellValue(\"String Test\"); // STRING cell\n-\n-        cell = row.createCell(BOOLEAN_CELL_INDEX);\n-        cell.setCellValue(true); // BOOLEAN cell\n-\n-        cell = row.createCell(RAW_NUMERIC_CELL_INDEX);\n-        cell.setCellValue(1234.5678); // NUMERIC cell\n-\n-        cell = row.createCell(FORMATTED_NUMERIC_CELL_INDEX);\n-        cell.setCellValue(1234.5678);\n-        CellStyle curStyle = workbook.createCellStyle();\n-        DataFormat df = workbook.createDataFormat();\n-        curStyle.setDataFormat(df.getFormat(\"$#,##0.00\"));\n-        cell.setCellStyle(curStyle); // NUMERIC cell with format rule\n-\n-        cell = row.createCell(FORMULA_CELL_INDEX);\n-        cell.setCellFormula(\"SUM(C1:D1)\"); // FORMULA cell\n-\n-        File tempFile = File.createTempFile(\"ExcelCellFormatterIntegrationTest\", \".xlsx\");\n-\n-        fileLocation = tempFile.getAbsolutePath();\n-\n-        FileOutputStream outputStream = new FileOutputStream(fileLocation);\n-        workbook.write(outputStream);\n-        workbook.close();\n-        outputStream.close();\n-    }\n-\n-    @Test\n-    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n-        Workbook workbook = new XSSFWorkbook(fileLocation);\n-        Sheet sheet = workbook.getSheetAt(0);\n-        Row row = sheet.getRow(0);\n-\n-        ExcelCellFormatter formatter = new ExcelCellFormatter();\n-        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n-        workbook.close();\n-    }\n-\n-    @Test\n-    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n-        Workbook workbook = new XSSFWorkbook(fileLocation);\n-        Sheet sheet = workbook.getSheetAt(0);\n-        Row row = sheet.getRow(0);\n-\n-        ExcelCellFormatter formatter = new ExcelCellFormatter();\n-        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n-        workbook.close();\n-    }\n-\n-    @Test\n-    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n-        Workbook workbook = new XSSFWorkbook(fileLocation);\n-        Sheet sheet = workbook.getSheetAt(0);\n-        Row row = sheet.getRow(0);\n-\n-        ExcelCellFormatter formatter = new ExcelCellFormatter();\n-        assertEquals(\"1234.5678\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n-        assertEquals(\"$1,234.57\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n-        workbook.close();\n-    }\n-\n-    @Test\n-    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n-        Workbook workbook = new XSSFWorkbook(fileLocation);\n-        Sheet sheet = workbook.getSheetAt(0);\n-        Row row = sheet.getRow(0);\n-\n-        ExcelCellFormatter formatter = new ExcelCellFormatter();\n-        assertEquals(\"SUM(C1:D1)\", formatter.getCellStringValue(row.getCell(FORMULA_CELL_INDEX)));\n-        workbook.close();\n-    }\n-\n-    @Test\n-    public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n-        Workbook workbook = new XSSFWorkbook(fileLocation);\n-        Sheet sheet = workbook.getSheetAt(0);\n-        Row row = sheet.getRow(0);\n-\n-        ExcelCellFormatter formatter = new ExcelCellFormatter();\n-        assertEquals(\"2469.1356\", formatter.getCellStringValueWithFormula(row.getCell(FORMULA_CELL_INDEX), workbook));\n-        workbook.close();\n-    }\n-\n-    @After\n-    public void cleanup() {\n-        File testFile = new File(fileLocation);\n-        if (testFile.exists()) {\n-            testFile.deleteOnExit();\n-        }\n-    }\n-}\n\\ No newline at end of file\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java\n@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"1.234\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n+        assertEquals(\"1.23\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"SUM(1+2)\", formatter.getCellStringValue(row.getCell(FORMULA_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"3\", formatter.getCellStringValueWithFormula(row.getCell(FORMULA_CELL_INDEX), workbook));\n+        workbook.close();\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "BAEL-3656 Change the integration test into unit test."
  },
  {
    "input": "diff --git a/spring-core-2/src/main/java/com/baeldung/scopes/ScopesConfig.java b/spring-core-2/src/main/java/com/baeldung/scopes/ScopesConfig.java\n--- a/spring-core-2/src/main/java/com/baeldung/scopes/ScopesConfig.java\n+++ b/spring-core-2/src/main/java/com/baeldung/scopes/ScopesConfig.java\n@@ -0,0 +1,49 @@\n+package com.baeldung.scopes;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.web.context.annotation.ApplicationScope;\n+import org.springframework.web.context.annotation.RequestScope;\n+import org.springframework.web.context.annotation.SessionScope;\n+\n+@Configuration\n+public class ScopesConfig {\n+\n+    @Bean\n+    @Scope(\"singleton\")\n+    public Person personSingleton() {\n+        return new Person();\n+    }\n+\n+    @Bean\n+    @Scope(\"prototype\")\n+    public Person personPrototype() {\n+        return new Person();\n+    }\n+\n+    @Bean\n+    @RequestScope\n+    public HelloMessageGenerator requestScopedBean() {\n+        return new HelloMessageGenerator();\n+    }\n+\n+    @Bean\n+    @SessionScope\n+    public HelloMessageGenerator sessionScopedBean() {\n+        return new HelloMessageGenerator();\n+    }\n+\n+    @Bean\n+    @ApplicationScope\n+    public HelloMessageGenerator applicationScopedBean() {\n+        return new HelloMessageGenerator();\n+    }\n+\n+    @Bean\n+    @Scope(scopeName = \"websocket\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n+    public HelloMessageGenerator websocketScopedBean() {\n+        return new HelloMessageGenerator();\n+    }\n+}",
    "output": "BAEL-3719: Add missing code (#8470)"
  },
  {
    "input": "diff --git a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n--- a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n+++ b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.mockito;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+import java.util.List;\n+\n+public class MockitoAnnotationsUninitializedUnitTest {\n+\n+    @Mock\n+    List<String> mockedList;\n+\n+    @Test(expected = NullPointerException.class)\n+    public void whenMockitoAnnotationsUninitialized_thenNPEThrown() {\n+        Mockito.when(mockedList.size()).thenReturn(1);\n+    }\n+}",
    "output": "Merge pull request #8461 from kwoyke/BAEL-3700\n\nBAEL-3700: Add example of uninitialized Mockito annotations"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+public class Book {\n+\n+    private String title;\n+    private String author;\n+    \n+    public Book(String title, String author) {\n+        this.title = title;\n+        this.author = author;\n+    }\n+    \n+    public Book() {}\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+    \n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+    \n+    public String getAuthor() {\n+        return author;\n+    }\n+    \n+    public void setAuthor(String author) {\n+        this.author = author;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Book [title=\" + title + \", author=\" + author + \"]\";\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class BookStore {\n+    private List<Book> books = new ArrayList<>();\n+\n+    public void addBook(Book book) {\n+        books.add(book);\n+    }\n+\n+    public void addAllBooks(Collection<Book> books) {\n+        this.books.addAll(books);\n+    }\n+\n+    public List<Book> booksByAuthor(String author) {\n+        return books.stream()\n+          .filter(book -> Objects.equals(author, book.getAuthor()))\n+          .collect(Collectors.toList());\n+    }\n+\n+    public Optional<Book> bookByTitle(String title) {\n+        return books.stream()\n+          .filter(book -> book.getTitle().equals(title))\n+          .findFirst();\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import io.cucumber.core.api.Scenario;\n+import io.cucumber.java.After;\n+import io.cucumber.java.AfterStep;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.BeforeStep;\n+import io.cucumber.java8.En;\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(features = \"classpath:features/book-store-with-hooks.feature\",\n+  glue = \"com.baeldung.cucumberhooks.books\"\n+)\n+public class BookStoreWithHooksIntegrationTest implements En {\n+\n+    public BookStoreWithHooksIntegrationTest() {\n+        Before(1, () -> startBrowser());\n+    }\n+\n+    @Before(order=2, value=\"@Screenshots\")\n+    public void beforeScenario(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @After\n+    public void afterScenario(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @BeforeStep\n+    public void beforeStep(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @AfterStep\n+    public void afterStep(Scenario scenario) {\n+        takeScreenshot();\n+        closeBrowser();\n+    }\n+\n+    public void takeScreenshot() {\n+        //code to take and save screenshot\n+    }\n+\n+    public void startBrowser() {\n+        //code to open browser\n+    }\n+\n+    public void closeBrowser() {\n+        //code to close browser\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n@@ -0,0 +1,44 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.java8.En;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BookStoreWithHooksRunSteps implements En {\n+\n+    private BookStore store;\n+    private List<Book> foundBooks;\n+    private Book foundBook;\n+\n+    public BookStoreWithHooksRunSteps() {\n+        store = new BookStore();\n+        foundBooks = new ArrayList<>();\n+    }\n+\n+    @Given(\"^The following books are available in the store$\")\n+    public void haveBooksInTheStore(DataTable table) {\n+        List<List<String>> rows = table.asLists(String.class);\n+\n+        for (List<String> columns: rows) {\n+            store.addBook(new Book(columns.get(0), columns.get(1)));\n+        }\n+    }\n+\n+    @When(\"^I ask for a book by the author (.+)$\")\n+    public void searchForBooksByAuthor(String author) {\n+        foundBooks = store.booksByAuthor(author);\n+    }\n+\n+    @Then(\"^The salesperson says that there are (\\\\d+) books$\")\n+    public void findBooks(int count) {\n+        assertEquals(count, foundBooks.size());\n+    }\n+\n+}",
    "output": "Merge pull request #8449 from Maiklins/BAEL-3590-cucumber-hooks\n\nBAEL-3590 cucumber hooks"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n@@ -0,0 +1,83 @@\n+package com.baeldung.poi.excel.read.cellvalueandnotformula;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.FormulaEvaluator;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.util.CellAddress;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+\n+public class CellValueAndNotFormulaHelper {\n+\n+    public Object getCellValueByFetchingLastCachedValue(String fileLocation, String cellLocation) throws IOException {\n+        Object cellValue = new Object();\n+\n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n+        Workbook workbook = new XSSFWorkbook(inputStream);\n+\n+        Sheet sheet = workbook.getSheetAt(0);\n+\n+        CellAddress cellAddress = new CellAddress(cellLocation);\n+        Row row = sheet.getRow(cellAddress.getRow());\n+        Cell cell = row.getCell(cellAddress.getColumn());\n+\n+        if (cell.getCellType() == CellType.FORMULA) {\n+            switch (cell.getCachedFormulaResultType()) {\n+                case BOOLEAN:\n+                    cellValue = cell.getBooleanCellValue();\n+                    break;\n+                case NUMERIC:\n+                    cellValue = cell.getNumericCellValue();\n+                    break;\n+                case STRING:\n+                    cellValue = cell.getStringCellValue();\n+                    break;\n+                default:\n+                    cellValue = null;\n+            }\n+        }\n+\n+        workbook.close();\n+        return cellValue;\n+    }\n+\n+    public Object getCellValueByEvaluatingFormula(String fileLocation, String cellLocation) throws IOException {\n+        Object cellValue = new Object();\n+\n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n+        Workbook workbook = new XSSFWorkbook(inputStream);\n+\n+        Sheet sheet = workbook.getSheetAt(0);\n+        FormulaEvaluator evaluator = workbook.getCreationHelper()\n+            .createFormulaEvaluator();\n+\n+        CellAddress cellAddress = new CellAddress(cellLocation);\n+        Row row = sheet.getRow(cellAddress.getRow());\n+        Cell cell = row.getCell(cellAddress.getColumn());\n+\n+        if (cell.getCellType() == CellType.FORMULA) {\n+            switch (evaluator.evaluateFormulaCell(cell)) {\n+                case BOOLEAN:\n+                    cellValue = cell.getBooleanCellValue();\n+                    break;\n+                case NUMERIC:\n+                    cellValue = cell.getNumericCellValue();\n+                    break;\n+                case STRING:\n+                    cellValue = cell.getStringCellValue();\n+                    break;\n+                default:\n+                    cellValue = null;\n+            }\n+        }\n+\n+        workbook.close();\n+        return cellValue;\n+    }\n+}\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.poi.excel.read.cellvalueandnotformula;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CellValueAndNotFormulaUnitTest {\n+\n+    private CellValueAndNotFormulaHelper readCellValueAndNotFormulaHelper;\n+    private String fileLocation;\n+    private static final String FILE_NAME = \"test.xlsx\";\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+        readCellValueAndNotFormulaHelper = new CellValueAndNotFormulaHelper();\n+    }\n+\n+    @Test\n+    public void givenExcelCell_whenReadCellValueByLastCachedValue_thenProduceCorrectResult() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueAndNotFormulaHelper.getCellValueByFetchingLastCachedValue(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+\n+    @Test\n+    public void givenExcelCell_whenReadCellValueByEvaluatingFormula_thenProduceCorrectResult() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueAndNotFormulaHelper.getCellValueByEvaluatingFormula(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+}",
    "output": "Merge pull request #8414 from SunilJain95/master\n\nBAEL-3658: Read actual cell value rather than the formula that is evaluating it"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/async/JavaAsync.java\n@@ -11,7 +11,6 @@\n \n import com.google.common.util.concurrent.AsyncCallable;\n import com.google.common.util.concurrent.Callables;\n-import com.google.common.util.concurrent.FutureCallback;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;",
    "output": "organized imports"
  },
  {
    "input": "diff --git a/open-liberty/src/main/java/com/baeldung/openliberty/SystemApplication.java b/open-liberty/src/main/java/com/baeldung/openliberty/SystemApplication.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/SystemApplication.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/SystemApplication.java\n@@ -0,0 +1,9 @@\n+package com.baeldung.openliberty;\n+\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/system\")\n+public class SystemApplication extends Application {\n+\n+}\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/SystemLivenessCheck.java b/open-liberty/src/main/java/com/baeldung/openliberty/SystemLivenessCheck.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/SystemLivenessCheck.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/SystemLivenessCheck.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.openliberty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.ManagementFactory;\n+\n+import org.eclipse.microprofile.health.Liveness;\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+\n+@Liveness\n+@ApplicationScoped\n+public class SystemLivenessCheck implements HealthCheck {\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        MemoryMXBean memBean = ManagementFactory.getMemoryMXBean();\n+        long memUsed = memBean.getHeapMemoryUsage().getUsed();\n+        long memMax = memBean.getHeapMemoryUsage().getMax();\n+\n+        return HealthCheckResponse.named(\n+            SystemResource.class.getSimpleName() + \" liveness check\")\n+                                  .withData(\"memory used\", memUsed)\n+                                  .withData(\"memory max\", memMax)\n+                                  .state(memUsed < memMax * 0.9).build();\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/SystemReadinessCheck.java b/open-liberty/src/main/java/com/baeldung/openliberty/SystemReadinessCheck.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/SystemReadinessCheck.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/SystemReadinessCheck.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.openliberty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.health.Readiness;\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n+\n+@Readiness\n+@ApplicationScoped\n+public class SystemReadinessCheck implements HealthCheck {\n+\n+    @Inject\n+    @ConfigProperty(name = \"io_openliberty_guides_system_inMaintenance\")\n+    Provider<String> inMaintenance;\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        HealthCheckResponseBuilder builder = HealthCheckResponse.named(\n+                SystemResource.class.getSimpleName() + \" readiness check\");\n+        if (inMaintenance != null && inMaintenance.get().equalsIgnoreCase(\"true\")) {\n+            return builder.withData(\"services\", \"not available\").down().build();\n+        }\n+        return builder.withData(\"services\", \"available\").up().build();\n+    }\n+\n+}\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/SystemResource.java b/open-liberty/src/main/java/com/baeldung/openliberty/SystemResource.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/SystemResource.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/SystemResource.java\n@@ -0,0 +1,26 @@\n+package com.baeldung.openliberty;\n+\n+import javax.ws.rs.core.Response;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+@RequestScoped\n+@Path(\"/properties\")\n+public class SystemResource {\n+\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Timed(name = \"getPropertiesTime\", description = \"Time needed to get the JVM system properties\")\n+    @Counted(absolute = true, description = \"Number of times the JVM system properties are requested\")\n+    public Response getProperties() {\n+        return Response.ok(System.getProperties()).build();\n+    }\n+}\n+\n\ndiff --git a/open-liberty/src/main/java/com/baeldung/openliberty/hello/HelloServlet.java b/open-liberty/src/main/java/com/baeldung/openliberty/hello/HelloServlet.java\n--- a/open-liberty/src/main/java/com/baeldung/openliberty/hello/HelloServlet.java\n+++ b/open-liberty/src/main/java/com/baeldung/openliberty/hello/HelloServlet.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.openliberty.hello;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+@WebServlet(urlPatterns=\"/hello\")\n+public class HelloServlet extends HttpServlet {\n+    private static final long serialVersionUID = 1L;\n+\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException {\n+        response.getWriter().append(\"Hello! How are you today?\\n\");\n+    }\n+\n+    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException {\n+        doGet(request, response);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Initial Commit"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDeque.java\n@@ -1,8 +1,9 @@\n package com.baeldung.algorithms.balancedbrackets;\n \n-import java.util.Stack;\n+import java.util.Deque;\n+import java.util.LinkedList;\n \n-public class BalancedBracketsUsingStack {\n+public class BalancedBracketsUsingDeque {\n \n         public boolean isBalanced(String str) {\n                 if (null == str || str.length() == 0 || ((str.length() % 2) != 0)) {\n@@ -17,17 +18,17 @@ public boolean isBalanced(String str) {\n                         }\n                 }\n \n-                Stack<Character> stack = new Stack<>();\n+                Deque<Character> deque = new LinkedList<>();\n                 for (char ch: str.toCharArray()) {\n                         if (ch == '{' || ch == '[' || ch == '(') {\n-                                stack.push(ch);\n+                                deque.addFirst(ch);\n                         } else {\n-                                if ( !stack.isEmpty()\n-                                        && ((stack.peek() == '{' && ch == '}')\n-                                        || (stack.peek() == '[' && ch == ']')\n-                                        || (stack.peek() == '(' && ch == ')')\n+                                if ( !deque.isEmpty()\n+                                        && ((deque.peekFirst() == '{' && ch == '}')\n+                                        || (deque.peekFirst() == '[' && ch == ']')\n+                                        || (deque.peekFirst() == '(' && ch == ')')\n                                     )) {\n-                                        stack.pop();\n+                                        deque.removeFirst();\n                                 } else {\n                                         return false;\n                                 }\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingDequeUnitTest.java\n@@ -5,75 +5,75 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-public class BalancedBracketsUsingStackUnitTest {\n-        private BalancedBracketsUsingStack balancedBracketsUsingStack;\n+public class BalancedBracketsUsingDequeUnitTest {\n+        private BalancedBracketsUsingDeque balancedBracketsUsingDeque;\n \n         @Before\n         public void setup() {\n-                balancedBracketsUsingStack = new BalancedBracketsUsingStack();\n+                balancedBracketsUsingDeque = new BalancedBracketsUsingDeque();\n         }\n \n \n         @Test\n         public void givenNullInput_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(null);\n+                boolean result = balancedBracketsUsingDeque.isBalanced(null);\n                 assertThat(result).isFalse();\n         }\n \n         @Test\n         public void givenEmptyString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"\");\n                 assertThat(result).isFalse();\n         }\n \n         @Test\n         public void givenInvalidCharacterString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"abc[](){}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"abc[](){}\");\n                 assertThat(result).isFalse();\n         }\n \n         @Test\n         public void givenOddLengthString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{{[]()}}}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[]()}}}\");\n                 assertThat(result).isFalse();\n         }\n \n         @Test\n         public void givenEvenLengthString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{{[]()}}}}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[]()}}}}\");\n                 assertThat(result).isFalse();\n         }\n \n         @Test\n         public void givenEvenLengthUnbalancedString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{[(])}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{[(])}\");\n                 assertThat(result).isFalse();\n         }\n \n \n         @Test\n         public void givenEvenLengthBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{[()]}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{[()]}\");\n                 assertThat(result).isTrue();\n         }\n \n         @Test\n         public void givenBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{{[[(())]]}}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[[(())]]}}\");\n                 assertThat(result).isTrue();\n         }\n \n \n         @Test\n         public void givenAnotherBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{{([])}}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{{([])}}\");\n                 assertThat(result).isTrue();\n         }\n \n \n         @Test\n         public void givenUnBalancedString_whenCheckingForBalance_shouldReturnFalse() {\n-                boolean result = balancedBracketsUsingStack.isBalanced(\"{{)[](}}\");\n+                boolean result = balancedBracketsUsingDeque.isBalanced(\"{{)[](}}\");\n                 assertThat(result).isFalse();\n         }\n ",
    "output": "BAEL-3481 - updated with review comments."
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n@@ -58,4 +58,31 @@ void swap(int i, int j) {\n         heapNodes[i] = heapNodes[j];\r\n         heapNodes[j] = temp;\r\n     }\r\n+    \r\n+    static int[] merge(int[][] array) {\r\n+        HeapNode[] heapNodes = new HeapNode[array.length];\r\n+        int resultingArraySize = 0;\r\n+\r\n+        for (int i = 0; i < array.length; i++) {\r\n+            HeapNode node = new HeapNode(array[i][0], i);\r\n+            heapNodes[i] = node;\r\n+            resultingArraySize += array[i].length;\r\n+        }\r\n+        \r\n+        MinHeap minHeap = new MinHeap(heapNodes);\r\n+        int[] resultingArray = new int[resultingArraySize];\r\n+\r\n+        for (int i = 0; i < resultingArraySize; i++) {\r\n+            HeapNode root = minHeap.getRootNode();\r\n+            resultingArray[i] = root.element;\r\n+\r\n+            if (root.nextElementIndex < array[root.arrayIndex].length) {\r\n+                root.element = array[root.arrayIndex][root.nextElementIndex++];\r\n+            } else {\r\n+                root.element = Integer.MAX_VALUE;\r\n+            }\r\n+            minHeap.heapifyFromRoot();\r\n+        }\r\n+        return resultingArray;\r\n+    }\r\n }\r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n@@ -1,40 +0,0 @@\n-package com.baeldung.algorithms.minheapmerge;\r\n-\r\n-public class MinHeapMerge {\r\n-\r\n-    static int populateHeapNodesAndDetermineResultingArrayLength(int[][] array, HeapNode[] heapNodes) {\r\n-        int resultSize = 0;\r\n-\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            HeapNode node = new HeapNode(array[i][0], i);\r\n-            heapNodes[i] = node;\r\n-            resultSize += array[i].length;\r\n-        }\r\n-        return resultSize;\r\n-    }\r\n-\r\n-    static int[] createMinHeapAndMergeArrays(int[][] array, HeapNode[] heapNodes, int resultingArraySize) {\r\n-\r\n-        MinHeap minHeap = new MinHeap(heapNodes);\r\n-        int[] resultingArray = new int[resultingArraySize];\r\n-\r\n-        for (int i = 0; i < resultingArraySize; i++) {\r\n-            HeapNode root = minHeap.getRootNode();\r\n-            resultingArray[i] = root.element;\r\n-\r\n-            if (root.nextElementIndex < array[root.arrayIndex].length) {\r\n-                root.element = array[root.arrayIndex][root.nextElementIndex++];\r\n-            } else {\r\n-                root.element = Integer.MAX_VALUE;\r\n-            }\r\n-            minHeap.heapifyFromRoot();\r\n-        }\r\n-        return resultingArray;\r\n-    }\r\n-\r\n-    static int[] merge(int[][] array) {\r\n-        HeapNode[] heapNodes = new HeapNode[array.length];\r\n-        int resultingArraySize = populateHeapNodesAndDetermineResultingArrayLength(array, heapNodes);\r\n-        return createMinHeapAndMergeArrays(array, heapNodes, resultingArraySize);\r\n-    }\r\n-}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n@@ -1,39 +0,0 @@\n-package com.baeldung.algorithms.minheapmerge;\r\n-\r\n-import static org.hamcrest.CoreMatchers.equalTo;\r\n-import static org.hamcrest.CoreMatchers.is;\r\n-import static org.junit.Assert.assertThat;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-public class MinHeapMergeUnitTest {\r\n-\r\n-    private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\r\n-    private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\r\n-\r\n-    @Test\r\n-    public void givenSortedArrays_whenMerged_thenShouldReturnASingleSortedarray() {\r\n-        int[] resultArray = MinHeapMerge.merge(inputArray);\r\n-        \r\n-        assertThat(resultArray.length, is(equalTo(10)));\r\n-        assertThat(resultArray, is(equalTo(expectedArray)));\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void givenEmptyHeapNodesAndInputArray_whenPopulated_thenShouldPopulateAndReturnResultArrayLength() {\r\n-        int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, new HeapNode[inputArray.length]);\r\n-        \r\n-        assertThat(size, is(equalTo(10)));\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void givenArrayAndHeapNodesAndResultArraySize_whenMerged_thenShouldReturnASingleSortedarray() {\r\n-        HeapNode[] heapNodes = new HeapNode[inputArray.length];\r\n-        int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, heapNodes);\r\n-        \r\n-        int[] resultArray = MinHeapMerge.createMinHeapAndMergeArrays(inputArray, heapNodes, size);\r\n-        \r\n-        assertThat(resultArray.length, is(equalTo(10)));\r\n-        assertThat(resultArray, is(equalTo(expectedArray)));\r\n-    }\r\n-}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+import static org.hamcrest.CoreMatchers.equalTo;\r\n+import static org.hamcrest.CoreMatchers.is;\r\n+import static org.junit.Assert.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class MinHeapUnitTest {\r\n+\r\n+    private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\r\n+    private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\r\n+\r\n+    @Test\r\n+    public void givenSortedArrays_whenMerged_thenShouldReturnASingleSortedarray() {\r\n+        int[] resultArray = MinHeap.merge(inputArray);\r\n+        \r\n+        assertThat(resultArray.length, is(equalTo(10)));\r\n+        assertThat(resultArray, is(equalTo(expectedArray)));\r\n+    }\r\n+    \r\n+}\r",
    "output": "BAEL-3482\n\nCode re-factor"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n@@ -29,17 +29,17 @@ public Object getCellValueByFetchingLastCachedValue(String fileLocation, String\n \n         if (cell.getCellType() == CellType.FORMULA) {\n             switch (cell.getCachedFormulaResultType()) {\n-            case BOOLEAN:\n-                cellValue = cell.getBooleanCellValue();\n-                break;\n-            case NUMERIC:\n-                cellValue = cell.getNumericCellValue();\n-                break;\n-            case STRING:\n-                cellValue = cell.getStringCellValue();\n-                break;\n-            default:\n-                cellValue = null;\n+                case BOOLEAN:\n+                    cellValue = cell.getBooleanCellValue();\n+                    break;\n+                case NUMERIC:\n+                    cellValue = cell.getNumericCellValue();\n+                    break;\n+                case STRING:\n+                    cellValue = cell.getStringCellValue();\n+                    break;\n+                default:\n+                    cellValue = null;\n             }\n         }\n \n@@ -48,7 +48,7 @@ public Object getCellValueByFetchingLastCachedValue(String fileLocation, String\n     }\n \n     public Object getCellValueByEvaluatingFormula(String fileLocation, String cellLocation) throws IOException {\n-        Object cellValue;\n+        Object cellValue = new Object();\n \n         FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n         Workbook workbook = new XSSFWorkbook(inputStream);\n@@ -61,18 +61,20 @@ public Object getCellValueByEvaluatingFormula(String fileLocation, String cellLo\n         Row row = sheet.getRow(cellAddress.getRow());\n         Cell cell = row.getCell(cellAddress.getColumn());\n \n-        switch (evaluator.evaluateFormulaCell(cell)) {\n-        case BOOLEAN:\n-            cellValue = cell.getBooleanCellValue();\n-            break;\n-        case NUMERIC:\n-            cellValue = cell.getNumericCellValue();\n-            break;\n-        case STRING:\n-            cellValue = cell.getStringCellValue();\n-            break;\n-        default:\n-            cellValue = null;\n+        if (cell.getCellType() == CellType.FORMULA) {\n+            switch (evaluator.evaluateFormulaCell(cell)) {\n+                case BOOLEAN:\n+                    cellValue = cell.getBooleanCellValue();\n+                    break;\n+                case NUMERIC:\n+                    cellValue = cell.getNumericCellValue();\n+                    break;\n+                case STRING:\n+                    cellValue = cell.getStringCellValue();\n+                    break;\n+                default:\n+                    cellValue = null;\n+            }\n         }\n \n         workbook.close();",
    "output": "BAEL-3658: Fixed switch case indentations and added if condition to check if the cellType is FORMULA or not"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n@@ -12,7 +12,7 @@\n \n @RunWith(Cucumber.class)\n @CucumberOptions(features = \"classpath:features/book-store-with-hooks.feature\",\n-glue =\"com.baeldung.cucumberhooks.books\"\n+  glue = \"com.baeldung.cucumberhooks.books\"\n )\n public class BookStoreWithHooksIntegrationTest implements En {\n \n@@ -53,4 +53,3 @@ public void closeBrowser() {\n         //code to close browser\n     }\n }\n-",
    "output": "Update testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n\nCo-Authored-By: KevinGilmore <kpg102@gmail.com>"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java b/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n--- a/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n+++ b/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n@@ -1,35 +0,0 @@\n-package com.baeldung.security.manager;\n-\n-import org.junit.Test;\n-\n-import java.net.URL;\n-import java.security.AccessControlException;\n-import java.util.concurrent.Callable;\n-\n-public class SecurityManagerUnitTest {\n-\n-    @Test(expected = AccessControlException.class)\n-    public void whenSecurityManagerIsActive_thenNetworkIsNotAccessibleByDefault() throws Exception {\n-        doTest(() -> {\n-            new URL(\"http://www.google.com\").openConnection().connect();\n-            return null;\n-        });\n-    }\n-\n-    @Test(expected = AccessControlException.class)\n-    public void whenUnauthorizedClassTriesToAccessProtectedOperation_thenAnExceptionIsThrown() throws Exception {\n-        doTest(() -> {\n-            new Service().operation();\n-            return null;\n-        });\n-    }\n-\n-    private void doTest(Callable<Void> action) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            action.call();\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-    }\n-}\n\ndiff --git a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n--- a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n+++ b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.security.manager;\n+package com.baeldung.securitymanager;\n \n import java.security.BasicPermission;\n \n\ndiff --git a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n--- a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n+++ b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.security.manager;\n+package com.baeldung.securitymanager;\n \n public class Service {\n \n\ndiff --git a/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java b/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n--- a/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n+++ b/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.md5;\n+package com.baeldung.java.md5;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n\ndiff --git a/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java b/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n--- a/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n+++ b/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.securitymanager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.AccessControlException;\n+\n+public class SecurityManagerUnitTest {\n+\n+    private static final String TESTING_SECURITY_POLICY = \"file:src/test/resources/testing.policy\";\n+\n+    @Before\n+    public void setUp() {\n+        System.setProperty(\"java.security.policy\", TESTING_SECURITY_POLICY);\n+        System.setSecurityManager(new SecurityManager());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        System.setSecurityManager(null);\n+    }\n+\n+    @Test(expected = AccessControlException.class)\n+    public void whenSecurityManagerIsActive_thenNetworkIsNotAccessibleByDefault() throws IOException {\n+        new URL(\"http://www.google.com\").openConnection().connect();\n+    }\n+\n+    @Test(expected = AccessControlException.class)\n+    public void whenUnauthorizedClassTriesToAccessProtectedOperation_thenAnExceptionIsThrown() {\n+        new Service().operation();\n+    }\n+}",
    "output": "Merge remote-tracking branch 'upstream/master' into BAEL-20573"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java b/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n--- a/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n+++ b/core-java-modules/core-java-security-manager/src/test/java/com/baeldung/security/manager/SecurityManagerUnitTest.java\n@@ -1,35 +0,0 @@\n-package com.baeldung.security.manager;\n-\n-import org.junit.Test;\n-\n-import java.net.URL;\n-import java.security.AccessControlException;\n-import java.util.concurrent.Callable;\n-\n-public class SecurityManagerUnitTest {\n-\n-    @Test(expected = AccessControlException.class)\n-    public void whenSecurityManagerIsActive_thenNetworkIsNotAccessibleByDefault() throws Exception {\n-        doTest(() -> {\n-            new URL(\"http://www.google.com\").openConnection().connect();\n-            return null;\n-        });\n-    }\n-\n-    @Test(expected = AccessControlException.class)\n-    public void whenUnauthorizedClassTriesToAccessProtectedOperation_thenAnExceptionIsThrown() throws Exception {\n-        doTest(() -> {\n-            new Service().operation();\n-            return null;\n-        });\n-    }\n-\n-    private void doTest(Callable<Void> action) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            action.call();\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-    }\n-}\n\ndiff --git a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n--- a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n+++ b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/CustomPermission.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.security.manager;\n+package com.baeldung.securitymanager;\n \n import java.security.BasicPermission;\n \n\ndiff --git a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n--- a/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n+++ b/core-java-modules/core-java-security/src/main/java/com/baeldung/securitymanager/Service.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.security.manager;\n+package com.baeldung.securitymanager;\n \n public class Service {\n \n\ndiff --git a/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java b/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n--- a/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n+++ b/core-java-modules/core-java-security/src/test/java/com/baeldung/java/md5/JavaMD5UnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.md5;\n+package com.baeldung.java.md5;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n\ndiff --git a/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java b/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n--- a/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n+++ b/core-java-modules/core-java-security/src/test/java/com/baeldung/securitymanager/SecurityManagerUnitTest.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.securitymanager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.AccessControlException;\n+\n+public class SecurityManagerUnitTest {\n+\n+    private static final String TESTING_SECURITY_POLICY = \"file:src/test/resources/testing.policy\";\n+\n+    @Before\n+    public void setUp() {\n+        System.setProperty(\"java.security.policy\", TESTING_SECURITY_POLICY);\n+        System.setSecurityManager(new SecurityManager());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        System.setSecurityManager(null);\n+    }\n+\n+    @Test(expected = AccessControlException.class)\n+    public void whenSecurityManagerIsActive_thenNetworkIsNotAccessibleByDefault() throws IOException {\n+        new URL(\"http://www.google.com\").openConnection().connect();\n+    }\n+\n+    @Test(expected = AccessControlException.class)\n+    public void whenUnauthorizedClassTriesToAccessProtectedOperation_thenAnExceptionIsThrown() {\n+        new Service().operation();\n+    }\n+}",
    "output": "BAEL-3732: Move core-java-security-manager into core-java-security (#8460)\n\n* BAEL-3732: Move core-java-security-manager into core-java-security\r\n\r\n* BAEL-3732: Teardown the security manager to not interfere with other tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n--- a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n+++ b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n@@ -24,11 +24,21 @@ public static <T> Map<T, Long> countByClassicalLoop(List<T> inputList) {\n         return resultMap;\n     }\n \n-    public static <T> Map<T, Long> countByClassicalLoopWithMapCompute(List<T> inputList) {\n+    public static <T> Map<T, Long> countByForEachLoopWithGetOrDefault(List<T> inputList) {\n         Map<T, Long> resultMap = new HashMap<>();\n-        for (T element : inputList) {\n-            resultMap.compute(element, (k, v) -> v == null ? 1 : v + 1);\n-        }\n+        inputList.forEach(e -> resultMap.put(e, resultMap.getOrDefault(e, 0L) + 1L));\n+        return resultMap;\n+    }\n+\n+    public static <T> Map<T, Long> countByForEachLoopWithMapCompute(List<T> inputList) {\n+        Map<T, Long> resultMap = new HashMap<>();\n+        inputList.forEach(e -> resultMap.compute(e, (k, v) -> v == null ? 1L : v + 1L));\n+        return resultMap;\n+    }\n+\n+    public static <T> Map<T, Long> countByForEachLoopWithMapMerge(List<T> inputList) {\n+        Map<T, Long> resultMap = new HashMap<>();\n+        inputList.forEach(e -> resultMap.merge(e, 1L, Long::sum));\n         return resultMap;\n     }\n \n\ndiff --git a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n--- a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n@@ -11,7 +11,6 @@\n \n class DuplicatesCounterUnitTest {\n \n-\n     private static List<String> INPUT_LIST = Lists.list(\n         \"expect1\",\n         \"expect2\", \"expect2\",\n@@ -24,10 +23,21 @@ void givenInput_whenCountByClassicalLoop_thenGetResultMap() {\n         verifyResult(result);\n     }\n \n+    @Test\n+    void givenInput_whenCountByForEachLoopWithGetOrDefault_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithGetOrDefault(INPUT_LIST);\n+        verifyResult(result);\n+    }\n+\n+    @Test\n+    void givenInput_whenCountByForEachLoopWithMapCompute_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapCompute(INPUT_LIST);\n+        verifyResult(result);\n+    }\n \n     @Test\n-    void givenInput_whenCountByClassicalLoopWithMapCompute_thenGetResultMap() {\n-        Map<String, Long> result = DuplicatesCounter.countByClassicalLoopWithMapCompute(INPUT_LIST);\n+    void givenInput_whenCountByForEachLoopWithMapMerge_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapMerge(INPUT_LIST);\n         verifyResult(result);\n     }\n \n\ndiff --git a/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java b/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n--- a/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n+++ b/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n@@ -3,13 +3,27 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * This class presents a field, a constructor, and a setter injection type.\n+ * Usually, we'd stick with a single approach for a given property. This is just an educational code.\n+ */\n @Component\n public class FooService {\n \n     @Autowired\n     @FormatterType(\"Foo\")\n     private Formatter formatter;\n \n+    @Autowired\n+    public FooService(@FormatterType(\"Foo\") Formatter formatter) {\n+        this.formatter = formatter;\n+    }\n+\n+    @Autowired\n+    public void setFormatter(@FormatterType(\"Foo\") Formatter formatter) {\n+        this.formatter = formatter;\n+    }\n+\n     public String doStuff() {\n         return formatter.format();\n     }",
    "output": "Merge branch 'master' into BAEL-20573"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n--- a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n+++ b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n@@ -24,11 +24,21 @@ public static <T> Map<T, Long> countByClassicalLoop(List<T> inputList) {\n         return resultMap;\n     }\n \n-    public static <T> Map<T, Long> countByClassicalLoopWithMapCompute(List<T> inputList) {\n+    public static <T> Map<T, Long> countByForEachLoopWithGetOrDefault(List<T> inputList) {\n         Map<T, Long> resultMap = new HashMap<>();\n-        for (T element : inputList) {\n-            resultMap.compute(element, (k, v) -> v == null ? 1 : v + 1);\n-        }\n+        inputList.forEach(e -> resultMap.put(e, resultMap.getOrDefault(e, 0L) + 1L));\n+        return resultMap;\n+    }\n+\n+    public static <T> Map<T, Long> countByForEachLoopWithMapCompute(List<T> inputList) {\n+        Map<T, Long> resultMap = new HashMap<>();\n+        inputList.forEach(e -> resultMap.compute(e, (k, v) -> v == null ? 1L : v + 1L));\n+        return resultMap;\n+    }\n+\n+    public static <T> Map<T, Long> countByForEachLoopWithMapMerge(List<T> inputList) {\n+        Map<T, Long> resultMap = new HashMap<>();\n+        inputList.forEach(e -> resultMap.merge(e, 1L, Long::sum));\n         return resultMap;\n     }\n \n\ndiff --git a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n--- a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n@@ -11,7 +11,6 @@\n \n class DuplicatesCounterUnitTest {\n \n-\n     private static List<String> INPUT_LIST = Lists.list(\n         \"expect1\",\n         \"expect2\", \"expect2\",\n@@ -24,10 +23,21 @@ void givenInput_whenCountByClassicalLoop_thenGetResultMap() {\n         verifyResult(result);\n     }\n \n+    @Test\n+    void givenInput_whenCountByForEachLoopWithGetOrDefault_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithGetOrDefault(INPUT_LIST);\n+        verifyResult(result);\n+    }\n+\n+    @Test\n+    void givenInput_whenCountByForEachLoopWithMapCompute_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapCompute(INPUT_LIST);\n+        verifyResult(result);\n+    }\n \n     @Test\n-    void givenInput_whenCountByClassicalLoopWithMapCompute_thenGetResultMap() {\n-        Map<String, Long> result = DuplicatesCounter.countByClassicalLoopWithMapCompute(INPUT_LIST);\n+    void givenInput_whenCountByForEachLoopWithMapMerge_thenGetResultMap() {\n+        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapMerge(INPUT_LIST);\n         verifyResult(result);\n     }\n ",
    "output": "BAEL-3608: Add Map.merge() usage example (#8455)"
  },
  {
    "input": "diff --git a/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java b/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n--- a/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n+++ b/spring-core-2/src/main/java/com/baeldung/autowire/sample/FooService.java\n@@ -3,13 +3,27 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * This class presents a field, a constructor, and a setter injection type.\n+ * Usually, we'd stick with a single approach for a given property. This is just an educational code.\n+ */\n @Component\n public class FooService {\n \n     @Autowired\n     @FormatterType(\"Foo\")\n     private Formatter formatter;\n \n+    @Autowired\n+    public FooService(@FormatterType(\"Foo\") Formatter formatter) {\n+        this.formatter = formatter;\n+    }\n+\n+    @Autowired\n+    public void setFormatter(@FormatterType(\"Foo\") Formatter formatter) {\n+        this.formatter = formatter;\n+    }\n+\n     public String doStuff() {\n         return formatter.format();\n     }",
    "output": "BAEL-3688: Add examples of a constructor and a setter injection types (#8452)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java b/core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java\n--- a/core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java\n+++ b/core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java\n@@ -0,0 +1,105 @@\n+package com.baeldung.lock;\n+\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jnr.ffi.LibraryLoader;\n+import jnr.ffi.Memory;\n+import jnr.ffi.Pointer;\n+import jnr.ffi.types.pid_t;\n+\n+public class FileLocks {\n+\n+\tpublic static interface LibC {\n+\n+\t\tpublic static final int O_NONBLOCK = jnr.constants.platform.OpenFlags.O_NONBLOCK.intValue();\n+\t\tpublic static final int O_RDWR = jnr.constants.platform.OpenFlags.O_RDWR.intValue();\n+\t\tpublic static final int O_EXLOCK = jnr.constants.platform.OpenFlags.O_EXLOCK.intValue();\n+\n+\t\tpublic long write(int fd, Pointer data, long len);\n+\n+\t\t@pid_t\n+\t\tlong getpid();\n+\n+\t\tint open(String filename, int flags);\n+\n+\t\tint close(int fd);\n+\t}\n+\n+\tpublic static void main(String[] args) throws IOException, InterruptedException {\n+\t\t\n+\t\tPath path = Paths.get(\"/tmp/foo\");\n+\t\t\n+\t\t// Delete the file if it exists\n+\t\tFiles.deleteIfExists(path);\n+\t\t\n+\t\t// Start with a fresh empty file\n+\t\tFiles.createFile(path);\n+\t\t\n+\t\t// Prepare some external libc calls. Will only work on systems that have libc.\n+\t\tLibC libc = LibraryLoader.create(LibC.class).load(\"c\");\n+\t\tbyte[] bytes = \"Hello from C\\n\".getBytes(\"UTF-8\");\n+\t\tjnr.ffi.Runtime runtime = jnr.ffi.Runtime.getRuntime(libc);\n+\t\tPointer buffer = Memory.allocateDirect(runtime, bytes.length);\n+\t\tbuffer.put(0, bytes, 0, bytes.length);\n+\t\t\n+\t\t// Open the file through a libc call. This returns a file descriptor.\n+\t\tint fd = libc.open(path.toString(), libc.O_RDWR + libc.O_EXLOCK + libc.O_NONBLOCK);\n+\t\tSystem.out.println(\"Opened the file through a libc call that locks it.\");\n+\t\t\n+\t\t// Our java method will see the lock. Itd will be well behaved and won't write to the file.\n+\t\t// Note that external processes on POSIX systems would still be able to write to this file ignoring any locks.\n+\t\twriteToRandomAccessFile(path, \"I won't write this\", 0L);\n+\t\t\n+\t\t// Libc opened the file, it can write to its corresponding file handle.\n+\t\tlibc.write(fd, buffer, bytes.length);\n+\t\t\n+\t\t// Now let's close the file through a libc call, to release its lock.\t\n+\t\tlibc.close(fd);\n+\t\tSystem.out.println(\"Invoked libc's close() method\");\n+\t\t\n+\t\t// This time our method won't see the lock and will write to the file.\n+\t\twriteToRandomAccessFile(path, \"Hello from java\", bytes.length);\n+\t\t\n+\t\tSystem.out.println(\"Now that all the locks are gone, here are the file contents:\");\n+\t\tSystem.out.println(\"------------------------------------------------------------\");\n+\t\tFiles.lines(path).forEach(System.out::println);\n+\n+\t}\n+\t\n+\tpublic static RandomAccessFile writeToRandomAccessFile(Path path, String data, long position) {\n+\t\tRandomAccessFile file = null;\n+\t\ttry {\n+\t\t\tfile = new RandomAccessFile(path.toFile(), \"rws\");\n+\t\t\tFileChannel channel = file.getChannel();\n+\t\t\t// Try to acquire a lock\n+\t\t\ttry (FileLock lock = channel.tryLock()) {\n+\t\t\t\tif (lock == null) {\n+\t\t\t\t\tSystem.out.println(\"Tried to lock through the FileChannel's lock() method. This file is already locked! It's my responsibility to not write to it, even if the OS would let me!\");\n+\t\t\t\t} else {\n+\t\t\t\t\tSystem.out.println(\"I don't see a lock on this file anymore. Now I can write to it.\");\n+\t\t\t\t\tint i = 0;\n+\t\t\t\t\tchannel.write(\n+\t\t\t\t\t\t\tByteBuffer.wrap((data).getBytes(StandardCharsets.UTF_8)), position);\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tSystem.out.println(\"Error while locking\");\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tSystem.out.println(\"Other Error.\");\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn file;\n+\t}\n+\t\n+\t\n+\n+}",
    "output": "File locking example"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/GreedyAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/GreedyAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/GreedyAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/GreedyAlgorithm.java\n@@ -15,7 +15,7 @@ public GreedyAlgorithm(SocialConnector sc) {\n         this.fp = new FollowersPath();\n     }\n     \n-    public long findMostFollowersPath(String account) throws Exception {        \n+    public long findMostFollowersPath(String account) {\n         long max = 0;\n         SocialUser toFollow = null;\n         \n@@ -31,12 +31,8 @@ public long findMostFollowersPath(String account) throws Exception {\n         if (currentLevel < maxLevel - 1) {\n             currentLevel++;\n             max += findMostFollowersPath(toFollow.getUsername());\n-            //fp.addFollower(toFollow.getUsername(), max);\n-            //fp.addCount(max);\n             return max;\n         } else {\n-            //fp.addFollower(toFollow.getUsername(), max);\n-            //fp.addCount(max);\n             return max;\n         }            \n     }\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/NonGreedyAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/NonGreedyAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/NonGreedyAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/NonGreedyAlgorithm.java\n@@ -13,9 +13,8 @@ public NonGreedyAlgorithm(SocialConnector tc, int level) {\n         this.tc = tc;\n         this.currentLevel = level;\n     }\n-    \n-    \n-    public long findMostFollowersPath(String account) throws Exception {        \n+      \n+    public long findMostFollowersPath(String account) {\n         List<SocialUser> followers = tc.getFollowers(account);\n         long total = currentLevel > 0 ? followers.size() : 0;\n \n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/SocialConnector.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/SocialConnector.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/SocialConnector.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/SocialConnector.java\n@@ -20,9 +20,9 @@ public boolean switchCounter() {\n         return this.isCounterEnabled;\n     }\n     \n-    public List<SocialUser> getFollowers(String account) throws Exception {\n+    public List<SocialUser> getFollowers(String account) {\n         if (counter < 0)\n-            throw new Exception (\"API limit reached\");\n+            throw new IllegalStateException (\"API limit reached\");\n         else {\n             if(this.isCounterEnabled) counter--;\n             for(SocialUser user : users) {\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/greedy/GreedyAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/greedy/GreedyAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/greedy/GreedyAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/greedy/GreedyAlgorithmUnitTest.java\n@@ -35,21 +35,21 @@ private SocialConnector prepareNetwork() {\n     }\n \n     @Test\n-    public void greedyAlgorithmTest() throws Exception {\n+    public void greedyAlgorithmTest() {\n         GreedyAlgorithm ga = new GreedyAlgorithm(prepareNetwork());\n         assertEquals(ga.findMostFollowersPath(\"root\"), 5);\n     }\n \n     @Test\n-    public void nongreedyAlgorithmTest() throws Exception {\n+    public void nongreedyAlgorithmTest() {\n         NonGreedyAlgorithm nga = new NonGreedyAlgorithm(prepareNetwork(), 0);\n-        Assertions.assertThrows(Exception.class, () -> {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n             nga.findMostFollowersPath(\"root\");\n           });\n     }\n \n     @Test\n-    public void nongreedyAlgorithmUnboundedTest() throws Exception {\n+    public void nongreedyAlgorithmUnboundedTest() {\n         SocialConnector sc = prepareNetwork();\n         sc.switchCounter();\n         NonGreedyAlgorithm nga = new NonGreedyAlgorithm(sc, 0);",
    "output": "BAEL-3486 (#8458)\n\n* Hexagonal architecture: a quick and practical example\r\n\r\n* BAEL-3486\r\n\r\n\r\ncommit\r\n\r\n* Formatting issue solved\r\n\r\n* Update code for consistency with article"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java b/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/ExcelCellFormatter.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.poi.excel;\n+\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.DataFormatter;\n+import org.apache.poi.ss.usermodel.FormulaEvaluator;\n+import org.apache.poi.ss.usermodel.Workbook;\n+\n+public class ExcelCellFormatter {\n+\n+    public String getCellStringValue(Cell cell) {\n+        DataFormatter formatter = new DataFormatter();\n+        return formatter.formatCellValue(cell);\n+    }\n+\n+    public String getCellStringValueWithFormula(Cell cell, Workbook workbook) {\n+        DataFormatter formatter = new DataFormatter();\n+        FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n+        return formatter.formatCellValue(cell, evaluator);\n+    }\n+}\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterIntegrationTest.java\n@@ -0,0 +1,128 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.DataFormat;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterIntegrationTest {\n+    private static int STRING_CELL_INDEX = 0;\n+    private static int BOOLEAN_CELL_INDEX = 1;\n+    private static int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void generateExcelFile() throws IOException {\n+\n+        Workbook workbook = new XSSFWorkbook();\n+\n+        Sheet sheet = workbook.createSheet(\"Test\");\n+        Row row = sheet.createRow(0);\n+        Cell cell = row.createCell(STRING_CELL_INDEX);\n+        cell.setCellValue(\"String Test\"); // STRING cell\n+\n+        cell = row.createCell(BOOLEAN_CELL_INDEX);\n+        cell.setCellValue(true); // BOOLEAN cell\n+\n+        cell = row.createCell(RAW_NUMERIC_CELL_INDEX);\n+        cell.setCellValue(1234.5678); // NUMERIC cell\n+\n+        cell = row.createCell(FORMATTED_NUMERIC_CELL_INDEX);\n+        cell.setCellValue(1234.5678);\n+        CellStyle curStyle = workbook.createCellStyle();\n+        DataFormat df = workbook.createDataFormat();\n+        curStyle.setDataFormat(df.getFormat(\"$#,##0.00\"));\n+        cell.setCellStyle(curStyle); // NUMERIC cell with format rule\n+\n+        cell = row.createCell(FORMULA_CELL_INDEX);\n+        cell.setCellFormula(\"SUM(C1:D1)\"); // FORMULA cell\n+\n+        File tempFile = File.createTempFile(\"ExcelCellFormatterIntegrationTest\", \".xlsx\");\n+\n+        fileLocation = tempFile.getAbsolutePath();\n+\n+        FileOutputStream outputStream = new FileOutputStream(fileLocation);\n+        workbook.write(outputStream);\n+        workbook.close();\n+        outputStream.close();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"1234.5678\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n+        assertEquals(\"$1,234.57\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"SUM(C1:D1)\", formatter.getCellStringValue(row.getCell(FORMULA_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"2469.1356\", formatter.getCellStringValueWithFormula(row.getCell(FORMULA_CELL_INDEX), workbook));\n+        workbook.close();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        File testFile = new File(fileLocation);\n+        if (testFile.exists()) {\n+            testFile.deleteOnExit();\n+        }\n+    }\n+}\n\\ No newline at end of file",
    "output": "BAEL-3656 Read Numeric Strings in Excel Cells as a String with Apache POI"
  },
  {
    "input": "diff --git a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -1,36 +0,0 @@\n-package com.baeldung.doubletolong;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public class DoubleToLongUnitTest {\n-\n-    final static double VALUE = 9999.999;\n-\n-    @Test\n-    public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n-        Assert.assertEquals(9999L, Double.valueOf(VALUE)\n-            .longValue());\n-    }\n-\n-    @Test\n-    public void givenDoubleValue_whenMathRoundUseds_thenLongValueReturned() {\n-        Assert.assertEquals(10000L, Math.round(VALUE));\n-    }\n-\n-    @Test\n-    public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n-        Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n-    }\n-\n-    @Test\n-    public void givenDoubleValue_whenMathFloorUsed_thenLongValueReturned() {\n-        Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n-    }\n-\n-    @Test\n-    public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n-        Assert.assertEquals(9999L, (long) VALUE);\n-    }\n-\n-}\n\ndiff --git a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -0,0 +1,64 @@\n+package com.baeldung.doubletolong;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DoubleToLongUnitTest {\n+\n+    final static double VALUE = 9999.999;\n+\n+    @Test\n+    public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, Double.valueOf(VALUE).longValue());\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathRoundUsed_thenRoundUp() {\n+        Assert.assertEquals(10000L, Math.round(VALUE));\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathRoundUsed_thenRoundDown() {\n+        Assert.assertEquals(9999L, Math.round(9999.444));\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathRoundUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.round(9999.0));\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n+        Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.ceil(9999.0), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenDifferentThanRound() {\n+        Assert.assertEquals(10000L, Math.ceil(9999.444), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.floor(9999.0), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenDifferentThanCeil() {\n+        Assert.assertEquals(9999L, Math.floor(9999.444), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, (long) VALUE);\n+    }\n+}",
    "output": "Merge pull request #8462 from eugenp/BAEL-3517\n\nBAEL-3517: Code Review Feedback Applied"
  },
  {
    "input": "diff --git a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n--- a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n+++ b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n@@ -0,0 +1,110 @@\n+package test.java.com.baeldung.selenium.junit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openqa.selenium.Capabilities;\n+import org.openqa.selenium.Cookie;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+public class SeleniumCookiesJUnitLiveTest {\n+\n+    private WebDriver driver;\n+    private String navUrl;\n+\n+    @Before\n+    public void setUp() {\n+        Capabilities capabilities = DesiredCapabilities.firefox();\n+        driver = new FirefoxDriver(capabilities);\n+        navUrl = \"https://baeldung.com\";\n+        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n+        System.setProperty(\"webdriver.gecko.driver\", \"geckodriver.exe\");\n+    }\n+\n+    @After\n+    public void teardown() {\n+        driver.quit();\n+    }\n+\n+    @Test\n+    public void whenNavigate_thenCookiesExist() {\n+        driver.navigate().to(navUrl);\n+        Set<Cookie> cookies = driver.manage().getCookies();\n+\n+        assertThat(cookies, is(not(empty())));\n+    }\n+\n+    @Test\n+    public void whenNavigate_thenLpCookieExists() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie, is(not(nullValue())));\n+    }\n+\n+    @Test\n+    public void whenNavigate_thenLpCookieIsHasCorrectValue() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie.getValue(), containsString(\"www.baeldung.com\"));\n+    }\n+\n+    @Test\n+    public void whenNavigate_thenLpCookieHasCorrectProps() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie.getDomain(), equalTo(\".baeldung.com\"));\n+        assertThat(lpCookie.getPath(), equalTo(\"/\"));\n+        assertThat(lpCookie.getExpiry(), is(not(nullValue())));\n+        assertThat(lpCookie.isSecure(), equalTo(false));\n+        assertThat(lpCookie.isHttpOnly(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void whenAddingCookie_thenItIsPresent() {\n+        driver.navigate().to(navUrl);\n+        Cookie cookie = new Cookie(\"foo\", \"bar\");\n+        driver.manage().addCookie(cookie);\n+        Cookie driverCookie = driver.manage().getCookieNamed(\"foo\");\n+\n+        assertThat(driverCookie.getValue(), equalTo(\"bar\"));\n+    }\n+\n+    @Test\n+    public void whenDeletingCookie_thenItIsAbsent() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie, is(not(nullValue())));\n+\n+        driver.manage().deleteCookie(lpCookie);\n+        Cookie deletedCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(deletedCookie, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void whenOverridingCookie_thenItIsUpdated() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+        driver.manage().deleteCookie(lpCookie);\n+\n+        Cookie newLpCookie = new Cookie(\"lp_120073\", \"foo\");\n+        driver.manage().addCookie(newLpCookie);\n+\n+        Cookie overriddenCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(overriddenCookie.getValue(), equalTo(\"foo\"));\n+    }\n+\n+}",
    "output": "Merge pull request #8441 from chris9408/feature/selenium-cookies\n\n[BAEL-2948] Using cookies with Selenium WebDriver"
  },
  {
    "input": "diff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.rocketmq.consumer;\n+\n+import com.baeldung.rocketmq.event.CartItemEvent;\n+import org.apache.rocketmq.spring.annotation.RocketMQMessageListener;\n+import org.apache.rocketmq.spring.core.RocketMQListener;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.stereotype.Service;\n+\n+@SpringBootApplication\n+public class CartEventConsumer {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(CartEventConsumer.class, args);\n+    }\n+\n+    @Service\n+    @RocketMQMessageListener(topic = \"cart-item-add-topic\", consumerGroup = \"cart-consumer_cart-item-add-topic\")\n+    public class CardItemAddConsumer implements RocketMQListener<CartItemEvent> {\n+        public void onMessage(CartItemEvent addItemEvent) {\n+            System.out.println(\"Adding item: \" + addItemEvent);\n+            // logic\n+        }\n+    }\n+\n+    @Service\n+    @RocketMQMessageListener(topic = \"cart-item-removed-topic\", consumerGroup = \"cart-consumer_cart-item-removed-topic\")\n+    public class CardItemRemoveConsumer implements RocketMQListener<CartItemEvent> {\n+        public void onMessage(CartItemEvent removeItemEvent) {\n+            System.out.println(\"Removing item: \" + removeItemEvent);\n+            // logic\n+        }\n+    }\n+}\n\ndiff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.rocketmq.event;\n+\n+public class CartItemEvent {\n+    private String itemId;\n+    private int quantity;\n+\n+    public CartItemEvent(String itemId, int quantity) {\n+        this.itemId = itemId;\n+        this.quantity = quantity;\n+    }\n+\n+    public String getItemId() {\n+        return itemId;\n+    }\n+\n+    public void setItemId(String itemId) {\n+        this.itemId = itemId;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CartItemEvent{\" + \"itemId='\" + itemId + '\\'' + \", quantity=\" + quantity + '}';\n+    }\n+}\n\ndiff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n@@ -0,0 +1,26 @@\n+package com.baeldung.rocketmq.producer;\n+\n+\n+import com.baeldung.rocketmq.event.CartItemEvent;\n+import org.apache.rocketmq.spring.core.RocketMQTemplate;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class CartEventProducer implements CommandLineRunner {\n+\n+    @Autowired\n+    private RocketMQTemplate rocketMQTemplate;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(CartEventProducer.class, args);\n+    }\n+\n+    public void run(String... args) throws Exception {\n+        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"bike\", 1));\n+        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"computer\", 2));\n+        rocketMQTemplate.convertAndSend(\"cart-item-removed-topic\", new CartItemEvent(\"bike\", 1));\n+    }\n+}\n\ndiff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.rocketmq.transaction;\n+\n+import org.apache.rocketmq.spring.annotation.RocketMQTransactionListener;\n+import org.apache.rocketmq.spring.core.RocketMQLocalTransactionListener;\n+import org.apache.rocketmq.spring.core.RocketMQLocalTransactionState;\n+import org.springframework.messaging.Message;\n+\n+@RocketMQTransactionListener(txProducerGroup = \"test-transaction\")\n+class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n+    @Override\n+    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n+        // ... local transaction process, return ROLLBACK, COMMIT or UNKNOWN\n+        return RocketMQLocalTransactionState.UNKNOWN;\n+    }\n+\n+    @Override\n+    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n+        // ... check transaction status and return ROLLBACK, COMMIT or UNKNOWN\n+        return RocketMQLocalTransactionState.COMMIT;\n+    }\n+}",
    "output": "Merge pull request #8305 from MajewskiKrzysztof/master\n\nBAEL-3457 Apache RocketMQ"
  },
  {
    "input": "diff --git a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -13,7 +13,7 @@ public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n     }\n \n     @Test\n-    public void givenDoubleValue_whenMathRoundUsed_thenLongValueReturned() {\n+    public void givenDoubleValue_whenMathRoundUsed_thenRoundUp() {\n         Assert.assertEquals(10000L, Math.round(VALUE));\n     }\n \n@@ -22,6 +22,11 @@ public void givenDoubleValue_whenMathRoundUsed_thenRoundDown() {\n         Assert.assertEquals(9999L, Math.round(9999.444));\n     }\n \n+    @Test\n+    public void givenDoubleValue_whenMathRoundUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.round(9999.0));\n+    }\n+\n     @Test\n     public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n         Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n@@ -47,6 +52,11 @@ public void givenDoubleValue_whenMathFloorUsed_thenSameValueReturned() {\n         Assert.assertEquals(9999L, Math.floor(9999.0), 0);\n     }\n \n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenDifferentThanCeil() {\n+        Assert.assertEquals(9999L, Math.floor(9999.444), 0);\n+    }\n+\n     @Test\n     public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n         Assert.assertEquals(9999L, (long) VALUE);",
    "output": "Add a few additional test cases"
  },
  {
    "input": "diff --git a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -9,28 +9,46 @@ public class DoubleToLongUnitTest {\n \n     @Test\n     public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n-        Assert.assertEquals(9999L, Double.valueOf(VALUE)\n-            .longValue());\n+        Assert.assertEquals(9999L, Double.valueOf(VALUE).longValue());\n     }\n \n     @Test\n-    public void givenDoubleValue_whenMathRoundUseds_thenLongValueReturned() {\n+    public void givenDoubleValue_whenMathRoundUsed_thenLongValueReturned() {\n         Assert.assertEquals(10000L, Math.round(VALUE));\n     }\n \n+    @Test\n+    public void givenDoubleValue_whenMathRoundUsed_thenRoundDown() {\n+        Assert.assertEquals(9999L, Math.round(9999.444));\n+    }\n+\n     @Test\n     public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n         Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n     }\n \n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.ceil(9999.0), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenDifferentThanRound() {\n+        Assert.assertEquals(10000L, Math.ceil(9999.444), 0);\n+    }\n+\n     @Test\n     public void givenDoubleValue_whenMathFloorUsed_thenLongValueReturned() {\n         Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n     }\n \n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenSameValueReturned() {\n+        Assert.assertEquals(9999L, Math.floor(9999.0), 0);\n+    }\n+\n     @Test\n     public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n         Assert.assertEquals(9999L, (long) VALUE);\n     }\n-\n }",
    "output": "BAEL-3517: Code Review Feedback Applied"
  },
  {
    "input": "diff --git a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.doubletolong;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DoubleToLongUnitTest {\n+\n+    final static double VALUE = 9999.999;\n+\n+    @Test\n+    public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, Double.valueOf(VALUE)\n+            .longValue());\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathRoundUseds_thenLongValueReturned() {\n+        Assert.assertEquals(10000L, Math.round(VALUE));\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n+        Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenMathFloorUsed_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n+        Assert.assertEquals(9999L, (long) VALUE);\n+    }\n+\n+}",
    "output": "Merge pull request #8283 from sreekanthsnair/master\n\nDouble to Integer Casting (BAEL-3517)"
  },
  {
    "input": "diff --git a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n--- a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n+++ b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoAnnotationsUninitializedUnitTest.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.mockito;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+import java.util.List;\n+\n+public class MockitoAnnotationsUninitializedUnitTest {\n+\n+    @Mock\n+    List<String> mockedList;\n+\n+    @Test(expected = NullPointerException.class)\n+    public void whenMockitoAnnotationsUninitialized_thenNPEThrown() {\n+        Mockito.when(mockedList.size()).thenReturn(1);\n+    }\n+}",
    "output": "BAEL-3700: Add example of uninitialized Mockito annotations"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-14/src/main/java/com/baeldung/serial/MySerialClass.java b/core-java-modules/core-java-14/src/main/java/com/baeldung/serial/MySerialClass.java\n--- a/core-java-modules/core-java-14/src/main/java/com/baeldung/serial/MySerialClass.java\n+++ b/core-java-modules/core-java-14/src/main/java/com/baeldung/serial/MySerialClass.java\n@@ -0,0 +1,50 @@\n+package com.baeldung.serial;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import java.io.ObjectStreamField;\n+import java.io.Serial;\n+import java.io.Serializable;\n+\n+/**\n+ * Class showcasing the usage of the Java 14 @Serial annotation.\n+ * \n+ * @author Donato Rimenti\n+ */\n+public class MySerialClass implements Serializable {\n+\t\n+\t@Serial\n+\tprivate static final ObjectStreamField[] serialPersistentFields = null;\n+\t\n+\t@Serial\n+\tprivate static final long serialVersionUID = 1;\n+\n+\t@Serial\n+\tprivate void writeObject(ObjectOutputStream stream) throws IOException {\n+\t\t// ...\n+\t}\n+\n+\t@Serial\n+\tprivate void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n+\t\t// ...\n+\t}\n+\n+\t@Serial\n+\tprivate void readObjectNoData() throws ObjectStreamException {\n+\t\t// ...\n+\t}\n+\n+\t@Serial\n+\tprivate Object writeReplace() throws ObjectStreamException {\n+\t\t// ...\n+\t\treturn null;\n+\t}\n+\n+\t@Serial\n+\tprivate Object readResolve() throws ObjectStreamException {\n+\t\t// ...\n+\t\treturn null;\n+\t}\n+}\n\\ No newline at end of file",
    "output": "[BAEL-3524] A Guide to @Serial Annotation in Java 14 (#8433)\n\n* BAEL-1935: Synthetic Class in Java\r\n\r\n* Converted tabs to spaces\r\n\r\n* [BAEL-3524] Created project core-java-14 with @Serial demo."
  },
  {
    "input": "diff --git a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n--- a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n+++ b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n@@ -99,10 +99,12 @@ public void whenOverridingCookie_thenItIsUpdated() {\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n         driver.manage().deleteCookie(lpCookie);\n \n-        lpCookie = new Cookie(\"lp_120073\", \"foo\");\n-        driver.manage().addCookie(lpCookie);\n+        Cookie newLpCookie = new Cookie(\"lp_120073\", \"foo\");\n+        driver.manage().addCookie(newLpCookie);\n \n-        assertThat(lpCookie.getValue(), equalTo(\"foo\"));\n+        Cookie overriddenCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(overriddenCookie.getValue(), equalTo(\"foo\"));\n     }\n \n }",
    "output": "[BAEL-2948] requested PR changes"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/com/baeldung/Application.java b/spring-aop/src/main/java/com/baeldung/Application.java\n--- a/spring-aop/src/main/java/com/baeldung/Application.java\n+++ b/spring-aop/src/main/java/com/baeldung/Application.java\n@@ -6,7 +6,6 @@\n @SpringBootApplication\n public class Application {\n \n-\n     public static void main(String[] args) {\n         SpringApplication.run(Application.class, args);\n     }\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/TestConfig.java b/spring-aop/src/test/java/com/baeldung/TestConfig.java\n--- a/spring-aop/src/test/java/com/baeldung/TestConfig.java\n+++ b/spring-aop/src/test/java/com/baeldung/TestConfig.java\n@@ -1,11 +0,0 @@\n-package com.baeldung;\n-\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.EnableAspectJAutoProxy;\n-\n-@Configuration\n-@ComponentScan(basePackages = { \"com.baeldung.pointcutadvice\" })\n-@EnableAspectJAutoProxy\n-public class TestConfig {\n-}\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import org.junit.Before;\n import org.junit.Test;\n@@ -23,7 +23,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = {TestConfig.class}, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopLoggingIntegrationTest {\n \n     @Before\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import org.junit.Before;\n import org.junit.Test;\n@@ -23,7 +23,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = { TestConfig.class }, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopPerformanceIntegrationTest {\n \n     @Before\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import com.baeldung.pointcutadvice.events.FooCreationEventListener;\n import org.junit.Before;\n@@ -21,7 +21,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = {TestConfig.class}, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopPublishingIntegrationTest {\n \n     @Before",
    "output": "Merge pull request #8447 from kwoyke/BAEL-3180-2\n\nBAEL-3180: Simplify spring-aop tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExample.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExample.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExample.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExample.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.finallykeyword;\n+\n+public class FinallyExample {\n+\n+    public void printCount(String count) {\n+        try {\n+            System.out.println(\"The count is \" + Integer.parseInt(count));\n+        } catch (NumberFormatException e) {\n+            System.out.println(\"No count\");\n+        } finally {\n+            System.out.println(\"In finally\");\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExecutedCases.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExecutedCases.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExecutedCases.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyExecutedCases.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.finallykeyword;\n+\n+public class FinallyExecutedCases {\n+\n+    public void noExceptionFinally() {\n+        try {\n+            System.out.println(\"Inside try\");\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public void unhandledException() throws Exception {\n+        try {\n+            System.out.println(\"Inside try\");\n+            throw new Exception();\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public void handledException() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            throw new Exception();\n+        } catch (Exception e) {\n+            System.out.println(\"Inside catch\");\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public String returnFromTry() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            return \"from try\";\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public String returnFromCatch() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            throw new Exception();\n+        } catch (Exception e) {\n+            System.out.println(\"Inside catch\");\n+            return \"from catch\";\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyNotExecutedCases.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyNotExecutedCases.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyNotExecutedCases.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/FinallyNotExecutedCases.java\n@@ -0,0 +1,54 @@\n+package com.baeldung.finallykeyword;\n+\n+public class FinallyNotExecutedCases {\n+\n+    public void callingSystemExit() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            System.exit(1);\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public void callingRuntimeHalt() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            Runtime.getRuntime()\n+                .halt(1);\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public void infiniteLoop() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            while (true) {\n+            }\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+        }\n+    }\n+\n+    public void daemonThread() throws InterruptedException {\n+        Runnable runnable = () -> {\n+            try {\n+                System.out.println(\"Inside try\");\n+            } finally {\n+                try {\n+                    Thread.sleep(1000);\n+                    System.out.println(\"Inside finally\");\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        };\n+        Thread regular = new Thread(runnable);\n+        Thread daemon = new Thread(runnable);\n+        daemon.setDaemon(true);\n+        regular.start();\n+        Thread.sleep(300);\n+        daemon.start();\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinally.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinally.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinally.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinally.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.finallykeyword;\n+\n+public class PitfallsWhenUsingFinally {\n+\n+    public String disregardsUnCaughtException() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            throw new RuntimeException();\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+            return \"from finally\";\n+        }\n+    }\n+\n+    public String ignoringOtherReturns() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            return \"from try\";\n+        } finally {\n+            System.out.println(\"Inside finally\");\n+            return \"from finally\";\n+        }\n+    }\n+\n+    public String throwsException() {\n+        try {\n+            System.out.println(\"Inside try\");\n+            return \"from try\";\n+        } finally {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinallyUnitTest.java b/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinallyUnitTest.java\n--- a/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinallyUnitTest.java\n+++ b/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/finallykeyword/PitfallsWhenUsingFinallyUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.finallykeyword;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+public class PitfallsWhenUsingFinallyUnitTest {\n+\n+    PitfallsWhenUsingFinally instance = new PitfallsWhenUsingFinally();\n+\n+    @Test\n+    public void testIgnoresException() {\n+        String result = instance.disregardsUnCaughtException();\n+        assertEquals(\"from finally\", result);\n+    }\n+\n+    @Test\n+    public void testIgnoresOtherReturns() {\n+        String result = instance.ignoringOtherReturns();\n+        assertEquals(\"from finally\", result);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testThrowsException() {\n+        instance.throwsException();\n+    }\n+}",
    "output": "Changes for \"Guide to finally in Java\" (BAEL-3526) (#8237)\n\n* Adding files for finally keyword\r\n\r\n* Adding returnFromCatch example.\r\n\r\n* Adding empty braces instead of dangling ;\r\n\r\n* Return from try, removing the catch block.\r\n\r\n* moving to to core-java module\r\n\r\n* moving to core-java-lang-2"
  },
  {
    "input": "diff --git a/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java b/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n--- a/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n+++ b/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n@@ -1,11 +1,7 @@\n package com.baeldung.reactive.functional;\n \n-import static org.mockito.BDDMockito.given;\n-import static org.mockito.Mockito.verify;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import com.baeldung.webflux.Employee;\n+import com.baeldung.webflux.EmployeeRepository;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -15,13 +11,15 @@\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.reactive.server.WebTestClient;\n-\n-import com.baeldung.webflux.Employee;\n-import com.baeldung.webflux.EmployeeRepository;\n-\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.verify;\n+\n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = EmployeeSpringFunctionalApplication.class)\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n@@ -58,15 +56,11 @@ public void whenGetAllEmployees_thenCorrectEmployees() {\n             .bindToRouterFunction(config.getAllEmployeesRoute())\n             .build();\n \n-        List<Employee> employeeList = new ArrayList<>();\n-\n-        Employee employee1 = new Employee(\"1\", \"Employee 1\");\n-        Employee employee2 = new Employee(\"2\", \"Employee 2\");\n-\n-        employeeList.add(employee1);\n-        employeeList.add(employee2);\n+        List<Employee> employees = Arrays.asList(\n+            new Employee(\"1\", \"Employee 1\"),\n+            new Employee(\"2\", \"Employee 2\"));\n \n-        Flux<Employee> employeeFlux = Flux.fromIterable(employeeList);\n+        Flux<Employee> employeeFlux = Flux.fromIterable(employees);\n         given(employeeRepository.findAllEmployees()).willReturn(employeeFlux);\n \n         client.get()\n@@ -75,7 +69,7 @@ public void whenGetAllEmployees_thenCorrectEmployees() {\n             .expectStatus()\n             .isOk()\n             .expectBodyList(Employee.class)\n-            .isEqualTo(employeeList);\n+            .isEqualTo(employees);\n     }\n \n     @Test",
    "output": "Merge pull request #8420 from kwoyke/BAEL-19890\n\nBAEL-19890: Upgrade to Spring Boot 2.2.2 and refactor test method"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-arrays-2/src/main/java/com/baeldung/arraysort/ArraySortingBenchmark.java b/core-java-modules/core-java-arrays-2/src/main/java/com/baeldung/arraysort/ArraySortingBenchmark.java\n--- a/core-java-modules/core-java-arrays-2/src/main/java/com/baeldung/arraysort/ArraySortingBenchmark.java\n+++ b/core-java-modules/core-java-arrays-2/src/main/java/com/baeldung/arraysort/ArraySortingBenchmark.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.arraysort;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 10)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+public class ArraySortingBenchmark {\n+\n+    @State(Scope.Benchmark)\n+    public static class ArrayContainer {\n+\n+        @Param({ \"1000\", \"10000\", \"100000\", \"1000000\" })\n+        int arraySize;\n+\n+        // initial unsorted array\n+        int[] unsortedArray;\n+        \n+        //cloned array to sort\n+        int[] arrayToSort;\n+\n+        @Setup(Level.Trial)\n+        public void createUnSortedArray() {\n+            unsortedArray = new int[arraySize];\n+            for (int i = 0; i < arraySize; i++) {\n+                unsortedArray[i] = new Random().nextInt(1000);\n+            }\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void createUnSortedArrayCopy() {\n+            arrayToSort = unsortedArray.clone();\n+        }\n+\n+        int[] getArrayToSort() {\n+            return arrayToSort;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_arrays_parallel_sort(ArrayContainer d, Blackhole b) {\n+        int[] arr = d.getArrayToSort();\n+        Arrays.parallelSort(arr);\n+        b.consume(arr);\n+    }\n+\n+    @Benchmark\n+    public void benchmark_arrays_sort(ArrayContainer d, Blackhole b) {\n+        int[] arr = d.getArrayToSort();\n+        Arrays.sort(arr);\n+        b.consume(arr);\n+    }\n+\n+}",
    "output": "BAEL-3380 (#8454)\n\n* initial commit\r\n\r\n* changes for articlesBAEL-3380\r\n\r\n* Removed evaluation article files\r\n\r\n* BAEL-3380\r\n\r\n* adding test case BAEL-3380\r\n\r\n* BAEL-3380\r\n\r\n* BAEL-3380 - updated tests and removed main class\r\n\r\n* BAEL-3380 - Updated Test class name\r\n\r\n* BAEL-3380 - Updated Test class name\r\n\r\n* BAEL-3380 - Updated testcase names as per BDD naming convention\r\n\r\n* BAEL 3380 - Added JMH benchmark"
  },
  {
    "input": "diff --git a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers-3/src/main/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -8,28 +8,28 @@ public class DoubleToLongUnitTest {\n     final static double VALUE = 9999.999;\n \n     @Test\n-    public void using_longValue() {\n+    public void givenDoubleValue_whenLongValueCalled_thenLongValueReturned() {\n         Assert.assertEquals(9999L, Double.valueOf(VALUE)\n             .longValue());\n     }\n \n     @Test\n-    public void using_Math_Round() {\n+    public void givenDoubleValue_whenMathRoundUseds_thenLongValueReturned() {\n         Assert.assertEquals(10000L, Math.round(VALUE));\n     }\n \n     @Test\n-    public void using_Math_Ceil() {\n+    public void givenDoubleValue_whenMathCeilUsed_thenLongValueReturned() {\n         Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n     }\n \n     @Test\n-    public void using_Math_Floor() {\n+    public void givenDoubleValue_whenMathFloorUsed_thenLongValueReturned() {\n         Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n     }\n \n     @Test\n-    public void using_Type_Cast() {\n+    public void givenDoubleValue_whenTypeCasted_thenLongValueReturned() {\n         Assert.assertEquals(9999L, (long) VALUE);\n     }\n ",
    "output": "Code review updates"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n@@ -20,7 +20,6 @@ public class BookStoreRunSteps {\n     public void setUp() {\n         store = new BookStore();\n         foundBooks = new ArrayList<>();\n-        System.out.print(\"Book store steps run simple\");\n     }\n     \n     @Given(\"^I have the following books in the store$\")",
    "output": "Cucumber hooks - http://jira.baeldung.com/browse/BAEL-3590"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/Book.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+public class Book {\n+\n+    private String title;\n+    private String author;\n+    \n+    public Book(String title, String author) {\n+        this.title = title;\n+        this.author = author;\n+    }\n+    \n+    public Book() {}\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+    \n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+    \n+    public String getAuthor() {\n+        return author;\n+    }\n+    \n+    public void setAuthor(String author) {\n+        this.author = author;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Book [title=\" + title + \", author=\" + author + \"]\";\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberhooks/books/BookStore.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class BookStore {\n+    private List<Book> books = new ArrayList<>();\n+\n+    public void addBook(Book book) {\n+        books.add(book);\n+    }\n+\n+    public void addAllBooks(Collection<Book> books) {\n+        this.books.addAll(books);\n+    }\n+\n+    public List<Book> booksByAuthor(String author) {\n+        return books.stream()\n+          .filter(book -> Objects.equals(author, book.getAuthor()))\n+          .collect(Collectors.toList());\n+    }\n+\n+    public Optional<Book> bookByTitle(String title) {\n+        return books.stream()\n+          .filter(book -> book.getTitle().equals(title))\n+          .findFirst();\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n@@ -20,6 +20,7 @@ public class BookStoreRunSteps {\n     public void setUp() {\n         store = new BookStore();\n         foundBooks = new ArrayList<>();\n+        System.out.print(\"Book store steps run simple\");\n     }\n     \n     @Given(\"^I have the following books in the store$\")\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksIntegrationTest.java\n@@ -0,0 +1,56 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import io.cucumber.core.api.Scenario;\n+import io.cucumber.java.After;\n+import io.cucumber.java.AfterStep;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.BeforeStep;\n+import io.cucumber.java8.En;\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(features = \"classpath:features/book-store-with-hooks.feature\",\n+glue =\"com.baeldung.cucumberhooks.books\"\n+)\n+public class BookStoreWithHooksIntegrationTest implements En {\n+\n+    public BookStoreWithHooksIntegrationTest() {\n+        Before(1, () -> startBrowser());\n+    }\n+\n+    @Before(order=2, value=\"@Screenshots\")\n+    public void beforeScenario(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @After\n+    public void afterScenario(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @BeforeStep\n+    public void beforeStep(Scenario scenario) {\n+        takeScreenshot();\n+    }\n+\n+    @AfterStep\n+    public void afterStep(Scenario scenario) {\n+        takeScreenshot();\n+        closeBrowser();\n+    }\n+\n+    public void takeScreenshot() {\n+        //code to take and save screenshot\n+    }\n+\n+    public void startBrowser() {\n+        //code to open browser\n+    }\n+\n+    public void closeBrowser() {\n+        //code to close browser\n+    }\n+}\n+\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberhooks/books/BookStoreWithHooksRunSteps.java\n@@ -0,0 +1,44 @@\n+package com.baeldung.cucumberhooks.books;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.java8.En;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BookStoreWithHooksRunSteps implements En {\n+\n+    private BookStore store;\n+    private List<Book> foundBooks;\n+    private Book foundBook;\n+\n+    public BookStoreWithHooksRunSteps() {\n+        store = new BookStore();\n+        foundBooks = new ArrayList<>();\n+    }\n+\n+    @Given(\"^The following books are available in the store$\")\n+    public void haveBooksInTheStore(DataTable table) {\n+        List<List<String>> rows = table.asLists(String.class);\n+\n+        for (List<String> columns: rows) {\n+            store.addBook(new Book(columns.get(0), columns.get(1)));\n+        }\n+    }\n+\n+    @When(\"^I ask for a book by the author (.+)$\")\n+    public void searchForBooksByAuthor(String author) {\n+        foundBooks = store.booksByAuthor(author);\n+    }\n+\n+    @Then(\"^The salesperson says that there are (\\\\d+) books$\")\n+    public void findBooks(int count) {\n+        assertEquals(count, foundBooks.size());\n+    }\n+\n+}",
    "output": "Cucumber hooks - http://jira.baeldung.com/browse/BAEL-3590"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/ElementCollectionApplication.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/ElementCollectionApplication.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/ElementCollectionApplication.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/ElementCollectionApplication.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.elementcollection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class ElementCollectionApplication {\n+    public static void main(String[] args) {\n+        SpringApplication.run(ElementCollectionApplication.class, args);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Employee.java\n@@ -0,0 +1,71 @@\n+package com.baeldung.elementcollection.model;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+import java.util.Objects;\n+\n+@Entity\n+public class Employee {\n+    @Id\n+    private int id;\n+    private String name;\n+    @ElementCollection\n+    @CollectionTable(\n+            name = \"employee_phone\",\n+            joinColumns = @JoinColumn(name = \"employee_id\")\n+    )\n+    private List<Phone> phones;\n+\n+    public Employee() {\n+    }\n+\n+    public Employee(int id) {\n+        this.id = id;\n+    }\n+\n+    public Employee(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<Phone> getPhones() {\n+        return phones;\n+    }\n+\n+    public void setPhones(List<Phone> phones) {\n+        this.phones = phones;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Employee)) {\n+            return false;\n+        }\n+        Employee user = (Employee) o;\n+        return getId() == user.getId();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getId());\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.elementcollection.model;\n+\n+import javax.persistence.Embeddable;\n+import java.util.Objects;\n+\n+@Embeddable\n+public class Phone {\n+    private String type;\n+    private String areaCode;\n+    private String number;\n+\n+    public Phone() {\n+    }\n+\n+    public Phone(String type, String areaCode, String number) {\n+        this.type = type;\n+        this.areaCode = areaCode;\n+        this.number = number;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public String getAreaCode() {\n+        return areaCode;\n+    }\n+\n+    public void setAreaCode(String areaCode) {\n+        this.areaCode = areaCode;\n+    }\n+\n+    public String getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(String number) {\n+        this.number = number;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Phone)) {\n+            return false;\n+        }\n+        Phone phone = (Phone) o;\n+        return getType().equals(phone.getType()) &&\n+                getAreaCode().equals(phone.getAreaCode()) &&\n+                getNumber().equals(phone.getNumber());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getType(), getAreaCode(), getNumber());\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java\n@@ -0,0 +1,45 @@\n+package com.baeldung.elementcollection.repository;\n+\n+import com.baeldung.elementcollection.model.Employee;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.EntityGraph;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Repository\n+public class EmployeeRepository {\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    @Transactional\n+    public void save(Employee employee) {\n+        em.persist(employee);\n+    }\n+\n+    @Transactional\n+    public void remove(int id) {\n+        Employee employee = findById(id);\n+        em.remove(employee);\n+    }\n+\n+    public Employee findById(int id) {\n+        return em.find(Employee.class, id);\n+    }\n+\n+    public Employee findByJPQL(int id) {\n+        return em.createQuery(\"SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id\", Employee.class).setParameter(\"id\", id).getSingleResult();\n+    }\n+\n+    public Employee findByEntityGraph(int id) {\n+        EntityGraph<Employee> entityGraph = em.createEntityGraph(Employee.class);\n+        entityGraph.addAttributeNodes(\"name\", \"phones\");\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"javax.persistence.fetchgraph\", entityGraph);\n+        return em.find(Employee.class, id, properties);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.elementcollection;\n+\n+import com.baeldung.elementcollection.model.Employee;\n+import com.baeldung.elementcollection.model.Phone;\n+import com.baeldung.elementcollection.repository.EmployeeRepository;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Arrays;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = ElementCollectionApplication.class)\n+public class ElementCollectionIntegrationTest {\n+\n+    @Autowired\n+    private EmployeeRepository employeeRepository;\n+\n+    @Before\n+    public void init() {\n+        Employee employee = new Employee(1, \"Fred\");\n+        employee.setPhones(Arrays.asList(new Phone(\"work\", \"+55\", \"99999-9999\"), new Phone(\"home\", \"+55\", \"98888-8888\")));\n+        employeeRepository.save(employee);\n+    }\n+\n+    @After\n+    public void clean() {\n+        employeeRepository.remove(1);\n+    }\n+\n+    @Test(expected = org.hibernate.LazyInitializationException.class)\n+    public void whenAccessLazyCollection_thenThrowLazyInitializationException() {\n+        Employee employee = employeeRepository.findById(1);\n+        assertThat(employee.getPhones().size(), is(2));\n+    }\n+\n+    @Test\n+    public void whenUseJPAQL_thenFetchResult() {\n+        Employee employee = employeeRepository.findByJPQL(1);\n+        assertThat(employee.getPhones().size(), is(2));\n+    }\n+\n+    @Test\n+    public void whenUseEntityGraph_thenFetchResult() {\n+        Employee employee = employeeRepository.findByEntityGraph(1);\n+        assertThat(employee.getPhones().size(), is(2));\n+    }\n+\n+    @Test\n+    @Transactional\n+    public void whenUseTransaction_thenFetchResult() {\n+        Employee employee = employeeRepository.findById(1);\n+        assertThat(employee.getPhones().size(), is(2));\n+    }\n+}",
    "output": "Code related to the mini-article BAEL-3386"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -1,8 +1,10 @@\n package com.baeldung.date.comparison;\r\n \r\n import java.text.SimpleDateFormat;\r\n+import java.time.Instant;\r\n import java.time.LocalDate;\r\n import java.time.ZoneId;\r\n+import java.time.temporal.ChronoUnit;\r\n import java.util.Calendar;\r\n import java.util.Date;\r\n import java.util.TimeZone;\r\n@@ -23,6 +25,14 @@ public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\n         return localDate1.isEqual(localDate2);\r\n     }\r\n \r\n+    public static boolean isSameDayUsingInstant(Date date1, Date date2) {\r\n+        Instant instant1 = date1.toInstant()\r\n+            .truncatedTo(ChronoUnit.DAYS);\r\n+        Instant instant2 = date2.toInstant()\r\n+            .truncatedTo(ChronoUnit.DAYS);\r\n+        return instant1.equals(instant2);\r\n+    }\r\n+\r\n     public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n         SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n         return fmt.format(date1)\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -1,13 +1,13 @@\n package com.baeldung.date.comparison;\r\n \r\n-import org.junit.Test;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n import java.time.LocalDateTime;\r\n import java.time.ZoneId;\r\n import java.util.Date;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n+import org.junit.Test;\r\n \r\n public class DateComparisonUtilsUnitTest {\r\n \r\n@@ -23,6 +23,7 @@ private Date toDate(LocalDateTime localDateTime) {\n     @Test\r\n     public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n         assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n@@ -35,6 +36,9 @@ public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n \r\n+        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Evening, day2Morning));\r\n+\r\n         assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n         assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n \r",
    "output": "Merge pull request #8399 from AlNiyas/samedayimprovement\n\n[BAEL-3632] Using Instant to check for same day"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n@@ -9,12 +9,6 @@\n \n public class DateUtilsUnitTest {\n \n-    @Test\n-    public void givenTimeMillis_thenDateIsReturned() {\n-        Date now = DateUtils.getNow();\n-        assertEquals(DateUtils.getDate(now.getTime()), now);\n-    }\n-\n     @Test\n     public void givenDateAndPattern_thenDateIsCorrectlyReturned() throws ParseException {\n         long milliseconds = new Date(2020 - 1900, 0, 1).getTime();\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n@@ -9,11 +9,6 @@\n \n public class DateUtilsUnitTest {\n \n-    @Test\n-    public void givenCurrentDate_thenTodayIsReturned() {\n-        assertEquals(DateUtils.getNow().toLocalDate(), LocalDate.now());\n-    }\n-\n     @Test(expected = IllegalArgumentException.class)\n     public void givenDateAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {\n         DateUtils.getDate(\"2020 01 01\");\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n@@ -1,21 +1,12 @@\n package com.baeldung.datetime.sql;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.sql.TimestampUtils;\n-\n import java.text.ParseException;\n-import java.util.Date;\n \n-public class TimestampUtilsUnitTest {\n+import static org.junit.Assert.assertEquals;\n \n-    @Test\n-    public void givenCurrentTimestamp_thenNowIsReturned() {\n-        assertEquals(TimestampUtils.getNow()\n-            .getTime(), new Date().getTime());\n-    }\n+public class TimestampUtilsUnitTest {\n \n     @Test(expected = IllegalArgumentException.class)\n     public void givenTimestampAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {",
    "output": "Merge pull request #8434 from kwoyke/BAEL-3674\n\nBAEL-3674: Remove the broken test"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n@@ -9,12 +9,6 @@\n \n public class DateUtilsUnitTest {\n \n-    @Test\n-    public void givenTimeMillis_thenDateIsReturned() {\n-        Date now = DateUtils.getNow();\n-        assertEquals(DateUtils.getDate(now.getTime()), now);\n-    }\n-\n     @Test\n     public void givenDateAndPattern_thenDateIsCorrectlyReturned() throws ParseException {\n         long milliseconds = new Date(2020 - 1900, 0, 1).getTime();\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n@@ -9,11 +9,6 @@\n \n public class DateUtilsUnitTest {\n \n-    @Test\n-    public void givenCurrentDate_thenTodayIsReturned() {\n-        assertEquals(DateUtils.getNow().toLocalDate(), LocalDate.now());\n-    }\n-\n     @Test(expected = IllegalArgumentException.class)\n     public void givenDateAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {\n         DateUtils.getDate(\"2020 01 01\");",
    "output": "BAEL-3674: Remove two more unit tests"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/com/baeldung/Application.java b/spring-aop/src/main/java/com/baeldung/Application.java\n--- a/spring-aop/src/main/java/com/baeldung/Application.java\n+++ b/spring-aop/src/main/java/com/baeldung/Application.java\n@@ -6,7 +6,6 @@\n @SpringBootApplication\n public class Application {\n \n-\n     public static void main(String[] args) {\n         SpringApplication.run(Application.class, args);\n     }\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/TestConfig.java b/spring-aop/src/test/java/com/baeldung/TestConfig.java\n--- a/spring-aop/src/test/java/com/baeldung/TestConfig.java\n+++ b/spring-aop/src/test/java/com/baeldung/TestConfig.java\n@@ -1,11 +0,0 @@\n-package com.baeldung;\n-\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.EnableAspectJAutoProxy;\n-\n-@Configuration\n-@ComponentScan(basePackages = { \"com.baeldung.pointcutadvice\" })\n-@EnableAspectJAutoProxy\n-public class TestConfig {\n-}\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopLoggingIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import org.junit.Before;\n import org.junit.Test;\n@@ -23,7 +23,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = {TestConfig.class}, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopLoggingIntegrationTest {\n \n     @Before\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPerformanceIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import org.junit.Before;\n import org.junit.Test;\n@@ -23,7 +23,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = { TestConfig.class }, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopPerformanceIntegrationTest {\n \n     @Before\n\ndiff --git a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n--- a/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n+++ b/spring-aop/src/test/java/com/baeldung/pointcutadvice/AopPublishingIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.pointcutadvice;\n \n-import com.baeldung.TestConfig;\n+import com.baeldung.Application;\n import com.baeldung.pointcutadvice.dao.FooDao;\n import com.baeldung.pointcutadvice.events.FooCreationEventListener;\n import org.junit.Before;\n@@ -21,7 +21,7 @@\n import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(classes = {TestConfig.class}, loader = AnnotationConfigContextLoader.class)\n+@ContextConfiguration(classes = {Application.class}, loader = AnnotationConfigContextLoader.class)\n public class AopPublishingIntegrationTest {\n \n     @Before",
    "output": "BAEL-3180: Simplify spring-aop tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n@@ -22,9 +22,9 @@ public class PrimeNumbersUnitTest {\n     @Test\n     public void givenPrimesCalculated_whenUsingPoolsAndOneThread_thenOneThreadSlowest() {\n         Options opt = new OptionsBuilder()\n-                .include(Benchmarker.class.getSimpleName())\n-                .forks(1)\n-                .build();\n+          .include(Benchmarker.class.getSimpleName())\n+          .forks(1)\n+          .build();\n \n         try {\n             new Runner(opt).run();\n@@ -40,7 +40,7 @@ public void givenNewWorkStealingPool_whenGettingPrimes_thenStealCountChanges() {\n         for (int granularity : PrimeNumbers.GRANULARITIES) {\n             int parallelism = ForkJoinPool.getCommonPoolParallelism();\n             ForkJoinPool pool =\n-                    (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n+              (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n \n             stealCountInfo(info, granularity, pool);\n         }",
    "output": "Indenting with 2 spaces"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/CombiningUnitTest.java b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/CombiningUnitTest.java\n--- a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/CombiningUnitTest.java\n+++ b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/CombiningUnitTest.java\n@@ -0,0 +1,57 @@\n+package com.baeldung.branchprediction;\n+\n+import java.util.stream.LongStream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CombiningUnitTest {\n+    private static final Logger LOG = LoggerFactory.getLogger(CombiningUnitTest.class);\n+\n+    public static final int TOP = 10000000;\n+    public static final double FRACTION = 0.1;\n+\n+    @Test\n+    public void combined() {\n+        long[] first = LongStream.range(0, TOP)\n+            .map(n -> Math.random() < FRACTION ? 0 : n)\n+            .toArray();\n+        long[] second = LongStream.range(0, TOP)\n+            .map(n -> Math.random() < FRACTION ? 0 : n)\n+            .toArray();\n+\n+        long count = 0;\n+        long start = System.currentTimeMillis();\n+        for (int i = 0; i < TOP; i++) {\n+            if (first[i] * second[i] != 0) {\n+                ++count;\n+            }\n+        }\n+        long end = System.currentTimeMillis();\n+\n+        LOG.info(\"Counted {}/{} numbers using combined mode in {}ms\", count, TOP, end - start);\n+\n+    }\n+\n+    @Test\n+    public void separate() {\n+        long[] first = LongStream.range(0, TOP)\n+            .map(n -> Math.random() < FRACTION ? 0 : n)\n+            .toArray();\n+        long[] second = LongStream.range(0, TOP)\n+            .map(n -> Math.random() < FRACTION ? 0 : n)\n+            .toArray();\n+\n+        long count = 0;\n+        long start = System.currentTimeMillis();\n+        for (int i = 0; i < TOP; i++) {\n+            if (first[i] != 0 && second[i] != 0) {\n+                ++count;\n+            }\n+        }\n+        long end = System.currentTimeMillis();\n+\n+        LOG.info(\"Counted {}/{} numbers using separate mode in {}ms\", count, TOP, end - start);\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/IfUnitTest.java b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/IfUnitTest.java\n--- a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/IfUnitTest.java\n+++ b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/IfUnitTest.java\n@@ -0,0 +1,92 @@\n+package com.baeldung.branchprediction;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class IfUnitTest {\n+    private static final Logger LOG = LoggerFactory.getLogger(IfUnitTest.class);\n+\n+    public static final int TOP = 10000000;\n+\n+    @Test\n+    public void majorBranchSorted() {\n+        test(TOP, 0.9, false);\n+    }\n+\n+    @Test\n+    public void minorBranchSorted() {\n+        test(TOP, 0.1, false);\n+    }\n+\n+    @Test\n+    public void equalBranchSorted() {\n+        test(TOP, 0.5, false);\n+    }\n+\n+    @Test\n+    public void allBranchSorted() {\n+        test(TOP, 1, false);\n+    }\n+\n+    @Test\n+    public void noneBranchSorted() {\n+        test(TOP, 0, false);\n+    }\n+\n+    @Test\n+    public void majorBranchShuffled() {\n+        test(TOP, 0.9, true);\n+    }\n+\n+    @Test\n+    public void minorBranchShuffled() {\n+        test(TOP, 0.1, true);\n+    }\n+\n+    @Test\n+    public void equalBranchShuffled() {\n+        test(TOP, 0.5, true);\n+    }\n+\n+    @Test\n+    public void allBranchShuffled() {\n+        test(TOP, 1, true);\n+    }\n+\n+    @Test\n+    public void noneBranchShuffled() {\n+        test(TOP, 0, true);\n+    }\n+\n+    private void test(long top, double cutoffPercentage, boolean shuffle) {\n+        List<Long> numbers = LongStream.range(0, top)\n+            .boxed()\n+            .collect(Collectors.toList());\n+        if (shuffle) {\n+            Collections.shuffle(numbers);\n+        }\n+\n+        long cutoff = (long)(top * cutoffPercentage);\n+        long low = 0;\n+        long high = 0;\n+\n+        long start = System.currentTimeMillis();\n+        for (Long number : numbers) {\n+            if (number < cutoff) {\n+                ++low;\n+            } else {\n+                ++high;\n+            }\n+        }\n+        long end = System.currentTimeMillis();\n+\n+        LOG.info(\"Counted {}/{} {} numbers in {}ms\", low, high, shuffle ? \"shuffled\" : \"sorted\", end - start);\n+\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/SortingUnitTest.java b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/SortingUnitTest.java\n--- a/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/SortingUnitTest.java\n+++ b/core-java-modules/core-java-perf/src/test/java/com/baeldung/branchprediction/SortingUnitTest.java\n@@ -0,0 +1,60 @@\n+package com.baeldung.branchprediction;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SortingUnitTest {\n+    private static final Logger LOG = LoggerFactory.getLogger(SortingUnitTest.class);\n+    public static final int BIG = 10000000;\n+    public static final int SMALL = 100000;\n+\n+    @Test\n+    public void sortedBig() {\n+        test(BIG, false);\n+    }\n+\n+    @Test\n+    public void shuffledBig() {\n+        test(BIG, true);\n+    }\n+\n+    @Test\n+    public void sortedSmall() {\n+        test(SMALL, false);\n+    }\n+\n+    @Test\n+    public void shuffledSmall() {\n+        test(SMALL, true);\n+    }\n+\n+    private void test(long top, boolean shuffle) {\n+        List<Long> numbers = LongStream.range(0, top)\n+            .boxed()\n+            .collect(Collectors.toList());\n+\n+        if (shuffle) {\n+            Collections.shuffle(numbers);\n+        }\n+\n+        long cutoff = top / 2;\n+        long count = 0;\n+\n+        long start = System.currentTimeMillis();\n+        for (Long number : numbers) {\n+            if (number < cutoff) {\n+                ++count;\n+            }\n+        }\n+        long end = System.currentTimeMillis();\n+\n+        LOG.info(\"Counted {}/{} {} numbers in {}ms\",\n+            count, top, shuffle ? \"shuffled\" : \"sorted\", end - start);\n+    }\n+}",
    "output": "Examples for Branch Prediction article (#8426)"
  },
  {
    "input": "diff --git a/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java b/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n--- a/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n+++ b/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n@@ -1,28 +1,28 @@\n package com.baeldung.basic;\n \n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n-import org.springframework.stereotype.Component;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n \n-import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n+\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n \n     @Override\n-    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {\n         response.addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"\" + getRealmName() + \"\\\"\");\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         final PrintWriter writer = response.getWriter();\n         writer.println(\"HTTP Status \" + HttpServletResponse.SC_UNAUTHORIZED + \" - \" + authException.getMessage());\n     }\n \n     @Override\n-    public void afterPropertiesSet() throws Exception {\n+    public void afterPropertiesSet() {\n         setRealmName(\"Baeldung\");\n         super.afterPropertiesSet();\n     }\n\ndiff --git a/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java b/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n--- a/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n+++ b/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n@@ -14,15 +14,15 @@\n public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n \n     @Override\n-    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {\n         response.addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"\" + getRealmName() + \"\\\"\");\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         final PrintWriter writer = response.getWriter();\n         writer.println(\"HTTP Status \" + HttpServletResponse.SC_UNAUTHORIZED + \" - \" + authException.getMessage());\n     }\n \n     @Override\n-    public void afterPropertiesSet() throws Exception {\n+    public void afterPropertiesSet() {\n         setRealmName(\"Baeldung\");\n         super.afterPropertiesSet();\n     }",
    "output": "Merge pull request #8443 from rozagerardo/rozagerardo/BAEL-19382_update-parent-spring-5\n\n[BAEL-19382] Upgrade parent-spring-5 to the latest version of Spring 5"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n@@ -0,0 +1,118 @@\n+package com.baeldung.springbootannotations;\n+\n+import java.util.Arrays;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.jdbc.datasource.DriverManagerDataSource;\n+import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+@Configuration\n+@ConditionalOnClass(DataSource.class)\n+@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n+@PropertySource(\"classpath:mysql.properties\")\n+public class MySQLAutoconfiguration {\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @Bean\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"local\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(\"jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true&&serverTimezone=UTC\");\n+        dataSource.setUsername(\"mysqluser\");\n+        dataSource.setPassword(\"mysqlpass\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean(name = \"dataSource\")\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"custom\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource2() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(env.getProperty(\"mysql.url\"));\n+        dataSource.setUsername(env.getProperty(\"mysql.user\") != null ? env.getProperty(\"mysql.user\") : \"\");\n+        dataSource.setPassword(env.getProperty(\"mysql.pass\") != null ? env.getProperty(\"mysql.pass\") : \"\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean\n+    @ConditionalOnBean(name = \"dataSource\")\n+    @ConditionalOnMissingBean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n+        final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n+        em.setDataSource(dataSource());\n+        em.setPackagesToScan(\"com.baeldung.autoconfiguration.example\");\n+        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n+        if (additionalProperties() != null) {\n+            em.setJpaProperties(additionalProperties());\n+        }\n+        return em;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(type = \"JpaTransactionManager\")\n+    JpaTransactionManager transactionManager(final EntityManagerFactory entityManagerFactory) {\n+        final JpaTransactionManager transactionManager = new JpaTransactionManager();\n+        transactionManager.setEntityManagerFactory(entityManagerFactory);\n+        return transactionManager;\n+    }\n+\n+    @ConditionalOnResource(resources = \"classpath:mysql.properties\")\n+    @Conditional(HibernateCondition.class)\n+    final Properties additionalProperties() {\n+        final Properties hibernateProperties = new Properties();\n+\n+        hibernateProperties.setProperty(\"hibernate.hbm2ddl.auto\", env.getProperty(\"mysql-hibernate.hbm2ddl.auto\"));\n+        hibernateProperties.setProperty(\"hibernate.dialect\", env.getProperty(\"mysql-hibernate.dialect\"));\n+        hibernateProperties.setProperty(\"hibernate.show_sql\", env.getProperty(\"mysql-hibernate.show_sql\") != null ? env.getProperty(\"mysql-hibernate.show_sql\") : \"false\");\n+\n+        return hibernateProperties;\n+    }\n+\n+    static class HibernateCondition extends SpringBootCondition {\n+\n+        private static final String[] CLASS_NAMES = { \"org.hibernate.ejb.HibernateEntityManager\", \"org.hibernate.jpa.HibernateEntityManager\" };\n+\n+        @Override\n+        public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+            ConditionMessage.Builder message = ConditionMessage.forCondition(\"Hibernate\");\n+\n+            return Arrays.stream(CLASS_NAMES).filter(className -> ClassUtils.isPresent(className, context.getClassLoader())).map(className -> ConditionOutcome.match(message.found(\"class\").items(Style.NORMAL, className))).findAny()\n+                    .orElseGet(() -> ConditionOutcome.noMatch(message.didNotFind(\"class\", \"classes\").items(Style.NORMAL, Arrays.asList(CLASS_NAMES))));\n+        }\n+\n+    }\n+}\n\ndiff --git a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n--- a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n+++ b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n@@ -0,0 +1,19 @@\n+package org.baeldung;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+import com.baeldung.springbootannotations.MySQLAutoconfiguration;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = MySQLAutoconfiguration.class)\n+@WebAppConfiguration\n+public class SpringContextLiveTest {\n+\n+    @Test\n+    public void whenSpringContextIsBootstrapped_thenNoExceptions() {\n+    }\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #8435 from amit2103/BAEL-17317-11\n\nBael 17317 11"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n@@ -1,9 +1,14 @@\n package com.baeldung.multipledb.dao.product;\n \n+import java.util.List;\n+\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n+\n+public interface ProductRepository extends PagingAndSortingRepository<Product, Integer> {\n \n-public interface ProductRepository extends PagingAndSortingRepository<ProductMultipleDB, Integer> {\n \n-}\n\\ No newline at end of file\n+    List<Product> findAllByPrice(double price, Pageable pageable);\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n@@ -6,7 +6,7 @@\n \n @Entity\n @Table(schema = \"products\")\n-public class ProductMultipleDB {\n+public class Product {\n \n     @Id\n     private int id;\n@@ -15,19 +15,19 @@ public class ProductMultipleDB {\n \n     private double price;\n \n-    public ProductMultipleDB() {\n+    public Product() {\n         super();\n     }\n \n-    private ProductMultipleDB(int id, String name, double price) {\n+    private Product(int id, String name, double price) {\n         super();\n         this.id = id;\n         this.name = name;\n         this.price = price;\n     }\n \n-    public static ProductMultipleDB from(int id, String name, double price) {\n-        return new ProductMultipleDB(id, name, price);\n+    public static Product from(int id, String name, double price) {\n+        return new Product(id, name, price);\n     }\n \n     public int getId() {\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n@@ -19,7 +19,7 @@\n import com.baeldung.multipledb.dao.product.ProductRepository;\n import com.baeldung.multipledb.dao.user.PossessionRepository;\n import com.baeldung.multipledb.dao.user.UserRepository;\n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n import com.baeldung.multipledb.model.user.PossessionMultipleDB;\n import com.baeldung.multipledb.model.user.UserMultipleDB;\n \n@@ -84,7 +84,7 @@ public void whenCreatingUsersWithSameEmail_thenRollback() {\n     @Test\n     @Transactional(\"productTransactionManager\")\n     public void whenCreatingProduct_thenCreated() {\n-        ProductMultipleDB product = new ProductMultipleDB();\n+        Product product = new Product();\n         product.setName(\"Book\");\n         product.setId(2);\n         product.setPrice(20);\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n@@ -0,0 +1,144 @@\n+package com.baeldung.multipledb;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.baeldung.multipledb.PersistenceProductConfiguration;\n+import com.baeldung.multipledb.dao.product.ProductRepository;\n+import com.baeldung.multipledb.model.product.Product;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes=MultipleDbApplication.class)\n+@EnableTransactionManagement\n+public class ProductRepositoryIntegrationTest {\n+\n+    @Autowired\n+    private ProductRepository productRepository;\n+\n+    @Before\n+    @Transactional(\"productTransactionManager\")\n+    public void setUp() {\n+        productRepository.save(Product.from(1001, \"Book\", 21));\n+        productRepository.save(Product.from(1002, \"Coffee\", 10));\n+        productRepository.save(Product.from(1003, \"Jeans\", 30));\n+        productRepository.save(Product.from(1004, \"Shirt\", 32));\n+        productRepository.save(Product.from(1005, \"Bacon\", 10));\n+    }\n+\n+    @Test\n+    public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n+        Pageable pageRequest = PageRequest.of(0, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1001, 1002)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n+        Pageable pageRequest = PageRequest.of(1, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1003, 1004)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n+        Pageable pageRequest = PageRequest.of(2, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(1));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1005)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenSortingByNameAscAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"name\"));\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(3));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1005, 1001, 1002)));\n+\n+    }\n+\n+    @Test\n+    public void whenSortingByPriceDescAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"price\")\n+            .descending());\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(3));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001)));\n+\n+    }\n+\n+    @Test\n+    public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 5, Sort.by(\"price\")\n+            .descending()\n+            .and(Sort.by(\"name\")));\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(5));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001, 1005, 1002)));\n+\n+    }\n+\n+    @Test\n+    public void whenRequestingFirstPageOfSizeTwoUsingCustomMethod_ThenReturnFirstPage() {\n+        Pageable pageRequest = PageRequest.of(0, 2);\n+\n+        List<Product> result = productRepository.findAllByPrice(10, pageRequest);\n+\n+        assertThat(result, hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1002, 1005)\n+                .contains(id)));\n+    }\n+}",
    "output": "Merge pull request #8437 from amit2103/BAEL-17317-41\n\nBael 17317 41"
  },
  {
    "input": "diff --git a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/SpringBootSwaggerApplication.java b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/SpringBootSwaggerApplication.java\n--- a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/SpringBootSwaggerApplication.java\n+++ b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/SpringBootSwaggerApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.swagger2boot;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SpringBootSwaggerApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(SpringBootSwaggerApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/config/Swagger2Config.java b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/config/Swagger2Config.java\n--- a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/config/Swagger2Config.java\n+++ b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/config/Swagger2Config.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.swagger2boot.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import springfox.documentation.builders.ApiInfoBuilder;\n+import springfox.documentation.builders.PathSelectors;\n+import springfox.documentation.builders.RequestHandlerSelectors;\n+import springfox.documentation.service.ApiInfo;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n+\n+@Configuration\n+@EnableSwagger2WebMvc\n+public class Swagger2Config {\n+    @Bean\n+    public Docket api() {\n+        return new Docket(DocumentationType.SWAGGER_2).select()\n+            .apis(RequestHandlerSelectors.basePackage(\"com.baeldung.swagger2boot.controller\"))\n+            .paths(PathSelectors.regex(\"/.*\"))\n+            .build()\n+            .apiInfo(apiEndPointsInfo());\n+    }\n+\n+    private ApiInfo apiEndPointsInfo() {\n+        return new ApiInfoBuilder().title(\"Swagger Array\")\n+            .description(\"This is a sample Swagger description for an Array server\")\n+            .license(\"Apache 2.0\")\n+            .licenseUrl(\"http://www.apache.org/licenses/LICENSE-2.0.html\")\n+            .version(\"1.0.0\")\n+            .build();\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/controller/FooController.java b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/controller/FooController.java\n--- a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/controller/FooController.java\n+++ b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/controller/FooController.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.swagger2boot.controller;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+import com.baeldung.swagger2boot.model.Foo;\n+\n+import io.swagger.annotations.ApiImplicitParam;\n+import io.swagger.annotations.ApiImplicitParams;\n+\n+@Controller\n+public class FooController {\n+\n+    public FooController() {\n+        super();\n+    }\n+\n+    // API - write\n+    @RequestMapping(method = RequestMethod.POST, value = \"/foos\")\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @ResponseBody\n+    @ApiImplicitParams({ @ApiImplicitParam(name = \"foo\", value = \"List of strings\", paramType = \"body\", dataType = \"Foo\") })\n+    public Foo create(@RequestBody final Foo foo) {\n+        foo.setId(Long.parseLong(randomNumeric(2)));\n+        return foo;\n+    }\n+\n+}\n\ndiff --git a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/model/Foo.java b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/model/Foo.java\n--- a/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/model/Foo.java\n+++ b/spring-boot-mvc-2/src/main/java/com/baeldung/swagger2boot/model/Foo.java\n@@ -0,0 +1,44 @@\n+package com.baeldung.swagger2boot.model;\n+\n+import java.util.List;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class Foo {\n+    private long id;\n+\n+    @ApiModelProperty(name = \"name\", dataType = \"List\", example = \"[\\\"str1\\\", \\\"str2\\\", \\\"str3\\\"]\")\n+    private List<String> name;\n+\n+    public Foo() {\n+        super();\n+    }\n+\n+    public Foo(final long id, final List<String> name) {\n+        super();\n+\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    //\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public List<String> getName() {\n+        return name;\n+    }\n+\n+    public void setName(final List<String> name) {\n+        this.name = name;\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Bael 3618 array strings body Swagger API mvc-2 (#8421)\n\n* Add springfox, devtools and apache commons dependencies\r\n\r\n* Add the Swagger yaml file to the main project\r\n\r\n* Add the general README and Swagger yaml description\r\n\r\n* Implement the functionalities and add the Swagger annotations\r\n\r\n* Adjust indentation and reformatting\r\n\r\n* Change formatting of pom from 6 to 4"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/workstealing/PrimeNumbers.java\n@@ -0,0 +1,84 @@\n+package com.baeldung.workstealing;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ForkJoinTask;\n+import java.util.concurrent.RecursiveAction;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class PrimeNumbers extends RecursiveAction {\n+\n+    private int lowerBound;\n+    private int upperBound;\n+    private int granularity;\n+    static final List<Integer> GRANULARITIES\n+      = Arrays.asList(1, 10, 100, 1000, 10000);\n+    private AtomicInteger noOfPrimeNumbers = new AtomicInteger();\n+\n+    PrimeNumbers(int lowerBound, int upperBound, int granularity) {\n+        this.lowerBound = lowerBound;\n+        this.upperBound = upperBound;\n+        this.granularity = granularity;\n+    }\n+\n+    PrimeNumbers(int upperBound) {\n+        this(1, upperBound, 100);\n+    }\n+\n+    private PrimeNumbers(int lowerBound, int upperBound) {\n+        this(lowerBound, upperBound, 100);\n+    }\n+\n+    private List<PrimeNumbers> subTasks() {\n+        List<PrimeNumbers> subTasks = new ArrayList<>();\n+\n+        for (int i = 1; i <= this.upperBound / granularity; i++) {\n+            int upper = i * granularity;\n+            int lower = (upper - granularity) + 1;\n+            subTasks.add(new PrimeNumbers(lower, upper));\n+        }\n+        return subTasks;\n+    }\n+\n+    @Override\n+    protected void compute() {\n+        if (((upperBound + 1) - lowerBound) > granularity) {\n+            ForkJoinTask.invokeAll(subTasks());\n+        } else {\n+            findPrimeNumbers();\n+        }\n+    }\n+\n+    void findPrimeNumbers() {\n+        for (int num = lowerBound; num <= upperBound; num++) {\n+            if (isPrime(num)) {\n+                noOfPrimeNumbers.getAndIncrement();\n+            }\n+        }\n+    }\n+\n+    private boolean isPrime(int number) {\n+        if (number == 2) {\n+            return true;\n+        }\n+\n+        if (number == 1 || number % 2 == 0) {\n+            return false;\n+        }\n+\n+        int noOfNaturalNumbers = 0;\n+\n+        for (int i = 1; i <= number; i++) {\n+            if (number % i == 0) {\n+                noOfNaturalNumbers++;\n+            }\n+        }\n+\n+        return noOfNaturalNumbers == 2;\n+    }\n+\n+    public int noOfPrimeNumbers() {\n+        return noOfPrimeNumbers.intValue();\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/workstealing/PrimeNumbersUnitTest.java\n@@ -0,0 +1,101 @@\n+package com.baeldung.workstealing;\n+\n+\n+import org.junit.Test;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+\n+import static org.junit.Assert.fail;\n+\n+public class PrimeNumbersUnitTest {\n+\n+    private static Logger logger = Logger.getAnonymousLogger();\n+\n+    @Test\n+    public void givenPrimesCalculated_whenUsingPoolsAndOneThread_thenOneThreadSlowest() {\n+        Options opt = new OptionsBuilder()\n+                .include(Benchmarker.class.getSimpleName())\n+                .forks(1)\n+                .build();\n+\n+        try {\n+            new Runner(opt).run();\n+        } catch (RunnerException e) {\n+            fail();\n+        }\n+    }\n+\n+    @Test\n+    public void givenNewWorkStealingPool_whenGettingPrimes_thenStealCountChanges() {\n+        StringBuilder info = new StringBuilder();\n+\n+        for (int granularity : PrimeNumbers.GRANULARITIES) {\n+            int parallelism = ForkJoinPool.getCommonPoolParallelism();\n+            ForkJoinPool pool =\n+                    (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n+\n+            stealCountInfo(info, granularity, pool);\n+        }\n+        logger.info(\"\\nExecutors.newWorkStealingPool ->\" + info.toString());\n+    }\n+\n+    @Test\n+    public void givenCommonPool_whenGettingPrimes_thenStealCountChangesSlowly() {\n+        StringBuilder info = new StringBuilder();\n+\n+        for (int granularity : PrimeNumbers.GRANULARITIES) {\n+            ForkJoinPool pool = ForkJoinPool.commonPool();\n+            stealCountInfo(info, granularity, pool);\n+        }\n+        logger.info(\"\\nForkJoinPool.commonPool ->\" + info.toString());\n+    }\n+\n+    private void stealCountInfo(StringBuilder info, int granularity, ForkJoinPool forkJoinPool) {\n+        PrimeNumbers primes = new PrimeNumbers(1, 10000, granularity);\n+        forkJoinPool.invoke(primes);\n+        forkJoinPool.shutdown();\n+\n+        long steals = forkJoinPool.getStealCount();\n+        String output = \"\\nGranularity: [\" + granularity + \"], Steals: [\" + steals + \"]\";\n+        info.append(output);\n+    }\n+\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Benchmark)\n+    @Fork(value = 2, warmups = 1, jvmArgs = {\"-Xms2G\", \"-Xmx2G\"})\n+    public static class Benchmarker {\n+\n+        @Benchmark\n+        public void singleThread() {\n+            PrimeNumbers primes = new PrimeNumbers(10000);\n+            primes.findPrimeNumbers(); // get prime numbers using a single thread\n+        }\n+\n+        @Benchmark\n+        public void commonPoolBenchmark() {\n+            PrimeNumbers primes = new PrimeNumbers(10000);\n+            ForkJoinPool pool = ForkJoinPool.commonPool();\n+            pool.invoke(primes);\n+            pool.shutdown();\n+        }\n+\n+        @Benchmark\n+        public void newWorkStealingPoolBenchmark() {\n+            PrimeNumbers primes = new PrimeNumbers(10000);\n+            int parallelism = ForkJoinPool.getCommonPoolParallelism();\n+            ForkJoinPool stealer = (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n+            stealer.invoke(primes);\n+            stealer.shutdown();\n+        }\n+    }\n+}",
    "output": "Work stealing framework"
  },
  {
    "input": "diff --git a/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java b/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n--- a/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n+++ b/httpclient-simple/src/main/java/com/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n@@ -1,28 +1,28 @@\n package com.baeldung.basic;\n \n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n-import org.springframework.stereotype.Component;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n \n-import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n+\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n \n     @Override\n-    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {\n         response.addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"\" + getRealmName() + \"\\\"\");\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         final PrintWriter writer = response.getWriter();\n         writer.println(\"HTTP Status \" + HttpServletResponse.SC_UNAUTHORIZED + \" - \" + authException.getMessage());\n     }\n \n     @Override\n-    public void afterPropertiesSet() throws Exception {\n+    public void afterPropertiesSet() {\n         setRealmName(\"Baeldung\");\n         super.afterPropertiesSet();\n     }\n\ndiff --git a/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java b/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n--- a/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n+++ b/spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java\n@@ -14,15 +14,15 @@\n public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n \n     @Override\n-    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {\n         response.addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"\" + getRealmName() + \"\\\"\");\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         final PrintWriter writer = response.getWriter();\n         writer.println(\"HTTP Status \" + HttpServletResponse.SC_UNAUTHORIZED + \" - \" + authException.getMessage());\n     }\n \n     @Override\n-    public void afterPropertiesSet() throws Exception {\n+    public void afterPropertiesSet() {\n         setRealmName(\"Baeldung\");\n         super.afterPropertiesSet();\n     }",
    "output": "fixed errors due to spring-5 version upgrade"
  },
  {
    "input": "diff --git a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/AmqpReactiveController.java b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/AmqpReactiveController.java\n--- a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/AmqpReactiveController.java\n+++ b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/AmqpReactiveController.java\n@@ -1,11 +1,9 @@\n-package org.baeldung.spring.amqp;\n+package com.baeldung.spring.amqp;\n \n import java.time.Duration;\n-import java.util.Date;\n \n import javax.annotation.PostConstruct;\n \n-import org.baeldung.spring.amqp.DestinationsConfig.DestinationInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.amqp.core.AmqpAdmin;\n@@ -29,7 +27,6 @@\n \n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n-import reactor.core.scheduler.Schedulers;\n \n @RestController\n public class AmqpReactiveController {\n@@ -105,7 +102,7 @@ public void setupTopicDestinations() {\n     public Mono<ResponseEntity<?>> sendMessageToQueue(@PathVariable String name, @RequestBody String payload) {\n \n         // Lookup exchange details\n-        final DestinationInfo d = destinationsConfig.getQueues()\n+        final DestinationsConfig.DestinationInfo d = destinationsConfig.getQueues()\n             .get(name);\n \n         if (d == null) {\n@@ -135,7 +132,7 @@ public Mono<ResponseEntity<?>> sendMessageToQueue(@PathVariable String name, @Re\n     @GetMapping(value = \"/queue/{name}\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n     public Flux<?> receiveMessagesFromQueue(@PathVariable String name) {\n \n-        DestinationInfo d = destinationsConfig.getQueues()\n+        DestinationsConfig.DestinationInfo d = destinationsConfig.getQueues()\n             .get(name);\n \n         if (d == null) {\n@@ -201,7 +198,7 @@ public Flux<?> receiveMessagesFromQueue(@PathVariable String name) {\n     public Mono<ResponseEntity<?>> sendMessageToTopic(@PathVariable String name, @RequestBody String payload) {\n \n         // Lookup exchange details\n-        final DestinationInfo d = destinationsConfig.getTopics()\n+        final DestinationsConfig.DestinationInfo d = destinationsConfig.getTopics()\n             .get(name);\n         if (d == null) {\n             // Destination not found.\n@@ -223,7 +220,7 @@ public Mono<ResponseEntity<?>> sendMessageToTopic(@PathVariable String name, @Re\n     @GetMapping(value = \"/topic/{name}\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n     public Flux<?> receiveMessagesFromTopic(@PathVariable String name) {\n \n-        DestinationInfo d = destinationsConfig.getTopics()\n+        DestinationsConfig.DestinationInfo d = destinationsConfig.getTopics()\n             .get(name);\n \n         if (d == null) {\n@@ -281,7 +278,7 @@ public Flux<?> receiveMessagesFromTopic(@PathVariable String name) {\n \n     }\n \n-    private Queue createTopicQueue(DestinationInfo destination) {\n+    private Queue createTopicQueue(DestinationsConfig.DestinationInfo destination) {\n \n         Exchange ex = ExchangeBuilder.topicExchange(destination.getExchange())\n           .durable(true)\n\ndiff --git a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/DestinationsConfig.java b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/DestinationsConfig.java\n--- a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/DestinationsConfig.java\n+++ b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/DestinationsConfig.java\n@@ -1,59 +1,59 @@\n-package org.baeldung.spring.amqp;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import org.springframework.boot.context.properties.ConfigurationProperties;\r\n-\r\n-@ConfigurationProperties(\"destinations\")\r\n-public class DestinationsConfig {\r\n-    \r\n-    \r\n-    private Map<String,DestinationInfo> queues = new HashMap<>();\r\n-    \r\n-    private Map<String,DestinationInfo> topics = new HashMap<>();\r\n-    \r\n-    \r\n-\r\n-    public Map<String, DestinationInfo> getQueues() {\r\n-        return queues;\r\n-    }\r\n-\r\n-    public void setQueues(Map<String, DestinationInfo> queues) {\r\n-        this.queues = queues;\r\n-    }\r\n-\r\n-    public Map<String, DestinationInfo> getTopics() {\r\n-        return topics;\r\n-    }\r\n-\r\n-    public void setTopics(Map<String, DestinationInfo> topics) {\r\n-        this.topics = topics;\r\n-    }\r\n-\r\n-    // DestinationInfo stores the Exchange name and routing key used\r\n-    // by our producers when posting messages\r\n-    static class DestinationInfo {\r\n-        \r\n-        private String exchange;\r\n-        private String routingKey;\r\n-        \r\n-        \r\n-        public String getExchange() {\r\n-            return exchange;\r\n-        }\r\n-        public void setExchange(String exchange) {\r\n-            this.exchange = exchange;\r\n-        }\r\n-        public String getRoutingKey() {\r\n-            return routingKey;\r\n-        }\r\n-        public void setRoutingKey(String routingKey) {\r\n-            this.routingKey = routingKey;\r\n-        }\r\n-        \r\n-        \r\n-        \r\n-    }\r\n-    \r\n-}\r\n+package com.baeldung.spring.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"destinations\")\n+public class DestinationsConfig {\n+    \n+    \n+    private Map<String,DestinationInfo> queues = new HashMap<>();\n+    \n+    private Map<String,DestinationInfo> topics = new HashMap<>();\n+    \n+    \n+\n+    public Map<String, DestinationInfo> getQueues() {\n+        return queues;\n+    }\n+\n+    public void setQueues(Map<String, DestinationInfo> queues) {\n+        this.queues = queues;\n+    }\n+\n+    public Map<String, DestinationInfo> getTopics() {\n+        return topics;\n+    }\n+\n+    public void setTopics(Map<String, DestinationInfo> topics) {\n+        this.topics = topics;\n+    }\n+\n+    // DestinationInfo stores the Exchange name and routing key used\n+    // by our producers when posting messages\n+    static class DestinationInfo {\n+        \n+        private String exchange;\n+        private String routingKey;\n+        \n+        \n+        public String getExchange() {\n+            return exchange;\n+        }\n+        public void setExchange(String exchange) {\n+            this.exchange = exchange;\n+        }\n+        public String getRoutingKey() {\n+            return routingKey;\n+        }\n+        public void setRoutingKey(String routingKey) {\n+            this.routingKey = routingKey;\n+        }\n+        \n+        \n+        \n+    }\n+    \n+}\n\ndiff --git a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/MessageListenerContainerFactory.java b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/MessageListenerContainerFactory.java\n--- a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/MessageListenerContainerFactory.java\n+++ b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/MessageListenerContainerFactory.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.spring.amqp;\n+package com.baeldung.spring.amqp;\n \n import org.springframework.amqp.core.AcknowledgeMode;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n\ndiff --git a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/SpringWebfluxAmqpApplication.java b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/SpringWebfluxAmqpApplication.java\n--- a/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/SpringWebfluxAmqpApplication.java\n+++ b/spring-webflux-amqp/src/main/java/com/baeldung/spring/amqp/SpringWebfluxAmqpApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.spring.amqp;\n+package com.baeldung.spring.amqp;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-webflux-amqp/src/test/java/com/baeldung/SpringContextLiveTest.java b/spring-webflux-amqp/src/test/java/com/baeldung/SpringContextLiveTest.java\n--- a/spring-webflux-amqp/src/test/java/com/baeldung/SpringContextLiveTest.java\n+++ b/spring-webflux-amqp/src/test/java/com/baeldung/SpringContextLiveTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.spring.amqp.SpringWebfluxAmqpApplication;\n+import com.baeldung.spring.amqp.SpringWebfluxAmqpApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-webflux-amqp/src/test/java/com/baeldung/spring/amqp/SpringWebfluxAmqpLiveTest.java b/spring-webflux-amqp/src/test/java/com/baeldung/spring/amqp/SpringWebfluxAmqpLiveTest.java\n--- a/spring-webflux-amqp/src/test/java/com/baeldung/spring/amqp/SpringWebfluxAmqpLiveTest.java\n+++ b/spring-webflux-amqp/src/test/java/com/baeldung/spring/amqp/SpringWebfluxAmqpLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.spring.amqp;\n+package com.baeldung.spring.amqp;\n \n import org.junit.Test;\n import org.springframework.test.web.reactive.server.WebTestClient;",
    "output": "BAEL-20552: Migrate spring-webflux-amqp module to the com.baeldung package"
  },
  {
    "input": "diff --git a/spring-vault/src/main/java/com/baeldung/springvault/Credentials.java b/spring-vault/src/main/java/com/baeldung/springvault/Credentials.java\n--- a/spring-vault/src/main/java/com/baeldung/springvault/Credentials.java\n+++ b/spring-vault/src/main/java/com/baeldung/springvault/Credentials.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n public class Credentials {\n \n\ndiff --git a/spring-vault/src/main/java/com/baeldung/springvault/CredentialsService.java b/spring-vault/src/main/java/com/baeldung/springvault/CredentialsService.java\n--- a/spring-vault/src/main/java/com/baeldung/springvault/CredentialsService.java\n+++ b/spring-vault/src/main/java/com/baeldung/springvault/CredentialsService.java\n@@ -1,16 +1,10 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n-import java.net.URI;\n import java.net.URISyntaxException;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n-import org.springframework.vault.authentication.TokenAuthentication;\n-import org.springframework.vault.client.VaultEndpoint;\n import org.springframework.vault.core.VaultTemplate;\n-import org.springframework.vault.core.env.VaultPropertySource;\n-import org.springframework.vault.support.VaultResponse;\n import org.springframework.vault.support.VaultResponseSupport;\n \n /**\n\ndiff --git a/spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java b/spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java\n--- a/spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java\n+++ b/spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-vault/src/main/java/com/baeldung/springvault/VaultConfig.java b/spring-vault/src/main/java/com/baeldung/springvault/VaultConfig.java\n--- a/spring-vault/src/main/java/com/baeldung/springvault/VaultConfig.java\n+++ b/spring-vault/src/main/java/com/baeldung/springvault/VaultConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import org.springframework.context.annotation.Configuration;\n import org.springframework.vault.authentication.ClientAuthentication;\n\ndiff --git a/spring-vault/src/main/java/com/baeldung/springvault/VaultEnvironmentConfig.java b/spring-vault/src/main/java/com/baeldung/springvault/VaultEnvironmentConfig.java\n--- a/spring-vault/src/main/java/com/baeldung/springvault/VaultEnvironmentConfig.java\n+++ b/spring-vault/src/main/java/com/baeldung/springvault/VaultEnvironmentConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n\ndiff --git a/spring-vault/src/test/java/com/baeldung/springvault/SpringContextLiveTest.java b/spring-vault/src/test/java/com/baeldung/springvault/SpringContextLiveTest.java\n--- a/spring-vault/src/test/java/com/baeldung/springvault/SpringContextLiveTest.java\n+++ b/spring-vault/src/test/java/com/baeldung/springvault/SpringContextLiveTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung.springvault;\n \n-import org.baeldung.springvault.SpringVaultApplication;\n+import com.baeldung.springvault.SpringVaultApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-vault/src/test/java/com/baeldung/springvault/VaultInitializer.java b/spring-vault/src/test/java/com/baeldung/springvault/VaultInitializer.java\n--- a/spring-vault/src/test/java/com/baeldung/springvault/VaultInitializer.java\n+++ b/spring-vault/src/test/java/com/baeldung/springvault/VaultInitializer.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import java.io.BufferedReader;\n import java.io.Closeable;\n\ndiff --git a/spring-vault/src/test/java/com/baeldung/springvault/VaultIntegrationTest.java b/spring-vault/src/test/java/com/baeldung/springvault/VaultIntegrationTest.java\n--- a/spring-vault/src/test/java/com/baeldung/springvault/VaultIntegrationTest.java\n+++ b/spring-vault/src/test/java/com/baeldung/springvault/VaultIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import org.junit.FixMethodOrder;\n import org.junit.Ignore;\n\ndiff --git a/spring-vault/src/test/java/com/baeldung/springvault/VaultTestConfiguration.java b/spring-vault/src/test/java/com/baeldung/springvault/VaultTestConfiguration.java\n--- a/spring-vault/src/test/java/com/baeldung/springvault/VaultTestConfiguration.java\n+++ b/spring-vault/src/test/java/com/baeldung/springvault/VaultTestConfiguration.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.springvault;\n+package com.baeldung.springvault;\n \n import java.net.URI;\n import java.net.URISyntaxException;",
    "output": "BAEL-20552: Migrate spring-vault module to the com.baeldung package"
  },
  {
    "input": "diff --git a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n--- a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n+++ b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n@@ -26,39 +26,40 @@ public void setUp() {\n         driver = new FirefoxDriver(capabilities);\n         navUrl = \"https://baeldung.com\";\n         driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n+        System.setProperty(\"webdriver.gecko.driver\", \"geckodriver.exe\");\n     }\n \n     @After\n     public void teardown() {\n-        driver.close();\n+        driver.quit();\n     }\n \n     @Test\n-    public void givenHomePage_whenNavigate_thenCookiesExist() {\n+    public void whenNavigate_thenCookiesExist() {\n         driver.navigate().to(navUrl);\n         Set<Cookie> cookies = driver.manage().getCookies();\n \n         assertThat(cookies, is(not(empty())));\n     }\n \n     @Test\n-    public void givenHomePage_whenNavigate_thenLpCookieExists() {\n+    public void whenNavigate_thenLpCookieExists() {\n         driver.navigate().to(navUrl);\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n \n         assertThat(lpCookie, is(not(nullValue())));\n     }\n \n     @Test\n-    public void givenHomePage_whenNavigate_thenLpCookieIsHasCorrectValue() {\n+    public void whenNavigate_thenLpCookieIsHasCorrectValue() {\n         driver.navigate().to(navUrl);\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n \n         assertThat(lpCookie.getValue(), containsString(\"www.baeldung.com\"));\n     }\n \n     @Test\n-    public void givenHomePage_whenNavigate_thenLpCookieHasCorrectProps() {\n+    public void whenNavigate_thenLpCookieHasCorrectProps() {\n         driver.navigate().to(navUrl);\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n \n@@ -70,7 +71,7 @@ public void givenHomePage_whenNavigate_thenLpCookieHasCorrectProps() {\n     }\n \n     @Test\n-    public void givenHomePage_whenAddingCookie_thenItIsPresent() {\n+    public void whenAddingCookie_thenItIsPresent() {\n         driver.navigate().to(navUrl);\n         Cookie cookie = new Cookie(\"foo\", \"bar\");\n         driver.manage().addCookie(cookie);\n@@ -80,7 +81,7 @@ public void givenHomePage_whenAddingCookie_thenItIsPresent() {\n     }\n \n     @Test\n-    public void givenHomePage_whenDeletingCookie_thenItIsAbsent() {\n+    public void whenDeletingCookie_thenItIsAbsent() {\n         driver.navigate().to(navUrl);\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n \n@@ -93,7 +94,7 @@ public void givenHomePage_whenDeletingCookie_thenItIsAbsent() {\n     }\n \n     @Test\n-    public void givenHomePage_whenOverridingCookie_thenItIsUpdated() {\n+    public void whenOverridingCookie_thenItIsUpdated() {\n         driver.navigate().to(navUrl);\n         Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n         driver.manage().deleteCookie(lpCookie);",
    "output": "updated test names"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n@@ -1,5 +1,8 @@\n package com.baeldung.multipledb.dao.product;\n \n+import java.util.List;\n+\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n import com.baeldung.multipledb.model.product.Product;",
    "output": "resolve merge conflict"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n@@ -2,8 +2,10 @@\n \n import org.springframework.data.repository.PagingAndSortingRepository;\n \n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n \n-public interface ProductRepository extends PagingAndSortingRepository<ProductMultipleDB, Integer> {\n+public interface ProductRepository extends PagingAndSortingRepository<Product, Integer> {\n \n-}\n\\ No newline at end of file\n+\n+    List<Product> findAllByPrice(double price, Pageable pageable);\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n@@ -6,7 +6,7 @@\n \n @Entity\n @Table(schema = \"products\")\n-public class ProductMultipleDB {\n+public class Product {\n \n     @Id\n     private int id;\n@@ -15,19 +15,19 @@ public class ProductMultipleDB {\n \n     private double price;\n \n-    public ProductMultipleDB() {\n+    public Product() {\n         super();\n     }\n \n-    private ProductMultipleDB(int id, String name, double price) {\n+    private Product(int id, String name, double price) {\n         super();\n         this.id = id;\n         this.name = name;\n         this.price = price;\n     }\n \n-    public static ProductMultipleDB from(int id, String name, double price) {\n-        return new ProductMultipleDB(id, name, price);\n+    public static Product from(int id, String name, double price) {\n+        return new Product(id, name, price);\n     }\n \n     public int getId() {\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n@@ -19,7 +19,7 @@\n import com.baeldung.multipledb.dao.product.ProductRepository;\n import com.baeldung.multipledb.dao.user.PossessionRepository;\n import com.baeldung.multipledb.dao.user.UserRepository;\n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n import com.baeldung.multipledb.model.user.PossessionMultipleDB;\n import com.baeldung.multipledb.model.user.UserMultipleDB;\n \n@@ -84,7 +84,7 @@ public void whenCreatingUsersWithSameEmail_thenRollback() {\n     @Test\n     @Transactional(\"productTransactionManager\")\n     public void whenCreatingProduct_thenCreated() {\n-        ProductMultipleDB product = new ProductMultipleDB();\n+        Product product = new Product();\n         product.setName(\"Book\");\n         product.setId(2);\n         product.setPrice(20);\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n@@ -0,0 +1,144 @@\n+package com.baeldung.multipledb;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.baeldung.multipledb.PersistenceProductConfiguration;\n+import com.baeldung.multipledb.dao.product.ProductRepository;\n+import com.baeldung.multipledb.model.product.Product;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes=MultipleDbApplication.class)\n+@EnableTransactionManagement\n+public class ProductRepositoryIntegrationTest {\n+\n+    @Autowired\n+    private ProductRepository productRepository;\n+\n+    @Before\n+    @Transactional(\"productTransactionManager\")\n+    public void setUp() {\n+        productRepository.save(Product.from(1001, \"Book\", 21));\n+        productRepository.save(Product.from(1002, \"Coffee\", 10));\n+        productRepository.save(Product.from(1003, \"Jeans\", 30));\n+        productRepository.save(Product.from(1004, \"Shirt\", 32));\n+        productRepository.save(Product.from(1005, \"Bacon\", 10));\n+    }\n+\n+    @Test\n+    public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n+        Pageable pageRequest = PageRequest.of(0, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1001, 1002)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n+        Pageable pageRequest = PageRequest.of(1, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1003, 1004)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n+        Pageable pageRequest = PageRequest.of(2, 2);\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(1));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1005)\n+                .contains(id)));\n+    }\n+\n+    @Test\n+    public void whenSortingByNameAscAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"name\"));\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(3));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1005, 1001, 1002)));\n+\n+    }\n+\n+    @Test\n+    public void whenSortingByPriceDescAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"price\")\n+            .descending());\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(3));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001)));\n+\n+    }\n+\n+    @Test\n+    public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResult() {\n+        Pageable pageRequest = PageRequest.of(0, 5, Sort.by(\"price\")\n+            .descending()\n+            .and(Sort.by(\"name\")));\n+\n+        Page<Product> result = productRepository.findAll(pageRequest);\n+\n+        assertThat(result.getContent(), hasSize(5));\n+        assertThat(result.getContent()\n+            .stream()\n+            .map(Product::getId)\n+            .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001, 1005, 1002)));\n+\n+    }\n+\n+    @Test\n+    public void whenRequestingFirstPageOfSizeTwoUsingCustomMethod_ThenReturnFirstPage() {\n+        Pageable pageRequest = PageRequest.of(0, 2);\n+\n+        List<Product> result = productRepository.findAllByPrice(10, pageRequest);\n+\n+        assertThat(result, hasSize(2));\n+        assertTrue(result.stream()\n+            .map(Product::getId)\n+            .allMatch(id -> Arrays.asList(1002, 1005)\n+                .contains(id)));\n+    }\n+}",
    "output": "resolve merge conflict"
  },
  {
    "input": "diff --git a/spring-boot-rest/src/main/java/com/baeldung/spring/PersistenceConfig.java b/spring-boot-rest/src/main/java/com/baeldung/spring/PersistenceConfig.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/spring/PersistenceConfig.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/spring/PersistenceConfig.java\n@@ -24,8 +24,8 @@\n @Configuration\n @EnableTransactionManagement\n @PropertySource({ \"classpath:persistence-${envTarget:h2}.properties\" })\n-@ComponentScan(basePackages = { \"com.baeldung.persistence\", \"com.baeldung.modelmapper\" })\n-@EnableJpaRepositories(basePackages = {\"com.baeldung.persistence.dao\", \"com.baeldung.modelmapper.repository\"})\n+@ComponentScan(basePackages = { \"com.baeldung.persistence\", \"com.baeldung.springpagination\" })\n+@EnableJpaRepositories(basePackages = {\"com.baeldung.persistence.dao\", \"com.baeldung.springpagination.repository\"})\n public class PersistenceConfig {\n \n     @Autowired\n@@ -39,7 +39,7 @@ public PersistenceConfig() {\n     public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n         final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource());\n-        em.setPackagesToScan(new String[] { \"com.baeldung.persistence.model\", \"com.baeldung.modelmapper.model\" });\n+        em.setPackagesToScan(new String[] { \"com.baeldung.persistence.model\", \"com.baeldung.springpagination.model\" });\n \n         final HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n         // vendorAdapter.set",
    "output": "rename package name"
  },
  {
    "input": "diff --git a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.modelmapper.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Subject {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(nullable = false)\n+    private String name;\n+\n+    public Subject() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.modelmapper.repository;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.data.rest.core.annotation.RestResource;\n+\n+import com.baeldung.modelmapper.model.Subject;\n+\n+public interface SubjectRepository extends PagingAndSortingRepository<Subject, Long> {\n+\n+    @RestResource(path = \"nameContains\")\n+    public Page<Subject> findByNameContaining(@Param(\"name\") String name, Pageable p);\n+\n+}\n\\ No newline at end of file",
    "output": "resolve merge conflict"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n@@ -0,0 +1,118 @@\n+package com.baeldung.springbootannotations;\n+\n+import java.util.Arrays;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.jdbc.datasource.DriverManagerDataSource;\n+import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+@Configuration\n+@ConditionalOnClass(DataSource.class)\n+@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n+@PropertySource(\"classpath:mysql.properties\")\n+public class MySQLAutoconfiguration {\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @Bean\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"local\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(\"jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true&&serverTimezone=UTC\");\n+        dataSource.setUsername(\"mysqluser\");\n+        dataSource.setPassword(\"mysqlpass\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean(name = \"dataSource\")\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"custom\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource2() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(env.getProperty(\"mysql.url\"));\n+        dataSource.setUsername(env.getProperty(\"mysql.user\") != null ? env.getProperty(\"mysql.user\") : \"\");\n+        dataSource.setPassword(env.getProperty(\"mysql.pass\") != null ? env.getProperty(\"mysql.pass\") : \"\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean\n+    @ConditionalOnBean(name = \"dataSource\")\n+    @ConditionalOnMissingBean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n+        final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n+        em.setDataSource(dataSource());\n+        em.setPackagesToScan(\"com.baeldung.autoconfiguration.example\");\n+        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n+        if (additionalProperties() != null) {\n+            em.setJpaProperties(additionalProperties());\n+        }\n+        return em;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(type = \"JpaTransactionManager\")\n+    JpaTransactionManager transactionManager(final EntityManagerFactory entityManagerFactory) {\n+        final JpaTransactionManager transactionManager = new JpaTransactionManager();\n+        transactionManager.setEntityManagerFactory(entityManagerFactory);\n+        return transactionManager;\n+    }\n+\n+    @ConditionalOnResource(resources = \"classpath:mysql.properties\")\n+    @Conditional(HibernateCondition.class)\n+    final Properties additionalProperties() {\n+        final Properties hibernateProperties = new Properties();\n+\n+        hibernateProperties.setProperty(\"hibernate.hbm2ddl.auto\", env.getProperty(\"mysql-hibernate.hbm2ddl.auto\"));\n+        hibernateProperties.setProperty(\"hibernate.dialect\", env.getProperty(\"mysql-hibernate.dialect\"));\n+        hibernateProperties.setProperty(\"hibernate.show_sql\", env.getProperty(\"mysql-hibernate.show_sql\") != null ? env.getProperty(\"mysql-hibernate.show_sql\") : \"false\");\n+\n+        return hibernateProperties;\n+    }\n+\n+    static class HibernateCondition extends SpringBootCondition {\n+\n+        private static final String[] CLASS_NAMES = { \"org.hibernate.ejb.HibernateEntityManager\", \"org.hibernate.jpa.HibernateEntityManager\" };\n+\n+        @Override\n+        public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+            ConditionMessage.Builder message = ConditionMessage.forCondition(\"Hibernate\");\n+\n+            return Arrays.stream(CLASS_NAMES).filter(className -> ClassUtils.isPresent(className, context.getClassLoader())).map(className -> ConditionOutcome.match(message.found(\"class\").items(Style.NORMAL, className))).findAny()\n+                    .orElseGet(() -> ConditionOutcome.noMatch(message.didNotFind(\"class\", \"classes\").items(Style.NORMAL, Arrays.asList(CLASS_NAMES))));\n+        }\n+\n+    }\n+}\n\ndiff --git a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n--- a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n+++ b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n@@ -0,0 +1,19 @@\n+package org.baeldung;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+import com.baeldung.springbootannotations.MySQLAutoconfiguration;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = MySQLAutoconfiguration.class)\n+@WebAppConfiguration\n+public class SpringContextLiveTest {\n+\n+    @Test\n+    public void whenSpringContextIsBootstrapped_thenNoExceptions() {\n+    }\n+}\n\\ No newline at end of file",
    "output": "resolve merge conflict"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/springbootannotations/MySQLAutoconfiguration.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.autoconfiguration;\n+package com.baeldung.springbootannotations;\n \n import java.util.Arrays;\n import java.util.Properties;\n\ndiff --git a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n--- a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n+++ b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n@@ -6,7 +6,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.web.WebAppConfiguration;\n \n-import com.baeldung.autoconfiguration.MySQLAutoconfiguration;\n+import com.baeldung.springbootannotations.MySQLAutoconfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(classes = MySQLAutoconfiguration.class)",
    "output": "renamed the package name"
  },
  {
    "input": "diff --git a/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java b/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n--- a/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n+++ b/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n@@ -1,7 +1,5 @@\n-package com.baeldung.kotlin;\n+package com.baeldung.lazy;\n \n-\n-import com.baeldung.lazy.ClassWithHeavyInitialization;\n import org.junit.Test;\n \n import static junit.framework.TestCase.assertTrue;",
    "output": "Merge pull request #8387 from catalin-burcea/BAEL-19883\n\n[BAEL-19883] - Move articles out of core-kotlin part2"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n@@ -1,21 +1,12 @@\n package com.baeldung.datetime.sql;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.sql.TimestampUtils;\n-\n import java.text.ParseException;\n-import java.util.Date;\n \n-public class TimestampUtilsUnitTest {\n+import static org.junit.Assert.assertEquals;\n \n-    @Test\n-    public void givenCurrentTimestamp_thenNowIsReturned() {\n-        assertEquals(TimestampUtils.getNow()\n-            .getTime(), new Date().getTime());\n-    }\n+public class TimestampUtilsUnitTest {\n \n     @Test(expected = IllegalArgumentException.class)\n     public void givenTimestampAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {",
    "output": "BAEL-3674: Remove the broken test"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaHelper.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.poi.excel;\n+package com.baeldung.poi.excel.read.cellvalueandnotformula;\n \n import java.io.File;\n import java.io.FileInputStream;\n@@ -13,20 +13,19 @@\n import org.apache.poi.ss.util.CellAddress;\n import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n \n-public class ReadCellValueNotFormulaHelper {\n+public class CellValueAndNotFormulaHelper {\n \n     public Object getCellValueByFetchingLastCachedValue(String fileLocation, String cellLocation) throws IOException {\n         Object cellValue = new Object();\n-        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n \n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n         Workbook workbook = new XSSFWorkbook(inputStream);\n \n         Sheet sheet = workbook.getSheetAt(0);\n \n-        CellAddress cellReference = new CellAddress(cellLocation);\n-\n-        Row row = sheet.getRow(cellReference.getRow());\n-        Cell cell = row.getCell(cellReference.getColumn());\n+        CellAddress cellAddress = new CellAddress(cellLocation);\n+        Row row = sheet.getRow(cellAddress.getRow());\n+        Cell cell = row.getCell(cellAddress.getColumn());\n \n         if (cell.getCellType() == CellType.FORMULA) {\n             switch (cell.getCachedFormulaResultType()) {\n@@ -37,8 +36,7 @@ public Object getCellValueByFetchingLastCachedValue(String fileLocation, String\n                 cellValue = cell.getNumericCellValue();\n                 break;\n             case STRING:\n-                cellValue = cell.getRichStringCellValue()\n-                    .getString();\n+                cellValue = cell.getStringCellValue();\n                 break;\n             default:\n                 cellValue = null;\n@@ -51,16 +49,15 @@ public Object getCellValueByFetchingLastCachedValue(String fileLocation, String\n \n     public Object getCellValueByEvaluatingFormula(String fileLocation, String cellLocation) throws IOException {\n         Object cellValue;\n-        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n \n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n         Workbook workbook = new XSSFWorkbook(inputStream);\n \n         Sheet sheet = workbook.getSheetAt(0);\n         FormulaEvaluator evaluator = workbook.getCreationHelper()\n             .createFormulaEvaluator();\n \n         CellAddress cellAddress = new CellAddress(cellLocation);\n-\n         Row row = sheet.getRow(cellAddress.getRow());\n         Cell cell = row.getCell(cellAddress.getColumn());\n \n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n@@ -1,39 +0,0 @@\n-package com.baeldung.poi.excel;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-import java.io.IOException;\n-import java.net.URISyntaxException;\n-import java.nio.file.Paths;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class ReadCellValueNotFormulaUnitTest {\n-\n-    private ReadCellValueNotFormulaHelper readCellValueNotFormulaHelper;\n-    private String fileLocation;\n-    private static final String FILE_NAME = \"test.xlsx\";\n-\n-    @Before\n-    public void setup() throws URISyntaxException { \n-        fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n-        readCellValueNotFormulaHelper = new ReadCellValueNotFormulaHelper();\n-    }\n-\n-    @Test\n-    public void testCachedValueMethod() throws IOException {\n-        final double expectedResult = 7.0;\n-        final Object cellValue = readCellValueNotFormulaHelper.getCellValueByFetchingLastCachedValue(fileLocation, \"C2\");\n-\n-        assertEquals(expectedResult, cellValue);\n-    }\n-\n-    @Test\n-    public void testFormulaEvaluationMethod() throws IOException {\n-        final double expectedResult = 7.0;\n-        final Object cellValue = readCellValueNotFormulaHelper.getCellValueByEvaluatingFormula(fileLocation, \"C2\");\n-\n-        assertEquals(expectedResult, cellValue);\n-    }\n-}\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/read/cellvalueandnotformula/CellValueAndNotFormulaUnitTest.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.poi.excel.read.cellvalueandnotformula;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CellValueAndNotFormulaUnitTest {\n+\n+    private CellValueAndNotFormulaHelper readCellValueAndNotFormulaHelper;\n+    private String fileLocation;\n+    private static final String FILE_NAME = \"test.xlsx\";\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+        readCellValueAndNotFormulaHelper = new CellValueAndNotFormulaHelper();\n+    }\n+\n+    @Test\n+    public void givenExcelCell_whenReadCellValueByLastCachedValue_thenProduceCorrectResult() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueAndNotFormulaHelper.getCellValueByFetchingLastCachedValue(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+\n+    @Test\n+    public void givenExcelCell_whenReadCellValueByEvaluatingFormula_thenProduceCorrectResult() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueAndNotFormulaHelper.getCellValueByEvaluatingFormula(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+}",
    "output": "BAEL-3658: Read cell value rather than the formula that is evaluating it"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CycleDetector {\n+\n+    List<DisjointSetInfo> nodes;\n+\n+    public CycleDetector(int totalNodes) {\n+        initDisjointSets(totalNodes);\n+    }\n+\n+    public boolean detectCycle(Integer u, Integer v) {\n+        Integer rootU = pathCompressionFind(u);\n+        Integer rootV = pathCompressionFind(v);\n+        if (rootU.equals(rootV)) {\n+            return true;\n+        }\n+        unionByRank(rootU, rootV);\n+        return false;\n+    }\n+\n+    private void initDisjointSets(int totalNodes) {\n+        nodes = new ArrayList<>(totalNodes);\n+        for (int i = 0; i < totalNodes; i++) {\n+            nodes.add(new DisjointSetInfo(i));\n+        }\n+    }\n+\n+    private Integer find(Integer node) {\n+        Integer parent = nodes.get(node).getParentNode();\n+        if (parent.equals(node)) {\n+            return node;\n+        } else {\n+            return find(parent);\n+        }\n+    }\n+\n+    private Integer pathCompressionFind(Integer node) {\n+        DisjointSetInfo setInfo = nodes.get(node);\n+        Integer parent = setInfo.getParentNode();\n+        if (parent.equals(node)) {\n+            return node;\n+        } else {\n+            Integer parentNode = find(parent);\n+            setInfo.setParentNode(parentNode);\n+            return parentNode;\n+        }\n+    }\n+\n+    private void union(Integer rootU, Integer rootV) {\n+        DisjointSetInfo setInfoU = nodes.get(rootU);\n+        setInfoU.setParentNode(rootV);\n+    }\n+\n+    private void unionByRank(int rootU, int rootV) {\n+        DisjointSetInfo setInfoU = nodes.get(rootU);\n+        DisjointSetInfo setInfoV = nodes.get(rootV);\n+        int rankU = setInfoU.getRank();\n+        int rankV = setInfoV.getRank();\n+        if (rankU < rankV) {\n+            setInfoU.setParentNode(rootV);\n+        } else {\n+            setInfoV.setParentNode(rootU);\n+            if (rankU == rankV) {\n+                setInfoU.setRank(rankU + 1);\n+            }\n+        }\n+    }\n+\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+public class DisjointSetInfo {\n+\n+    private Integer parentNode;\n+    private int rank;\n+\n+    DisjointSetInfo(Integer nodeNumber) {\n+        setParentNode(nodeNumber);\n+        setRank(1);\n+    }\n+\n+    public Integer getParentNode() {\n+        return parentNode;\n+    }\n+\n+    public void setParentNode(Integer parentNode) {\n+        this.parentNode = parentNode;\n+    }\n+\n+    public int getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(int rank) {\n+        this.rank = rank;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.MutableValueGraph;\n+import com.google.common.graph.ValueGraph;\n+import com.google.common.graph.ValueGraphBuilder;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class Kruskal {\n+\n+    public ValueGraph<Integer, Double> minSpanningTree(ValueGraph<Integer, Double> graph) {\n+\n+        return spanningTree(graph, true);\n+    }\n+\n+    public ValueGraph<Integer, Double> maxSpanningTree(ValueGraph<Integer, Double> graph) {\n+        return spanningTree(graph, false);\n+    }\n+\n+    private ValueGraph<Integer, Double> spanningTree(ValueGraph<Integer, Double> graph, boolean minSpanningTree) {\n+        Set<EndpointPair<Integer>> edges = graph.edges();\n+        List<EndpointPair<Integer>> edgeList = new ArrayList<>(edges);\n+\n+        if (minSpanningTree) {\n+            edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n+        } else {\n+            edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n+        }\n+\n+        int totalNodes = graph.nodes().size();\n+        CycleDetector cycleDetector = new CycleDetector(totalNodes);\n+        int edgeCount = 0;\n+\n+        MutableValueGraph<Integer, Double> spanningTree = ValueGraphBuilder.undirected().build();\n+        for (EndpointPair<Integer> edge : edgeList) {\n+            if (cycleDetector.detectCycle(edge.nodeU(), edge.nodeV())) {\n+                continue;\n+            }\n+            spanningTree.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge).get());\n+            edgeCount++;\n+            if (edgeCount == totalNodes - 1) {\n+                break;\n+            }\n+        }\n+        return spanningTree;\n+    }\n+\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n@@ -0,0 +1,67 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import com.google.common.graph.MutableValueGraph;\n+import com.google.common.graph.ValueGraph;\n+import com.google.common.graph.ValueGraphBuilder;\n+import com.baeldung.algorithms.kruskal.Kruskal;\n+\n+public class KruskalUnitTest {\n+\n+    private MutableValueGraph<Integer, Double> graph;\n+\n+    @Before\n+    public void setup() {\n+        graph = ValueGraphBuilder.undirected().build();\n+        graph.putEdgeValue(0, 1, 8.0);\n+        graph.putEdgeValue(0, 2, 5.0);\n+        graph.putEdgeValue(1, 2, 9.0);\n+        graph.putEdgeValue(1, 3, 11.0);\n+        graph.putEdgeValue(2, 3, 15.0);\n+        graph.putEdgeValue(2, 4, 10.0);\n+        graph.putEdgeValue(3, 4, 7.0);\n+    }\n+\n+    @Test\n+    public void givenGraph_whenMinimumSpanningTree_thenOutputCorrectResult() {\n+        final Kruskal kruskal = new Kruskal();\n+        ValueGraph<Integer, Double> spanningTree = kruskal.minSpanningTree(graph);\n+\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 2));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n+        assertTrue(spanningTree.hasEdgeConnecting(3, 4));\n+        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n+        assertEquals(graph.edgeValue(0, 2), spanningTree.edgeValue(0, 2));\n+        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n+        assertEquals(graph.edgeValue(3, 4), spanningTree.edgeValue(3, 4));\n+\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 3));\n+        assertFalse(spanningTree.hasEdgeConnecting(2, 3));\n+    }\n+\n+    @Test\n+    public void givenGraph_whenMaximumSpanningTree_thenOutputCorrectResult() {\n+        final Kruskal kruskal = new Kruskal();\n+        ValueGraph<Integer, Double> spanningTree = kruskal.maxSpanningTree(graph);\n+\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n+        assertTrue(spanningTree.hasEdgeConnecting(1, 3));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 3));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n+        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n+        assertEquals(graph.edgeValue(1, 3), spanningTree.edgeValue(1, 3));\n+        assertEquals(graph.edgeValue(2, 3), spanningTree.edgeValue(2, 3));\n+        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n+\n+        assertFalse(spanningTree.hasEdgeConnecting(0, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(3, 4));\n+    }\n+}",
    "output": "Merge pull request #8393 from wugangca/BAEL-3406\n\nBAEL-3406 Kruskal’s Algorithm for Spanning Trees"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n--- a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n+++ b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n@@ -0,0 +1,38 @@\n+package com.baeldung.exceptions;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+\n+public class CatchingThrowable  {\n+\n+    class CapacityException extends Exception {\n+        CapacityException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    class StorageAPI {\n+\n+        public void addIDsToStorage(int capacity, Set<String> storage) throws CapacityException {\n+            if (capacity < 1) {\n+                throw new CapacityException(\"Capacity of less than 1 is not allowed\");\n+            }\n+            int count = 0;\n+            while (count < capacity) {\n+                storage.add(UUID.randomUUID().toString());\n+                count++;\n+            }\n+        }\n+\n+        // other methods go here ...\n+    }\n+\n+    public void add(StorageAPI api, int capacity, Set<String> storage) {\n+        try {\n+            api.addIDsToStorage(capacity, storage);\n+        } catch (Throwable throwable) {\n+            // do something here\n+        }\n+    }\n+\n+}",
    "output": "Merge pull request #8417 from Thabo08/catching-throwable-2\n\nt.ntsoko@gmail.com - Moving CatchingThrowable.java to the core-java-exceptions-2 module"
  },
  {
    "input": "diff --git a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n--- a/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n+++ b/testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/junit/SeleniumCookiesJUnitLiveTest.java\n@@ -0,0 +1,107 @@\n+package test.java.com.baeldung.selenium.junit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openqa.selenium.Capabilities;\n+import org.openqa.selenium.Cookie;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+public class SeleniumCookiesJUnitLiveTest {\n+\n+    private WebDriver driver;\n+    private String navUrl;\n+\n+    @Before\n+    public void setUp() {\n+        Capabilities capabilities = DesiredCapabilities.firefox();\n+        driver = new FirefoxDriver(capabilities);\n+        navUrl = \"https://baeldung.com\";\n+        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        driver.close();\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenNavigate_thenCookiesExist() {\n+        driver.navigate().to(navUrl);\n+        Set<Cookie> cookies = driver.manage().getCookies();\n+\n+        assertThat(cookies, is(not(empty())));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenNavigate_thenLpCookieExists() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie, is(not(nullValue())));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenNavigate_thenLpCookieIsHasCorrectValue() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie.getValue(), containsString(\"www.baeldung.com\"));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenNavigate_thenLpCookieHasCorrectProps() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie.getDomain(), equalTo(\".baeldung.com\"));\n+        assertThat(lpCookie.getPath(), equalTo(\"/\"));\n+        assertThat(lpCookie.getExpiry(), is(not(nullValue())));\n+        assertThat(lpCookie.isSecure(), equalTo(false));\n+        assertThat(lpCookie.isHttpOnly(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenAddingCookie_thenItIsPresent() {\n+        driver.navigate().to(navUrl);\n+        Cookie cookie = new Cookie(\"foo\", \"bar\");\n+        driver.manage().addCookie(cookie);\n+        Cookie driverCookie = driver.manage().getCookieNamed(\"foo\");\n+\n+        assertThat(driverCookie.getValue(), equalTo(\"bar\"));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenDeletingCookie_thenItIsAbsent() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(lpCookie, is(not(nullValue())));\n+\n+        driver.manage().deleteCookie(lpCookie);\n+        Cookie deletedCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+\n+        assertThat(deletedCookie, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void givenHomePage_whenOverridingCookie_thenItIsUpdated() {\n+        driver.navigate().to(navUrl);\n+        Cookie lpCookie = driver.manage().getCookieNamed(\"lp_120073\");\n+        driver.manage().deleteCookie(lpCookie);\n+\n+        lpCookie = new Cookie(\"lp_120073\", \"foo\");\n+        driver.manage().addCookie(lpCookie);\n+\n+        assertThat(lpCookie.getValue(), equalTo(\"foo\"));\n+    }\n+\n+}",
    "output": "[BAEL-2948] Using cookies with Selenium WebDriver"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/andoperators/BitwiseAndLogicalANDOperatorsUnitTest.java b/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/andoperators/BitwiseAndLogicalANDOperatorsUnitTest.java\n--- a/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/andoperators/BitwiseAndLogicalANDOperatorsUnitTest.java\n+++ b/core-java-modules/core-java-lang-operators/src/test/java/com/baeldung/andoperators/BitwiseAndLogicalANDOperatorsUnitTest.java\n@@ -0,0 +1,71 @@\n+package com.baeldung.andoperators;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class BitwiseAndLogicalANDOperatorsUnitTest {\n+\n+    @Test\n+    public void givenTwoTrueBooleans_whenBitwiseAndOperator_thenTrue() {\n+        boolean trueBool = true;\n+        boolean anotherTrueBool = true;\n+        boolean trueANDTrue = trueBool & anotherTrueBool;\n+        assertTrue(trueANDTrue);\n+    }\n+\n+    @Test\n+    public void givenOneFalseAndOneTrueBooleans_whenBitwiseAndOperator_thenFalse() {\n+        boolean trueBool = true;\n+        boolean falseBool = false;\n+        boolean trueANDFalse = trueBool & falseBool;\n+        assertFalse(trueANDFalse);\n+    }\n+\n+    @Test\n+    public void givenTwoFalseBooleans_whenBitwiseAndOperator_thenFalse() {\n+        boolean falseBool = false;\n+        boolean anotherFalseBool = false;\n+        boolean falseANDFalse = falseBool & anotherFalseBool;\n+        assertFalse(falseANDFalse);\n+    }\n+\n+    @Test\n+    public void givenTwoIntegers_whenBitwiseAndOperator_thenNewDecimalNumber() {\n+        int six = 6;\n+        int five = 5;\n+        int shouldBeFour = six & five;\n+        assertEquals(4, shouldBeFour);\n+    }\n+\n+    @Test\n+    public void givenTwoTrueBooleans_whenLogicalAndOperator_thenTrue() {\n+        boolean trueBool = true;\n+        boolean anotherTrueBool = true;\n+        boolean trueANDTrue = trueBool && anotherTrueBool;\n+        assertTrue(trueANDTrue);\n+    }\n+\n+    @Test\n+    public void givenOneFalseAndOneTrueBooleans_whenLogicalAndOperator_thenFalse() {\n+        boolean trueBool = true;\n+        boolean falseBool = false;\n+        boolean trueANDFalse = trueBool && falseBool;\n+        assertFalse(trueANDFalse);\n+    }\n+\n+    @Test\n+    public void givenTwoFalseBooleans_whenLogicalAndOperator_thenFalse() {\n+        boolean falseBool = false;\n+        boolean anotherFalseBool = false;\n+        boolean falseANDFalse = falseBool && anotherFalseBool;\n+        assertFalse(falseANDFalse);\n+    }\n+\n+    @Test\n+    public void givenTwoFalseExpressions_whenLogicalAndOperator_thenShortCircuitFalse() {\n+        boolean shortCircuitResult = (2<1) && (4<5);\n+        assertFalse(shortCircuitResult);\n+    }\n+\n+}",
    "output": "Bael 3512-difference between logical and bitwise & (#8203)\n\n* BAEL-3512 unit tests for Bitwise and Logical AND operators\r\n\r\n* BAEL-3512 readme.md is updated and added new tests for bitwise & with booleans\r\n\r\n* BAEL-3512 updated variables names to more meaningful names\r\n\r\n* BAEL-3512 added example for short circuit"
  },
  {
    "input": "diff --git a/libraries-io/src/test/java/com/baeldung/java/io/remote/SftpFileTransferLiveTest.java b/libraries-io/src/test/java/com/baeldung/java/io/remote/SftpFileTransferLiveTest.java\n--- a/libraries-io/src/test/java/com/baeldung/java/io/remote/SftpFileTransferLiveTest.java\n+++ b/libraries-io/src/test/java/com/baeldung/java/io/remote/SftpFileTransferLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java.io.remote;\n+package com.baeldung.java.io.remote;\n \n import java.io.IOException;\n \n\ndiff --git a/maven-all/maven/custom-rule/src/main/java/com/baeldung/enforcer/MyCustomRule.java b/maven-all/maven/custom-rule/src/main/java/com/baeldung/enforcer/MyCustomRule.java\n--- a/maven-all/maven/custom-rule/src/main/java/com/baeldung/enforcer/MyCustomRule.java\n+++ b/maven-all/maven/custom-rule/src/main/java/com/baeldung/enforcer/MyCustomRule.java\n@@ -19,8 +19,8 @@ public void execute(EnforcerRuleHelper enforcerRuleHelper) throws EnforcerRuleEx\n \n             String groupId = (String) enforcerRuleHelper.evaluate(\"${project.groupId}\");\n \n-            if (groupId == null || !groupId.startsWith(\"org.baeldung\")) {\n-                throw new EnforcerRuleException(\"Project group id does not start with org.baeldung\");\n+            if (groupId == null || !groupId.startsWith(\"com.baeldung\")) {\n+                throw new EnforcerRuleException(\"Project group id does not start with com.baeldung\");\n             }\n \n         }",
    "output": "BAEL-20537: Migrate to the com.baeldung package"
  },
  {
    "input": "diff --git a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSet.java b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSet.java\n--- a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSet.java\n+++ b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSet.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.base.Function;\n \n\ndiff --git a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSetUnitTest.java b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSetUnitTest.java\n--- a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSetUnitTest.java\n+++ b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMapFromSetUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.base.Function;\n import org.junit.Test;\n\ndiff --git a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMultiSetUnitTest.java b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMultiSetUnitTest.java\n--- a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMultiSetUnitTest.java\n+++ b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaMultiSetUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.collect.HashMultiset;\n import com.google.common.collect.Multiset;\n\ndiff --git a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaRangeSetUnitTest.java b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaRangeSetUnitTest.java\n--- a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaRangeSetUnitTest.java\n+++ b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaRangeSetUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.collect.ImmutableRangeSet;\n import com.google.common.collect.Range;\n\ndiff --git a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaSetOperationsUnitTest.java b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaSetOperationsUnitTest.java\n--- a/guava-collections-set/src/test/java/com/baeldung/guava/GuavaSetOperationsUnitTest.java\n+++ b/guava-collections-set/src/test/java/com/baeldung/guava/GuavaSetOperationsUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.base.Function;\n import com.google.common.base.Joiner;\n\ndiff --git a/guava-io/src/main/test/java/com/baeldung/guava/GuavaCountingOutputStreamUnitTest.java b/guava-io/src/main/test/java/com/baeldung/guava/GuavaCountingOutputStreamUnitTest.java\n--- a/guava-io/src/main/test/java/com/baeldung/guava/GuavaCountingOutputStreamUnitTest.java\n+++ b/guava-io/src/main/test/java/com/baeldung/guava/GuavaCountingOutputStreamUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n\ndiff --git a/guava-io/src/main/test/java/com/baeldung/guava/GuavaIOUnitTest.java b/guava-io/src/main/test/java/com/baeldung/guava/GuavaIOUnitTest.java\n--- a/guava-io/src/main/test/java/com/baeldung/guava/GuavaIOUnitTest.java\n+++ b/guava-io/src/main/test/java/com/baeldung/guava/GuavaIOUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.hamcrest.Matchers.contains;\n import static org.junit.Assert.assertEquals;",
    "output": "BAEL-20537: Migrate guava-* modules to the com.baeldung package"
  },
  {
    "input": "diff --git a/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowGraph.java b/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowGraph.java\n--- a/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowGraph.java\n+++ b/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowGraph.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.tensorflow;\n+package com.baeldung.tensorflow;\n \n import org.tensorflow.DataType;\n import org.tensorflow.Graph;\n\ndiff --git a/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowSavedModel.java b/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowSavedModel.java\n--- a/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowSavedModel.java\n+++ b/tensorflow-java/src/main/java/com/baeldung/tensorflow/TensorflowSavedModel.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.tensorflow;\n+package com.baeldung.tensorflow;\n \n import org.tensorflow.SavedModelBundle;\n import org.tensorflow.Tensor;\n\ndiff --git a/tensorflow-java/src/test/java/com/baeldung/tensorflow/TensorflowGraphUnitTest.java b/tensorflow-java/src/test/java/com/baeldung/tensorflow/TensorflowGraphUnitTest.java\n--- a/tensorflow-java/src/test/java/com/baeldung/tensorflow/TensorflowGraphUnitTest.java\n+++ b/tensorflow-java/src/test/java/com/baeldung/tensorflow/TensorflowGraphUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.tensorflow;\n+package com.baeldung.tensorflow;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n ",
    "output": "BAEL-20537: Migrate tensorflow-java module to the com.baeldung package"
  },
  {
    "input": "diff --git a/grpc/src/main/java/com/baeldung/grpc/client/GrpcClient.java b/grpc/src/main/java/com/baeldung/grpc/client/GrpcClient.java\n--- a/grpc/src/main/java/com/baeldung/grpc/client/GrpcClient.java\n+++ b/grpc/src/main/java/com/baeldung/grpc/client/GrpcClient.java\n@@ -1,8 +1,8 @@\n-package org.baeldung.grpc.client;\n+package com.baeldung.grpc.client;\n \n-import org.baeldung.grpc.HelloRequest;\n-import org.baeldung.grpc.HelloResponse;\n-import org.baeldung.grpc.HelloServiceGrpc;\n+import com.baeldung.grpc.HelloRequest;\n+import com.baeldung.grpc.HelloResponse;\n+import com.baeldung.grpc.HelloServiceGrpc;\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n\ndiff --git a/grpc/src/main/java/com/baeldung/grpc/server/GrpcServer.java b/grpc/src/main/java/com/baeldung/grpc/server/GrpcServer.java\n--- a/grpc/src/main/java/com/baeldung/grpc/server/GrpcServer.java\n+++ b/grpc/src/main/java/com/baeldung/grpc/server/GrpcServer.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.grpc.server;\n+package com.baeldung.grpc.server;\n \n import java.io.IOException;\n \n\ndiff --git a/grpc/src/main/java/com/baeldung/grpc/server/HelloServiceImpl.java b/grpc/src/main/java/com/baeldung/grpc/server/HelloServiceImpl.java\n--- a/grpc/src/main/java/com/baeldung/grpc/server/HelloServiceImpl.java\n+++ b/grpc/src/main/java/com/baeldung/grpc/server/HelloServiceImpl.java\n@@ -1,8 +1,8 @@\n-package org.baeldung.grpc.server;\n+package com.baeldung.grpc.server;\n \n-import org.baeldung.grpc.HelloRequest;\n-import org.baeldung.grpc.HelloResponse;\n-import org.baeldung.grpc.HelloServiceGrpc.HelloServiceImplBase;\n+import com.baeldung.grpc.HelloRequest;\n+import com.baeldung.grpc.HelloResponse;\n+import com.baeldung.grpc.HelloServiceGrpc.HelloServiceImplBase;\n \n import io.grpc.stub.StreamObserver;\n ",
    "output": "BAEL-20537: Migrate grpc module to the com.baeldung package"
  },
  {
    "input": "diff --git a/custom-pmd/src/main/java/com/baeldung/pmd/UnitTestNamingConventionRule.java b/custom-pmd/src/main/java/com/baeldung/pmd/UnitTestNamingConventionRule.java\n--- a/custom-pmd/src/main/java/com/baeldung/pmd/UnitTestNamingConventionRule.java\n+++ b/custom-pmd/src/main/java/com/baeldung/pmd/UnitTestNamingConventionRule.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.pmd;\n+package com.baeldung.pmd;\n \n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;",
    "output": "BAEL-20537: Migrate custom-pmd module to the com.baeldung package"
  },
  {
    "input": "diff --git a/apache-fop/src/test/java/com/baeldung/java/ApacheFOPConvertHTMLIntegrationTest.java b/apache-fop/src/test/java/com/baeldung/java/ApacheFOPConvertHTMLIntegrationTest.java\n--- a/apache-fop/src/test/java/com/baeldung/java/ApacheFOPConvertHTMLIntegrationTest.java\n+++ b/apache-fop/src/test/java/com/baeldung/java/ApacheFOPConvertHTMLIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java;\n+package com.baeldung.java;\n \n import java.io.BufferedOutputStream;\n import java.io.File;\n\ndiff --git a/apache-fop/src/test/java/com/baeldung/java/ApacheFOPHeroldLiveTest.java b/apache-fop/src/test/java/com/baeldung/java/ApacheFOPHeroldLiveTest.java\n--- a/apache-fop/src/test/java/com/baeldung/java/ApacheFOPHeroldLiveTest.java\n+++ b/apache-fop/src/test/java/com/baeldung/java/ApacheFOPHeroldLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.java;\n+package com.baeldung.java;\n \n import java.io.BufferedOutputStream;\n import java.io.BufferedReader;\n\ndiff --git a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/CarsODataJPAServiceFactory.java b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/CarsODataJPAServiceFactory.java\n--- a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/CarsODataJPAServiceFactory.java\n+++ b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/CarsODataJPAServiceFactory.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.examples.olingo2;\n+package com.baeldung.examples.olingo2;\n \n import java.util.List;\n import java.util.Map;\n@@ -9,10 +9,8 @@\n import javax.persistence.EntityTransaction;\n import javax.persistence.FlushModeType;\n import javax.persistence.LockModeType;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n import javax.persistence.StoredProcedureQuery;\n-import javax.persistence.SynchronizationType;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.CriteriaDelete;\n@@ -25,11 +23,8 @@\n import org.apache.olingo.odata2.jpa.processor.api.ODataJPAContext;\n import org.apache.olingo.odata2.jpa.processor.api.ODataJPAServiceFactory;\n import org.apache.olingo.odata2.jpa.processor.api.exception.ODataJPARuntimeException;\n-import org.baeldung.examples.olingo2.JerseyConfig.EntityManagerFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n-import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -58,7 +53,7 @@ public ODataJPAContext initializeODataJPAContext() throws ODataJPARuntimeExcepti\n         ODataJPAContext ctx = getODataJPAContext();\n         ODataContext octx = ctx.getODataContext();\n         HttpServletRequest request = (HttpServletRequest)octx.getParameter(ODataContext.HTTP_SERVLET_REQUEST_OBJECT);\n-        EntityManager em = (EntityManager)request.getAttribute(EntityManagerFilter.EM_REQUEST_ATTRIBUTE);\n+        EntityManager em = (EntityManager)request.getAttribute(JerseyConfig.EntityManagerFilter.EM_REQUEST_ATTRIBUTE);\n                 \n         // Here we're passing the EM that was created by the EntityManagerFilter (see JerseyConfig)\n         ctx.setEntityManager(new EntityManagerWrapper(em));\n\ndiff --git a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/JerseyConfig.java b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/JerseyConfig.java\n--- a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/JerseyConfig.java\n+++ b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/JerseyConfig.java\n@@ -1,11 +1,10 @@\n-    package org.baeldung.examples.olingo2;\n+    package com.baeldung.examples.olingo2;\n \n import java.io.IOException;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n-import javax.servlet.ServletContext;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.ApplicationPath;\n import javax.ws.rs.Path;\n\ndiff --git a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/Olingo2SampleApplication.java b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/Olingo2SampleApplication.java\n--- a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/Olingo2SampleApplication.java\n+++ b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/Olingo2SampleApplication.java\n@@ -1,8 +1,7 @@\n-package org.baeldung.examples.olingo2;\n+package com.baeldung.examples.olingo2;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n \n @SpringBootApplication\n\ndiff --git a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarMaker.java b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarMaker.java\n--- a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarMaker.java\n+++ b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarMaker.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.examples.olingo2.domain;\n+package com.baeldung.examples.olingo2.domain;\n \n import java.util.List;\n \n\ndiff --git a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarModel.java b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarModel.java\n--- a/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarModel.java\n+++ b/apache-olingo/olingo2/src/main/java/com/baeldung/examples/olingo2/domain/CarModel.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.examples.olingo2.domain;\n+package com.baeldung.examples.olingo2.domain;\n \n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n\ndiff --git a/apache-olingo/olingo2/src/test/java/com/baeldung/examples/olingo2/Olingo2SampleApplicationUnitTest.java b/apache-olingo/olingo2/src/test/java/com/baeldung/examples/olingo2/Olingo2SampleApplicationUnitTest.java\n--- a/apache-olingo/olingo2/src/test/java/com/baeldung/examples/olingo2/Olingo2SampleApplicationUnitTest.java\n+++ b/apache-olingo/olingo2/src/test/java/com/baeldung/examples/olingo2/Olingo2SampleApplicationUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.examples.olingo2;\n+package com.baeldung.examples.olingo2;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;",
    "output": "BAEL-20537: Migrate apache-* modules to the com.baeldung package"
  },
  {
    "input": "diff --git a/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java b/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n--- a/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n+++ b/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n@@ -1,8 +1,10 @@\n package com.baeldung.r2dbc.repository;\n \n-import com.baeldung.r2dbc.model.Player;\n-import org.springframework.data.r2dbc.repository.query.Query;\n+import org.springframework.data.r2dbc.repository.Query;\n import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n+\n+import com.baeldung.r2dbc.model.Player;\n+\n import reactor.core.publisher.Flux;\n \n public interface PlayerRepository extends ReactiveCrudRepository<Player, Integer> {\n\ndiff --git a/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java b/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n--- a/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n+++ b/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n@@ -43,8 +43,7 @@ public void setup() {\n                 \"DROP TABLE IF EXISTS player;\",\n                 \"CREATE table player (id INT AUTO_INCREMENT NOT NULL, name VARCHAR2, age INT NOT NULL);\");\n \n-        statements.forEach(it -> client.execute() //\n-                .sql(it) //\n+        statements.forEach(it -> client.execute(it) //\n                 .fetch() //\n                 .rowsUpdated() //\n                 .as(StepVerifier::create) //",
    "output": "Merge pull request #8415 from dkapil/task/BAEL-19376\n\nBAEL-19376 Do we have any Spring Milestone/RC repos defined?"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n@@ -14,7 +14,7 @@\n public class PatternJava11UnitTest {\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesThePatternInTheListElements() {\n+    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesPattern() {\n         List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Fabio Luis Silva\");\n         Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n \n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n@@ -30,7 +30,7 @@ public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches(\n     }\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindThePatternInTheListElements() {\n+    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindPatternInTheList() {\n         List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Mr. Silva\");\n         Predicate<String> patternsAsPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asPredicate();\n \n@@ -52,7 +52,7 @@ public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplit\n     }\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArrayWithValuesSplitByThePattern() {\n+    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArraySplitByThePattern() {\n         Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(\"My_Name__is__Fabio_Silva\");\n         String[] textSplit = textSplitAsStream.toArray(String[]::new);\n ",
    "output": "Merge pull request #8425 from silvafabio/master\n\nLoredana Crusoveanu suggestions: shorten the names of the test method…"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapMergeUnitTest.java\n@@ -6,29 +6,33 @@\n \r\n import org.junit.Test;\r\n \r\n-public class MinHeapmergeUnitTest {\r\n+public class MinHeapMergeUnitTest {\r\n \r\n     private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\r\n     private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\r\n \r\n     @Test\r\n-    public void givenSortedArraysWhenMergedShouldReturnASingleSortedarray() {\r\n+    public void givenSortedArrays_whenMerged_thenShouldReturnASingleSortedarray() {\r\n         int[] resultArray = MinHeapMerge.merge(inputArray);\r\n+        \r\n         assertThat(resultArray.length, is(equalTo(10)));\r\n         assertThat(resultArray, is(equalTo(expectedArray)));\r\n     }\r\n     \r\n     @Test\r\n-    public void givenEmptyHeapNodesAndInputArrayWhenPopulatedShouldPopulateAndReturnResultArrayLength() {\r\n+    public void givenEmptyHeapNodesAndInputArray_whenPopulated_thenShouldPopulateAndReturnResultArrayLength() {\r\n         int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, new HeapNode[inputArray.length]);\r\n+        \r\n         assertThat(size, is(equalTo(10)));\r\n     }\r\n     \r\n     @Test\r\n-    public void givenArrayAndHeapNodesAndResultArraySizeWhenMergedShouldReturnASingleSortedarray() {\r\n+    public void givenArrayAndHeapNodesAndResultArraySize_whenMerged_thenShouldReturnASingleSortedarray() {\r\n         HeapNode[] heapNodes = new HeapNode[inputArray.length];\r\n         int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, heapNodes);\r\n+        \r\n         int[] resultArray = MinHeapMerge.createMinHeapAndMergeArrays(inputArray, heapNodes, size);\r\n+        \r\n         assertThat(resultArray.length, is(equalTo(10)));\r\n         assertThat(resultArray, is(equalTo(expectedArray)));\r\n     }\r",
    "output": "BAEL - 3482"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n@@ -21,12 +21,12 @@ void heapify(int index) {\n         int leftNodeIndex = getLeftNodeIndex(index);\r\n         int rightNodeIndex = getRightNodeIndex(index);\r\n         int smallestElementIndex = index;\r\n-        if (leftNodeIndex < heapNodes.length && heapNodes[leftNodeIndex].element < heapNodes[index].element)\r\n+        if (leftNodeIndex < heapNodes.length && heapNodes[leftNodeIndex].element < heapNodes[index].element) {\r\n             smallestElementIndex = leftNodeIndex;\r\n-\r\n-        if (rightNodeIndex < heapNodes.length && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element)\r\n+        }\r\n+        if (rightNodeIndex < heapNodes.length && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element) {\r\n             smallestElementIndex = rightNodeIndex;\r\n-\r\n+        }\r\n         if (smallestElementIndex != index) {\r\n             swap(index, smallestElementIndex);\r\n             heapify(smallestElementIndex);\r",
    "output": "BAEL - 3482"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n@@ -14,7 +14,7 @@\n public class PatternJava11UnitTest {\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesThePatternInTheListElements() {\n+    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesPattern() {\n         List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Fabio Luis Silva\");\n         Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n \n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n@@ -30,7 +30,7 @@ public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches(\n     }\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindThePatternInTheListElements() {\n+    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindPatternInTheList() {\n         List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Mr. Silva\");\n         Predicate<String> patternsAsPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asPredicate();\n \n@@ -52,7 +52,7 @@ public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplit\n     }\n \n     @Test\n-    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArrayWithValuesSplitByThePattern() {\n+    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArraySplitByThePattern() {\n         Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(\"My_Name__is__Fabio_Silva\");\n         String[] textSplit = textSplitAsStream.toArray(String[]::new);\n ",
    "output": "Loredana Crusoveanu suggestions: shorten the names of the test methods, as they're causing a horizontal scroll bar to appear."
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java b/persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java\n--- a/persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung;\n+package com.baeldung;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;",
    "output": "BAEL-3248: Restore maven-dependency-plugin configuration (#8419)"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/CycleDetector.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CycleDetector {\n+\n+    List<DisjointSetInfo> nodes;\n+\n+    public CycleDetector(int totalNodes) {\n+        initDisjointSets(totalNodes);\n+    }\n+\n+    public boolean detectCycle(Integer u, Integer v) {\n+        Integer rootU = pathCompressionFind(u);\n+        Integer rootV = pathCompressionFind(v);\n+        if (rootU.equals(rootV)) {\n+            return true;\n+        }\n+        unionByRank(rootU, rootV);\n+        return false;\n+    }\n+\n+    private void initDisjointSets(int totalNodes) {\n+        nodes = new ArrayList<>(totalNodes);\n+        for (int i = 0; i < totalNodes; i++) {\n+            nodes.add(new DisjointSetInfo(i));\n+        }\n+    }\n+\n+    private Integer find(Integer node) {\n+        Integer parent = nodes.get(node).getParentNode();\n+        if (parent.equals(node)) {\n+            return node;\n+        } else {\n+            return find(parent);\n+        }\n+    }\n+\n+    private Integer pathCompressionFind(Integer node) {\n+        DisjointSetInfo setInfo = nodes.get(node);\n+        Integer parent = setInfo.getParentNode();\n+        if (parent.equals(node)) {\n+            return node;\n+        } else {\n+            Integer parentNode = find(parent);\n+            setInfo.setParentNode(parentNode);\n+            return parentNode;\n+        }\n+    }\n+\n+    private void union(Integer rootU, Integer rootV) {\n+        DisjointSetInfo setInfoU = nodes.get(rootU);\n+        setInfoU.setParentNode(rootV);\n+    }\n+\n+    private void unionByRank(int rootU, int rootV) {\n+        DisjointSetInfo setInfoU = nodes.get(rootU);\n+        DisjointSetInfo setInfoV = nodes.get(rootV);\n+        int rankU = setInfoU.getRank();\n+        int rankV = setInfoV.getRank();\n+        if (rankU < rankV) {\n+            setInfoU.setParentNode(rootV);\n+        } else {\n+            setInfoV.setParentNode(rootU);\n+            if (rankU == rankV) {\n+                setInfoU.setRank(rankU + 1);\n+            }\n+        }\n+    }\n+\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/DisjointSetInfo.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+public class DisjointSetInfo {\n+\n+    private Integer parentNode;\n+    private int rank;\n+\n+    DisjointSetInfo(Integer nodeNumber) {\n+        setParentNode(nodeNumber);\n+        setRank(1);\n+    }\n+\n+    public Integer getParentNode() {\n+        return parentNode;\n+    }\n+\n+    public void setParentNode(Integer parentNode) {\n+        this.parentNode = parentNode;\n+    }\n+\n+    public int getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(int rank) {\n+        this.rank = rank;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n@@ -14,7 +14,7 @@\n public class Kruskal {\n \n     public ValueGraph<Integer, Double> minSpanningTree(ValueGraph<Integer, Double> graph) {\n-        \n+\n         return spanningTree(graph, true);\n     }\n \n@@ -32,20 +32,13 @@ private ValueGraph<Integer, Double> spanningTree(ValueGraph<Integer, Double> gra\n             edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n         }\n \n-        int totalEdges = edgeList.size();\n         int totalNodes = graph.nodes().size();\n+        CycleDetector cycleDetector = new CycleDetector(totalNodes);\n         int edgeCount = 0;\n-        List<Integer> roots = new ArrayList<>(totalNodes);\n-        List<Integer> sizes = new ArrayList<>(totalNodes);\n-        for (int i = 0; i < totalNodes; i++) {\n-            roots.add(i);\n-            sizes.add(1);\n-        }\n \n         MutableValueGraph<Integer, Double> spanningTree = ValueGraphBuilder.undirected().build();\n-        for (int i = 0; i < totalEdges; i++) {\n-            EndpointPair<Integer> edge = edgeList.get(i);\n-            if (detectCycle(edge.nodeU(), edge.nodeV(), roots, sizes)) {\n+        for (EndpointPair<Integer> edge : edgeList) {\n+            if (cycleDetector.detectCycle(edge.nodeU(), edge.nodeV())) {\n                 continue;\n             }\n             spanningTree.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge).get());\n@@ -57,32 +50,4 @@ private ValueGraph<Integer, Double> spanningTree(ValueGraph<Integer, Double> gra\n         return spanningTree;\n     }\n \n-    private Integer find(Integer x, List<Integer> roots) {\n-        Integer root = roots.get(x);\n-        if (!root.equals(x)) {\n-            roots.set(x, find(root, roots));\n-        }\n-        return roots.get(x);\n-    }\n-\n-    private void unionBySize(Integer rootU, Integer rootV, List<Integer> roots, List<Integer> sizes) {\n-        Integer total = sizes.get(rootU) + sizes.get(rootV);\n-        if (sizes.get(rootU) < sizes.get(rootV)) {\n-            roots.set(rootU, rootV);\n-            sizes.set(rootV, total);\n-        } else {\n-            roots.set(rootV, rootU);\n-            sizes.set(rootU, total);\n-        }\n-    }\n-\n-    private boolean detectCycle(Integer u, Integer v, List<Integer> roots, List<Integer> sizes) {\n-        Integer rootU = find(u, roots);\n-        Integer rootV = find(v, roots);\n-        if (rootU.equals(rootV)) {\n-            return true;\n-        }\n-        unionBySize(rootU, rootV, roots, sizes);\n-        return false;\n-    }\n }\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n@@ -9,6 +9,7 @@\n import com.google.common.graph.MutableValueGraph;\n import com.google.common.graph.ValueGraph;\n import com.google.common.graph.ValueGraphBuilder;\n+import com.baeldung.algorithms.kruskal.Kruskal;\n \n public class KruskalUnitTest {\n ",
    "output": "BAEL-3406, refactor Kruskal algorithm by using more classes."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-syntax-2/src/main/java/com/baeldung/core/operators/notoperator/NotOperator.java b/core-java-modules/core-java-lang-syntax-2/src/main/java/com/baeldung/core/operators/notoperator/NotOperator.java\n--- a/core-java-modules/core-java-lang-syntax-2/src/main/java/com/baeldung/core/operators/notoperator/NotOperator.java\n+++ b/core-java-modules/core-java-lang-syntax-2/src/main/java/com/baeldung/core/operators/notoperator/NotOperator.java\n@@ -0,0 +1,99 @@\n+package com.baeldung.core.operators.notoperator;\n+\n+/**\n+ * Examples used in the article `Using the Not Operator in If Conditions in Java`.\n+ */\n+public class NotOperator {\n+\n+    public static void ifElseStatementExample() {\n+        boolean isValid = true;\n+\n+        if (isValid) {\n+            System.out.println(\"Valid\");\n+        } else {\n+            System.out.println(\"Invalid\");\n+        }\n+    }\n+\n+    public static void checkIsValidIsFalseWithEmptyIfBlock() {\n+        boolean isValid = true;\n+\n+        if (isValid) {\n+\n+        } else {\n+            System.out.println(\"Invalid\");\n+        }\n+    }\n+\n+    public static void checkIsValidIsFalseWithJustTheIfBlock() {\n+        boolean isValid = true;\n+\n+        if (isValid == false) {\n+            System.out.println(\"Invalid\");\n+        }\n+    }\n+\n+    public static void checkIsValidIsFalseWithTheNotOperator() {\n+        boolean isValid = true;\n+\n+        if (!isValid) {\n+            System.out.println(\"Invalid\");\n+        }\n+    }\n+\n+    public static void notOperatorWithBooleanValueAsOperand() {\n+        System.out.println(!true);   // prints false\n+        System.out.println(!false);  // prints true\n+        System.out.println(!!false); // prints false\n+    }\n+\n+    public static void applyNotOperatorToAnExpression_example1() {\n+        int count = 2;\n+\n+        System.out.println(!(count > 2));  // prints true\n+        System.out.println(!(count <= 2)); // prints false\n+    }\n+\n+    public static void applyNotOperatorToAnExpression_LogicalOperators() {\n+        boolean x = true;\n+        boolean y = false;\n+\n+        System.out.println(!(x && y));  // prints true\n+        System.out.println(!(x || y));  // prints false\n+    }\n+\n+    public static void precedence_example() {\n+        boolean x = true;\n+        boolean y = false;\n+\n+        System.out.println(!x && y);   // prints false\n+        System.out.println(!(x && y)); // prints true\n+    }\n+\n+    public static void pitfalls_ComplexConditionsExample() {\n+        int count = 9;\n+        int total = 100;\n+\n+        if (!(count >= 10 || total >= 1000)) {\n+            System.out.println(\"Some more work to do\");\n+        }\n+    }\n+\n+    public static void pitfalls_simplifyComplexConditionsByReversingLogicExample() {\n+        int count = 9;\n+        int total = 100;\n+\n+        if (count < 10 && total < 1000) {\n+            System.out.println(\"Some more work to do\");\n+        }\n+    }\n+\n+    public static void exitEarlyExample() {\n+        boolean isValid = false;\n+\n+        if(!isValid) {\n+            throw new IllegalArgumentException(\"Invalid input\");\n+        }\n+        // Code to execute when isValid == true goes here\n+    }\n+}\n\\ No newline at end of file",
    "output": "[BAEL-3152] - Examples for the article 'Using the Not Operator in If (#8368)\n\nConditions in Java'"
  },
  {
    "input": "diff --git a/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java b/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n--- a/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n+++ b/spring-5-reactive-security/src/test/java/com/baeldung/reactive/functional/EmployeeSpringFunctionalIntegrationTest.java\n@@ -1,11 +1,7 @@\n package com.baeldung.reactive.functional;\n \n-import static org.mockito.BDDMockito.given;\n-import static org.mockito.Mockito.verify;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import com.baeldung.webflux.Employee;\n+import com.baeldung.webflux.EmployeeRepository;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -15,13 +11,15 @@\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.reactive.server.WebTestClient;\n-\n-import com.baeldung.webflux.Employee;\n-import com.baeldung.webflux.EmployeeRepository;\n-\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.verify;\n+\n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = EmployeeSpringFunctionalApplication.class)\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n@@ -58,15 +56,11 @@ public void whenGetAllEmployees_thenCorrectEmployees() {\n             .bindToRouterFunction(config.getAllEmployeesRoute())\n             .build();\n \n-        List<Employee> employeeList = new ArrayList<>();\n-\n-        Employee employee1 = new Employee(\"1\", \"Employee 1\");\n-        Employee employee2 = new Employee(\"2\", \"Employee 2\");\n-\n-        employeeList.add(employee1);\n-        employeeList.add(employee2);\n+        List<Employee> employees = Arrays.asList(\n+            new Employee(\"1\", \"Employee 1\"),\n+            new Employee(\"2\", \"Employee 2\"));\n \n-        Flux<Employee> employeeFlux = Flux.fromIterable(employeeList);\n+        Flux<Employee> employeeFlux = Flux.fromIterable(employees);\n         given(employeeRepository.findAllEmployees()).willReturn(employeeFlux);\n \n         client.get()\n@@ -75,7 +69,7 @@ public void whenGetAllEmployees_thenCorrectEmployees() {\n             .expectStatus()\n             .isOk()\n             .expectBodyList(Employee.class)\n-            .isEqualTo(employeeList);\n+            .isEqualTo(employees);\n     }\n \n     @Test",
    "output": "BAEL-19890: Upgrade to Spring Boot 2.2.2 and refactor test method"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n--- a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n+++ b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n@@ -1,72 +1,103 @@\n-package com.baeldung.randomstrings;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.nio.charset.Charset;\n-import java.util.Random;\n-\n-public class RandomStringsUnitTest {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(RandomStringsUnitTest.class);\n-\n-    @Test\n-    public void givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect() {\n-        final byte[] array = new byte[7]; // length is bounded by 7\n-        new Random().nextBytes(array);\n-        final String generatedString = new String(array, Charset.forName(\"UTF-8\"));\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect() {\n-        final int leftLimit = 97; // letter 'a'\n-        final int rightLimit = 122; // letter 'z'\n-        final int targetStringLength = 10;\n-        final Random random = new Random();\n-        final StringBuilder buffer = new StringBuilder(targetStringLength);\n-\n-        for (int i = 0; i < targetStringLength; i++) {\n-            final int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\n-            buffer.append((char) randomLimitedInt);\n-        }\n-        final String generatedString = buffer.toString();\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.random(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.randomAlphabetic(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.randomAlphanumeric(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect() {\n-        final int length = 10;\n-        final boolean useLetters = true;\n-        final boolean useNumbers = false;\n-        final String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-}\n+package com.baeldung.randomstrings;\r\n+\r\n+import org.apache.commons.lang3.RandomStringUtils;\r\n+import org.junit.Test;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import java.nio.charset.Charset;\r\n+import java.util.Random;\r\n+\r\n+public class RandomStringsUnitTest {\r\n+\r\n+    private static final Logger LOG = LoggerFactory.getLogger(RandomStringsUnitTest.class);\r\n+\r\n+    @Test\r\n+    public void givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect() {\r\n+        byte[] array = new byte[7]; // length is bounded by 7\r\n+        new Random().nextBytes(array);\r\n+        String generatedString = new String(array, Charset.forName(\"UTF-8\"));\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect() {\r\n+        int leftLimit = 97; // letter 'a'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n+        StringBuilder buffer = new StringBuilder(targetStringLength);\r\n+\r\n+        for (int i = 0; i < targetStringLength; i++) {\r\n+            int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\r\n+            buffer.append((char) randomLimitedInt);\r\n+        }\r\n+        String generatedString = buffer.toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingJava8_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n+        int leftLimit = 97; // letter 'a'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n+\r\n+        String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+            .limit(targetStringLength)\r\n+            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n+            .toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingJava8_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n+        int leftLimit = 48; // numeral '0'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n+\r\n+        String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+            .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))\r\n+            .limit(targetStringLength)\r\n+            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n+            .toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomString_thenCorrect() {\r\n+        String generatedString = RandomStringUtils.random(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n+        String generatedString = RandomStringUtils.randomAlphabetic(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n+        String generatedString = RandomStringUtils.randomAlphanumeric(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect() {\r\n+        int length = 10;\r\n+        boolean useLetters = true;\r\n+        boolean useNumbers = false;\r\n+        String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+}\r",
    "output": "Merge pull request #8358 from sampada07/master\n\nBAEL-3589 : Improvement: Java Generate Random String"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n@@ -1,9 +1,8 @@\n-package com.baeldung.timezone;\n+package com.baeldung.jvmtimezone;\n \n import org.junit.Test;\n \n import java.util.Calendar;\n-import java.util.Date;\n import java.util.TimeZone;\n \n import static org.junit.Assert.assertEquals;\n@@ -13,9 +12,7 @@ public class ModifyDefaultTimezoneUnitTest {\n     @Test\n     public void givenDefaultTimezoneSet_thenDateTimezoneIsCorrect() {\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Portugal\"));\n-        Date date = new Date();\n         Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(date);\n         assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Portugal\"));\n     }\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.timezone;\n+package com.baeldung.jvmtimezone;\n \n import org.junit.After;\n import org.junit.Before;\n@@ -14,7 +14,7 @@ public class ModifyTimezonePropertyUnitTest {\n \n     @Before\n     public void setup() {\n-        System.setProperty(\"user.timezone\", \"IST\");\n+        System.setProperty(\"user.timezone\", \"Asia/Kolkata\");\n         TimeZone.setDefault(null);\n     }\n \n@@ -25,10 +25,8 @@ public void teardown() {\n \n     @Test\n     public void givenTimezonePropertySet_thenDateTimezoneIsCorrect() {\n-        Date date = new Date();\n         Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(date);\n-        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"IST\"));\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Asia/Kolkata\"));\n     }\n \n }\n\\ No newline at end of file",
    "output": "Merge pull request #8290 from kertpjatkin/master\n\nBAEL-3302: Fix package name & get rid of 3-letter time zone"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n--- a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n+++ b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/exceptions/CatchingThrowable.java\n@@ -0,0 +1,38 @@\n+package com.baeldung.exceptions;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+\n+public class CatchingThrowable  {\n+\n+    class CapacityException extends Exception {\n+        CapacityException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    class StorageAPI {\n+\n+        public void addIDsToStorage(int capacity, Set<String> storage) throws CapacityException {\n+            if (capacity < 1) {\n+                throw new CapacityException(\"Capacity of less than 1 is not allowed\");\n+            }\n+            int count = 0;\n+            while (count < capacity) {\n+                storage.add(UUID.randomUUID().toString());\n+                count++;\n+            }\n+        }\n+\n+        // other methods go here ...\n+    }\n+\n+    public void add(StorageAPI api, int capacity, Set<String> storage) {\n+        try {\n+            api.addIDsToStorage(capacity, storage);\n+        } catch (Throwable throwable) {\n+            // do something here\n+        }\n+    }\n+\n+}",
    "output": "Moving CatchingThrowable.java to the core-java-exceptions-2 module"
  },
  {
    "input": "diff --git a/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java b/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n--- a/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n+++ b/spring-5-data-reactive/src/main/java/com/baeldung/r2dbc/repository/PlayerRepository.java\n@@ -1,8 +1,10 @@\n package com.baeldung.r2dbc.repository;\n \n-import com.baeldung.r2dbc.model.Player;\n-import org.springframework.data.r2dbc.repository.query.Query;\n+import org.springframework.data.r2dbc.repository.Query;\n import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n+\n+import com.baeldung.r2dbc.model.Player;\n+\n import reactor.core.publisher.Flux;\n \n public interface PlayerRepository extends ReactiveCrudRepository<Player, Integer> {\n\ndiff --git a/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java b/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n--- a/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n+++ b/spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java\n@@ -43,8 +43,7 @@ public void setup() {\n                 \"DROP TABLE IF EXISTS player;\",\n                 \"CREATE table player (id INT AUTO_INCREMENT NOT NULL, name VARCHAR2, age INT NOT NULL);\");\n \n-        statements.forEach(it -> client.execute() //\n-                .sql(it) //\n+        statements.forEach(it -> client.execute(it) //\n                 .fetch() //\n                 .rowsUpdated() //\n                 .as(StepVerifier::create) //",
    "output": "BAEL-19376 Do we have any Spring Milestone/RC repos defined?\n\n- Removed spring milestone repositories dependencies, used Central GA releases as a fix"
  },
  {
    "input": "diff --git a/apache-poi/src/main/java/com/baeldung/poi/excel/ReadCellValueNotFormulaHelper.java b/apache-poi/src/main/java/com/baeldung/poi/excel/ReadCellValueNotFormulaHelper.java\n--- a/apache-poi/src/main/java/com/baeldung/poi/excel/ReadCellValueNotFormulaHelper.java\n+++ b/apache-poi/src/main/java/com/baeldung/poi/excel/ReadCellValueNotFormulaHelper.java\n@@ -0,0 +1,84 @@\n+package com.baeldung.poi.excel;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.FormulaEvaluator;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.util.CellAddress;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+\n+public class ReadCellValueNotFormulaHelper {\n+\n+    public Object getCellValueByFetchingLastCachedValue(String fileLocation, String cellLocation) throws IOException {\n+        Object cellValue = new Object();\n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n+\n+        Workbook workbook = new XSSFWorkbook(inputStream);\n+\n+        Sheet sheet = workbook.getSheetAt(0);\n+\n+        CellAddress cellReference = new CellAddress(cellLocation);\n+\n+        Row row = sheet.getRow(cellReference.getRow());\n+        Cell cell = row.getCell(cellReference.getColumn());\n+\n+        if (cell.getCellType() == CellType.FORMULA) {\n+            switch (cell.getCachedFormulaResultType()) {\n+            case BOOLEAN:\n+                cellValue = cell.getBooleanCellValue();\n+                break;\n+            case NUMERIC:\n+                cellValue = cell.getNumericCellValue();\n+                break;\n+            case STRING:\n+                cellValue = cell.getRichStringCellValue()\n+                    .getString();\n+                break;\n+            default:\n+                cellValue = null;\n+            }\n+        }\n+\n+        workbook.close();\n+        return cellValue;\n+    }\n+\n+    public Object getCellValueByEvaluatingFormula(String fileLocation, String cellLocation) throws IOException {\n+        Object cellValue;\n+        FileInputStream inputStream = new FileInputStream(new File(fileLocation));\n+\n+        Workbook workbook = new XSSFWorkbook(inputStream);\n+\n+        Sheet sheet = workbook.getSheetAt(0);\n+        FormulaEvaluator evaluator = workbook.getCreationHelper()\n+            .createFormulaEvaluator();\n+\n+        CellAddress cellAddress = new CellAddress(cellLocation);\n+\n+        Row row = sheet.getRow(cellAddress.getRow());\n+        Cell cell = row.getCell(cellAddress.getColumn());\n+\n+        switch (evaluator.evaluateFormulaCell(cell)) {\n+        case BOOLEAN:\n+            cellValue = cell.getBooleanCellValue();\n+            break;\n+        case NUMERIC:\n+            cellValue = cell.getNumericCellValue();\n+            break;\n+        case STRING:\n+            cellValue = cell.getStringCellValue();\n+            break;\n+        default:\n+            cellValue = null;\n+        }\n+\n+        workbook.close();\n+        return cellValue;\n+    }\n+}\n\ndiff --git a/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java b/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n--- a/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n+++ b/apache-poi/src/test/java/com/baeldung/poi/excel/ReadCellValueNotFormulaUnitTest.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ReadCellValueNotFormulaUnitTest {\n+\n+    private ReadCellValueNotFormulaHelper readCellValueNotFormulaHelper;\n+    private String fileLocation;\n+    private static final String FILE_NAME = \"test.xlsx\";\n+\n+    @Before\n+    public void setup() throws URISyntaxException { \n+        fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+        readCellValueNotFormulaHelper = new ReadCellValueNotFormulaHelper();\n+    }\n+\n+    @Test\n+    public void testCachedValueMethod() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueNotFormulaHelper.getCellValueByFetchingLastCachedValue(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+\n+    @Test\n+    public void testFormulaEvaluationMethod() throws IOException {\n+        final double expectedResult = 7.0;\n+        final Object cellValue = readCellValueNotFormulaHelper.getCellValueByEvaluatingFormula(fileLocation, \"C2\");\n+\n+        assertEquals(expectedResult, cellValue);\n+    }\n+}",
    "output": "BAEL-3658: Read cell value rather than the formula that is evaluating it"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.algorithms.integerstreammedian;\n+\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+\n+import static java.util.Comparator.reverseOrder;\n+\n+public class MedianOfIntegerStream {\n+\n+    private Queue<Integer> minHeap, maxHeap;\n+\n+    MedianOfIntegerStream() {\n+        minHeap = new PriorityQueue<>();\n+        maxHeap = new PriorityQueue<>(reverseOrder());\n+    }\n+\n+    void add(int num) {\n+        if (!minHeap.isEmpty() && num < minHeap.peek()) {\n+            maxHeap.offer(num);\n+            if (maxHeap.size() > minHeap.size() + 1) {\n+                minHeap.offer(maxHeap.poll());\n+            }\n+        } else {\n+            minHeap.offer(num);\n+            if (minHeap.size() > maxHeap.size() + 1) {\n+                maxHeap.offer(minHeap.poll());\n+            }\n+        }\n+    }\n+\n+    double getMedian() {\n+        int median;\n+        if (minHeap.size() < maxHeap.size()) {\n+            median = maxHeap.peek();\n+        } else if (minHeap.size() > maxHeap.size()) {\n+            median = minHeap.peek();\n+        } else {\n+            median = (minHeap.peek() + maxHeap.peek()) / 2;\n+        }\n+        return median;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.algorithms.integerstreammedian;\n+\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+\n+import static java.util.Comparator.reverseOrder;\n+\n+public class MedianOfIntegerStream2 {\n+\n+    private Queue<Integer> minHeap, maxHeap;\n+\n+    MedianOfIntegerStream2() {\n+        minHeap = new PriorityQueue<>();\n+        maxHeap = new PriorityQueue<>(reverseOrder());\n+    }\n+\n+    void add(int num) {\n+        if (minHeap.size() == maxHeap.size()) {\n+            maxHeap.offer(num);\n+            minHeap.offer(maxHeap.poll());\n+        } else {\n+            minHeap.offer(num);\n+            maxHeap.offer(minHeap.poll());\n+        }\n+    }\n+\n+    double getMedian() {\n+        int median;\n+        if (minHeap.size() > maxHeap.size()) {\n+            median = minHeap.peek();\n+        } else {\n+            median = (minHeap.peek() + maxHeap.peek()) / 2;\n+        }\n+        return median;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n@@ -0,0 +1,41 @@\n+package com.baeldung.algorithms.integerstreammedian;\n+\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class MedianOfIntegerStreamUnitTest {\n+\n+    @Test\n+    public void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach1() {\n+        MedianOfIntegerStream mis = new MedianOfIntegerStream();\n+        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n+            mis.add(e.getKey());\n+            assertEquals(e.getValue(), (Double) mis.getMedian());\n+        }\n+    }\n+\n+    @Test\n+    public void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach2() {\n+        MedianOfIntegerStream2 mis = new MedianOfIntegerStream2();\n+        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n+            mis.add(e.getKey());\n+            assertEquals(e.getValue(), (Double) mis.getMedian());\n+        }\n+    }\n+\n+    private Map<Integer, Double> testcaseFixture() {\n+        return new LinkedHashMap<Integer, Double>() {{\n+            put(1, 1d);\n+            put(7, 4d);\n+            put(5, 5d);\n+            put(8, 6d);\n+            put(3, 5d);\n+            put(9, 6d);\n+            put(4, 5d);\n+        }};\n+    }\n+}",
    "output": "Merge pull request #8236 from priyank-sriv/bael-3483\n\nBAEL-3483 Median of Stream of Integers"
  },
  {
    "input": "diff --git a/ninja/src/main/java/conf/Filters.java b/ninja/src/main/java/conf/Filters.java\n--- a/ninja/src/main/java/conf/Filters.java\n+++ b/ninja/src/main/java/conf/Filters.java\n@@ -0,0 +1,13 @@\n+package conf;\n+\n+import java.util.List;\n+import ninja.Filter;\n+\n+public class Filters implements ninja.application.ApplicationFilters {\n+\n+    @Override\n+    public void addFilters(List<Class<? extends Filter>> filters) {\n+        // Add your application - wide filters here\n+        // filters.add(MyFilter.class);\n+    }\n+}\n\ndiff --git a/ninja/src/main/java/conf/Module.java b/ninja/src/main/java/conf/Module.java\n--- a/ninja/src/main/java/conf/Module.java\n+++ b/ninja/src/main/java/conf/Module.java\n@@ -0,0 +1,18 @@\n+package conf;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Singleton;\n+\n+import services.UserService;\n+import services.UserServiceImpl;\n+\n+@Singleton\n+public class Module extends AbstractModule {\n+    \n+    protected void configure() {\n+        \n+        bind(UserService.class).to(UserServiceImpl.class);\n+        \n+    }\n+\n+}\n\ndiff --git a/ninja/src/main/java/conf/Routes.java b/ninja/src/main/java/conf/Routes.java\n--- a/ninja/src/main/java/conf/Routes.java\n+++ b/ninja/src/main/java/conf/Routes.java\n@@ -0,0 +1,32 @@\n+package conf;\n+\n+import ninja.AssetsController;\n+import ninja.Router;\n+import ninja.application.ApplicationRoutes;\n+import controllers.ApplicationController;\n+\n+public class Routes implements ApplicationRoutes {\n+\n+    @Override\n+    public void init(Router router) {  \n+        \n+        router.GET().route(\"/index\").with(ApplicationController::index);\n+        router.GET().route(\"/home\").with(ApplicationController::home);\n+        router.GET().route(\"/hello\").with(ApplicationController::helloWorld);\n+        router.GET().route(\"/userJson\").with(ApplicationController::userJson);\n+        router.GET().route(\"/createUser\").with(ApplicationController::createUser);\n+        router.GET().route(\"/flash\").with(ApplicationController::showFlashMsg);\n+        \n+        router.GET().route(\"/users\").with(ApplicationController::fetchUsers);\n+        router.POST().route(\"/users\").with(ApplicationController::insertUser);\n+ \n+        //Assets\n+        router.GET().route(\"/assets/webjars/{fileName: .*}\").with(AssetsController::serveWebJars);\n+        router.GET().route(\"/assets/{fileName: .*}\").with(AssetsController::serveStatic);\n+        \n+        //Index\n+        router.GET().route(\"/.*\").with(ApplicationController::index);\n+       \n+    }\n+\n+}\n\ndiff --git a/ninja/src/main/java/controllers/ApplicationController.java b/ninja/src/main/java/controllers/ApplicationController.java\n--- a/ninja/src/main/java/controllers/ApplicationController.java\n+++ b/ninja/src/main/java/controllers/ApplicationController.java\n@@ -0,0 +1,102 @@\n+package controllers;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import com.google.inject.persist.Transactional;\n+\n+import models.User;\n+import ninja.Context;\n+import ninja.Result;\n+import ninja.Results;\n+import ninja.i18n.Lang;\n+import ninja.i18n.Messages;\n+import ninja.jpa.UnitOfWork;\n+import ninja.session.FlashScope;\n+import ninja.validation.JSR303Validation;\n+import ninja.validation.Validation;\n+import services.UserService;\n+\n+@Singleton\n+public class ApplicationController {\n+    \n+    @Inject\n+    Lang lang;\n+\n+    @Inject\n+    Messages msg;\n+    \n+    private static Log logger = LogFactory.getLog(ApplicationController.class);\n+    \n+    @Inject \n+    Provider<EntityManager> entityManagerProvider;\n+\n+    @Inject\n+    UserService userService;\n+    \n+    public Result index() {\n+        return Results.html();\n+    }\n+\n+    public Result userJson() {\n+        HashMap<String, String> userMap = userService.getUserMap();\n+        logger.info(userMap);\n+        return Results.json().render(userMap);\n+    }\n+\n+    public Result helloWorld(Context context) {\n+        Optional<String> language = Optional.of(\"fr\");        \n+        String helloMsg = msg.get(\"helloMsg\", language).get();\n+        return Results.text().render(helloMsg);\n+    }\n+    \n+    public Result showFlashMsg(FlashScope flashScope) {\n+        flashScope.success(\"Success message\");\n+        flashScope.error(\"Error message\");\n+        return Results.redirect(\"/home\");\n+    }\n+    \n+    public Result home() {\n+        return Results.html();\n+    }\n+    \n+    public Result createUser() {\n+        return Results.html();\n+    }\n+    \n+    @UnitOfWork\n+    public Result fetchUsers() {\n+        EntityManager entityManager = entityManagerProvider.get();\n+        Query q = entityManager.createQuery(\"SELECT x FROM User x\");\n+        List<User> users = (List<User>) q.getResultList();\n+        return Results.json().render(users);\n+    }\n+    \n+    @Transactional\n+    public Result insertUser(FlashScope flashScope, @JSR303Validation User user, Validation validation) {\n+        logger.info(\"Inserting User : \" +user);\n+            \n+        if (validation.getViolations().size() > 0) {\n+            flashScope.error(\"Validation Error: User can't be created\");\n+        } else {\n+            EntityManager entityManager = entityManagerProvider.get();\n+            entityManager.persist(user);\n+            entityManager.flush();\n+            flashScope.success(\"User '\" + user + \"' is created successfully\");\n+        }\n+        \n+        return Results.redirect(\"/home\");\n+    }\n+\n+}\n\ndiff --git a/ninja/src/main/java/models/User.java b/ninja/src/main/java/models/User.java\n--- a/ninja/src/main/java/models/User.java\n+++ b/ninja/src/main/java/models/User.java\n@@ -0,0 +1,25 @@\n+package models;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+\n+@Entity\n+public class User {\n+    \n+    @Id\n+    @GeneratedValue(strategy=GenerationType.AUTO)\n+    Long id;\n+    \n+    @NotNull\n+    public String firstName;\n+\n+    public String email;\n+    \n+    public String toString() {\n+        return firstName + \" : \" + email;\n+    }\n+    \n+}\n\ndiff --git a/ninja/src/main/java/services/UserService.java b/ninja/src/main/java/services/UserService.java\n--- a/ninja/src/main/java/services/UserService.java\n+++ b/ninja/src/main/java/services/UserService.java\n@@ -0,0 +1,9 @@\n+package services;\n+\n+import java.util.HashMap;\n+\n+public interface UserService {\n+    \n+    HashMap<String, String> getUserMap();\n+\n+}\n\ndiff --git a/ninja/src/main/java/services/UserServiceImpl.java b/ninja/src/main/java/services/UserServiceImpl.java\n--- a/ninja/src/main/java/services/UserServiceImpl.java\n+++ b/ninja/src/main/java/services/UserServiceImpl.java\n@@ -0,0 +1,15 @@\n+package services;\n+\n+import java.util.HashMap;\n+\n+public class UserServiceImpl implements UserService {\n+\n+    @Override\n+    public HashMap<String, String> getUserMap() {\n+        HashMap<String, String> userMap = new HashMap<>();\n+        userMap.put(\"name\", \"Norman Lewis\");\n+        userMap.put(\"email\", \"norman@email.com\");\n+        return userMap;\n+    }\n+\n+}\n\ndiff --git a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n@@ -0,0 +1,27 @@\n+package controllers;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertThat;\n+import org.doctester.testbrowser.Request;\n+import org.doctester.testbrowser.Response;\n+import org.junit.Test;\n+import ninja.NinjaDocTester;\n+\n+public class ApiControllerDocTesterTest extends NinjaDocTester {\n+    \n+    String URL_INDEX = \"/\";\n+    String URL_HELLO = \"/hello\";\n+    \n+    @Test\n+    public void testGetIndex() {\n+        Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_INDEX)));\n+        assertThat(response.payload, containsString(\"Hello, welcome to Ninja Framework!\"));\n+    }\n+    \n+    @Test\n+    public void testGetHello() {\n+        Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_HELLO)));\n+        assertThat(response.payload, containsString(\"Bonjour, bienvenue dans Ninja Framework!\"));\n+    }\n+    \n+}\n\ndiff --git a/ninja/src/test/java/controllers/ApiControllerMockUnitTest.java b/ninja/src/test/java/controllers/ApiControllerMockUnitTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerMockUnitTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerMockUnitTest.java\n@@ -0,0 +1,32 @@\n+package controllers;\n+\n+import static org.junit.Assert.assertEquals;\n+import javax.inject.Inject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import ninja.NinjaRunner;\n+import ninja.Result;\n+import services.UserService;\n+\n+@RunWith(NinjaRunner.class)\n+public class ApiControllerMockUnitTest {\n+\n+    @Inject private UserService userService;\n+\n+    ApplicationController applicationController;\n+\n+    @Before\n+    public void setupTest() {\n+        applicationController = new ApplicationController();\n+        applicationController.userService = userService;\n+    }\n+\n+    @Test\n+    public void testThatGetUserJson() {\n+        Result result = applicationController.userJson();\n+        System.out.println(result.getRenderable());\n+        assertEquals(userService.getUserMap().toString(), result.getRenderable().toString());\n+    }\n+    \n+}",
    "output": "Merge pull request #8373 from SmartyAnsh/BAEL-3464_Ninja\n\nBael 3464 ninja"
  },
  {
    "input": "diff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n@@ -1,15 +1,15 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-\r\n-@Controller\r\n-public class AnnotationMethodHandlerAdapterExample {\r\n-    @RequestMapping(\"/annotedName\")\r\n-    public ModelAndView getEmployeeName() {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Dinesh\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+@Controller\n+public class AnnotationMethodHandlerAdapterExample {\n+    @RequestMapping(\"/annotedName\")\n+    public ModelAndView getEmployeeName() {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Dinesh\");\n+        return model;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n@@ -1,15 +1,15 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-\r\n-@Controller\r\n-public class RequestMappingHandlerAdapterExample {\r\n-    @RequestMapping(\"/requestName\")\r\n-    public ModelAndView getEmployeeName() {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Madhwal\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+@Controller\n+public class RequestMappingHandlerAdapterExample {\n+    @RequestMapping(\"/requestName\")\n+    public ModelAndView getEmployeeName() {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Madhwal\");\n+        return model;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n@@ -1,16 +1,16 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import javax.servlet.http.HttpServletRequest;\r\n-import javax.servlet.http.HttpServletResponse;\r\n-\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-import org.springframework.web.servlet.mvc.AbstractController;\r\n-\r\n-public class SimpleControllerHandlerAdapterExample extends AbstractController {\r\n-    @Override\r\n-    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Dinesh Madhwal\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.mvc.AbstractController;\n+\n+public class SimpleControllerHandlerAdapterExample extends AbstractController {\n+    @Override\n+    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Dinesh Madhwal\");\n+        return model;\n+    }\n }\n\\ No newline at end of file",
    "output": "Merge pull request #8388 from catalin-burcea/BAEL-19881\n\n[BAEL-19881] - Rename spring-mvc-simple modules"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n@@ -3,16 +3,14 @@\n public class MinHeap {\r\n \r\n     HeapNode[] heapNodes;\r\n-    int heapSize;\r\n \r\n     public MinHeap(HeapNode heapNodes[]) {\r\n-        this.heapSize = heapNodes.length;\r\n         this.heapNodes = heapNodes;\r\n         heapifyFromLastLeafsParent();\r\n     }\r\n \r\n     void heapifyFromLastLeafsParent() {\r\n-        int lastLeafsParentIndex = getParentNodeIndex(heapSize);\r\n+        int lastLeafsParentIndex = getParentNodeIndex(heapNodes.length);\r\n         while (lastLeafsParentIndex >= 0) {\r\n             heapify(lastLeafsParentIndex);\r\n             lastLeafsParentIndex--;\r\n@@ -23,12 +21,12 @@ void heapify(int index) {\n         int leftNodeIndex = getLeftNodeIndex(index);\r\n         int rightNodeIndex = getRightNodeIndex(index);\r\n         int smallestElementIndex = index;\r\n-        if (leftNodeIndex < heapSize && heapNodes[leftNodeIndex].element < heapNodes[index].element)\r\n+        if (leftNodeIndex < heapNodes.length && heapNodes[leftNodeIndex].element < heapNodes[index].element)\r\n             smallestElementIndex = leftNodeIndex;\r\n-        \r\n-        if (rightNodeIndex < heapSize && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element)\r\n+\r\n+        if (rightNodeIndex < heapNodes.length && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element)\r\n             smallestElementIndex = rightNodeIndex;\r\n-        \r\n+\r\n         if (smallestElementIndex != index) {\r\n             swap(index, smallestElementIndex);\r\n             heapify(smallestElementIndex);\r\n@@ -51,7 +49,7 @@ HeapNode getRootNode() {\n         return heapNodes[0];\r\n     }\r\n \r\n-    void hepifyFromRoot(HeapNode root) {\r\n+    void heapifyFromRoot() {\r\n         heapify(0);\r\n     }\r\n \r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n@@ -2,12 +2,6 @@\n \r\n public class MinHeapMerge {\r\n \r\n-    static void printArray(int[] array) {\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            System.out.print(array[i] + \" \");\r\n-        }\r\n-    }\r\n-\r\n     static int populateHeapNodesAndDetermineResultingArrayLength(int[][] array, HeapNode[] heapNodes) {\r\n         int resultSize = 0;\r\n \r\n@@ -33,24 +27,14 @@ static int[] createMinHeapAndMergeArrays(int[][] array, HeapNode[] heapNodes, in\n             } else {\r\n                 root.element = Integer.MAX_VALUE;\r\n             }\r\n-            minHeap.hepifyFromRoot(root);\r\n+            minHeap.heapifyFromRoot();\r\n         }\r\n         return resultingArray;\r\n     }\r\n \r\n-    static void merge(int[][] array) {\r\n+    static int[] merge(int[][] array) {\r\n         HeapNode[] heapNodes = new HeapNode[array.length];\r\n         int resultingArraySize = populateHeapNodesAndDetermineResultingArrayLength(array, heapNodes);\r\n-\r\n-        int[] resultingArray = createMinHeapAndMergeArrays(array, heapNodes, resultingArraySize);\r\n-\r\n-        printArray(resultingArray);\r\n-\r\n-    }\r\n-\r\n-    public static void main(String args[]) {\r\n-        int[][] array = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 650, 200 }, { 3, 4 }, { 1001, 6456, 23000 } };\r\n-\r\n-        merge(array);\r\n+        return createMinHeapAndMergeArrays(array, heapNodes, resultingArraySize);\r\n     }\r\n }\r\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapmergeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapmergeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapmergeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/minheapmerge/MinHeapmergeUnitTest.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+import static org.hamcrest.CoreMatchers.equalTo;\r\n+import static org.hamcrest.CoreMatchers.is;\r\n+import static org.junit.Assert.assertThat;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class MinHeapmergeUnitTest {\r\n+\r\n+    private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\r\n+    private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\r\n+\r\n+    @Test\r\n+    public void givenSortedArraysWhenMergedShouldReturnASingleSortedarray() {\r\n+        int[] resultArray = MinHeapMerge.merge(inputArray);\r\n+        assertThat(resultArray.length, is(equalTo(10)));\r\n+        assertThat(resultArray, is(equalTo(expectedArray)));\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void givenEmptyHeapNodesAndInputArrayWhenPopulatedShouldPopulateAndReturnResultArrayLength() {\r\n+        int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, new HeapNode[inputArray.length]);\r\n+        assertThat(size, is(equalTo(10)));\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void givenArrayAndHeapNodesAndResultArraySizeWhenMergedShouldReturnASingleSortedarray() {\r\n+        HeapNode[] heapNodes = new HeapNode[inputArray.length];\r\n+        int size = MinHeapMerge.populateHeapNodesAndDetermineResultingArrayLength(inputArray, heapNodes);\r\n+        int[] resultArray = MinHeapMerge.createMinHeapAndMergeArrays(inputArray, heapNodes, size);\r\n+        assertThat(resultArray.length, is(equalTo(10)));\r\n+        assertThat(resultArray, is(equalTo(expectedArray)));\r\n+    }\r\n+}\r",
    "output": "BAEL - 3482\n\nAdded unit test"
  },
  {
    "input": "diff --git a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n--- a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n+++ b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.vertxspring.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+\n+@Configuration\n+public class PortConfiguration {\n+\n+    private static final int DEFAULT_PORT = 8069;\n+\n+    @Profile(\"default\")\n+    @Bean\n+    public Integer defaultPort() {\n+        return DEFAULT_PORT;\n+    }\n+\n+    @Profile(\"test\")\n+    @Bean\n+    public Integer randomPort() {\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            return socket.getLocalPort();\n+\n+        } catch (IOException e) {\n+            return DEFAULT_PORT;\n+        }\n+    }\n+}\n\ndiff --git a/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java b/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n--- a/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n+++ b/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n@@ -1,5 +1,6 @@\n package com.baeldung.vertxspring.verticles;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n import io.vertx.core.AbstractVerticle;\n@@ -9,6 +10,9 @@\n @Component\n public class ServerVerticle extends AbstractVerticle {\n \n+    @Autowired\n+    private Integer defaultPort;\n+\n     private void getAllArticlesHandler(RoutingContext routingContext) {\n         vertx.eventBus()\n             .<String>send(ArticleRecipientVerticle.GET_ALL_ARTICLES, \"\", result -> {\n@@ -36,7 +40,7 @@ public void start() throws Exception {\n \n         vertx.createHttpServer()\n             .requestHandler(router::accept)\n-            .listen(config().getInteger(\"http.port\", 8080));\n+            .listen(config().getInteger(\"http.port\", defaultPort));\n     }\n \n }\n\ndiff --git a/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java b/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n--- a/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n+++ b/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n@@ -1,27 +1,33 @@\n package com.baeldung.vertxspring;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n+import static org.junit.Assert.assertEquals;\n+\n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringBootTest\n+@ActiveProfiles(\"test\")\n public class VertxSpringApplicationIntegrationTest {\n \n+    @Autowired\n+    private Integer port;\n+\n     private TestRestTemplate restTemplate = new TestRestTemplate();\n \n     @Test\n     public void givenUrl_whenReceivedArticles_thenSuccess() throws InterruptedException {\n-        ResponseEntity<String> responseEntity = restTemplate.getForEntity(\"http://localhost:8080/api/baeldung/articles\", String.class);\n+        ResponseEntity<String> responseEntity = restTemplate\n+                .getForEntity(\"http://localhost:\" + port + \"/api/baeldung/articles\", String.class);\n \n         assertEquals(200, responseEntity.getStatusCodeValue());\n     }\n-\n }\n \n ",
    "output": "Merge pull request #8395 from kwoyke/BAEL-3242\n\nBAEL-3242: Use random port for test execution in spring-vertx module"
  },
  {
    "input": "diff --git a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n--- a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n+++ b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n@@ -12,7 +12,6 @@ public class PortConfiguration {\n \n     private static final int DEFAULT_PORT = 8069;\n \n-\n     @Profile(\"default\")\n     @Bean\n     public Integer defaultPort() {",
    "output": "BAEL-3242: Fix formatting"
  },
  {
    "input": "diff --git a/gradle-6/dependency-constraints/src/main/java/com/baeldung/gradle/RxHelloWorld.java b/gradle-6/dependency-constraints/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n--- a/gradle-6/dependency-constraints/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n+++ b/gradle-6/dependency-constraints/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n@@ -2,17 +2,19 @@\n \n import com.google.common.collect.ImmutableList;\n import io.reactivex.Observable;\n+\n import java.util.List;\n \n /** Demonstrates a library type that returns an RxJava type. */\n public class RxHelloWorld {\n \n-  /** @return an {@link Observable} that emits events \"hello\" and \"world\" before completing. */\n-  public static Observable<String> hello() {\n-    // Guava ImmutableList class is an implementation detail.\n-    List<String> values = ImmutableList.of(\"hello\", \"world\");\n-    return Observable.fromIterable(values);\n-  }\n+    /** @return an {@link Observable} that emits events \"hello\" and \"world\" before completing. */\n+    public static Observable<String> hello() {\n+        // Guava ImmutableList class is an implementation detail.\n+        List<String> values = ImmutableList.of(\"hello\", \"world\");\n+        return Observable.fromIterable(values);\n+    }\n \n-  private RxHelloWorld() {}\n+    private RxHelloWorld() {\n+    }\n }\n\ndiff --git a/gradle-6/dependency-constraints/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java b/gradle-6/dependency-constraints/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n--- a/gradle-6/dependency-constraints/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n+++ b/gradle-6/dependency-constraints/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n@@ -1,14 +1,13 @@\n package com.baeldung.gradle;\n \n-import static com.baeldung.gradle.RxHelloWorld.hello;\n-\n import org.junit.jupiter.api.Test;\n \n+import static com.baeldung.gradle.RxHelloWorld.hello;\n+\n /** Unit test for {@link RxHelloWorld}. */\n final class RxHelloWorldUnitTest {\n \n-  @Test\n-  void it_emits_hello_world_values() {\n-    hello().test().assertValues(\"hello\", \"world\").assertComplete();\n-  }\n+    @Test void it_emits_hello_world_values() {\n+        hello().test().assertValues(\"hello\", \"world\").assertComplete();\n+    }\n }\n\ndiff --git a/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java b/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n--- a/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n+++ b/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n@@ -4,17 +4,15 @@\n import com.google.auto.service.AutoService;\n \n /** Recursive implementation of the {@link FibonacciSequenceGenerator}. */\n-@AutoService(FibonacciSequenceGenerator.class)\n-public final class RecursiveFibonacci implements FibonacciSequenceGenerator {\n+@AutoService(FibonacciSequenceGenerator.class) public final class RecursiveFibonacci implements FibonacciSequenceGenerator {\n \n-  @Override\n-  public int generate(int nth) {\n-    if (nth < 0) {\n-      throw new IllegalArgumentException(\"sequence number must be 0 or greater\");\n+    @Override public int generate(int nth) {\n+        if (nth < 0) {\n+            throw new IllegalArgumentException(\"sequence number must be 0 or greater\");\n+        }\n+        if (nth <= 1) {\n+            return nth;\n+        }\n+        return generate(nth - 1) + generate(nth - 2);\n     }\n-    if (nth <= 1) {\n-      return nth;\n-    }\n-    return generate(nth - 1) + generate(nth - 2);\n-  }\n }\n\ndiff --git a/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java b/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n--- a/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n+++ b/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n@@ -8,9 +8,7 @@\n  * the fibonacci-spi project.\n  */\n final class RecursiveFibonacciUnitTest implements FibonacciSequenceGeneratorFixture {\n-\n-  @Override\n-  public FibonacciSequenceGenerator provide() {\n-    return new RecursiveFibonacci();\n-  }\n+    @Override public FibonacciSequenceGenerator provide() {\n+        return new RecursiveFibonacci();\n+    }\n }\n\ndiff --git a/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java b/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n--- a/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n+++ b/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n@@ -3,9 +3,9 @@\n /** Describes an SPI for a Fibonacci sequence generator function. */\n public interface FibonacciSequenceGenerator {\n \n-  /**\n-   * @param nth the index of the number in the fibonacci sequence\n-   * @return the nth number in the fibonacci sequence\n-   */\n-  int generate(int nth);\n+    /**\n+     * @param nth the index of the number in the fibonacci sequence\n+     * @return the nth number in the fibonacci sequence\n+     */\n+    int generate(int nth);\n }\n\ndiff --git a/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java b/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n--- a/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n+++ b/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n@@ -1,31 +1,29 @@\n package com.baeldung.fibonacci;\n \n+import org.junit.jupiter.api.Test;\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-import org.junit.jupiter.api.Test;\n-\n /**\n  * Reusable test fixture for {@link FibonacciSequenceGenerator} implementations. Tests will be\n  * skipped if no such implementation exists.\n  */\n public interface FibonacciSequenceGeneratorFixture {\n \n-  /** @return the implementation of {@link FibonacciSequenceGenerator} to test. Must not be null */\n-  FibonacciSequenceGenerator provide();\n+    /** @return the implementation of {@link FibonacciSequenceGenerator} to test. Must not be null */\n+    FibonacciSequenceGenerator provide();\n \n-  @Test\n-  default void when_sequence_index_is_negative_then_throws() {\n-    final FibonacciSequenceGenerator generator = provide();\n-    assertThrows(IllegalArgumentException.class, () -> generator.generate(-1));\n-  }\n+    @Test default void when_sequence_index_is_negative_then_throws() {\n+        final FibonacciSequenceGenerator generator = provide();\n+        assertThrows(IllegalArgumentException.class, () -> generator.generate(-1));\n+    }\n \n-  @Test\n-  default void when_given_index_then_generates_fibonacci_number() {\n-    final FibonacciSequenceGenerator generator = provide();\n-    final int[] sequence = {0, 1, 1, 2, 3, 5, 8};\n-    for (int i = 0; i < sequence.length; i++) {\n-      assertEquals(sequence[i], generator.generate(i));\n+    @Test default void when_given_index_then_generates_fibonacci_number() {\n+        final FibonacciSequenceGenerator generator = provide();\n+        final int[] sequence = { 0, 1, 1, 2, 3, 5, 8 };\n+        for (int i = 0; i < sequence.length; i++) {\n+            assertEquals(sequence[i], generator.generate(i));\n+        }\n     }\n-  }\n }",
    "output": ":art: Gradle 6 - Format code"
  },
  {
    "input": "diff --git a/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java b/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n--- a/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n+++ b/gradle-6/fibonacci-recursive/src/main/java/com/baeldung/fibonacci/impl/RecursiveFibonacci.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.fibonacci.impl;\n+\n+import com.baeldung.fibonacci.FibonacciSequenceGenerator;\n+import com.google.auto.service.AutoService;\n+\n+/** Recursive implementation of the {@link FibonacciSequenceGenerator}. */\n+@AutoService(FibonacciSequenceGenerator.class)\n+public final class RecursiveFibonacci implements FibonacciSequenceGenerator {\n+\n+  @Override\n+  public int generate(int nth) {\n+    if (nth < 0) {\n+      throw new IllegalArgumentException(\"sequence number must be 0 or greater\");\n+    }\n+    if (nth <= 1) {\n+      return nth;\n+    }\n+    return generate(nth - 1) + generate(nth - 2);\n+  }\n+}\n\ndiff --git a/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java b/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n--- a/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n+++ b/gradle-6/fibonacci-recursive/src/test/java/com/baeldung/fibonacci/impl/RecursiveFibonacciUnitTest.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.fibonacci.impl;\n+\n+import com.baeldung.fibonacci.FibonacciSequenceGenerator;\n+import com.baeldung.fibonacci.FibonacciSequenceGeneratorFixture;\n+\n+/**\n+ * Unit test which reuses the {@link FibonacciSequenceGeneratorFixture} test mix-in exported from\n+ * the fibonacci-spi project.\n+ */\n+final class RecursiveFibonacciUnitTest implements FibonacciSequenceGeneratorFixture {\n+\n+  @Override\n+  public FibonacciSequenceGenerator provide() {\n+    return new RecursiveFibonacci();\n+  }\n+}\n\ndiff --git a/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java b/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n--- a/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n+++ b/gradle-6/fibonacci-spi/src/main/java/com/baeldung/fibonacci/FibonacciSequenceGenerator.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.fibonacci;\n+\n+/** Describes an SPI for a Fibonacci sequence generator function. */\n+public interface FibonacciSequenceGenerator {\n+\n+  /**\n+   * @param nth the index of the number in the fibonacci sequence\n+   * @return the nth number in the fibonacci sequence\n+   */\n+  int generate(int nth);\n+}\n\ndiff --git a/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java b/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n--- a/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n+++ b/gradle-6/fibonacci-spi/src/testFixtures/java/com/baeldung/fibonacci/FibonacciSequenceGeneratorFixture.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.fibonacci;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Reusable test fixture for {@link FibonacciSequenceGenerator} implementations. Tests will be\n+ * skipped if no such implementation exists.\n+ */\n+public interface FibonacciSequenceGeneratorFixture {\n+\n+  /** @return the implementation of {@link FibonacciSequenceGenerator} to test. Must not be null */\n+  FibonacciSequenceGenerator provide();\n+\n+  @Test\n+  default void when_sequence_index_is_negative_then_throws() {\n+    final FibonacciSequenceGenerator generator = provide();\n+    assertThrows(IllegalArgumentException.class, () -> generator.generate(-1));\n+  }\n+\n+  @Test\n+  default void when_given_index_then_generates_fibonacci_number() {\n+    final FibonacciSequenceGenerator generator = provide();\n+    final int[] sequence = {0, 1, 1, 2, 3, 5, 8};\n+    for (int i = 0; i < sequence.length; i++) {\n+      assertEquals(sequence[i], generator.generate(i));\n+    }\n+  }\n+}",
    "output": ":construction: Gradle 6 - Test Fixtures"
  },
  {
    "input": "diff --git a/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java b/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n--- a/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n+++ b/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n@@ -1,8 +0,0 @@\n-package com.baeldung.gradle;\n-\n-public class HelloWorld {\n-\n-  public String sayHello() {\n-    return \"Hello, world!\";\n-  }\n-}\n\ndiff --git a/gradle-6/src/main/java/com/baeldung/gradle/RxHelloWorld.java b/gradle-6/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n--- a/gradle-6/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n+++ b/gradle-6/src/main/java/com/baeldung/gradle/RxHelloWorld.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.gradle;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Observable;\n+import java.util.List;\n+\n+/** Demonstrates a library type that returns an RxJava type. */\n+public class RxHelloWorld {\n+\n+  /** @return an {@link Observable} that emits events \"hello\" and \"world\" before completing. */\n+  public static Observable<String> hello() {\n+    // Guava ImmutableList class is an implementation detail.\n+    List<String> values = ImmutableList.of(\"hello\", \"world\");\n+    return Observable.fromIterable(values);\n+  }\n+\n+  private RxHelloWorld() {}\n+}\n\ndiff --git a/gradle-6/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java b/gradle-6/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n--- a/gradle-6/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n+++ b/gradle-6/src/test/java/com/baeldung/gradle/RxHelloWorldUnitTest.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.gradle;\n+\n+import static com.baeldung.gradle.RxHelloWorld.hello;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/** Unit test for {@link RxHelloWorld}. */\n+final class RxHelloWorldUnitTest {\n+\n+  @Test\n+  void it_emits_hello_world_values() {\n+    hello().test().assertValues(\"hello\", \"world\").assertComplete();\n+  }\n+}",
    "output": ":construction: Gradle 6 - Dependency constraints"
  },
  {
    "input": "diff --git a/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java b/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n--- a/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n+++ b/gradle-6/src/main/java/com/baeldung/gradle/HelloWorld.java\n@@ -0,0 +1,8 @@\n+package com.baeldung.gradle;\n+\n+public class HelloWorld {\n+\n+  public String sayHello() {\n+    return \"Hello, world!\";\n+  }\n+}",
    "output": ":construction: Gradle 6 - Publish Gradle Module Metadata"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.patternreuse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PatternJava11UnitTest {\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesThePatternInTheListElements() {\n+        List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Fabio Luis Silva\");\n+        Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n+\n+        Predicate<String> patternAsMatchPredicate = firstLastNamePreCompiledPattern.asMatchPredicate();\n+        List<String> validatedNames = namesToValidate.stream()\n+                .filter(patternAsMatchPredicate)\n+                .collect(Collectors.toList());\n+\n+        assertTrue(validatedNames.contains(\"Fabio Silva\"));\n+        assertFalse(validatedNames.contains(\"Fabio Luis Silva\"));\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n--- a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n+++ b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n@@ -0,0 +1,92 @@\n+package com.baeldung.patternreuse;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.RunnerException;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 1, warmups = 1)\n+@Warmup(iterations = 5)\n+@State(Scope.Benchmark)\n+public class PatternPerformanceComparison {\n+\n+    private static final String PATTERN = \"\\\\d*[02468]\";\n+    private static List<String> values;\n+\n+    private static Matcher matcherFromPreCompiledPattern;\n+    private static Pattern preCompiledPattern;\n+\n+    public static void main(String[] args) throws IOException, RunnerException {\n+        org.openjdk.jmh.Main.main(args);\n+    }\n+\n+    @Benchmark\n+    public void matcherFromPreCompiledPatternResetMatches(Blackhole bh) {\n+        //With pre-compiled pattern and reusing the matcher\n+        // 1 Pattern object created\n+        // 1 Matcher objects created\n+        for (String value : values) {\n+            bh.consume(matcherFromPreCompiledPattern.reset(value).matches());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void preCompiledPatternMatcherMatches(Blackhole bh) {\n+        // With pre-compiled pattern\n+        // 1         Pattern object created\n+        // 5_000_000 Matcher objects created\n+        for (String value : values) {\n+            bh.consume(preCompiledPattern.matcher(value).matches());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void patternCompileMatcherMatches(Blackhole bh) {\n+        // Above approach \"Pattern.matches(PATTERN, value)\" makes this internally\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        for (String value : values) {\n+            bh.consume(Pattern.compile(PATTERN).matcher(value).matches());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void patternMatches(Blackhole bh) {\n+        // Above approach \"value.matches(PATTERN)\" makes this internally\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        for (String value : values) {\n+            bh.consume(Pattern.matches(PATTERN, value));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void stringMatchs(Blackhole bh) {\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        Instant start = Instant.now();\n+        for (String value : values) {\n+            bh.consume(value.matches(PATTERN));\n+        }\n+    }\n+\n+    @Setup()\n+    public void setUp() {\n+        preCompiledPattern = Pattern.compile(PATTERN);\n+        matcherFromPreCompiledPattern = preCompiledPattern.matcher(\"\");\n+\n+        values = new ArrayList<>();\n+        for (int x = 1; x <= 5_000_000; x++) {\n+            values.add(String.valueOf(x));\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.patternreuse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.*;\n+\n+public class PatternUnitTest {\n+\n+    private static final Pattern FIRST_LAST_NAME_PRE_COMPILED_PATTERN = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n+    private static final Pattern SPLIT_PRE_COMPILED_PATTERN = Pattern.compile(\"__\");\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches() {\n+        Matcher matcherName1 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(\"Fabio Silva\");\n+        Matcher matcherName2 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(\"Mr. Silva\");\n+\n+        boolean matchesName1 = matcherName1.matches();\n+        boolean matchesName2 = matcherName2.matches();\n+\n+        assertTrue(matchesName1);\n+        assertFalse(matchesName2);\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindThePatternInTheListElements() {\n+        List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Mr. Silva\");\n+        Predicate<String> patternsAsPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asPredicate();\n+\n+        List<String> validNames = namesToValidate.stream()\n+                .filter(patternsAsPredicate)\n+                .collect(Collectors.toList());\n+\n+        assertEquals(1, validNames.size());\n+        assertTrue(validNames.contains(\"Fabio Silva\"));\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplitByThePattern() {\n+        String[] textSplit = SPLIT_PRE_COMPILED_PATTERN.split(\"My_Name__is__Fabio_Silva\");\n+\n+        assertEquals(\"My_Name\", textSplit[0]);\n+        assertEquals(\"is\", textSplit[1]);\n+        assertEquals(\"Fabio_Silva\", textSplit[2]);\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArrayWithValuesSplitByThePattern() {\n+        Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(\"My_Name__is__Fabio_Silva\");\n+        String[] textSplit = textSplitAsStream.toArray(String[]::new);\n+\n+        assertEquals(\"My_Name\", textSplit[0]);\n+        assertEquals(\"is\", textSplit[1]);\n+        assertEquals(\"Fabio_Silva\", textSplit[2]);\n+    }\n+}",
    "output": "Merge pull request #8321 from silvafabio/master\n\nPre-compile the regex pattern into a Pattern object and reuse"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-arrays-2/src/test/java/com/baeldung/arraysort/SortComparisonUnitTest.java b/core-java-modules/core-java-arrays-2/src/test/java/com/baeldung/arraysort/SortComparisonUnitTest.java\n--- a/core-java-modules/core-java-arrays-2/src/test/java/com/baeldung/arraysort/SortComparisonUnitTest.java\n+++ b/core-java-modules/core-java-arrays-2/src/test/java/com/baeldung/arraysort/SortComparisonUnitTest.java\n@@ -0,0 +1,185 @@\n+package com.baeldung.arraysort;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+/**\n+ * Time taken by JUnit test cases can be seen in JUnit Runner\n+ * @author rchaudhary23\n+ *\n+ */\n+\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class SortComparisonUnitTest {\n+\n+    private int[] sizeOfArrays = { 1000, 10000, 100000, 1000000 };\n+\n+    private int[] _1000_elements_array;\n+    private int[] _10000_elements_array;\n+    private int[] _100000_elements_array;\n+    private int[] _1000000_elements_array;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        _1000_elements_array = new int[sizeOfArrays[0]];\n+        _10000_elements_array = new int[sizeOfArrays[1]];\n+        _100000_elements_array = new int[sizeOfArrays[2]];\n+        _1000000_elements_array = new int[sizeOfArrays[3]];\n+\n+        Random random = new Random();\n+        for (int i = 0; i < sizeOfArrays[0]; i++) {\n+            _1000_elements_array[i] = random.nextInt(sizeOfArrays[0]) + random.nextInt(sizeOfArrays[0]);\n+        }\n+\n+        for (int i = 0; i < sizeOfArrays[1]; i++) {\n+            _10000_elements_array[i] = random.nextInt(sizeOfArrays[1]) + random.nextInt(sizeOfArrays[1]);\n+        }\n+\n+        for (int i = 0; i < sizeOfArrays[2]; i++) {\n+            _100000_elements_array[i] = random.nextInt(sizeOfArrays[2]) + random.nextInt(sizeOfArrays[2]);\n+        }\n+\n+        for (int i = 0; i < sizeOfArrays[3]; i++) {\n+            _1000000_elements_array[i] = random.nextInt(sizeOfArrays[3]) + random.nextInt(sizeOfArrays[3]);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void givenArrayOfIntegers_whenUsingArraysSortMethod_thenSortFullArrayInAscendingOrder() {\n+\n+        int[] array = { 10, 4, 6, 2, 1, 9, 7, 8, 3, 5 };\n+        int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+\n+        Arrays.sort(array);\n+\n+        assertArrayEquals(expected, array);\n+\n+    }\n+\n+    @Test\n+    public void givenArrayOfIntegers_whenUsingArraysSortMethodWithRange_thenSortRangeOfArrayInAscendingOrder() {\n+        int[] array = { 10, 4, 6, 2, 1, 9, 7, 8, 3, 5 };\n+        int[] expected = { 10, 4, 1, 2, 6, 7, 8, 9, 3, 5 };\n+\n+        Arrays.sort(array, 2, 8);\n+\n+        assertArrayEquals(expected, array);\n+    }\n+\n+    @Test\n+    public void givenArrayOfIntegers_whenUsingArraysParallelSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] array = { 10, 4, 6, 2, 1, 9, 7, 8, 3, 5 };\n+        int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+\n+        Arrays.parallelSort(array);\n+\n+        assertArrayEquals(expected, array);\n+    }\n+\n+    @Test\n+    public void givenArrayOfIntegers_whenUsingArraysParallelSortMethodWithRange_thenSortRangeOfArrayInAscendingOrder() {\n+        int[] array = { 10, 4, 6, 2, 1, 9, 7, 8, 3, 5 };\n+        int[] expected = { 10, 4, 1, 2, 6, 7, 8, 9, 3, 5 };\n+\n+        Arrays.parallelSort(array, 2, 8);\n+\n+        assertArrayEquals(expected, array);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf1000Elements_whenUsingArraysSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] sequentialDataSet = Arrays.copyOf(_1000_elements_array, _1000_elements_array.length);\n+        Arrays.sort(sequentialDataSet);\n+\n+        assertNotNull(sequentialDataSet);\n+        assertNotSame(Arrays.copyOf(_1000_elements_array, _1000_elements_array.length), sequentialDataSet);\n+\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf1000Elements_whenUsingArraysParallelSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] parallelDataSet = Arrays.copyOf(_1000_elements_array, _1000_elements_array.length);\n+        Arrays.parallelSort(parallelDataSet);\n+\n+        assertNotNull(parallelDataSet);\n+        assertNotSame(Arrays.copyOf(_1000_elements_array, _1000_elements_array.length), parallelDataSet);\n+\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf10000Elements_whenUsingArraysSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] sequentialDataSet = Arrays.copyOf(_10000_elements_array, _10000_elements_array.length);\n+        Arrays.sort(sequentialDataSet);\n+\n+        assertNotNull(sequentialDataSet);\n+        assertNotSame(Arrays.copyOf(_10000_elements_array, _10000_elements_array.length), sequentialDataSet);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf10000Elements_whenUsingArraysParallelSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] parallelDataSet = Arrays.copyOf(_10000_elements_array, _10000_elements_array.length);\n+        Arrays.parallelSort(parallelDataSet);\n+\n+        assertNotNull(parallelDataSet);\n+        assertNotSame(Arrays.copyOf(_10000_elements_array, _10000_elements_array.length), parallelDataSet);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf100000Elements_whenUsingArraysSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] sequentialDataSet = Arrays.copyOf(_100000_elements_array, _100000_elements_array.length);\n+        Arrays.sort(sequentialDataSet);\n+\n+        assertNotNull(sequentialDataSet);\n+        assertNotSame(Arrays.copyOf(_100000_elements_array, _100000_elements_array.length), sequentialDataSet);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf100000Elements_whenUsingArraysParallelSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] parallelDataSet = Arrays.copyOf(_100000_elements_array, _100000_elements_array.length);\n+        Arrays.parallelSort(parallelDataSet);\n+\n+        assertNotNull(parallelDataSet);\n+        assertNotSame(Arrays.copyOf(_100000_elements_array, _100000_elements_array.length), parallelDataSet);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf1000000Elements_whenUsingArraysSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] sequentialDataSet = Arrays.copyOf(_1000000_elements_array, _1000000_elements_array.length);\n+        Arrays.sort(sequentialDataSet);\n+\n+        assertNotNull(sequentialDataSet);\n+        assertNotSame(Arrays.copyOf(_1000000_elements_array, _1000000_elements_array.length), sequentialDataSet);\n+    }\n+\n+    @Test\n+    public void givenIntegerArrayOf1000000Elements_whenUsingArraysParallelSortMethod_thenSortFullArrayInAscendingOrder() {\n+        int[] parallelDataSet = Arrays.copyOf(_1000000_elements_array, _1000000_elements_array.length);\n+        Arrays.parallelSort(parallelDataSet);\n+\n+        assertNotNull(parallelDataSet);\n+        assertNotSame(Arrays.copyOf(_1000000_elements_array, _1000000_elements_array.length), parallelDataSet);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        sizeOfArrays = null;\n+        _1000_elements_array = null;\n+        _10000_elements_array = null;\n+        _100000_elements_array = null;\n+        _1000000_elements_array = null;\n+    }\n+}\n+\n+",
    "output": "BAEL-3380 (#8335)\n\n* initial commit\r\n\r\n* changes for articlesBAEL-3380\r\n\r\n* Removed evaluation article files\r\n\r\n* BAEL-3380\r\n\r\n* adding test case BAEL-3380\r\n\r\n* BAEL-3380\r\n\r\n* BAEL-3380 - updated tests and removed main class\r\n\r\n* BAEL-3380 - Updated Test class name\r\n\r\n* BAEL-3380 - Updated Test class name\r\n\r\n* BAEL-3380 - Updated testcase names as per BDD naming convention"
  },
  {
    "input": "diff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GitHubUser.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GitHubUser.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GitHubUser.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GitHubUser.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.rest;\n+package com.baeldung.rest.jbehave;\n \n public class GitHubUser {\n \n\ndiff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GithubUserResponsePayloadSteps.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GithubUserResponsePayloadSteps.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GithubUserResponsePayloadSteps.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/GithubUserResponsePayloadSteps.java\n@@ -1,11 +1,6 @@\n package com.baeldung.rest.jbehave;\n \n import org.apache.http.HttpResponse;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.methods.HttpUriRequest;\n-import org.apache.http.impl.client.HttpClientBuilder;\n-import org.baeldung.rest.GitHubUser;\n-import org.baeldung.rest.RetrieveUtil;\n import org.hamcrest.Matchers;\n import org.jbehave.core.annotations.Given;\n import org.jbehave.core.annotations.Then;\n\ndiff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/RetrieveUtil.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/RetrieveUtil.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/RetrieveUtil.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/jbehave/RetrieveUtil.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.rest;\n+package com.baeldung.rest.jbehave;\n \n import java.io.IOException;\n ",
    "output": "BAEL-19988: Migrate rest-testing module to the com.baeldung package"
  },
  {
    "input": "diff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Department.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Department.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Department.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Department.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.easy.random.model;\n+package com.baeldung.easy.random.model;\n \n import java.util.StringJoiner;\n \n\ndiff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Employee.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Employee.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Employee.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Employee.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.easy.random.model;\n+package com.baeldung.easy.random.model;\n \n import java.util.*;\n \n\ndiff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Grade.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Grade.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Grade.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Grade.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.easy.random.model;\n+package com.baeldung.easy.random.model;\n \n import java.util.StringJoiner;\n \n\ndiff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Person.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Person.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Person.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/Person.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.easy.random.model;\n+package com.baeldung.easy.random.model;\n \n import java.util.StringJoiner;\n \n\ndiff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/YearQuarter.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/YearQuarter.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/YearQuarter.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/model/YearQuarter.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.easy.random.model;\n+package com.baeldung.easy.random.model;\n \n import java.time.LocalDate;\n import java.util.Objects;\n\ndiff --git a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/randomizer/YearQuarterRandomizer.java b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/randomizer/YearQuarterRandomizer.java\n--- a/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/randomizer/YearQuarterRandomizer.java\n+++ b/testing-modules/easy-random/src/main/java/com/baeldung/easy/random/randomizer/YearQuarterRandomizer.java\n@@ -1,6 +1,6 @@\n-package org.baeldung.easy.random.randomizer;\n+package com.baeldung.easy.random.randomizer;\n \n-import org.baeldung.easy.random.model.YearQuarter;\n+import com.baeldung.easy.random.model.YearQuarter;\n import org.jeasy.random.api.Randomizer;\n \n import java.time.LocalDate;\n\ndiff --git a/testing-modules/easy-random/src/test/java/com/baeldung/easy/random/EasyRandomUnitTest.java b/testing-modules/easy-random/src/test/java/com/baeldung/easy/random/EasyRandomUnitTest.java\n--- a/testing-modules/easy-random/src/test/java/com/baeldung/easy/random/EasyRandomUnitTest.java\n+++ b/testing-modules/easy-random/src/test/java/com/baeldung/easy/random/EasyRandomUnitTest.java\n@@ -1,9 +1,9 @@\n-package org.baeldung.easy.random;\n+package com.baeldung.easy.random;\n \n-import org.baeldung.easy.random.model.Employee;\n-import org.baeldung.easy.random.model.Person;\n-import org.baeldung.easy.random.model.YearQuarter;\n-import org.baeldung.easy.random.randomizer.YearQuarterRandomizer;\n+import com.baeldung.easy.random.model.Employee;\n+import com.baeldung.easy.random.model.Person;\n+import com.baeldung.easy.random.model.YearQuarter;\n+import com.baeldung.easy.random.randomizer.YearQuarterRandomizer;\n import org.jeasy.random.EasyRandom;\n import org.jeasy.random.EasyRandomParameters;\n import org.jeasy.random.FieldPredicates;",
    "output": "BAEL-19988: Migrate easy-random module to the com.baeldung package"
  },
  {
    "input": "diff --git a/testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java b/testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java\n--- a/testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java\n+++ b/testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java\n@@ -5,7 +5,7 @@\n import org.junit.runner.RunWith;\n \n @RunWith(JUnitPlatform.class)\n-@SelectPackages({ \"org.baeldung.java.suite.childpackage1\", \"org.baeldung.java.suite.childpackage2\" })\n+@SelectPackages({ \"com.baeldung.java.suite.childpackage1\", \"com.baeldung.java.suite.childpackage2\" })\n public class SelectPackagesSuiteUnitTest {\n \n }",
    "output": "BAEL-19988: Rename org.baeldung package to com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n--- a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n+++ b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n@@ -1,6 +1,7 @@\n package com.baeldung.patternreuse;\n \n import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n import org.openjdk.jmh.runner.RunnerException;\n \n import java.io.IOException;\n@@ -29,52 +30,52 @@ public static void main(String[] args) throws IOException, RunnerException {\n     }\n \n     @Benchmark\n-    public void matcherFromPreCompiledPatternResetMatches() {\n+    public void matcherFromPreCompiledPatternResetMatches(Blackhole bh) {\n         //With pre-compiled pattern and reusing the matcher\n         // 1 Pattern object created\n         // 1 Matcher objects created\n         for (String value : values) {\n-            matcherFromPreCompiledPattern.reset(value).matches();\n+            bh.consume(matcherFromPreCompiledPattern.reset(value).matches());\n         }\n     }\n \n     @Benchmark\n-    public void preCompiledPatternMatcherMatches() {\n+    public void preCompiledPatternMatcherMatches(Blackhole bh) {\n         // With pre-compiled pattern\n         // 1         Pattern object created\n         // 5_000_000 Matcher objects created\n         for (String value : values) {\n-            preCompiledPattern.matcher(value).matches();\n+            bh.consume(preCompiledPattern.matcher(value).matches());\n         }\n     }\n \n     @Benchmark\n-    public void patternCompileMatcherMatches() {\n+    public void patternCompileMatcherMatches(Blackhole bh) {\n         // Above approach \"Pattern.matches(PATTERN, value)\" makes this internally\n         // 5_000_000 Pattern objects created\n         // 5_000_000 Matcher objects created\n         for (String value : values) {\n-            Pattern.compile(PATTERN).matcher(value).matches();\n+            bh.consume(Pattern.compile(PATTERN).matcher(value).matches());\n         }\n     }\n \n     @Benchmark\n-    public void patternMatches() {\n+    public void patternMatches(Blackhole bh) {\n         // Above approach \"value.matches(PATTERN)\" makes this internally\n         // 5_000_000 Pattern objects created\n         // 5_000_000 Matcher objects created\n         for (String value : values) {\n-            Pattern.matches(PATTERN, value);\n+            bh.consume(Pattern.matches(PATTERN, value));\n         }\n     }\n \n     @Benchmark\n-    public void stringMatchs() {\n+    public void stringMatchs(Blackhole bh) {\n         // 5_000_000 Pattern objects created\n         // 5_000_000 Matcher objects created\n         Instant start = Instant.now();\n         for (String value : values) {\n-            value.matches(PATTERN);\n+            bh.consume(value.matches(PATTERN));\n         }\n     }\n ",
    "output": "Josh Cummings suggestions: JMH documentation states that benchmark methods should return a value in order to defend against Dead Code Elimination"
  },
  {
    "input": "diff --git a/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/User.java b/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/User.java\n--- a/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/User.java\n+++ b/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/User.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.mockito.repository;\n+package com.baeldung.mockito.repository;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n\ndiff --git a/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/UserRepository.java b/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/UserRepository.java\n--- a/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/UserRepository.java\n+++ b/testing-modules/spring-testing/src/main/java/com/baeldung/mockito/repository/UserRepository.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.mockito.repository;\n+package com.baeldung.mockito.repository;\n \n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.stereotype.Repository;\n\ndiff --git a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/Employee.java b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/Employee.java\n--- a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/Employee.java\n+++ b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/Employee.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.reflectiontestutils.repository;\n+package com.baeldung.reflectiontestutils.repository;\n \n public class Employee {\n     private Integer id;\n\ndiff --git a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/EmployeeService.java b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/EmployeeService.java\n--- a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/EmployeeService.java\n+++ b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/EmployeeService.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.reflectiontestutils.repository;\n+package com.baeldung.reflectiontestutils.repository;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n\ndiff --git a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/HRService.java b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/HRService.java\n--- a/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/HRService.java\n+++ b/testing-modules/spring-testing/src/main/java/com/baeldung/reflectiontestutils/repository/HRService.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.reflectiontestutils.repository;\n+package com.baeldung.reflectiontestutils.repository;\n \n import org.springframework.stereotype.Component;\n \n\ndiff --git a/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockAnnotationUnitTest.java b/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockAnnotationUnitTest.java\n--- a/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockAnnotationUnitTest.java\n+++ b/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockAnnotationUnitTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung.mockito;\n+package com.baeldung.mockito;\n \n-import org.baeldung.mockito.repository.UserRepository;\n+import com.baeldung.mockito.repository.UserRepository;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n\ndiff --git a/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockBeanAnnotationIntegrationTest.java b/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockBeanAnnotationIntegrationTest.java\n--- a/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockBeanAnnotationIntegrationTest.java\n+++ b/testing-modules/spring-testing/src/test/java/com/baeldung/mockito/MockBeanAnnotationIntegrationTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung.mockito;\n+package com.baeldung.mockito;\n \n-import org.baeldung.mockito.repository.UserRepository;\n+import com.baeldung.mockito.repository.UserRepository;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n\ndiff --git a/testing-modules/spring-testing/src/test/java/com/baeldung/reflectiontestutils/ReflectionTestUtilsUnitTest.java b/testing-modules/spring-testing/src/test/java/com/baeldung/reflectiontestutils/ReflectionTestUtilsUnitTest.java\n--- a/testing-modules/spring-testing/src/test/java/com/baeldung/reflectiontestutils/ReflectionTestUtilsUnitTest.java\n+++ b/testing-modules/spring-testing/src/test/java/com/baeldung/reflectiontestutils/ReflectionTestUtilsUnitTest.java\n@@ -1,11 +1,11 @@\n-package org.baeldung.reflectiontestutils;\n+package com.baeldung.reflectiontestutils;\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.mock;\n \n-import org.baeldung.reflectiontestutils.repository.Employee;\n-import org.baeldung.reflectiontestutils.repository.EmployeeService;\n-import org.baeldung.reflectiontestutils.repository.HRService;\n+import com.baeldung.reflectiontestutils.repository.EmployeeService;\n+import com.baeldung.reflectiontestutils.repository.HRService;\n+import com.baeldung.reflectiontestutils.repository.Employee;\n import org.junit.Test;\n import org.springframework.test.util.ReflectionTestUtils;\n ",
    "output": "BAEL-19988: Migrate spring-testing module to the com.baeldung package"
  },
  {
    "input": "diff --git a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n@@ -7,7 +7,7 @@\n import org.junit.Test;\n import ninja.NinjaDocTester;\n \n-public class ApiControllerDocTesterUnitTest extends NinjaDocTester {\n+public class ApiControllerDocTesterTest extends NinjaDocTester {\n     \n     String URL_INDEX = \"/\";\n     String URL_HELLO = \"/hello\";",
    "output": "Test name fixes"
  },
  {
    "input": "diff --git a/java-async/src/main/java/com/baeldung/async/Async.java b/java-async/src/main/java/com/baeldung/async/Async.java\n--- a/java-async/src/main/java/com/baeldung/async/Async.java\n+++ b/java-async/src/main/java/com/baeldung/async/Async.java\n@@ -0,0 +1,46 @@\n+package com.baeldung.async;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+public class Async {\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"hello world!!\");\n+\n+        try {\n+            Future<String> completableFuture = calculateAsync();\n+\n+            String result = completableFuture.get();\n+            \n+            System.out.println(result);\n+\n+        } catch (InterruptedException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ExecutionException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        \n+        \n+        CompletableFuture.runAsync(() -> {\n+            System.out.println(\"This is Async\");\n+        });\n+    }\n+\n+    public static Future<String> calculateAsync() throws InterruptedException {\n+        CompletableFuture<String> completableFuture = new CompletableFuture<>();\n+\n+        Executors.newCachedThreadPool().submit(() -> {\n+            Thread.sleep(500);\n+            completableFuture.complete(\"Hello\");\n+            return null;\n+        });\n+\n+        return completableFuture;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/java-async/src/main/resources/com/baeldung/async/AsyncUnitTest.java b/java-async/src/main/resources/com/baeldung/async/AsyncUnitTest.java\n--- a/java-async/src/main/resources/com/baeldung/async/AsyncUnitTest.java\n+++ b/java-async/src/main/resources/com/baeldung/async/AsyncUnitTest.java\n@@ -0,0 +1,9 @@\n+package com.baeldung.async;\n+\n+public class AsyncUnitTest {\n+    \n+    public static void main(String[] args) {\n+        System.out.println(\"hello\");\n+    }\n+    \n+}\n\\ No newline at end of file",
    "output": "Initial Commit"
  },
  {
    "input": "diff --git a/ninja/src/test/java/controllers/ApiControllerMockTest.java b/ninja/src/test/java/controllers/ApiControllerMockTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerMockTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerMockTest.java\n@@ -10,7 +10,7 @@\n import services.UserService;\n \n @RunWith(NinjaRunner.class)\n-public class ApiControllerMockTest {\n+public class ApiControllerMockUnitTest {\n \n     @Inject private UserService userService;\n ",
    "output": "Updated ApiControllerMockUnitTest"
  },
  {
    "input": "diff --git a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n@@ -7,7 +7,7 @@\n import org.junit.Test;\n import ninja.NinjaDocTester;\n \n-public class ApiControllerDocTesterTest extends NinjaDocTester {\n+public class ApiControllerDocTesterUnitTest extends NinjaDocTester {\n     \n     String URL_INDEX = \"/\";\n     String URL_HELLO = \"/hello\";",
    "output": "Updated ApiControllerDocTesterUnitTest"
  },
  {
    "input": "diff --git a/ninja/src/main/java/controllers/ApplicationController.java b/ninja/src/main/java/controllers/ApplicationController.java\n--- a/ninja/src/main/java/controllers/ApplicationController.java\n+++ b/ninja/src/main/java/controllers/ApplicationController.java\n@@ -40,7 +40,7 @@ public class ApplicationController {\n     private static Log logger = LogFactory.getLog(ApplicationController.class);\n     \n     @Inject \n-    Provider<EntityManager> entitiyManagerProvider;\n+    Provider<EntityManager> entityManagerProvider;\n \n     @Inject\n     UserService userService;\n@@ -77,7 +77,7 @@ public Result createUser() {\n     \n     @UnitOfWork\n     public Result fetchUsers() {\n-        EntityManager entityManager = entitiyManagerProvider.get();\n+        EntityManager entityManager = entityManagerProvider.get();\n         Query q = entityManager.createQuery(\"SELECT x FROM User x\");\n         List<User> users = (List<User>) q.getResultList();\n         return Results.json().render(users);\n@@ -90,7 +90,7 @@ public Result insertUser(FlashScope flashScope, @JSR303Validation User user, Val\n         if (validation.getViolations().size() > 0) {\n             flashScope.error(\"Validation Error: User can't be created\");\n         } else {\n-            EntityManager entityManager = entitiyManagerProvider.get();\n+            EntityManager entityManager = entityManagerProvider.get();\n             entityManager.persist(user);\n             entityManager.flush();\n             flashScope.success(\"User '\" + user + \"' is created successfully\");",
    "output": "typo corrected"
  },
  {
    "input": "diff --git a/spring-reactor/src/main/java/com/baeldung/Config.java b/spring-reactor/src/main/java/com/baeldung/Config.java\n--- a/spring-reactor/src/main/java/com/baeldung/Config.java\n+++ b/spring-reactor/src/main/java/com/baeldung/Config.java\n@@ -2,21 +2,19 @@\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-\n import reactor.Environment;\n import reactor.bus.EventBus;\n \n @Configuration\n public class Config {\n \n     @Bean\n-    Environment env() {\n+    public Environment env() {\n         return Environment.initializeIfEmpty().assignErrorJournal();\n     }\n \n     @Bean\n-    EventBus createEventBus(Environment env) {\n+    public EventBus createEventBus(Environment env) {\n         return EventBus.create(env, Environment.THREAD_POOL);\n     }\n-    \n }\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java b/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n--- a/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n+++ b/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n@@ -26,5 +26,4 @@ public void run(String... args) throws Exception {\n     public static void main(String[] args) {\n         SpringApplication.run(NotificationApplication.class, args);\n     }\n-\n }\n\ndiff --git a/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java b/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n--- a/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n+++ b/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n@@ -19,6 +19,4 @@ public void givenAppStarted_whenNotificationTasksSubmitted_thenProcessed() {\n         RestTemplate restTemplate = new RestTemplate();\n         restTemplate.getForObject(\"http://localhost:\" + port + \"/startNotification/10\", String.class);\n     }\n-\n-\n }",
    "output": "BAEL-19928: Further minor improvements"
  },
  {
    "input": "diff --git a/webrtc/src/main/java/com/baeldung/webrtc/SocketHandler.java b/webrtc/src/main/java/com/baeldung/webrtc/SocketHandler.java\n--- a/webrtc/src/main/java/com/baeldung/webrtc/SocketHandler.java\n+++ b/webrtc/src/main/java/com/baeldung/webrtc/SocketHandler.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.webrtc;\n+\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.socket.TextMessage;\n+import org.springframework.web.socket.WebSocketSession;\n+import org.springframework.web.socket.handler.TextWebSocketHandler;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+@Component\n+public class SocketHandler extends TextWebSocketHandler {\n+\n+    List<WebSocketSession> sessions = new CopyOnWriteArrayList<>();\n+\n+    @Override\n+    public void handleTextMessage(WebSocketSession session, TextMessage message) throws InterruptedException, IOException {\n+\n+        for (WebSocketSession webSocketSession : sessions) {\n+            if (webSocketSession.isOpen() && !session.getId().equals(webSocketSession.getId())) {\n+                webSocketSession.sendMessage(message);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n+        sessions.add(session);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/webrtc/src/main/java/com/baeldung/webrtc/WebRTCDemoApplication.java b/webrtc/src/main/java/com/baeldung/webrtc/WebRTCDemoApplication.java\n--- a/webrtc/src/main/java/com/baeldung/webrtc/WebRTCDemoApplication.java\n+++ b/webrtc/src/main/java/com/baeldung/webrtc/WebRTCDemoApplication.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.webrtc;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class WebRTCDemoApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(WebRTCDemoApplication.class, args);\n+    }\n+}\n\ndiff --git a/webrtc/src/main/java/com/baeldung/webrtc/WebSocketConfiguration.java b/webrtc/src/main/java/com/baeldung/webrtc/WebSocketConfiguration.java\n--- a/webrtc/src/main/java/com/baeldung/webrtc/WebSocketConfiguration.java\n+++ b/webrtc/src/main/java/com/baeldung/webrtc/WebSocketConfiguration.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.webrtc;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.socket.config.annotation.EnableWebSocket;\n+import org.springframework.web.socket.config.annotation.WebSocketConfigurer;\n+import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n+\n+@Configuration\n+@EnableWebSocket\n+public class WebSocketConfiguration implements WebSocketConfigurer {\n+\n+    @Override\n+    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n+        registry.addHandler(new SocketHandler(), \"/socket\")\n+            .setAllowedOrigins(\"*\");\n+    }\n+}",
    "output": "Changes for WebRTC (BAEL-3198) (#8213)\n\n* Adding webrtc changes\r\n\r\n* formatting\r\n\r\n* formatting pom\r\n\r\n* formatting\r\n\r\n* Adding space instead of tabs for indentation\r\n\r\n* formatting changes\r\n\r\n* Updating tabs to spaces"
  },
  {
    "input": "diff --git a/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java b/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n--- a/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n+++ b/spring-reactor/src/main/java/com/baeldung/NotificationApplication.java\n@@ -1,24 +1,16 @@\n package com.baeldung;\n \n+import com.baeldung.consumer.NotificationConsumer;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n-\n-import com.baeldung.consumer.NotificationConsumer;\n-\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n import reactor.bus.EventBus;\n \n import static reactor.bus.selector.Selectors.$;\n \n-@Configuration\n-@EnableAutoConfiguration\n-@ComponentScan\n-@Import(Config.class)\n-public class Application implements CommandLineRunner {\n+@SpringBootApplication\n+public class NotificationApplication implements CommandLineRunner {\n \n     @Autowired\n     private EventBus eventBus;\n@@ -32,7 +24,7 @@ public void run(String... args) throws Exception {\n     }\n \n     public static void main(String[] args) {\n-        SpringApplication.run(Application.class, args);\n+        SpringApplication.run(NotificationApplication.class, args);\n     }\n \n }\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/consumer/NotificationConsumer.java b/spring-reactor/src/main/java/com/baeldung/consumer/NotificationConsumer.java\n--- a/spring-reactor/src/main/java/com/baeldung/consumer/NotificationConsumer.java\n+++ b/spring-reactor/src/main/java/com/baeldung/consumer/NotificationConsumer.java\n@@ -3,7 +3,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import com.baeldung.doman.NotificationData;\n+import com.baeldung.domain.NotificationData;\n import com.baeldung.service.NotificationService;\n \n import reactor.bus.Event;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/controller/NotificationController.java b/spring-reactor/src/main/java/com/baeldung/controller/NotificationController.java\n--- a/spring-reactor/src/main/java/com/baeldung/controller/NotificationController.java\n+++ b/spring-reactor/src/main/java/com/baeldung/controller/NotificationController.java\n@@ -5,7 +5,7 @@\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.baeldung.doman.NotificationData;\n+import com.baeldung.domain.NotificationData;\n \n import reactor.bus.Event;\n import reactor.bus.EventBus;\n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/domain/NotificationData.java b/spring-reactor/src/main/java/com/baeldung/domain/NotificationData.java\n--- a/spring-reactor/src/main/java/com/baeldung/domain/NotificationData.java\n+++ b/spring-reactor/src/main/java/com/baeldung/domain/NotificationData.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.doman;\n+package com.baeldung.domain;\n \n public class NotificationData {\n \n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/service/NotificationService.java b/spring-reactor/src/main/java/com/baeldung/service/NotificationService.java\n--- a/spring-reactor/src/main/java/com/baeldung/service/NotificationService.java\n+++ b/spring-reactor/src/main/java/com/baeldung/service/NotificationService.java\n@@ -1,6 +1,6 @@\n package com.baeldung.service;\n \n-import com.baeldung.doman.NotificationData;\n+import com.baeldung.domain.NotificationData;\n \n public interface NotificationService {\n \n\ndiff --git a/spring-reactor/src/main/java/com/baeldung/service/impl/NotificationServiceimpl.java b/spring-reactor/src/main/java/com/baeldung/service/impl/NotificationServiceimpl.java\n--- a/spring-reactor/src/main/java/com/baeldung/service/impl/NotificationServiceimpl.java\n+++ b/spring-reactor/src/main/java/com/baeldung/service/impl/NotificationServiceimpl.java\n@@ -2,7 +2,7 @@\n \n import org.springframework.stereotype.Service;\n \n-import com.baeldung.doman.NotificationData;\n+import com.baeldung.domain.NotificationData;\n import com.baeldung.service.NotificationService;\n \n @Service\n\ndiff --git a/spring-reactor/src/test/java/com/baeldung/DataLoaderLiveTest.java b/spring-reactor/src/test/java/com/baeldung/DataLoaderLiveTest.java\n--- a/spring-reactor/src/test/java/com/baeldung/DataLoaderLiveTest.java\n+++ b/spring-reactor/src/test/java/com/baeldung/DataLoaderLiveTest.java\n@@ -1,14 +0,0 @@\n-package com.baeldung;\n-\n-import org.junit.Test;\n-import org.springframework.web.client.RestTemplate;\n-\n-public class DataLoaderLiveTest {\n-\n-    @Test\n-    public void exampleTest() {\n-        RestTemplate restTemplate = new RestTemplate();\n-        restTemplate.getForObject(\"http://localhost:8080/startNotification/10\", String.class);\n-    }\n-\n-}\n\ndiff --git a/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java b/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n--- a/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n+++ b/spring-reactor/src/test/java/com/baeldung/NotificationApplicationIntegrationTest.java\n@@ -0,0 +1,24 @@\n+package com.baeldung;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.web.client.RestTemplate;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class NotificationApplicationIntegrationTest {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    @Test\n+    public void givenAppStarted_whenNotificationTasksSubmitted_thenProcessed() {\n+        RestTemplate restTemplate = new RestTemplate();\n+        restTemplate.getForObject(\"http://localhost:\" + port + \"/startNotification/10\", String.class);\n+    }\n+\n+\n+}\n\ndiff --git a/spring-reactor/src/test/java/org/baeldung/SpringContextTest.java b/spring-reactor/src/test/java/org/baeldung/SpringContextTest.java\n--- a/spring-reactor/src/test/java/org/baeldung/SpringContextTest.java\n+++ b/spring-reactor/src/test/java/org/baeldung/SpringContextTest.java\n@@ -5,10 +5,10 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.Application;\n+import com.baeldung.NotificationApplication;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = Application.class)\n+@SpringBootTest(classes = NotificationApplication.class)\n public class SpringContextTest {\n \n     @Test",
    "output": "BAEL-19928: Refactor spring-reactor module"
  },
  {
    "input": "diff --git a/spring-shell/src/main/java/com/baeldung/shell/Main.java b/spring-shell/src/main/java/com/baeldung/shell/Main.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/Main.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/Main.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell;\n+package com.baeldung.shell;\n \n import java.io.IOException;\n import org.springframework.shell.Bootstrap;\n\ndiff --git a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleBannerProvider.java b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleBannerProvider.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleBannerProvider.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleBannerProvider.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n\ndiff --git a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleCLI.java b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleCLI.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleCLI.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleCLI.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n\ndiff --git a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleHistoryFileNameProvider.java b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleHistoryFileNameProvider.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleHistoryFileNameProvider.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleHistoryFileNameProvider.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n\ndiff --git a/spring-shell/src/main/java/com/baeldung/shell/simple/SimplePromptProvider.java b/spring-shell/src/main/java/com/baeldung/shell/simple/SimplePromptProvider.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/simple/SimplePromptProvider.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/simple/SimplePromptProvider.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n\ndiff --git a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleURLConverter.java b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleURLConverter.java\n--- a/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleURLConverter.java\n+++ b/spring-shell/src/main/java/com/baeldung/shell/simple/SimpleURLConverter.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import java.net.MalformedURLException;\n import java.net.URL;\n\ndiff --git a/spring-shell/src/test/java/com/baeldung/shell/simple/SimpleCLIIntegrationTest.java b/spring-shell/src/test/java/com/baeldung/shell/simple/SimpleCLIIntegrationTest.java\n--- a/spring-shell/src/test/java/com/baeldung/shell/simple/SimpleCLIIntegrationTest.java\n+++ b/spring-shell/src/test/java/com/baeldung/shell/simple/SimpleCLIIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.shell.simple;\n+package com.baeldung.shell.simple;\n \n import org.junit.AfterClass;\n import org.junit.Assert;",
    "output": "BAEL-19967: Migrate spring-shell module to the com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -1,8 +1,10 @@\n package com.baeldung.date.comparison;\r\n \r\n import java.text.SimpleDateFormat;\r\n+import java.time.Instant;\r\n import java.time.LocalDate;\r\n import java.time.ZoneId;\r\n+import java.time.temporal.ChronoUnit;\r\n import java.util.Calendar;\r\n import java.util.Date;\r\n import java.util.TimeZone;\r\n@@ -23,6 +25,14 @@ public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\n         return localDate1.isEqual(localDate2);\r\n     }\r\n \r\n+    public static boolean isSameDayUsingInstant(Date date1, Date date2) {\r\n+        Instant instant1 = date1.toInstant()\r\n+            .truncatedTo(ChronoUnit.DAYS);\r\n+        Instant instant2 = date2.toInstant()\r\n+            .truncatedTo(ChronoUnit.DAYS);\r\n+        return instant1.equals(instant2);\r\n+    }\r\n+\r\n     public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n         SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n         return fmt.format(date1)\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -1,13 +1,13 @@\n package com.baeldung.date.comparison;\r\n \r\n-import org.junit.Test;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n import java.time.LocalDateTime;\r\n import java.time.ZoneId;\r\n import java.util.Date;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n+import org.junit.Test;\r\n \r\n public class DateComparisonUtilsUnitTest {\r\n \r\n@@ -23,6 +23,7 @@ private Date toDate(LocalDateTime localDateTime) {\n     @Test\r\n     public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n         assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n@@ -35,6 +36,9 @@ public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n \r\n+        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Evening, day2Morning));\r\n+\r\n         assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n         assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n \r",
    "output": "BAEL-3632 Using Instant to check if Two Java Dates are On Same Day"
  },
  {
    "input": "diff --git a/spring-akka/src/main/java/com/baeldung/akka/AppConfiguration.java b/spring-akka/src/main/java/com/baeldung/akka/AppConfiguration.java\n--- a/spring-akka/src/main/java/com/baeldung/akka/AppConfiguration.java\n+++ b/spring-akka/src/main/java/com/baeldung/akka/AppConfiguration.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import akka.actor.ActorSystem;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -7,8 +7,6 @@\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n \n-import static org.baeldung.akka.SpringExtension.SPRING_EXTENSION_PROVIDER;\n-\n @Configuration\n @ComponentScan\n public class AppConfiguration {\n@@ -19,7 +17,7 @@ public class AppConfiguration {\n     @Bean\n     public ActorSystem actorSystem() {\n         ActorSystem system = ActorSystem.create(\"akka-spring-demo\");\n-        SPRING_EXTENSION_PROVIDER.get(system).initialize(applicationContext);\n+        SpringExtension.SPRING_EXTENSION_PROVIDER.get(system).initialize(applicationContext);\n         return system;\n     }\n \n\ndiff --git a/spring-akka/src/main/java/com/baeldung/akka/GreetingActor.java b/spring-akka/src/main/java/com/baeldung/akka/GreetingActor.java\n--- a/spring-akka/src/main/java/com/baeldung/akka/GreetingActor.java\n+++ b/spring-akka/src/main/java/com/baeldung/akka/GreetingActor.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import akka.actor.UntypedActor;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n\ndiff --git a/spring-akka/src/main/java/com/baeldung/akka/GreetingService.java b/spring-akka/src/main/java/com/baeldung/akka/GreetingService.java\n--- a/spring-akka/src/main/java/com/baeldung/akka/GreetingService.java\n+++ b/spring-akka/src/main/java/com/baeldung/akka/GreetingService.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import org.springframework.stereotype.Component;\n \n\ndiff --git a/spring-akka/src/main/java/com/baeldung/akka/SpringActorProducer.java b/spring-akka/src/main/java/com/baeldung/akka/SpringActorProducer.java\n--- a/spring-akka/src/main/java/com/baeldung/akka/SpringActorProducer.java\n+++ b/spring-akka/src/main/java/com/baeldung/akka/SpringActorProducer.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import akka.actor.Actor;\n import akka.actor.IndirectActorProducer;\n\ndiff --git a/spring-akka/src/main/java/com/baeldung/akka/SpringExtension.java b/spring-akka/src/main/java/com/baeldung/akka/SpringExtension.java\n--- a/spring-akka/src/main/java/com/baeldung/akka/SpringExtension.java\n+++ b/spring-akka/src/main/java/com/baeldung/akka/SpringExtension.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import akka.actor.AbstractExtensionId;\n import akka.actor.ExtendedActorSystem;\n\ndiff --git a/spring-akka/src/test/java/com/baeldung/akka/SpringAkkaIntegrationTest.java b/spring-akka/src/test/java/com/baeldung/akka/SpringAkkaIntegrationTest.java\n--- a/spring-akka/src/test/java/com/baeldung/akka/SpringAkkaIntegrationTest.java\n+++ b/spring-akka/src/test/java/com/baeldung/akka/SpringAkkaIntegrationTest.java\n@@ -1,11 +1,11 @@\n-package org.baeldung.akka;\n+package com.baeldung.akka;\n \n import java.util.concurrent.TimeUnit;\n \n import akka.actor.ActorRef;\n import akka.actor.ActorSystem;\n import akka.util.Timeout;\n-import org.baeldung.akka.GreetingActor.Greet;\n+import com.baeldung.akka.GreetingActor.Greet;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -17,7 +17,7 @@\n import scala.concurrent.duration.FiniteDuration;\n \n import static akka.pattern.Patterns.ask;\n-import static org.baeldung.akka.SpringExtension.SPRING_EXTENSION_PROVIDER;\n+import static com.baeldung.akka.SpringExtension.SPRING_EXTENSION_PROVIDER;\n \n @ContextConfiguration(classes = AppConfiguration.class)\n public class SpringAkkaIntegrationTest extends AbstractJUnit4SpringContextTests {",
    "output": "BAEL-19967: Migrate spring-akka module to the com.baeldung package"
  },
  {
    "input": "diff --git a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n--- a/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n+++ b/spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.vertxspring.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+\n+@Configuration\n+public class PortConfiguration {\n+\n+    private static final int DEFAULT_PORT = 8069;\n+\n+\n+    @Profile(\"default\")\n+    @Bean\n+    public Integer defaultPort() {\n+        return DEFAULT_PORT;\n+    }\n+\n+    @Profile(\"test\")\n+    @Bean\n+    public Integer randomPort() {\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            return socket.getLocalPort();\n+\n+        } catch (IOException e) {\n+            return DEFAULT_PORT;\n+        }\n+    }\n+}\n\ndiff --git a/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java b/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n--- a/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n+++ b/spring-vertx/src/main/java/com/baeldung/vertxspring/verticles/ServerVerticle.java\n@@ -1,5 +1,6 @@\n package com.baeldung.vertxspring.verticles;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n import io.vertx.core.AbstractVerticle;\n@@ -9,6 +10,9 @@\n @Component\n public class ServerVerticle extends AbstractVerticle {\n \n+    @Autowired\n+    private Integer defaultPort;\n+\n     private void getAllArticlesHandler(RoutingContext routingContext) {\n         vertx.eventBus()\n             .<String>send(ArticleRecipientVerticle.GET_ALL_ARTICLES, \"\", result -> {\n@@ -36,7 +40,7 @@ public void start() throws Exception {\n \n         vertx.createHttpServer()\n             .requestHandler(router::accept)\n-            .listen(config().getInteger(\"http.port\", 8080));\n+            .listen(config().getInteger(\"http.port\", defaultPort));\n     }\n \n }\n\ndiff --git a/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java b/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n--- a/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n+++ b/spring-vertx/src/test/java/com/baeldung/vertxspring/VertxSpringApplicationIntegrationTest.java\n@@ -1,27 +1,33 @@\n package com.baeldung.vertxspring;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n+import static org.junit.Assert.assertEquals;\n+\n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringBootTest\n+@ActiveProfiles(\"test\")\n public class VertxSpringApplicationIntegrationTest {\n \n+    @Autowired\n+    private Integer port;\n+\n     private TestRestTemplate restTemplate = new TestRestTemplate();\n \n     @Test\n     public void givenUrl_whenReceivedArticles_thenSuccess() throws InterruptedException {\n-        ResponseEntity<String> responseEntity = restTemplate.getForEntity(\"http://localhost:8080/api/baeldung/articles\", String.class);\n+        ResponseEntity<String> responseEntity = restTemplate\n+                .getForEntity(\"http://localhost:\" + port + \"/api/baeldung/articles\", String.class);\n \n         assertEquals(200, responseEntity.getStatusCodeValue());\n     }\n-\n }\n \n ",
    "output": "BAEL-3242: Use random port for test execution in spring-vertx module"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java\n@@ -0,0 +1,88 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.MutableValueGraph;\n+import com.google.common.graph.ValueGraph;\n+import com.google.common.graph.ValueGraphBuilder;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class Kruskal {\n+\n+    public ValueGraph<Integer, Double> minSpanningTree(ValueGraph<Integer, Double> graph) {\n+        \n+        return spanningTree(graph, true);\n+    }\n+\n+    public ValueGraph<Integer, Double> maxSpanningTree(ValueGraph<Integer, Double> graph) {\n+        return spanningTree(graph, false);\n+    }\n+\n+    private ValueGraph<Integer, Double> spanningTree(ValueGraph<Integer, Double> graph, boolean minSpanningTree) {\n+        Set<EndpointPair<Integer>> edges = graph.edges();\n+        List<EndpointPair<Integer>> edgeList = new ArrayList<>(edges);\n+\n+        if (minSpanningTree) {\n+            edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n+        } else {\n+            edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n+        }\n+\n+        int totalEdges = edgeList.size();\n+        int totalNodes = graph.nodes().size();\n+        int edgeCount = 0;\n+        List<Integer> roots = new ArrayList<>(totalNodes);\n+        List<Integer> sizes = new ArrayList<>(totalNodes);\n+        for (int i = 0; i < totalNodes; i++) {\n+            roots.add(i);\n+            sizes.add(1);\n+        }\n+\n+        MutableValueGraph<Integer, Double> spanningTree = ValueGraphBuilder.undirected().build();\n+        for (int i = 0; i < totalEdges; i++) {\n+            EndpointPair<Integer> edge = edgeList.get(i);\n+            if (detectCycle(edge.nodeU(), edge.nodeV(), roots, sizes)) {\n+                continue;\n+            }\n+            spanningTree.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge).get());\n+            edgeCount++;\n+            if (edgeCount == totalNodes - 1) {\n+                break;\n+            }\n+        }\n+        return spanningTree;\n+    }\n+\n+    private Integer find(Integer x, List<Integer> roots) {\n+        Integer root = roots.get(x);\n+        if (!root.equals(x)) {\n+            roots.set(x, find(root, roots));\n+        }\n+        return roots.get(x);\n+    }\n+\n+    private void unionBySize(Integer rootU, Integer rootV, List<Integer> roots, List<Integer> sizes) {\n+        Integer total = sizes.get(rootU) + sizes.get(rootV);\n+        if (sizes.get(rootU) < sizes.get(rootV)) {\n+            roots.set(rootU, rootV);\n+            sizes.set(rootV, total);\n+        } else {\n+            roots.set(rootV, rootU);\n+            sizes.set(rootU, total);\n+        }\n+    }\n+\n+    private boolean detectCycle(Integer u, Integer v, List<Integer> roots, List<Integer> sizes) {\n+        Integer rootU = find(u, roots);\n+        Integer rootV = find(v, roots);\n+        if (rootU.equals(rootV)) {\n+            return true;\n+        }\n+        unionBySize(rootU, rootV, roots, sizes);\n+        return false;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/kruskal/KruskalUnitTest.java\n@@ -0,0 +1,66 @@\n+package com.baeldung.algorithms.kruskal;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import com.google.common.graph.MutableValueGraph;\n+import com.google.common.graph.ValueGraph;\n+import com.google.common.graph.ValueGraphBuilder;\n+\n+public class KruskalUnitTest {\n+\n+    private MutableValueGraph<Integer, Double> graph;\n+\n+    @Before\n+    public void setup() {\n+        graph = ValueGraphBuilder.undirected().build();\n+        graph.putEdgeValue(0, 1, 8.0);\n+        graph.putEdgeValue(0, 2, 5.0);\n+        graph.putEdgeValue(1, 2, 9.0);\n+        graph.putEdgeValue(1, 3, 11.0);\n+        graph.putEdgeValue(2, 3, 15.0);\n+        graph.putEdgeValue(2, 4, 10.0);\n+        graph.putEdgeValue(3, 4, 7.0);\n+    }\n+\n+    @Test\n+    public void givenGraph_whenMinimumSpanningTree_thenOutputCorrectResult() {\n+        final Kruskal kruskal = new Kruskal();\n+        ValueGraph<Integer, Double> spanningTree = kruskal.minSpanningTree(graph);\n+\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 2));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n+        assertTrue(spanningTree.hasEdgeConnecting(3, 4));\n+        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n+        assertEquals(graph.edgeValue(0, 2), spanningTree.edgeValue(0, 2));\n+        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n+        assertEquals(graph.edgeValue(3, 4), spanningTree.edgeValue(3, 4));\n+\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 3));\n+        assertFalse(spanningTree.hasEdgeConnecting(2, 3));\n+    }\n+\n+    @Test\n+    public void givenGraph_whenMaximumSpanningTree_thenOutputCorrectResult() {\n+        final Kruskal kruskal = new Kruskal();\n+        ValueGraph<Integer, Double> spanningTree = kruskal.maxSpanningTree(graph);\n+\n+        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n+        assertTrue(spanningTree.hasEdgeConnecting(1, 3));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 3));\n+        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n+        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n+        assertEquals(graph.edgeValue(1, 3), spanningTree.edgeValue(1, 3));\n+        assertEquals(graph.edgeValue(2, 3), spanningTree.edgeValue(2, 3));\n+        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n+\n+        assertFalse(spanningTree.hasEdgeConnecting(0, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n+        assertFalse(spanningTree.hasEdgeConnecting(3, 4));\n+    }\n+}",
    "output": "BAEL-3406 Kruskal’s Algorithm for Spanning Trees"
  },
  {
    "input": "diff --git a/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchUnitTest.java b/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchUnitTest.java\n--- a/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchUnitTest.java\n+++ b/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchUnitTest.java\n@@ -9,9 +9,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class QuadTreeSearchTest {\n+public class QuadTreeSearchUnitTest {\n     \n-    private static final Logger LOGGER = LoggerFactory.getLogger(QuadTreeSearchTest.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuadTreeSearchUnitTest.class);\n \n     private static QuadTree quadTree;\n ",
    "output": "[BAEL-3485] - Java Range lookup problem"
  },
  {
    "input": "diff --git a/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchTest.java b/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchTest.java\n--- a/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchTest.java\n+++ b/algorithms-searching/src/test/java/com/baeldung/algorithms/quadtree/QuadTreeSearchTest.java\n@@ -27,16 +27,16 @@ public static void setUp() {\n             Point point = new Point(points[i][0], points[i][1]);\n             quadTree.addPoint(point);\n         }\n-        LOGGER.debug(\"\\n\" + quadTree.printTree(\"\"));\n-        LOGGER.debug(\"==============================================\");\n+        LOGGER.info(\"\\n\" + quadTree.printTree(\"\"));\n+        LOGGER.info(\"==============================================\");\n     }\n \n     @Test\n     public void givenQuadTree_whenSearchingForRange_thenReturn1MatchingItem() {\n         Region searchArea = new Region(200, 200, 250, 250);\n         List<Point> result = quadTree.search(searchArea, null, \"\");\n-        LOGGER.debug(result.toString());\n-        LOGGER.debug(quadTree.printSearchTraversePath());\n+        LOGGER.info(result.toString());\n+        LOGGER.info(quadTree.printSearchTraversePath());\n        \n         Assert.assertEquals(1, result.size());\n         Assert.assertArrayEquals(new float[] { 245, 238 }, \n@@ -47,8 +47,8 @@ public void givenQuadTree_whenSearchingForRange_thenReturn1MatchingItem() {\n     public void givenQuadTree_whenSearchingForRange_thenReturn2MatchingItems() {\n         Region searchArea = new Region(0, 0, 100, 100);\n         List<Point> result = quadTree.search(searchArea, null, \"\");\n-        LOGGER.debug(result.toString());\n-        LOGGER.debug(quadTree.printSearchTraversePath());\n+        LOGGER.info(result.toString());\n+        LOGGER.info(quadTree.printSearchTraversePath());\n         \n         Assert.assertEquals(2, result.size());\n         Assert.assertArrayEquals(new float[] { 21, 25 }, ",
    "output": "[BAEL-3485] - Java Range lookup problem"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.h2db.notnull;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class NotNullVsNullableApplication {\n+\n+    public static void main(String... args) {\n+        SpringApplication.run(NotNullVsNullableApplication.class, args);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.h2db.springboot.daos;\n+package com.baeldung.h2db.notnull.daos;\n \n-import com.baeldung.h2db.springboot.models.Item;\n+import com.baeldung.h2db.notnull.models.Item;\n import org.springframework.data.repository.CrudRepository;\n \n import java.math.BigDecimal;\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.h2db.springboot.models;\n+package com.baeldung.h2db.notnull.models;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n@@ -1,8 +1,7 @@\n-package com.baeldung;\n+package com.baeldung.h2db.notnull;\n \n-import com.baeldung.h2db.springboot.SpringBootH2Application;\n-import com.baeldung.h2db.springboot.daos.ItemRepository;\n-import com.baeldung.h2db.springboot.models.Item;\n+import com.baeldung.h2db.notnull.daos.ItemRepository;\n+import com.baeldung.h2db.notnull.models.Item;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -14,7 +13,7 @@\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = SpringBootH2Application.class)\n+@SpringBootTest(classes = NotNullVsNullableApplication.class)\n public class ItemIntegrationTest {\n \n     @Autowired",
    "output": "Merge pull request #8386 from kwoyke/BAEL-3385\n\nBAEL-3385: Move article related code to its own package"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.algorithms.mergesortedarrays;\n+\n+public class SortedArrays {\n+\n+    public static int[] merge(int[] foo, int[] bar) {\n+\n+        int fooLength = foo.length;\n+        int barLength = bar.length;\n+\n+        int[] merged = new int[fooLength + barLength];\n+\n+        int fooPosition, barPosition, mergedPosition;\n+        fooPosition = barPosition = mergedPosition = 0;\n+\n+        while (fooPosition < fooLength && barPosition < barLength) {\n+            if (foo[fooPosition] < bar[barPosition]) {\n+                merged[mergedPosition++] = foo[fooPosition++];\n+            } else {\n+                merged[mergedPosition++] = bar[barPosition++];\n+            }\n+        }\n+\n+        while (fooPosition < fooLength) {\n+            merged[mergedPosition++] = foo[fooPosition++];\n+        }\n+\n+        while (barPosition < barLength) {\n+            merged[mergedPosition++] = bar[barPosition++];\n+        }\n+\n+        return merged;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.algorithms.mergesortedarrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import org.junit.jupiter.api.Test;\n+\n+import com.baeldung.algorithms.mergesortedarrays.SortedArrays;\n+\n+public class SortedArraysUnitTest {\n+\n+    @Test\n+    public void givenTwoSortedArrays_whenMerged_thenReturnMergedSortedArray() {\n+\n+        int[] foo = { 3, 7 };\n+        int[] bar = { 4, 8, 11 };\n+        int[] merged = { 3, 4, 7, 8, 11 };\n+\n+        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n+    }\n+\n+    @Test\n+    public void givenTwoSortedArraysWithDuplicates_whenMerged_thenReturnMergedSortedArray() {\n+\n+        int[] foo = { 3, 3, 7 };\n+        int[] bar = { 4, 8, 8, 11 };\n+        int[] merged = { 3, 3, 4, 7, 8, 8, 11 };\n+\n+        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n+    }\n+}",
    "output": "Merge pull request #8240 from vimde/master\n\nBAEL-3399: How to merge two sorted arrays into a sorted array"
  },
  {
    "input": "diff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/AnnotationMethodHandlerAdapterExample.java\n@@ -1,15 +1,15 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-\r\n-@Controller\r\n-public class AnnotationMethodHandlerAdapterExample {\r\n-    @RequestMapping(\"/annotedName\")\r\n-    public ModelAndView getEmployeeName() {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Dinesh\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+@Controller\n+public class AnnotationMethodHandlerAdapterExample {\n+    @RequestMapping(\"/annotedName\")\n+    public ModelAndView getEmployeeName() {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Dinesh\");\n+        return model;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/RequestMappingHandlerAdapterExample.java\n@@ -1,15 +1,15 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-\r\n-@Controller\r\n-public class RequestMappingHandlerAdapterExample {\r\n-    @RequestMapping(\"/requestName\")\r\n-    public ModelAndView getEmployeeName() {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Madhwal\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+@Controller\n+public class RequestMappingHandlerAdapterExample {\n+    @RequestMapping(\"/requestName\")\n+    public ModelAndView getEmployeeName() {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Madhwal\");\n+        return model;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/spring/controller/SimpleControllerHandlerAdapterExample.java\n@@ -1,16 +1,16 @@\n-package com.baeldung.spring.controller;\r\n-\r\n-import javax.servlet.http.HttpServletRequest;\r\n-import javax.servlet.http.HttpServletResponse;\r\n-\r\n-import org.springframework.web.servlet.ModelAndView;\r\n-import org.springframework.web.servlet.mvc.AbstractController;\r\n-\r\n-public class SimpleControllerHandlerAdapterExample extends AbstractController {\r\n-    @Override\r\n-    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n-        ModelAndView model = new ModelAndView(\"Greeting\");\r\n-        model.addObject(\"message\", \"Dinesh Madhwal\");\r\n-        return model;\r\n-    }\r\n+package com.baeldung.spring.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.mvc.AbstractController;\n+\n+public class SimpleControllerHandlerAdapterExample extends AbstractController {\n+    @Override\n+    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        ModelAndView model = new ModelAndView(\"Greeting\");\n+        model.addObject(\"message\", \"Dinesh Madhwal\");\n+        return model;\n+    }\n }\n\\ No newline at end of file",
    "output": "[BAEL-19881] - Rename spring-mvc-simple modules"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n@@ -1,88 +1,122 @@\n-package com.baeldung.okhttp;\r\n-\r\n-import static com.baeldung.client.Consts.APPLICATION_PORT;\r\n-import static org.hamcrest.Matchers.equalTo;\r\n-import static org.junit.Assert.assertThat;\r\n-\r\n-import java.io.File;\r\n-import java.io.IOException;\r\n-\r\n-import okhttp3.Call;\r\n-import okhttp3.Credentials;\r\n-import okhttp3.FormBody;\r\n-import okhttp3.MediaType;\r\n-import okhttp3.MultipartBody;\r\n-import okhttp3.OkHttpClient;\r\n-import okhttp3.Request;\r\n-import okhttp3.RequestBody;\r\n-import okhttp3.Response;\r\n-\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-/**\r\n- * Execute <code>spring-rest</code> module before running this live test\r\n- */\r\n-public class OkHttpPostingLiveTest {\r\n-\r\n-    private static final String BASE_URL = \"http://localhost:\" + APPLICATION_PORT + \"/spring-rest\";\r\n-    private static final String URL_SECURED_BY_BASIC_AUTHENTICATION = \"http://browserspy.dk/password-ok.php\";\r\n-\r\n-    OkHttpClient client;\r\n-\r\n-    @Before\r\n-    public void init() {\r\n-\r\n-        client = new OkHttpClient();\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendPostRequest_thenCorrect() throws IOException {\r\n-        final RequestBody formBody = new FormBody.Builder().add(\"username\", \"test\").add(\"password\", \"test\").build();\r\n-\r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users\").post(formBody).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOException {\r\n-        final String postBody = \"test post\";\r\n-\r\n-        final Request request = new Request.Builder().url(URL_SECURED_BY_BASIC_AUTHENTICATION).addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\")).post(RequestBody.create(MediaType.parse(\"text/x-markdown; charset=utf-8\"), \"test post\")).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenPostJson_thenCorrect() throws IOException {\r\n-        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n-\r\n-        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users/detail\").post(body).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendMultipartRequest_thenCorrect() throws IOException {\r\n-        final RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(\"username\", \"test\").addFormDataPart(\"password\", \"test\")\r\n-                .addFormDataPart(\"file\", \"file.txt\", RequestBody.create(MediaType.parse(\"application/octet-stream\"), new File(\"src/test/resources/test.txt\"))).build();\r\n-\r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users/multipart\").post(requestBody).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-}\r\n+package com.baeldung.okhttp.post;\n+\n+import static com.baeldung.client.Consts.APPLICATION_PORT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import okhttp3.Call;\n+import okhttp3.Credentials;\n+import okhttp3.FormBody;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Execute <code>spring-rest</code> module before running this live test\n+ */\n+public class OkHttpPostingLiveTest {\n+\n+    private static final String BASE_URL = \"http://localhost:\" + APPLICATION_PORT + \"/spring-rest\";\n+    private static final String URL_SECURED_BY_BASIC_AUTHENTICATION = \"http://browserspy.dk/password-ok.php\";\n+\n+    OkHttpClient client;\n+\n+    @Before\n+    public void init() {\n+\n+        client = new OkHttpClient();\n+    }\n+\n+    @Test\n+    public void whenSendPostRequest_thenCorrect() throws IOException {\n+        final RequestBody formBody = new FormBody.Builder()\n+                .add(\"username\", \"test\")\n+                .add(\"password\", \"test\")\n+                .build();\n+\n+        final Request request = new Request.Builder()\n+                .url(BASE_URL + \"/users\")\n+                .post(formBody)\n+                .build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOException {\n+        final String postBody = \"test post\";\n+\n+        final Request request = new Request.Builder()\n+                .url(URL_SECURED_BY_BASIC_AUTHENTICATION)\n+                .addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\"))\n+                .post(RequestBody.create(MediaType.parse(\"text/x-markdown\"), \"test post\"))\n+                .build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenPostJson_thenCorrect() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\n+        final Request request = new Request.Builder().url(BASE_URL + \"/users/detail\").post(body).build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenPostJsonWithoutCharset_thenCharsetIsUtf8() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(\n+                MediaType.parse(\"application/json\"), json);\n+\n+        String charset = body.contentType().charset().displayName();\n+\n+        assertThat(charset, equalTo(\"UTF-8\"));\n+    }\n+\n+    @Test\n+    public void whenPostJsonWithUtf16Charset_thenCharsetIsUtf16() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(\n+                MediaType.parse(\"application/json; charset=utf-16\"), json);\n+\n+        String charset = body.contentType().charset().displayName();\n+\n+        assertThat(charset, equalTo(\"UTF-16\"));\n+    }\n+\n+    @Test\n+    public void whenSendMultipartRequest_thenCorrect() throws IOException {\n+        final RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(\"username\", \"test\").addFormDataPart(\"password\", \"test\")\n+                .addFormDataPart(\"file\", \"file.txt\", RequestBody.create(MediaType.parse(\"application/octet-stream\"), new File(\"src/test/resources/test.txt\"))).build();\n+\n+        final Request request = new Request.Builder().url(BASE_URL + \"/users/multipart\").post(requestBody).build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+}",
    "output": "Merge pull request #8352 from Maiklins/BAEL-11412-post-with-okhttp\n\nBAEL-11412 post with okhttp"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n--- a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n+++ b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n@@ -14,38 +14,38 @@ public class RandomStringsUnitTest {\n \r\n     @Test\r\n     public void givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect() {\r\n-        final byte[] array = new byte[7]; // length is bounded by 7\r\n+        byte[] array = new byte[7]; // length is bounded by 7\r\n         new Random().nextBytes(array);\r\n-        final String generatedString = new String(array, Charset.forName(\"UTF-8\"));\r\n+        String generatedString = new String(array, Charset.forName(\"UTF-8\"));\r\n \r\n         LOG.debug(generatedString);\r\n     }\r\n \r\n     @Test\r\n     public void givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect() {\r\n-        final int leftLimit = 97; // letter 'a'\r\n-        final int rightLimit = 122; // letter 'z'\r\n-        final int targetStringLength = 10;\r\n-        final Random random = new Random();\r\n-        final StringBuilder buffer = new StringBuilder(targetStringLength);\r\n+        int leftLimit = 97; // letter 'a'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n+        StringBuilder buffer = new StringBuilder(targetStringLength);\r\n \r\n         for (int i = 0; i < targetStringLength; i++) {\r\n-            final int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\r\n+            int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\r\n             buffer.append((char) randomLimitedInt);\r\n         }\r\n-        final String generatedString = buffer.toString();\r\n+        String generatedString = buffer.toString();\r\n \r\n         LOG.debug(generatedString);\r\n     }\r\n \r\n     @Test\r\n     public void givenUsingJava8_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n-        final int leftLimit = 97; // letter 'a'\r\n-        final int rightLimit = 122; // letter 'z'\r\n-        final int targetStringLength = 10;\r\n-        final Random random = new Random();\r\n+        int leftLimit = 97; // letter 'a'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n \r\n-        final String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+        String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n             .limit(targetStringLength)\r\n             .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n             .toString();\r\n@@ -55,12 +55,12 @@ public void givenUsingJava8_whenGeneratingRandomAlphabeticString_thenCorrect() {\n \r\n     @Test\r\n     public void givenUsingJava8_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n-        final int leftLimit = 48; // numeral '0'\r\n-        final int rightLimit = 122; // letter 'z'\r\n-        final int targetStringLength = 10;\r\n-        final Random random = new Random();\r\n+        int leftLimit = 48; // numeral '0'\r\n+        int rightLimit = 122; // letter 'z'\r\n+        int targetStringLength = 10;\r\n+        Random random = new Random();\r\n \r\n-        final String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+        String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n             .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))\r\n             .limit(targetStringLength)\r\n             .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n@@ -71,31 +71,31 @@ public void givenUsingJava8_whenGeneratingRandomAlphanumericString_thenCorrect()\n \r\n     @Test\r\n     public void givenUsingApache_whenGeneratingRandomString_thenCorrect() {\r\n-        final String generatedString = RandomStringUtils.random(10);\r\n+        String generatedString = RandomStringUtils.random(10);\r\n \r\n         LOG.debug(generatedString);\r\n     }\r\n \r\n     @Test\r\n     public void givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n-        final String generatedString = RandomStringUtils.randomAlphabetic(10);\r\n+        String generatedString = RandomStringUtils.randomAlphabetic(10);\r\n \r\n         LOG.debug(generatedString);\r\n     }\r\n \r\n     @Test\r\n     public void givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n-        final String generatedString = RandomStringUtils.randomAlphanumeric(10);\r\n+        String generatedString = RandomStringUtils.randomAlphanumeric(10);\r\n \r\n         LOG.debug(generatedString);\r\n     }\r\n \r\n     @Test\r\n     public void givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect() {\r\n-        final int length = 10;\r\n-        final boolean useLetters = true;\r\n-        final boolean useNumbers = false;\r\n-        final String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\r\n+        int length = 10;\r\n+        boolean useLetters = true;\r\n+        boolean useNumbers = false;\r\n+        String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\r\n \r\n         LOG.debug(generatedString);\r\n     }\r",
    "output": "BAEL-3589 : removed unnecessary final modifiers"
  },
  {
    "input": "diff --git a/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java b/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n--- a/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n+++ b/core-kotlin-modules/core-kotlin-lang-2/src/test/java/com/baeldung/lazy/LazyJavaUnitTest.java\n@@ -1,7 +1,5 @@\n-package com.baeldung.kotlin;\n+package com.baeldung.lazy;\n \n-\n-import com.baeldung.lazy.ClassWithHeavyInitialization;\n import org.junit.Test;\n \n import static junit.framework.TestCase.assertTrue;",
    "output": "[BAEL-19883] - Move articles out of core-kotlin part2"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/NotNullVsNullableApplication.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.h2db.notnull;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class NotNullVsNullableApplication {\n+\n+    public static void main(String... args) {\n+        SpringApplication.run(NotNullVsNullableApplication.class, args);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/daos/ItemRepository.java\n@@ -1,6 +1,6 @@\n-package com.baeldung.h2db.springboot.daos;\n+package com.baeldung.h2db.notnull.daos;\n \n-import com.baeldung.h2db.springboot.models.Item;\n+import com.baeldung.h2db.notnull.models.Item;\n import org.springframework.data.repository.CrudRepository;\n \n import java.math.BigDecimal;\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/notnull/models/Item.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.h2db.springboot.models;\n+package com.baeldung.h2db.notnull.models;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/h2db/notnull/ItemIntegrationTest.java\n@@ -1,8 +1,7 @@\n-package com.baeldung;\n+package com.baeldung.h2db.notnull;\n \n-import com.baeldung.h2db.springboot.SpringBootH2Application;\n-import com.baeldung.h2db.springboot.daos.ItemRepository;\n-import com.baeldung.h2db.springboot.models.Item;\n+import com.baeldung.h2db.notnull.daos.ItemRepository;\n+import com.baeldung.h2db.notnull.models.Item;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -14,7 +13,7 @@\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = SpringBootH2Application.class)\n+@SpringBootTest(classes = NotNullVsNullableApplication.class)\n public class ItemIntegrationTest {\n \n     @Autowired",
    "output": "BAEL-3385: Move article related code to its own package"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java b/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n--- a/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n+++ b/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.printbinarytree;\n+\n+public class BinaryTreeModel {\n+\n+    private Object value;\n+    private BinaryTreeModel left;\n+    private BinaryTreeModel right;\n+\n+    public BinaryTreeModel(Object value) {\n+        this.value = value;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+\n+    public BinaryTreeModel getLeft() {\n+        return left;\n+    }\n+\n+    public void setLeft(BinaryTreeModel left) {\n+        this.left = left;\n+    }\n+\n+    public BinaryTreeModel getRight() {\n+        return right;\n+    }\n+\n+    public void setRight(BinaryTreeModel right) {\n+        this.right = right;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java b/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n--- a/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n+++ b/data-structures/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.printbinarytree;\n+\n+import java.io.PrintStream;\n+\n+public class BinaryTreePrinter {\n+\n+    private BinaryTreeModel tree;\n+\n+    public BinaryTreePrinter(BinaryTreeModel tree) {\n+        this.tree = tree;\n+    }\n+\n+    private String traversePreOrder(BinaryTreeModel root) {\n+\n+        if (root == null) {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(root.getValue());\n+\n+        String pointerRight = \"└──\";\n+        String pointerLeft = (root.getRight() != null) ? \"├──\" : \"└──\";\n+\n+        traverseNodes(sb, \"\", pointerLeft, root.getLeft(), root.getRight() != null);\n+        traverseNodes(sb, \"\", pointerRight, root.getRight(), false);\n+\n+        return sb.toString();\n+    }\n+\n+    private void traverseNodes(StringBuilder sb, String padding, String pointer, BinaryTreeModel node,\n+        boolean hasRightSibling) {\n+\n+        if (node != null) {\n+\n+            sb.append(\"\\n\");\n+            sb.append(padding);\n+            sb.append(pointer);\n+            sb.append(node.getValue());\n+\n+            StringBuilder paddingBuilder = new StringBuilder(padding);\n+            if (hasRightSibling) {\n+                paddingBuilder.append(\"│  \");\n+            } else {\n+                paddingBuilder.append(\"   \");\n+            }\n+\n+            String paddingForBoth = paddingBuilder.toString();\n+            String pointerRight = \"└──\";\n+            String pointerLeft = (node.getRight() != null) ? \"├──\" : \"└──\";\n+\n+            traverseNodes(sb, paddingForBoth, pointerLeft, node.getLeft(), node.getRight() != null);\n+            traverseNodes(sb, paddingForBoth, pointerRight, node.getRight(), false);\n+\n+        }\n+\n+    }\n+\n+    public void print(PrintStream os) {\n+        os.print(traversePreOrder(tree));\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/data-structures/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java b/data-structures/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n@@ -0,0 +1,178 @@\n+package com.baeldung.printbinarytree;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.baeldung.printbinarytree.BinaryTreeModel;\n+import com.baeldung.printbinarytree.BinaryTreePrinter;\n+\n+public class PrintingBinaryTreeModelUnitTest {\n+\n+    private BinaryTreeModel balanced;\n+    private BinaryTreeModel leftSkewed;\n+    private BinaryTreeModel rightSkewed;\n+    \n+    private OutputStream output;\n+\n+    @Before\n+    public void setup() {\n+        balanced = createBalancedTree();\n+        leftSkewed = createLeftUnbalancedTree();\n+        rightSkewed = createRightUnbalancedTree();\n+        \n+        output = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(output));\n+    }\n+    \n+    @After\n+    public void tearDown() {\n+        System.setOut(System.out);\n+    }\n+    \n+    private BinaryTreeModel createBalancedTree() {\n+        \n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+        \n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+         \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node1.setLeft(node3);\n+        node1.setRight(node4);\n+         \n+        node2.setLeft(new BinaryTreeModel(\"node5\"));\n+        node2.setRight(new BinaryTreeModel(\"node6\"));\n+         \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node3.setLeft(node7);\n+        node7.setLeft(new BinaryTreeModel(\"node8\"));\n+        node7.setRight(new BinaryTreeModel(\"node9\"));\n+        \n+        return root;\n+    }\n+\n+    private BinaryTreeModel createLeftUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        root.setLeft(node1);\n+        root.setRight(new BinaryTreeModel(\"node2\"));\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node1.setLeft(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setLeft(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setLeft(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setLeft(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setLeft(node7);\n+        \n+        node7.setLeft(new BinaryTreeModel(\"node8\"));\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createRightUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(new BinaryTreeModel(\"node1\"));\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node2.setRight(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setRight(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setRight(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setRight(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setRight(node7);\n+        \n+        node7.setRight(new BinaryTreeModel(\"node8\"));\n+\n+        return root;\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"│  ├──node3\").append(\"\\n\");\n+        expected.append(\"│  │  └──node7\").append(\"\\n\");\n+        expected.append(\"│  │     ├──node8\").append(\"\\n\");\n+        expected.append(\"│  │     └──node9\").append(\"\\n\");\n+        expected.append(\"│  └──node4\").append(\"\\n\");\n+        expected.append(\"└──node2\").append(\"\\n\");\n+        expected.append(\"   ├──node5\").append(\"\\n\");\n+        expected.append(\"   └──node6\");\n+        \n+        new BinaryTreePrinter(balanced).print(System.out);\n+        \n+        assertEquals(expected.toString(), output.toString());\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"│  └──node3\").append(\"\\n\");\n+        expected.append(\"│     └──node4\").append(\"\\n\");\n+        expected.append(\"│        └──node5\").append(\"\\n\");\n+        expected.append(\"│           └──node6\").append(\"\\n\");\n+        expected.append(\"│              └──node7\").append(\"\\n\");\n+        expected.append(\"│                 └──node8\").append(\"\\n\");\n+        expected.append(\"└──node2\");\n+        \n+        new BinaryTreePrinter(leftSkewed).print(System.out);\n+        \n+        assertEquals(expected.toString(), output.toString());\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"└──node2\").append(\"\\n\");\n+        expected.append(\"   └──node3\").append(\"\\n\");\n+        expected.append(\"      └──node4\").append(\"\\n\");\n+        expected.append(\"         └──node5\").append(\"\\n\");\n+        expected.append(\"            └──node6\").append(\"\\n\");\n+        expected.append(\"               └──node7\").append(\"\\n\");\n+        expected.append(\"                  └──node8\");\n+        \n+        new BinaryTreePrinter(rightSkewed).print(System.out);\n+        \n+        assertEquals(expected.toString(), output.toString());\n+    }\n+\n+}",
    "output": "Merge pull request #8218 from yavuztas/pr-BAEL-3408\n\nSource code for BAEL-3408"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n--- a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n+++ b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n@@ -156,10 +156,16 @@ public void givenDataWritten_whenWrite_thenFreeSpaceReduces() {\n \n     private static File makeDir(String name) {\n         File directory = new File(name);\n-        directory.mkdir();\n-        if (directory.isDirectory()) {\n+\n+        // If the directory already exists, make sure we create it 'from scratch', i.e. all the files inside are deleted first\n+        if (directory.exists()) {\n+            removeDir(directory);\n+        }\n+\n+        if (directory.mkdir()) {\n             return directory;\n         }\n+\n         throw new RuntimeException(\"'\" + name + \"' not made!\");\n     }\n ",
    "output": "Merge pull request #8383 from kwoyke/BAEL-3651\n\nBAEL-3651: Fix failing test in core-java-io-apis"
  },
  {
    "input": "diff --git a/guava/src/main/java/com/baeldung/guava/CustomEvent.java b/guava/src/main/java/com/baeldung/guava/CustomEvent.java\n--- a/guava/src/main/java/com/baeldung/guava/CustomEvent.java\n+++ b/guava/src/main/java/com/baeldung/guava/CustomEvent.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n public class CustomEvent {\n     private String action;\n\ndiff --git a/guava/src/main/java/com/baeldung/guava/EventListener.java b/guava/src/main/java/com/baeldung/guava/EventListener.java\n--- a/guava/src/main/java/com/baeldung/guava/EventListener.java\n+++ b/guava/src/main/java/com/baeldung/guava/EventListener.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.eventbus.DeadEvent;\n import com.google.common.eventbus.Subscribe;\n\ndiff --git a/guava/src/main/java/com/baeldung/guava/memoizer/CostlySupplier.java b/guava/src/main/java/com/baeldung/guava/memoizer/CostlySupplier.java\n--- a/guava/src/main/java/com/baeldung/guava/memoizer/CostlySupplier.java\n+++ b/guava/src/main/java/com/baeldung/guava/memoizer/CostlySupplier.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava.memoizer;\n+package com.baeldung.guava.memoizer;\n \n import java.math.BigInteger;\n import java.util.Random;\n\ndiff --git a/guava/src/main/java/com/baeldung/guava/memoizer/Factorial.java b/guava/src/main/java/com/baeldung/guava/memoizer/Factorial.java\n--- a/guava/src/main/java/com/baeldung/guava/memoizer/Factorial.java\n+++ b/guava/src/main/java/com/baeldung/guava/memoizer/Factorial.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava.memoizer;\n+package com.baeldung.guava.memoizer;\n \n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n\ndiff --git a/guava/src/main/java/com/baeldung/guava/memoizer/FibonacciSequence.java b/guava/src/main/java/com/baeldung/guava/memoizer/FibonacciSequence.java\n--- a/guava/src/main/java/com/baeldung/guava/memoizer/FibonacciSequence.java\n+++ b/guava/src/main/java/com/baeldung/guava/memoizer/FibonacciSequence.java\n@@ -1,11 +1,10 @@\n-package org.baeldung.guava.memoizer;\n+package com.baeldung.guava.memoizer;\n \n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n \n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n \n public class FibonacciSequence {\n \n\ndiff --git a/guava/src/test/java/com/baeldung/guava/BloomFilterUnitTest.java b/guava/src/test/java/com/baeldung/guava/BloomFilterUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/BloomFilterUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/BloomFilterUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n \n import com.google.common.hash.BloomFilter;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaBigIntegerMathUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaBigIntegerMathUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaBigIntegerMathUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaBigIntegerMathUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaCacheLoaderUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaCacheLoaderUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaCacheLoaderUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaCacheLoaderUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaCacheUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaCacheUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaCacheUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaCacheUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaDoubleMathUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaDoubleMathUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaDoubleMathUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaDoubleMathUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.junit.Assert.*;\n \n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaEventBusUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaEventBusUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaEventBusUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaEventBusUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.eventbus.EventBus;\n import org.junit.After;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaFunctionalExamplesUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaFunctionalExamplesUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaFunctionalExamplesUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaFunctionalExamplesUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaIntMathUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaIntMathUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaIntMathUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaIntMathUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.junit.Assert.*;\n \n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaLongMathUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaLongMathUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaLongMathUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaLongMathUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.junit.Assert.*;\n \n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaMathUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaMathUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaMathUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaMathUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.hamcrest.core.IsEqual.equalTo;\n import static org.junit.Assert.*;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaMemoizerUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaMemoizerUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaMemoizerUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaMemoizerUnitTest.java\n@@ -1,9 +1,9 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import com.google.common.base.Suppliers;\n-import org.baeldung.guava.memoizer.CostlySupplier;\n-import org.baeldung.guava.memoizer.Factorial;\n-import org.baeldung.guava.memoizer.FibonacciSequence;\n+import com.baeldung.guava.memoizer.CostlySupplier;\n+import com.baeldung.guava.memoizer.Factorial;\n+import com.baeldung.guava.memoizer.FibonacciSequence;\n import org.junit.Test;\n \n import java.math.BigInteger;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaPreConditionsUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaPreConditionsUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaPreConditionsUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaPreConditionsUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import java.util.Arrays;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/GuavaReflectionUtilsUnitTest.java b/guava/src/test/java/com/baeldung/guava/GuavaReflectionUtilsUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/GuavaReflectionUtilsUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/GuavaReflectionUtilsUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n \n import com.google.common.collect.Lists;\n\ndiff --git a/guava/src/test/java/com/baeldung/guava/RateLimiterLongRunningUnitTest.java b/guava/src/test/java/com/baeldung/guava/RateLimiterLongRunningUnitTest.java\n--- a/guava/src/test/java/com/baeldung/guava/RateLimiterLongRunningUnitTest.java\n+++ b/guava/src/test/java/com/baeldung/guava/RateLimiterLongRunningUnitTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.guava;\n+package com.baeldung.guava;\n \n \n import com.google.common.util.concurrent.RateLimiter;",
    "output": "BAEL-19947: Migrate guava module to the com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/overflow/OverflowUnitTest.java b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/overflow/OverflowUnitTest.java\n--- a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/overflow/OverflowUnitTest.java\n+++ b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/overflow/OverflowUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.overflow;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class OverflowUnitTest {\n+\n+    @Test\n+    public void positive_and_negative_zero_are_not_always_equal() {\n+\n+        double a = +0f;\n+        double b = -0f;\n+\n+        assertTrue(a == b);\n+\n+        assertTrue(1/a == Double.POSITIVE_INFINITY);\n+        assertTrue(1/b == Double.NEGATIVE_INFINITY);\n+\n+        assertTrue(1/a != 1/b);\n+    }\n+}",
    "output": "BAEL-3130 overflow and underflow in java (#8381)\n\n* BAEL-3131 Guide to Java HashMap\r\nhttp://jira.baeldung.com/browse/BAEL-3130\r\n\r\n* Move test class to correct package\r\nhttp://jira.baeldung.com/browse/BAEL-3130"
  },
  {
    "input": "diff --git a/httpclient/src/test/java/com/baeldung/httpclient/HttpAsyncClientLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/HttpAsyncClientLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/HttpAsyncClientLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/HttpAsyncClientLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient;\n+package com.baeldung.httpclient;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertThat;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/HttpClientMultipartLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/HttpClientMultipartLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/HttpClientMultipartLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/HttpClientMultipartLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient;\n+package com.baeldung.httpclient;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpStatus;\n@@ -38,7 +38,7 @@ public class HttpClientMultipartLiveTest {\n     private static final String TEXTFILENAME = \"temp.txt\";\n     private static final String IMAGEFILENAME = \"image.jpg\";\n     private static final String ZIPFILENAME = \"zipFile.zip\";\n-    private static final Logger LOGGER = Logger.getLogger(\"org.baeldung.httpclient.HttpClientMultipartLiveTest\");\n+    private static final Logger LOGGER = Logger.getLogger(\"com.baeldung.httpclient.HttpClientMultipartLiveTest\");\n     private CloseableHttpClient client;\n     private HttpPost post;\n     private BufferedReader rd;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/HttpClientRedirectLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/HttpClientRedirectLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/HttpClientRedirectLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/HttpClientRedirectLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient;\n+package com.baeldung.httpclient;\n \n import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpGet;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/ResponseUtil.java b/httpclient/src/test/java/com/baeldung/httpclient/ResponseUtil.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/ResponseUtil.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/ResponseUtil.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient;\n+package com.baeldung.httpclient;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.client.methods.CloseableHttpResponse;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/advancedconfig/HttpClientAdvancedConfigurationIntegrationTest.java b/httpclient/src/test/java/com/baeldung/httpclient/advancedconfig/HttpClientAdvancedConfigurationIntegrationTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/advancedconfig/HttpClientAdvancedConfigurationIntegrationTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/advancedconfig/HttpClientAdvancedConfigurationIntegrationTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.advancedconfig;\n+package com.baeldung.httpclient.advancedconfig;\n \n \n import com.github.tomakehurst.wiremock.junit.WireMockRule;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientBasicPostLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientBasicPostLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientBasicPostLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientBasicPostLiveTest.java\n@@ -1,5 +1,6 @@\n-package org.baeldung.httpclient.base;\n+package com.baeldung.httpclient.base;\n \n+import com.baeldung.httpclient.ResponseUtil;\n import org.apache.http.auth.AuthenticationException;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.methods.CloseableHttpResponse;\n@@ -8,7 +9,6 @@\n import org.apache.http.impl.auth.BasicScheme;\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClientBuilder;\n-import org.baeldung.httpclient.ResponseUtil;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientLiveTest.java\n@@ -1,5 +1,6 @@\n-package org.baeldung.httpclient.base;\n+package com.baeldung.httpclient.base;\n \n+import com.baeldung.httpclient.ResponseUtil;\n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n import org.apache.http.HttpHeaders;\n@@ -11,7 +12,6 @@\n import org.apache.http.impl.client.HttpClientBuilder;\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.impl.conn.BasicHttpClientConnectionManager;\n-import org.baeldung.httpclient.ResponseUtil;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientSandboxLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientSandboxLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientSandboxLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientSandboxLiveTest.java\n@@ -1,5 +1,6 @@\n-package org.baeldung.httpclient.base;\n+package com.baeldung.httpclient.base;\n \n+import com.baeldung.httpclient.ResponseUtil;\n import org.apache.http.auth.AuthScope;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.CredentialsProvider;\n@@ -8,7 +9,6 @@\n import org.apache.http.impl.client.BasicCredentialsProvider;\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClientBuilder;\n-import org.baeldung.httpclient.ResponseUtil;\n import org.junit.Test;\n \n import java.io.IOException;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/conn/HttpClientConnectionManagementLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/conn/HttpClientConnectionManagementLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/conn/HttpClientConnectionManagementLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/conn/HttpClientConnectionManagementLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.conn;\n+package com.baeldung.httpclient.conn;\n \n import org.apache.http.HeaderElement;\n import org.apache.http.HeaderElementIterator;\n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/conn/IdleConnectionMonitorThread.java b/httpclient/src/test/java/com/baeldung/httpclient/conn/IdleConnectionMonitorThread.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/conn/IdleConnectionMonitorThread.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/conn/IdleConnectionMonitorThread.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.conn;\n+package com.baeldung.httpclient.conn;\n \n import java.util.concurrent.TimeUnit;\n \n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/conn/MultiHttpClientConnThread.java b/httpclient/src/test/java/com/baeldung/httpclient/conn/MultiHttpClientConnThread.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/conn/MultiHttpClientConnThread.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/conn/MultiHttpClientConnThread.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.conn;\n+package com.baeldung.httpclient.conn;\n \n import java.io.IOException;\n \n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/conn/TesterVersion_MultiHttpClientConnThread.java b/httpclient/src/test/java/com/baeldung/httpclient/conn/TesterVersion_MultiHttpClientConnThread.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/conn/TesterVersion_MultiHttpClientConnThread.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/conn/TesterVersion_MultiHttpClientConnThread.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.conn;\n+package com.baeldung.httpclient.conn;\n \n import java.io.IOException;\n \n\ndiff --git a/httpclient/src/test/java/com/baeldung/httpclient/rare/HttpClientUnshortenLiveTest.java b/httpclient/src/test/java/com/baeldung/httpclient/rare/HttpClientUnshortenLiveTest.java\n--- a/httpclient/src/test/java/com/baeldung/httpclient/rare/HttpClientUnshortenLiveTest.java\n+++ b/httpclient/src/test/java/com/baeldung/httpclient/rare/HttpClientUnshortenLiveTest.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.httpclient.rare;\n+package com.baeldung.httpclient.rare;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;",
    "output": "BAEL-19947: Migrate httpclient module to the com.baeldung package"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n--- a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n+++ b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n@@ -156,10 +156,16 @@ public void givenDataWritten_whenWrite_thenFreeSpaceReduces() {\n \n     private static File makeDir(String name) {\n         File directory = new File(name);\n-        directory.mkdir();\n-        if (directory.isDirectory()) {\n+\n+        // If the directory already exists, make sure we create it 'from scratch', i.e. all the files inside are deleted first\n+        if (directory.exists()) {\n+            removeDir(directory);\n+        }\n+\n+        if (directory.mkdir()) {\n             return directory;\n         }\n+\n         throw new RuntimeException(\"'\" + name + \"' not made!\");\n     }\n ",
    "output": "BAEL-3651: Make sure the directory is always initially empty"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n--- a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n+++ b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n@@ -1,21 +1,15 @@\n package com.baeldung.file;\n \n-\n import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import java.io.*;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.StringJoiner;\n \n import static org.junit.Assert.*;\n \n public class FileClassUnitTest {\n \n-    private static final Logger log = LoggerFactory.getLogger(\"FileClassUnitTest\");\n-\n     @Test\n     public void givenDir_whenMkdir_thenDirIsDeleted() {\n         File directory = new File(\"dir\");\n@@ -143,39 +137,23 @@ public void givenDir_whenMkdir_thenCanRenameDir() {\n     public void givenDataWritten_whenWrite_thenFreeSpaceReduces() {\n \n         String home = System.getProperty(\"user.home\");\n-        log.info(\"user.home: \" + home);\n         String sep = File.separator;\n         File testDir = makeDir(home + sep + \"test\");\n-        log.info(\"testDir: \" + testDir.toString());\n         File sample = new File(testDir, \"sample.txt\");\n-        log.info(\"sample: \" + sample.toString());\n \n         long freeSpaceBefore = testDir.getFreeSpace();\n-        log.info(\"freeSpaceBefore: \" + freeSpaceBefore);\n-\n-        log.info(\"testDir list before: \" + getListOfFiles(testDir));\n         try {\n             writeSampleDataToFile(sample);\n         } catch (IOException e) {\n             fail(\"Could not write to \" + \"sample.txt\");\n         }\n \n         long freeSpaceAfter = testDir.getFreeSpace();\n-        log.info(\"freeSpaceAfter: \" + freeSpaceAfter);\n-        log.info(\"testDir list after: \" + getListOfFiles(testDir));\n         assertTrue(freeSpaceAfter < freeSpaceBefore);\n \n         removeDir(testDir);\n     }\n \n-    private String getListOfFiles(File dir){\n-        String list = \"\";\n-        for(String l : dir.list()){\n-            list += \" _ \" + l;\n-        }\n-        return list;\n-    }\n-\n     private static File makeDir(String name) {\n         File directory = new File(name);\n         directory.mkdir();",
    "output": "Revert \"BAEL-3651: [Do Not Merge] Add diagnostic logging\"\n\nThis reverts commit 1f18b3a051e228a74ec404e8ec535e680a6dac0e."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n--- a/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n+++ b/core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java\n@@ -1,15 +1,21 @@\n package com.baeldung.file;\n \n+\n import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.*;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.StringJoiner;\n \n import static org.junit.Assert.*;\n \n public class FileClassUnitTest {\n \n+    private static final Logger log = LoggerFactory.getLogger(\"FileClassUnitTest\");\n+\n     @Test\n     public void givenDir_whenMkdir_thenDirIsDeleted() {\n         File directory = new File(\"dir\");\n@@ -137,23 +143,39 @@ public void givenDir_whenMkdir_thenCanRenameDir() {\n     public void givenDataWritten_whenWrite_thenFreeSpaceReduces() {\n \n         String home = System.getProperty(\"user.home\");\n+        log.info(\"user.home: \" + home);\n         String sep = File.separator;\n         File testDir = makeDir(home + sep + \"test\");\n+        log.info(\"testDir: \" + testDir.toString());\n         File sample = new File(testDir, \"sample.txt\");\n+        log.info(\"sample: \" + sample.toString());\n \n         long freeSpaceBefore = testDir.getFreeSpace();\n+        log.info(\"freeSpaceBefore: \" + freeSpaceBefore);\n+\n+        log.info(\"testDir list before: \" + getListOfFiles(testDir));\n         try {\n             writeSampleDataToFile(sample);\n         } catch (IOException e) {\n             fail(\"Could not write to \" + \"sample.txt\");\n         }\n \n         long freeSpaceAfter = testDir.getFreeSpace();\n+        log.info(\"freeSpaceAfter: \" + freeSpaceAfter);\n+        log.info(\"testDir list after: \" + getListOfFiles(testDir));\n         assertTrue(freeSpaceAfter < freeSpaceBefore);\n \n         removeDir(testDir);\n     }\n \n+    private String getListOfFiles(File dir){\n+        String list = \"\";\n+        for(String l : dir.list()){\n+            list += \" _ \" + l;\n+        }\n+        return list;\n+    }\n+\n     private static File makeDir(String name) {\n         File directory = new File(name);\n         directory.mkdir();",
    "output": "BAEL-3651: [Do Not Merge] Add diagnostic logging"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/post/OkHttpPostingLiveTest.java\n@@ -1,122 +1,122 @@\n-package com.baeldung.okhttp;\r\n-\r\n-import static com.baeldung.client.Consts.APPLICATION_PORT;\r\n-import static org.hamcrest.Matchers.equalTo;\r\n-import static org.junit.Assert.assertThat;\r\n-\r\n-import java.io.File;\r\n-import java.io.IOException;\r\n-\r\n-import okhttp3.Call;\r\n-import okhttp3.Credentials;\r\n-import okhttp3.FormBody;\r\n-import okhttp3.MediaType;\r\n-import okhttp3.MultipartBody;\r\n-import okhttp3.OkHttpClient;\r\n-import okhttp3.Request;\r\n-import okhttp3.RequestBody;\r\n-import okhttp3.Response;\r\n-\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-/**\r\n- * Execute <code>spring-rest</code> module before running this live test\r\n- */\r\n-public class OkHttpPostingLiveTest {\r\n-\r\n-    private static final String BASE_URL = \"http://localhost:\" + APPLICATION_PORT + \"/spring-rest\";\r\n-    private static final String URL_SECURED_BY_BASIC_AUTHENTICATION = \"http://browserspy.dk/password-ok.php\";\r\n-\r\n-    OkHttpClient client;\r\n-\r\n-    @Before\r\n-    public void init() {\r\n-\r\n-        client = new OkHttpClient();\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendPostRequest_thenCorrect() throws IOException {\r\n-        final RequestBody formBody = new FormBody.Builder()\r\n-                .add(\"username\", \"test\")\r\n-                .add(\"password\", \"test\")\r\n-                .build();\r\n-\r\n-        final Request request = new Request.Builder()\r\n-                .url(BASE_URL + \"/users\")\r\n-                .post(formBody)\r\n-                .build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOException {\r\n-        final String postBody = \"test post\";\r\n-\r\n-        final Request request = new Request.Builder()\r\n-                .url(URL_SECURED_BY_BASIC_AUTHENTICATION)\r\n-                .addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\"))\r\n-                .post(RequestBody.create(MediaType.parse(\"text/x-markdown\"), \"test post\"))\r\n-                .build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenPostJson_thenCorrect() throws IOException {\r\n-        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n-\r\n-        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users/detail\").post(body).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenPostJsonWithoutCharset_thenCharsetIsUtf8() throws IOException {\r\n-        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n-\r\n-        final RequestBody body = RequestBody.create(\r\n-                MediaType.parse(\"application/json\"), json);\r\n-\r\n-        String charset = body.contentType().charset().displayName();\r\n-\r\n-        assertThat(charset, equalTo(\"UTF-8\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenPostJsonWithUtf16Charset_thenCharsetIsUtf16() throws IOException {\r\n-        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n-\r\n-        final RequestBody body = RequestBody.create(\r\n-                MediaType.parse(\"application/json; charset=utf-16\"), json);\r\n-\r\n-        String charset = body.contentType().charset().displayName();\r\n-\r\n-        assertThat(charset, equalTo(\"UTF-16\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void whenSendMultipartRequest_thenCorrect() throws IOException {\r\n-        final RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(\"username\", \"test\").addFormDataPart(\"password\", \"test\")\r\n-                .addFormDataPart(\"file\", \"file.txt\", RequestBody.create(MediaType.parse(\"application/octet-stream\"), new File(\"src/test/resources/test.txt\"))).build();\r\n-\r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users/multipart\").post(requestBody).build();\r\n-\r\n-        final Call call = client.newCall(request);\r\n-        final Response response = call.execute();\r\n-\r\n-        assertThat(response.code(), equalTo(200));\r\n-    }\r\n-}\r\n+package com.baeldung.okhttp.post;\n+\n+import static com.baeldung.client.Consts.APPLICATION_PORT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import okhttp3.Call;\n+import okhttp3.Credentials;\n+import okhttp3.FormBody;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Execute <code>spring-rest</code> module before running this live test\n+ */\n+public class OkHttpPostingLiveTest {\n+\n+    private static final String BASE_URL = \"http://localhost:\" + APPLICATION_PORT + \"/spring-rest\";\n+    private static final String URL_SECURED_BY_BASIC_AUTHENTICATION = \"http://browserspy.dk/password-ok.php\";\n+\n+    OkHttpClient client;\n+\n+    @Before\n+    public void init() {\n+\n+        client = new OkHttpClient();\n+    }\n+\n+    @Test\n+    public void whenSendPostRequest_thenCorrect() throws IOException {\n+        final RequestBody formBody = new FormBody.Builder()\n+                .add(\"username\", \"test\")\n+                .add(\"password\", \"test\")\n+                .build();\n+\n+        final Request request = new Request.Builder()\n+                .url(BASE_URL + \"/users\")\n+                .post(formBody)\n+                .build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOException {\n+        final String postBody = \"test post\";\n+\n+        final Request request = new Request.Builder()\n+                .url(URL_SECURED_BY_BASIC_AUTHENTICATION)\n+                .addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\"))\n+                .post(RequestBody.create(MediaType.parse(\"text/x-markdown\"), \"test post\"))\n+                .build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenPostJson_thenCorrect() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\n+        final Request request = new Request.Builder().url(BASE_URL + \"/users/detail\").post(body).build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void whenPostJsonWithoutCharset_thenCharsetIsUtf8() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(\n+                MediaType.parse(\"application/json\"), json);\n+\n+        String charset = body.contentType().charset().displayName();\n+\n+        assertThat(charset, equalTo(\"UTF-8\"));\n+    }\n+\n+    @Test\n+    public void whenPostJsonWithUtf16Charset_thenCharsetIsUtf16() throws IOException {\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\n+\n+        final RequestBody body = RequestBody.create(\n+                MediaType.parse(\"application/json; charset=utf-16\"), json);\n+\n+        String charset = body.contentType().charset().displayName();\n+\n+        assertThat(charset, equalTo(\"UTF-16\"));\n+    }\n+\n+    @Test\n+    public void whenSendMultipartRequest_thenCorrect() throws IOException {\n+        final RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(\"username\", \"test\").addFormDataPart(\"password\", \"test\")\n+                .addFormDataPart(\"file\", \"file.txt\", RequestBody.create(MediaType.parse(\"application/octet-stream\"), new File(\"src/test/resources/test.txt\"))).build();\n+\n+        final Request request = new Request.Builder().url(BASE_URL + \"/users/multipart\").post(requestBody).build();\n+\n+        final Call call = client.newCall(request);\n+        final Response response = call.execute();\n+\n+        assertThat(response.code(), equalTo(200));\n+    }\n+}",
    "output": "Move POST test class to its own package\nhttp://team.baeldung.com/browse/BAEL-11412"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BruteForceAlgorithm {\n+\n+    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n+\n+    public int maxSubArray(int[] arr) {\n+\n+        int size = arr.length;\n+        int maximumSubArraySum = Integer.MIN_VALUE;\n+        int start = 0;\n+        int end = 0;\n+\n+        for (int left = 0; left < size; left++) {\n+\n+            int runningWindowSum = 0;\n+\n+            for (int right = left; right < size; right++) {\n+                runningWindowSum += arr[right];\n+\n+                if (runningWindowSum > maximumSubArraySum) {\n+                    maximumSubArraySum = runningWindowSum;\n+                    start = left;\n+                    end = right;\n+                }\n+            }\n+        }\n+        logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\n+        return maximumSubArraySum;\n+    }\n+\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KadaneAlgorithm {\n+\n+    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n+\n+    public int maxSubArraySum(int[] arr) {\n+\n+        int size = arr.length;\n+        int start = 0;\n+        int end = 0;\n+\n+        int maxSoFar = 0, maxEndingHere = 0;\n+\n+        for (int i = 0; i < size; i++) {\n+\n+            if (arr[i] > maxEndingHere + arr[i]) {\n+                start = i;\n+                maxEndingHere = arr[i];\n+            } else\n+                maxEndingHere = maxEndingHere + arr[i];\n+\n+            if (maxSoFar < maxEndingHere) {\n+                maxSoFar = maxEndingHere;\n+                end = i;\n+            }\n+        }\n+        logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\n+        return maxSoFar;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class BruteForceAlgorithmUnitTest {\n+\n+    @Test\n+    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n+        //given\n+        int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n+        //when\n+        BruteForceAlgorithm algorithm = new BruteForceAlgorithm();\n+        int maximumSum = algorithm.maxSubArray(arr);\n+        //then\n+        assertEquals(6, maximumSum);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class KadaneAlgorithmUnitTest {\n+\n+    @Test\n+    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n+        //given\n+        int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n+        //when\n+        KadaneAlgorithm algorithm = new KadaneAlgorithm();\n+        int maxSum = algorithm.maxSubArraySum(arr);\n+        //then\n+        assertEquals(6, maxSum);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #8294 from dev-chirag/master\n\nBAEL3455 Maximum Subarray problem"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/mergesortedarrays/SortedArrays.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.algorithms.mergesortedarrays;\n+\n+public class SortedArrays {\n+\n+    public static int[] merge(int[] foo, int[] bar) {\n+\n+        int fooLength = foo.length;\n+        int barLength = bar.length;\n+\n+        int[] merged = new int[fooLength + barLength];\n+\n+        int fooPosition, barPosition, mergedPosition;\n+        fooPosition = barPosition = mergedPosition = 0;\n+\n+        while (fooPosition < fooLength && barPosition < barLength) {\n+            if (foo[fooPosition] < bar[barPosition]) {\n+                merged[mergedPosition++] = foo[fooPosition++];\n+            } else {\n+                merged[mergedPosition++] = bar[barPosition++];\n+            }\n+        }\n+\n+        while (fooPosition < fooLength) {\n+            merged[mergedPosition++] = foo[fooPosition++];\n+        }\n+\n+        while (barPosition < barLength) {\n+            merged[mergedPosition++] = bar[barPosition++];\n+        }\n+\n+        return merged;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n@@ -1,34 +0,0 @@\n-package com.baeldung.algorithms.sortedarrays;\n-\n-public class SortedArrays {\n-\n-    public static int[] merge(int[] first, int[] second) {\n-\n-        int firstLength = first.length;\n-        int secondLength = second.length;\n-\n-        int[] result = new int[firstLength + secondLength];\n-\n-        int firstPosition, secondPosition, resultPosition;\n-        firstPosition = secondPosition = resultPosition = 0;\n-\n-        while (firstPosition < firstLength && secondPosition < secondLength) {\n-\n-            if (first[firstPosition] < second[secondPosition]) {\n-                result[resultPosition++] = first[firstPosition++];\n-            } else {\n-                result[resultPosition++] = second[secondPosition++];\n-            }\n-        }\n-\n-        while (firstPosition < firstLength) {\n-            result[resultPosition++] = first[firstPosition++];\n-        }\n-\n-        while (secondPosition < secondLength) {\n-            result[resultPosition++] = second[secondPosition++];\n-        }\n-\n-        return result;\n-    }\n-}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/mergesortedarrays/SortedArraysUnitTest.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.algorithms.mergesortedarrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import org.junit.jupiter.api.Test;\n+\n+import com.baeldung.algorithms.mergesortedarrays.SortedArrays;\n+\n+public class SortedArraysUnitTest {\n+\n+    @Test\n+    public void givenTwoSortedArrays_whenMerged_thenReturnMergedSortedArray() {\n+\n+        int[] foo = { 3, 7 };\n+        int[] bar = { 4, 8, 11 };\n+        int[] merged = { 3, 4, 7, 8, 11 };\n+\n+        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n+    }\n+\n+    @Test\n+    public void givenTwoSortedArraysWithDuplicates_whenMerged_thenReturnMergedSortedArray() {\n+\n+        int[] foo = { 3, 3, 7 };\n+        int[] bar = { 4, 8, 8, 11 };\n+        int[] merged = { 3, 3, 4, 7, 8, 8, 11 };\n+\n+        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n@@ -1,27 +0,0 @@\n-package com.baeldung.algorithms.sortedarrays;\n-\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import org.junit.jupiter.api.Test;\n-\n-public class SortedArraysUnitTest {\n-\n-    @Test\n-    public void givenTwoSortedArraysWhenMergeThenReturnMergedSortedArray() {\n-\n-        int[] first = { 3, 7 };\n-        int[] second = { 4, 8, 11 };\n-        int[] result = { 3, 4, 7, 8, 11 };\n-\n-        assertArrayEquals(result, SortedArrays.merge(first, second));\n-    }\n-\n-    @Test\n-    public void givenTwoSortedArraysWithDuplicatesWhenMergeThenReturnMergedSortedArray() {\n-\n-        int[] first = { 3, 3, 7 };\n-        int[] second = { 4, 8, 8, 11 };\n-        int[] result = { 3, 3, 4, 7, 8, 8, 11 };\n-\n-        assertArrayEquals(result, SortedArrays.merge(first, second));\n-    }\n-}",
    "output": "BAEL-3399: How to merge two sorted arrays (based on review)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n@@ -0,0 +1,76 @@\n+package com.baeldung.switchExpression;\n+\n+import static java.time.Month.AUGUST;\n+import static java.time.Month.JUNE;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.time.Month;\n+import java.util.function.Function;\n+\n+import org.junit.Test;\n+\n+public class SwitchExpressionsUnitTest {\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void whenSwitchingOverMonthJune_thenWillReturn3() {\n+\n+    var month = JUNE;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL -> 2;\n+      default -> 0;\n+    };\n+\n+    assertEquals(result, 3);\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void whenSwitchingOverMonthAugust_thenWillReturn24() {\n+    var month = AUGUST;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL, AUGUST -> {\n+        int monthLength = month.toString().length();\n+        yield monthLength * 4;\n+      }\n+      default -> 0;\n+    };\n+\n+    assertEquals(24, result);\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void whenSwitchingOverMonthJanuary_thenWillReturn3() {\n+\n+    Function<Month, Integer> func = (month) -> {\n+      switch (month) {\n+        case JANUARY, JUNE, JULY -> { return 3; }\n+        default -> { return 0; }\n+      }\n+    };\n+\n+    assertEquals(Integer.valueOf(3), func.apply(Month.JANUARY));\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void whenSwitchingOverMonthAugust_thenWillReturn2() {\n+    var month = AUGUST;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL, AUGUST -> 2;\n+    };\n+\n+    assertEquals(result, 2);\n+  }\n+}",
    "output": "Merge pull request #8327 from nickmelis/master\n\nCode samples for Java Switch Statement"
  },
  {
    "input": "diff --git a/java-collections-conversions/src/main/java/com/baeldung/convertlisttomap/ConvertListToMapService.java b/java-collections-conversions/src/main/java/com/baeldung/convertlisttomap/ConvertListToMapService.java\n--- a/java-collections-conversions/src/main/java/com/baeldung/convertlisttomap/ConvertListToMapService.java\n+++ b/java-collections-conversions/src/main/java/com/baeldung/convertlisttomap/ConvertListToMapService.java\n@@ -6,6 +6,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n public class ConvertListToMapService {\n@@ -21,7 +22,7 @@ public Map<Integer, Animal> convertListBeforeJava8(List<Animal> list) {\n     }\n \n     public Map<Integer, Animal> convertListAfterJava8(List<Animal> list) {\n-        Map<Integer, Animal> map = list.stream().collect(Collectors.toMap(Animal::getId, animal -> animal));\n+        Map<Integer, Animal> map = list.stream().collect(Collectors.toMap(Animal::getId, Function.identity()));\n         return map;\n     }\n \n\ndiff --git a/java-collections-conversions/src/test/java/com/baeldung/convertcollectiontoarraylist/CollectionToArrayListUnitTest.java b/java-collections-conversions/src/test/java/com/baeldung/convertcollectiontoarraylist/CollectionToArrayListUnitTest.java\n--- a/java-collections-conversions/src/test/java/com/baeldung/convertcollectiontoarraylist/CollectionToArrayListUnitTest.java\n+++ b/java-collections-conversions/src/test/java/com/baeldung/convertcollectiontoarraylist/CollectionToArrayListUnitTest.java\n@@ -53,14 +53,14 @@ public void whenUsingStream_thenVerifyShallowCopy() {\n \n         verifyShallowCopy(srcCollection, newList);\n     }\n-    \n+\n     /**\n      * Section 5. Deep Copy\n      */\n     @Test\n     public void whenUsingDeepCopy_thenVerifyDeepCopy() {\n         ArrayList<Foo> newList = srcCollection.stream()\n-          .map(foo -> foo.deepCopy())\n+          .map(Foo::deepCopy)\n           .collect(toCollection(ArrayList::new));\n \n         verifyDeepCopy(srcCollection, newList);\n@@ -83,13 +83,13 @@ public void whenUsingSortedStream_thenVerifySortOrder() {\n      * @param a\n      * @param b \n      */\n-    private void verifyShallowCopy(Collection a, Collection b) {\n+    private void verifyShallowCopy(Collection<Foo> a, Collection<Foo> b) {\n         assertEquals(\"Collections have different lengths\", a.size(), b.size());\n         Iterator<Foo> iterA = a.iterator();\n         Iterator<Foo> iterB = b.iterator();\n         while (iterA.hasNext()) {\n             // use '==' to test instance identity\n-            assertTrue(\"Foo instances differ!\", iterA.next() == iterB.next());\n+            assertSame(\"Foo instances differ!\", iterA.next(), iterB.next());\n         }\n     }\n     \n@@ -98,15 +98,15 @@ private void verifyShallowCopy(Collection a, Collection b) {\n      * @param a\n      * @param b \n      */\n-    private void verifyDeepCopy(Collection a, Collection b) {\n+    private void verifyDeepCopy(Collection<Foo> a, Collection<Foo> b) {\n         assertEquals(\"Collections have different lengths\", a.size(), b.size());\n         Iterator<Foo> iterA = a.iterator();\n         Iterator<Foo> iterB = b.iterator();\n         while (iterA.hasNext()) {\n             Foo nextA = iterA.next();\n             Foo nextB = iterB.next();\n             // should not be same instance\n-            assertFalse(\"Foo instances are the same!\", nextA == nextB);\n+            assertNotSame(\"Foo instances are the same!\", nextA, nextB);\n             // but should have same content\n             assertFalse(\"Foo instances have different content!\", fooDiff(nextA, nextB));\n         }\n\ndiff --git a/java-collections-conversions/src/test/java/com/baeldung/convertiteratortolist/ConvertIteratorToListServiceUnitTest.java b/java-collections-conversions/src/test/java/com/baeldung/convertiteratortolist/ConvertIteratorToListServiceUnitTest.java\n--- a/java-collections-conversions/src/test/java/com/baeldung/convertiteratortolist/ConvertIteratorToListServiceUnitTest.java\n+++ b/java-collections-conversions/src/test/java/com/baeldung/convertiteratortolist/ConvertIteratorToListServiceUnitTest.java\n@@ -23,15 +23,15 @@ public class ConvertIteratorToListServiceUnitTest {\n     Iterator<Integer> iterator;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         iterator = Arrays.asList(1, 2, 3)\n             .iterator();\n     }\n \n     @Test\n     public void givenAnIterator_whenConvertIteratorToListUsingWhileLoop_thenReturnAList() {\n \n-        List<Integer> actualList = new ArrayList<Integer>();\n+        List<Integer> actualList = new ArrayList<>();\n \n         // Convert Iterator to List using while loop dsf\n         while (iterator.hasNext()) {\n@@ -44,7 +44,7 @@ public void givenAnIterator_whenConvertIteratorToListUsingWhileLoop_thenReturnAL\n \n     @Test\n     public void givenAnIterator_whenConvertIteratorToListAfterJava8_thenReturnAList() {\n-        List<Integer> actualList = new ArrayList<Integer>();\n+        List<Integer> actualList = new ArrayList<>();\n \n         // Convert Iterator to List using Java 8\n         iterator.forEachRemaining(actualList::add);",
    "output": "Cleanup and function references"
  },
  {
    "input": "diff --git a/spring-5-reactive-security/src/main/java/com/baeldung/reactive/authresolver/CustomWebSecurityConfig.java b/spring-5-reactive-security/src/main/java/com/baeldung/reactive/authresolver/CustomWebSecurityConfig.java\n--- a/spring-5-reactive-security/src/main/java/com/baeldung/reactive/authresolver/CustomWebSecurityConfig.java\n+++ b/spring-5-reactive-security/src/main/java/com/baeldung/reactive/authresolver/CustomWebSecurityConfig.java\n@@ -44,8 +44,9 @@ public ReactiveAuthenticationManagerResolver<ServerHttpRequest> resolver() {\n               .getPath()\n               .subPath(0)\n               .value()\n-              .startsWith(\"/employee\"))\n+              .startsWith(\"/employee\")) {\n                 return Mono.just(employeesAuthenticationManager());\n+            }\n             return Mono.just(customersAuthenticationManager());\n         };\n     }\n\ndiff --git a/spring-5-security/src/main/java/com/baeldung/authresolver/CustomWebSecurityConfigurer.java b/spring-5-security/src/main/java/com/baeldung/authresolver/CustomWebSecurityConfigurer.java\n--- a/spring-5-security/src/main/java/com/baeldung/authresolver/CustomWebSecurityConfigurer.java\n+++ b/spring-5-security/src/main/java/com/baeldung/authresolver/CustomWebSecurityConfigurer.java\n@@ -27,8 +27,9 @@ public AuthenticationManagerResolver<HttpServletRequest> resolver() {\n         return request -> {\n             if (request\n               .getPathInfo()\n-              .startsWith(\"/employee\"))\n+              .startsWith(\"/employee\")) {\n                 return employeesAuthenticationManager();\n+            }\n             return customersAuthenticationManager();\n         };\n     }\n@@ -63,10 +64,10 @@ private boolean isEmployee(Authentication authentication) {\n     }\n \n     private AuthenticationFilter authenticationFilter() {\n-        AuthenticationFilter ret = new AuthenticationFilter(\n+        AuthenticationFilter filter = new AuthenticationFilter(\n           resolver(), authenticationConverter());\n-        ret.setSuccessHandler((request, response, auth) -> {});\n-        return ret;\n+        filter.setSuccessHandler((request, response, auth) -> {});\n+        return filter;\n     }\n \n     private AuthenticationManager employeesAuthenticationManager() {",
    "output": "BAEL-3338: A Guide to AuthenticationManagerResolver in Spring Security\n-Fix issues according to review"
  },
  {
    "input": "diff --git a/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java b/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n--- a/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n+++ b/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n@@ -1,42 +0,0 @@\n-package com.baeldung.casting;\n-\n-public class DoubleToInteger {\n-\n-    static Double value = 99999.999;\n-\n-    public static void main(String[] args) {\n-\n-        System.out.println(usingIntValue(value));\n-\n-        System.out.println(usingMathRound(value));\n-        System.out.println(usingMathCeil(value));\n-\n-        System.out.println(usingMathFloor(value));\n-        System.out.println(usingMathAbs(value));\n-    }\n-\n-    public static Integer usingIntValue(Double value) {\n-        return value.intValue();\n-    }\n-\n-    public static Integer usingMathRound(Double value) {\n-        return (int) Math.round(value);\n-    }\n-\n-    public static Integer usingMathCeil(Double value) {\n-        return (int) Math.ceil(value);\n-    }\n-\n-    public static Integer usingMathFloor(Double value) {\n-        return (int) Math.floor(value);\n-    }\n-\n-    public static Integer usingMathAbs(Double value) {\n-        return (int) Math.abs(value);\n-    }\n-\n-    public static Integer usingCast(Double value) {\n-        return (int) value.doubleValue();\n-    }\n-\n-}\n\ndiff --git a/java-numbers/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java b/java-numbers/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n--- a/java-numbers/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n+++ b/java-numbers/src/test/java/com/baeldung/doubletolong/DoubleToLongUnitTest.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.doubletolong;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DoubleToLongUnitTest {\n+\n+    final static double VALUE = 9999.999;\n+\n+    @Test\n+    public void using_longValue() {\n+        Assert.assertEquals(9999L, Double.valueOf(VALUE)\n+            .longValue());\n+    }\n+\n+    @Test\n+    public void using_Math_Round() {\n+        Assert.assertEquals(10000L, Math.round(VALUE));\n+    }\n+\n+    @Test\n+    public void using_Math_Ceil() {\n+        Assert.assertEquals(10000L, Math.ceil(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void using_Math_Floor() {\n+        Assert.assertEquals(9999L, Math.floor(VALUE), 0);\n+    }\n+\n+    @Test\n+    public void using_Type_Cast() {\n+        Assert.assertEquals(9999L, (long) VALUE);\n+    }\n+\n+}",
    "output": "added review changes"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/HeapNode.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+public class HeapNode {\r\n+\r\n+    int element;\r\n+    int arrayIndex;\r\n+    int nextElementIndex = 1;\r\n+\r\n+    public HeapNode(int element, int arrayIndex) {\r\n+        this.element = element;\r\n+        this.arrayIndex = arrayIndex;\r\n+    }\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeap.java\n@@ -0,0 +1,63 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+public class MinHeap {\r\n+\r\n+    HeapNode[] heapNodes;\r\n+    int heapSize;\r\n+\r\n+    public MinHeap(HeapNode heapNodes[]) {\r\n+        this.heapSize = heapNodes.length;\r\n+        this.heapNodes = heapNodes;\r\n+        heapifyFromLastLeafsParent();\r\n+    }\r\n+\r\n+    void heapifyFromLastLeafsParent() {\r\n+        int lastLeafsParentIndex = getParentNodeIndex(heapSize);\r\n+        while (lastLeafsParentIndex >= 0) {\r\n+            heapify(lastLeafsParentIndex);\r\n+            lastLeafsParentIndex--;\r\n+        }\r\n+    }\r\n+\r\n+    void heapify(int index) {\r\n+        int leftNodeIndex = getLeftNodeIndex(index);\r\n+        int rightNodeIndex = getRightNodeIndex(index);\r\n+        int smallestElementIndex = index;\r\n+        if (leftNodeIndex < heapSize && heapNodes[leftNodeIndex].element < heapNodes[index].element)\r\n+            smallestElementIndex = leftNodeIndex;\r\n+        \r\n+        if (rightNodeIndex < heapSize && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element)\r\n+            smallestElementIndex = rightNodeIndex;\r\n+        \r\n+        if (smallestElementIndex != index) {\r\n+            swap(index, smallestElementIndex);\r\n+            heapify(smallestElementIndex);\r\n+        }\r\n+    }\r\n+\r\n+    int getParentNodeIndex(int index) {\r\n+        return (index - 1) / 2;\r\n+    }\r\n+\r\n+    int getLeftNodeIndex(int index) {\r\n+        return (2 * index + 1);\r\n+    }\r\n+\r\n+    int getRightNodeIndex(int index) {\r\n+        return (2 * index + 2);\r\n+    }\r\n+\r\n+    HeapNode getRootNode() {\r\n+        return heapNodes[0];\r\n+    }\r\n+\r\n+    void hepifyFromRoot(HeapNode root) {\r\n+        heapify(0);\r\n+    }\r\n+\r\n+    void swap(int i, int j) {\r\n+        HeapNode temp = heapNodes[i];\r\n+        heapNodes[i] = heapNodes[j];\r\n+        heapNodes[j] = temp;\r\n+    }\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/minheapmerge/MinHeapMerge.java\n@@ -0,0 +1,56 @@\n+package com.baeldung.algorithms.minheapmerge;\r\n+\r\n+public class MinHeapMerge {\r\n+\r\n+    static void printArray(int[] array) {\r\n+        for (int i = 0; i < array.length; i++) {\r\n+            System.out.print(array[i] + \" \");\r\n+        }\r\n+    }\r\n+\r\n+    static int populateHeapNodesAndDetermineResultingArrayLength(int[][] array, HeapNode[] heapNodes) {\r\n+        int resultSize = 0;\r\n+\r\n+        for (int i = 0; i < array.length; i++) {\r\n+            HeapNode node = new HeapNode(array[i][0], i);\r\n+            heapNodes[i] = node;\r\n+            resultSize += array[i].length;\r\n+        }\r\n+        return resultSize;\r\n+    }\r\n+\r\n+    static int[] createMinHeapAndMergeArrays(int[][] array, HeapNode[] heapNodes, int resultingArraySize) {\r\n+\r\n+        MinHeap minHeap = new MinHeap(heapNodes);\r\n+        int[] resultingArray = new int[resultingArraySize];\r\n+\r\n+        for (int i = 0; i < resultingArraySize; i++) {\r\n+            HeapNode root = minHeap.getRootNode();\r\n+            resultingArray[i] = root.element;\r\n+\r\n+            if (root.nextElementIndex < array[root.arrayIndex].length) {\r\n+                root.element = array[root.arrayIndex][root.nextElementIndex++];\r\n+            } else {\r\n+                root.element = Integer.MAX_VALUE;\r\n+            }\r\n+            minHeap.hepifyFromRoot(root);\r\n+        }\r\n+        return resultingArray;\r\n+    }\r\n+\r\n+    static void merge(int[][] array) {\r\n+        HeapNode[] heapNodes = new HeapNode[array.length];\r\n+        int resultingArraySize = populateHeapNodesAndDetermineResultingArrayLength(array, heapNodes);\r\n+\r\n+        int[] resultingArray = createMinHeapAndMergeArrays(array, heapNodes, resultingArraySize);\r\n+\r\n+        printArray(resultingArray);\r\n+\r\n+    }\r\n+\r\n+    public static void main(String args[]) {\r\n+        int[][] array = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 650, 200 }, { 3, 4 }, { 1001, 6456, 23000 } };\r\n+\r\n+        merge(array);\r\n+    }\r\n+}\r",
    "output": "BAEL- 3482\n\nInitial commit"
  },
  {
    "input": "diff --git a/ninja/src/main/java/conf/Routes.java b/ninja/src/main/java/conf/Routes.java\n--- a/ninja/src/main/java/conf/Routes.java\n+++ b/ninja/src/main/java/conf/Routes.java\n@@ -10,10 +10,15 @@ public class Routes implements ApplicationRoutes {\n     @Override\n     public void init(Router router) {  \n         \n-        router.GET().route(\"/\").with(ApplicationController::index);\n+        router.GET().route(\"/index\").with(ApplicationController::index);\n+        router.GET().route(\"/home\").with(ApplicationController::home);\n         router.GET().route(\"/hello\").with(ApplicationController::helloWorld);\n         router.GET().route(\"/userJson\").with(ApplicationController::userJson);\n+        router.GET().route(\"/createUser\").with(ApplicationController::createUser);\n+        router.GET().route(\"/flash\").with(ApplicationController::showFlashMsg);\n+        \n         router.GET().route(\"/users\").with(ApplicationController::fetchUsers);\n+        router.POST().route(\"/users\").with(ApplicationController::insertUser);\n  \n         //Assets\n         router.GET().route(\"/assets/webjars/{fileName: .*}\").with(AssetsController::serveWebJars);\n\ndiff --git a/ninja/src/main/java/controllers/ApplicationController.java b/ninja/src/main/java/controllers/ApplicationController.java\n--- a/ninja/src/main/java/controllers/ApplicationController.java\n+++ b/ninja/src/main/java/controllers/ApplicationController.java\n@@ -1,14 +1,8 @@\n package controllers;\n \n-import ninja.Context;\n-import ninja.Result;\n-import ninja.Results;\n-import ninja.i18n.Lang;\n-import ninja.i18n.Messages;\n-import ninja.jpa.UnitOfWork;\n-import services.UserService;\n-\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n \n import javax.inject.Inject;\n@@ -20,9 +14,19 @@\n \n import com.google.inject.Provider;\n import com.google.inject.Singleton;\n+import com.google.inject.persist.Transactional;\n \n import models.User;\n-import com.google.inject.persist.Transactional;\n+import ninja.Context;\n+import ninja.Result;\n+import ninja.Results;\n+import ninja.i18n.Lang;\n+import ninja.i18n.Messages;\n+import ninja.jpa.UnitOfWork;\n+import ninja.session.FlashScope;\n+import ninja.validation.JSR303Validation;\n+import ninja.validation.Validation;\n+import services.UserService;\n \n @Singleton\n public class ApplicationController {\n@@ -40,44 +44,59 @@ public class ApplicationController {\n \n     @Inject\n     UserService userService;\n-\n+    \n     public Result index() {\n-        Result result = Results.html();\n-        lang.setLanguage(\"fr\", result);\n-        return result;\n-\n+        return Results.html();\n     }\n \n     public Result userJson() {\n-        User user = userService.getUser();\n-        logger.info(user);\n-        return Results.json().render(user);\n+        HashMap<String, String> userMap = userService.getUserMap();\n+        logger.info(userMap);\n+        return Results.json().render(userMap);\n     }\n \n     public Result helloWorld(Context context) {\n-        Optional<String> language = Optional.of(\"en\");        \n+        Optional<String> language = Optional.of(\"fr\");        \n         String helloMsg = msg.get(\"helloMsg\", language).get();\n         return Results.text().render(helloMsg);\n     }\n     \n+    public Result showFlashMsg(FlashScope flashScope) {\n+        flashScope.success(\"Success message\");\n+        flashScope.error(\"Error message\");\n+        return Results.redirect(\"/home\");\n+    }\n+    \n+    public Result home() {\n+        return Results.html();\n+    }\n+    \n+    public Result createUser() {\n+        return Results.html();\n+    }\n+    \n     @UnitOfWork\n     public Result fetchUsers() {\n-        insertUser();\n         EntityManager entityManager = entitiyManagerProvider.get();\n         Query q = entityManager.createQuery(\"SELECT x FROM User x\");\n         List<User> users = (List<User>) q.getResultList();\n-        System.out.println(users);\n-        return Results.text().render(\"Done\");\n+        return Results.json().render(users);\n     }\n     \n     @Transactional\n-    public Result insertUser() {\n-        EntityManager entityManager = entitiyManagerProvider.get();\n-        User user = userService.getUser();\n-        entityManager.persist(user);\n-        entityManager.flush();\n+    public Result insertUser(FlashScope flashScope, @JSR303Validation User user, Validation validation) {\n+        logger.info(\"Inserting User : \" +user);\n+            \n+        if (validation.getViolations().size() > 0) {\n+            flashScope.error(\"Validation Error: User can't be created\");\n+        } else {\n+            EntityManager entityManager = entitiyManagerProvider.get();\n+            entityManager.persist(user);\n+            entityManager.flush();\n+            flashScope.success(\"User '\" + user + \"' is created successfully\");\n+        }\n         \n-        return Results.text().render(\"Inserted\");\n+        return Results.redirect(\"/home\");\n     }\n \n }\n\ndiff --git a/ninja/src/main/java/models/User.java b/ninja/src/main/java/models/User.java\n--- a/ninja/src/main/java/models/User.java\n+++ b/ninja/src/main/java/models/User.java\n@@ -4,6 +4,7 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n \n @Entity\n public class User {\n@@ -12,7 +13,9 @@ public class User {\n     @GeneratedValue(strategy=GenerationType.AUTO)\n     Long id;\n     \n+    @NotNull\n     public String firstName;\n+\n     public String email;\n     \n     public String toString() {\n\ndiff --git a/ninja/src/main/java/services/UserService.java b/ninja/src/main/java/services/UserService.java\n--- a/ninja/src/main/java/services/UserService.java\n+++ b/ninja/src/main/java/services/UserService.java\n@@ -1,9 +1,9 @@\n package services;\n \n-import models.User;\n+import java.util.HashMap;\n \n public interface UserService {\n     \n-    User getUser();\n+    HashMap<String, String> getUserMap();\n \n }\n\ndiff --git a/ninja/src/main/java/services/UserServiceImpl.java b/ninja/src/main/java/services/UserServiceImpl.java\n--- a/ninja/src/main/java/services/UserServiceImpl.java\n+++ b/ninja/src/main/java/services/UserServiceImpl.java\n@@ -1,15 +1,15 @@\n package services;\n \n-import models.User;\n+import java.util.HashMap;\n \n public class UserServiceImpl implements UserService {\n \n     @Override\n-    public User getUser() {\n-        User user = new User();\n-        user.firstName = \"Norman\";\n-        user.email = \"norman@email.com\";\n-        return user;\n+    public HashMap<String, String> getUserMap() {\n+        HashMap<String, String> userMap = new HashMap<>();\n+        userMap.put(\"name\", \"Norman Lewis\");\n+        userMap.put(\"email\", \"norman@email.com\");\n+        return userMap;\n     }\n \n }\n\ndiff --git a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n@@ -2,37 +2,26 @@\n \n import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertThat;\n-\n-import javax.inject.Inject;\n-\n import org.doctester.testbrowser.Request;\n import org.doctester.testbrowser.Response;\n import org.junit.Test;\n-import org.mockito.Mock;\n-\n import ninja.NinjaDocTester;\n-import services.UserService;\n \n public class ApiControllerDocTesterTest extends NinjaDocTester {\n     \n     String URL_INDEX = \"/\";\n     String URL_HELLO = \"/hello\";\n-    String URL_USER_JSON = \"/userJson\";\n-    String URL_USERS = \"/users\";\n-    \n-    @Mock\n-    UserService userService;\n     \n     @Test\n     public void testGetIndex() {\n         Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_INDEX)));\n-        assertThat(response.payload, containsString(\"Bonjour, bienvenue dans Ninja Framework!\"));\n+        assertThat(response.payload, containsString(\"Hello, welcome to Ninja Framework!\"));\n     }\n     \n     @Test\n     public void testGetHello() {\n         Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_HELLO)));\n-        assertThat(response.payload, containsString(\"Hello, welcome to Ninja Framework!\"));\n+        assertThat(response.payload, containsString(\"Bonjour, bienvenue dans Ninja Framework!\"));\n     }\n     \n }\n\ndiff --git a/ninja/src/test/java/controllers/ApiControllerMockTest.java b/ninja/src/test/java/controllers/ApiControllerMockTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerMockTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerMockTest.java\n@@ -1,19 +1,10 @@\n package controllers;\n \n-import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertThat;\n-\n import javax.inject.Inject;\n-\n-import org.doctester.testbrowser.Request;\n-import org.doctester.testbrowser.Response;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-\n import ninja.NinjaRunner;\n import ninja.Result;\n import services.UserService;\n@@ -35,7 +26,7 @@ public void setupTest() {\n     public void testThatGetUserJson() {\n         Result result = applicationController.userJson();\n         System.out.println(result.getRenderable());\n-        assertEquals(userService.getUser().toString(), result.getRenderable().toString());\n+        assertEquals(userService.getUserMap().toString(), result.getRenderable().toString());\n     }\n     \n }",
    "output": "BAEL-3464 - Ninja framework"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n@@ -1,22 +1,29 @@\n package com.baeldung.swagger2boot.configuration;\n \n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import com.baeldung.swagger2boot.plugin.EmailAnnotationPlugin;\n+\n+import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;\n import springfox.documentation.builders.PathSelectors;\n import springfox.documentation.builders.RequestHandlerSelectors;\n import springfox.documentation.service.ApiInfo;\n import springfox.documentation.service.Contact;\n import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration;\n import springfox.documentation.spring.web.plugins.Docket;\n import springfox.documentation.swagger.web.*;\n-import springfox.documentation.swagger2.annotations.EnableSwagger2;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n \n import java.util.Collections;\n \n @Configuration\n-@EnableSwagger2\n-@ComponentScan(\"com.baeldung.swaggerboot.controller\")\n+@EnableSwagger2WebMvc\n+@Import({SpringDataRestConfiguration.class, BeanValidatorPluginsConfiguration.class})\n public class SpringFoxConfig {\n \n     private ApiInfo apiInfo() {\n@@ -65,4 +72,8 @@ UiConfiguration uiConfig() {\n                 .build();\n     }\n \n+    @Bean\n+    public EmailAnnotationPlugin emailPlugin() {\n+        return new EmailAnnotationPlugin();\n+    }\n }\n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n@@ -0,0 +1,58 @@\n+package com.baeldung.swagger2boot.model;\n+\n+import javax.persistence.Id;\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class User {\n+\n+    @Id\n+    private Long id;\n+\n+    @NotNull(message = \"First Name cannot be null\")\n+    private String firstName;\n+\n+    @Min(value = 15, message = \"Age should not be less than 15\")\n+    @Max(value = 65, message = \"Age should not be greater than 65\")\n+    private int age;\n+\n+    @Email(regexp=\".@.\\\\..*\", message = \"Email should be valid\")\n+    private String email;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+}\n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.swagger2boot.plugin;\n+\n+import static springfox.bean.validators.plugins.Validators.annotationFromBean;\n+\n+import java.util.Optional;\n+\n+import javax.validation.constraints.Email;\n+\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import springfox.bean.validators.plugins.Validators;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;\n+import springfox.documentation.spi.schema.contexts.ModelPropertyContext;\n+\n+@Component\n+@Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)\n+public class EmailAnnotationPlugin implements ModelPropertyBuilderPlugin {\n+\n+    @Override\n+    public boolean supports(DocumentationType delimiter) {\n+        return true;\n+    }\n+\n+    /**\n+     * read Email annotation\n+     */\n+    @Override\n+    public void apply(ModelPropertyContext context) {\n+        Optional<Email> email = annotationFromBean(context, Email.class);\n+        if (email.isPresent()) {\n+            context.getBuilder().pattern(email.get().regexp());\n+            context.getBuilder().example(\"email@email.com\");\n+        }\n+    }\n+\n+}\n+\n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.swagger2boot.repository;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.swagger2boot.model.User;\n+\n+@Repository\n+public interface UserRepository extends CrudRepository<User, Long> {\n+    \n+}",
    "output": "Merge pull request #8248 from SmartyAnsh/BAEL-3456_Springfox\n\nBael 3456 springfox"
  },
  {
    "input": "diff --git a/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java b/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n--- a/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n+++ b/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n@@ -1,23 +1,32 @@\n package com.baeldung.assertexception;\n \n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.junit.jupiter.api.Test;\n \n public class ExceptionAssertionUnitTest {\n     @Test\n     public void whenExceptionThrown_thenAssertionSucceeds() {\n-        String test = null;\n-        assertThrows(NullPointerException.class, () -> {\n-            test.length();\n+        Exception exception = assertThrows(NumberFormatException.class, () -> {\n+            Integer.parseInt(\"1a\");\n         });\n+\n+        String expectedMessage = \"For input string\";\n+        String actualMessage = exception.getMessage();\n+\n+        assertTrue(actualMessage.contains(expectedMessage));\n     }\n \n     @Test\n     public void whenDerivedExceptionThrown_thenAssertionSucceds() {\n-        String test = null;\n-        assertThrows(RuntimeException.class, () -> {\n-            test.length();\n+        Exception exception = assertThrows(RuntimeException.class, () -> {\n+            Integer.parseInt(\"1a\");\n         });\n+\n+        String expectedMessage = \"For input string\";\n+        String actualMessage = exception.getMessage();\n+\n+        assertTrue(actualMessage.contains(expectedMessage));\n     }\n }\n\\ No newline at end of file",
    "output": "Merge pull request #8332 from Maiklins/BAEL-3586\n\nBAEL-3586"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.algorithms.prim;\n+\n+public class Edge {\n+\n+    private int weight;\n+    private boolean isIncluded = false;\n+    private boolean isPrinted = false;\n+\n+    public Edge(int weight) {\n+        this.weight = weight;\n+    }\n+\n+    public int getWeight() {\n+        return weight;\n+    }\n+\n+    public void setWeight(int weight) {\n+        this.weight = weight;\n+    }\n+\n+    public boolean isIncluded() {\n+        return isIncluded;\n+    }\n+\n+    public void setIncluded(boolean included) {\n+        isIncluded = included;\n+    }\n+\n+    public boolean isPrinted() {\n+        return isPrinted;\n+    }\n+\n+    public void setPrinted(boolean printed) {\n+        isPrinted = printed;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n@@ -0,0 +1,73 @@\n+package com.baeldung.algorithms.prim;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.math3.util.Pair;\r\n+\r\n+public class Prim {\r\n+\r\n+    private List<Vertex> graph;\r\n+\r\n+    public Prim(List<Vertex> graph){\r\n+        this.graph = graph;\r\n+    }\r\n+\r\n+    public void run(){\r\n+        if (graph.size() > 0){\r\n+            graph.get(0).setVisited(true);\r\n+        }\r\n+        while (isDisconnected()){\r\n+            Edge nextMinimum = new Edge(Integer.MAX_VALUE);\r\n+            Vertex nextVertex = graph.get(0);\r\n+            for (Vertex vertex : graph){\r\n+                if (vertex.isVisited()){\r\n+                    Pair<Vertex, Edge> candidate = vertex.nextMinimum();\r\n+                    if (candidate.getValue().getWeight() < nextMinimum.getWeight()){\r\n+                        nextMinimum = candidate.getValue();\r\n+                        nextVertex = candidate.getKey();\r\n+                    }\r\n+                }\r\n+            }\r\n+            nextMinimum.setIncluded(true);\r\n+            nextVertex.setVisited(true);\r\n+        }\r\n+    }\r\n+\r\n+    private boolean isDisconnected(){\r\n+        for (Vertex vertex : graph){\r\n+            if (!vertex.isVisited()){\r\n+                return true;\r\n+            }\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public String originalGraphToString(){\r\n+        StringBuilder sb = new StringBuilder();\r\n+        for (Vertex vertex : graph){\r\n+            sb.append(vertex.originalToString());\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    public void resetPrintHistory(){\r\n+        for (Vertex vertex : graph){\r\n+            Iterator<Map.Entry<Vertex,Edge>> it = vertex.getEdges().entrySet().iterator();\r\n+            while (it.hasNext()) {\r\n+                Map.Entry<Vertex,Edge> pair = it.next();\r\n+                pair.getValue().setPrinted(false);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public String minimumSpanningTreeToString(){\r\n+        StringBuilder sb = new StringBuilder();\r\n+        for (Vertex vertex : graph){\r\n+            sb.append(vertex.includedToString());\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n@@ -0,0 +1,106 @@\n+package com.baeldung.algorithms.prim;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.math3.util.Pair;\r\n+\r\n+public class Vertex {\r\n+\r\n+    private String label = null;\r\n+    private Map<Vertex, Edge> edges = new HashMap<>();\r\n+    private boolean isVisited = false;\r\n+\r\n+    public Vertex(String label){\r\n+        this.label = label;\r\n+    }\r\n+\r\n+    public String getLabel() {\r\n+        return label;\r\n+    }\r\n+\r\n+    public void setLabel(String label) {\r\n+        this.label = label;\r\n+    }\r\n+\r\n+    public Map<Vertex, Edge> getEdges() {\r\n+        return edges;\r\n+    }\r\n+\r\n+    public void addEdge(Vertex vertex, Edge edge){\r\n+        if (this.edges.containsKey(vertex)){\r\n+            if (edge.getWeight() < this.edges.get(vertex).getWeight()){\r\n+                this.edges.replace(vertex, edge);\r\n+            }\r\n+        } else {\r\n+            this.edges.put(vertex, edge);\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isVisited() {\r\n+        return isVisited;\r\n+    }\r\n+\r\n+    public void setVisited(boolean visited) {\r\n+        isVisited = visited;\r\n+    }\r\n+\r\n+    public Pair<Vertex, Edge> nextMinimum(){\r\n+        Edge nextMinimum = new Edge(Integer.MAX_VALUE);\r\n+        Vertex nextVertex = this;\r\n+        Iterator<Map.Entry<Vertex,Edge>> it = edges.entrySet().iterator();\r\n+        while (it.hasNext()) {\r\n+            Map.Entry<Vertex,Edge> pair = it.next();\r\n+            if (!pair.getKey().isVisited()){\r\n+                if (!pair.getValue().isIncluded()) {\r\n+                    if (pair.getValue().getWeight() < nextMinimum.getWeight()) {\r\n+                        nextMinimum = pair.getValue();\r\n+                        nextVertex = pair.getKey();\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        return new Pair<>(nextVertex, nextMinimum);\r\n+    }\r\n+\r\n+    public String originalToString(){\r\n+        StringBuilder sb = new StringBuilder();\r\n+        Iterator<Map.Entry<Vertex,Edge>> it = edges.entrySet().iterator();\r\n+        while (it.hasNext()) {\r\n+            Map.Entry<Vertex,Edge> pair = it.next();\r\n+            if (!pair.getValue().isPrinted()) {\r\n+                sb.append(getLabel());\r\n+                sb.append(\" --- \");\r\n+                sb.append(pair.getValue().getWeight());\r\n+                sb.append(\" --- \");\r\n+                sb.append(pair.getKey().getLabel());\r\n+                sb.append(\"\\n\");\r\n+                pair.getValue().setPrinted(true);\r\n+            }\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    public String includedToString(){\r\n+        StringBuilder sb = new StringBuilder();\r\n+        if (isVisited()) {\r\n+            Iterator<Map.Entry<Vertex,Edge>> it = edges.entrySet().iterator();\r\n+            while (it.hasNext()) {\r\n+                Map.Entry<Vertex,Edge> pair = it.next();\r\n+                if (pair.getValue().isIncluded()) {\r\n+                    if (!pair.getValue().isPrinted()) {\r\n+                        sb.append(getLabel());\r\n+                        sb.append(\" --- \");\r\n+                        sb.append(pair.getValue().getWeight());\r\n+                        sb.append(\" --- \");\r\n+                        sb.append(pair.getKey().getLabel());\r\n+                        sb.append(\"\\n\");\r\n+                        pair.getValue().setPrinted(true);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+}\r\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n@@ -0,0 +1,54 @@\n+package com.baeldung.algorithms.prim;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+public class PrimUnitTest {\n+\n+    @Test\n+    public void givenAGraph_whenPrimRuns_thenPrintMST() {\n+        Prim prim = new Prim(createGraph());\n+        System.out.println(prim.originalGraphToString());\n+        System.out.println(\"----------------\");\n+        prim.run();\n+        System.out.println();\n+        prim.resetPrintHistory();\n+        System.out.println(prim.minimumSpanningTreeToString());\n+    }\n+\n+    public static List<Vertex> createGraph() {\n+        List<Vertex> graph = new ArrayList<>();\n+        Vertex a = new Vertex(\"A\");\n+        Vertex b = new Vertex(\"B\");\n+        Vertex c = new Vertex(\"C\");\n+        Vertex d = new Vertex(\"D\");\n+        Vertex e = new Vertex(\"E\");\n+        Edge ab = new Edge(2);\n+        a.addEdge(b, ab);\n+        b.addEdge(a, ab);\n+        Edge ac = new Edge(3);\n+        a.addEdge(c, ac);\n+        c.addEdge(a, ac);\n+        Edge bc = new Edge(2);\n+        b.addEdge(c, bc);\n+        c.addEdge(b, bc);\n+        Edge be = new Edge(5);\n+        b.addEdge(e, be);\n+        e.addEdge(b, be);\n+        Edge cd = new Edge(1);\n+        c.addEdge(d, cd);\n+        d.addEdge(c, cd);\n+        Edge ce = new Edge(1);\n+        c.addEdge(e, ce);\n+        e.addEdge(c, ce);\n+        graph.add(a);\n+        graph.add(b);\n+        graph.add(c);\n+        graph.add(d);\n+        graph.add(e);\n+        return graph;\n+    }\n+\n+}",
    "output": "Merge pull request #8222 from pazis/BAEL-3561\n\nBAEL-3561 Prim's Algorithm"
  },
  {
    "input": "diff --git a/libraries-server/src/main/java/com/baeldung/tomcat/ProgrammaticTomcat.java b/libraries-server/src/main/java/com/baeldung/tomcat/ProgrammaticTomcat.java\n--- a/libraries-server/src/main/java/com/baeldung/tomcat/ProgrammaticTomcat.java\n+++ b/libraries-server/src/main/java/com/baeldung/tomcat/ProgrammaticTomcat.java\n@@ -7,22 +7,50 @@\n import org.apache.tomcat.util.descriptor.web.FilterMap;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Random;\n \n /**\n  * Created by adi on 1/10/18.\n  */\n public class ProgrammaticTomcat {\n \n+    private static boolean isFree(int port) {\n+        try {\n+            new ServerSocket(port).close();\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n     private Tomcat tomcat = null;\n \n+    private int randomPort;\n+\n+    public ProgrammaticTomcat() {\n+        // Get a random port number in range 6000 (inclusive) - 9000 (exclusive)\n+        this.randomPort = new Random()\n+                .ints(6000, 9000)\n+                .filter(ProgrammaticTomcat::isFree)\n+                .findFirst()\n+                .orElse(8080);\n+    }\n+\n     // uncomment for live test\n     // public static void main(String[] args) throws LifecycleException, ServletException, URISyntaxException, IOException {\n     // startTomcat();\n     // }\n \n+\n+    public int getPort() {\n+        return randomPort;\n+    }\n+\n     public void startTomcat() throws LifecycleException {\n         tomcat = new Tomcat();\n-        tomcat.setPort(8080);\n+        tomcat.setPort(randomPort);\n         tomcat.setHostname(\"localhost\");\n         String appBase = \".\";\n         tomcat.getHost().setAppBase(appBase);\n\ndiff --git a/libraries-server/src/test/java/com/baeldung/tomcat/ProgrammaticTomcatIntegrationTest.java b/libraries-server/src/test/java/com/baeldung/tomcat/ProgrammaticTomcatIntegrationTest.java\n--- a/libraries-server/src/test/java/com/baeldung/tomcat/ProgrammaticTomcatIntegrationTest.java\n+++ b/libraries-server/src/test/java/com/baeldung/tomcat/ProgrammaticTomcatIntegrationTest.java\n@@ -37,7 +37,8 @@ public void tearDown() throws Exception {\n     @Test\n     public void givenTomcatStarted_whenAccessServlet_responseIsTestAndResponseHeaderIsSet() throws Exception {\n         CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n-        HttpGet getServlet = new HttpGet(\"http://localhost:8080/my-servlet\");\n+        String uri = \"http://localhost:\" + tomcat.getPort() + \"/my-servlet\";\n+        HttpGet getServlet = new HttpGet(uri);\n \n         HttpResponse response = httpClient.execute(getServlet);\n         assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());",
    "output": "BAEL-3253: Use a random port number for Tomcat (#8351)\n\n* BAEL-3253: Use a random port number for Tomcat\r\n\r\n* BAEL-3253: Validate a port availability"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n--- a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n+++ b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n@@ -45,7 +45,8 @@ public void givenUsingJava8_whenGeneratingRandomAlphabeticString_thenCorrect() {\n         final int targetStringLength = 10;\r\n         final Random random = new Random();\r\n \r\n-        final String generatedString = random.ints(targetStringLength, leftLimit, rightLimit + 1)\r\n+        final String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+            .limit(targetStringLength)\r\n             .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n             .toString();\r\n \r\n@@ -59,8 +60,9 @@ public void givenUsingJava8_whenGeneratingRandomAlphanumericString_thenCorrect()\n         final int targetStringLength = 10;\r\n         final Random random = new Random();\r\n \r\n-        final String generatedString = random.ints(targetStringLength, leftLimit, rightLimit + 1)\r\n-            .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))\r\n+        final String generatedString = random.ints(leftLimit, rightLimit + 1)\r\n+            .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))\r\n+            .limit(targetStringLength)\r\n             .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n             .toString();\r\n \r",
    "output": "BAEL-3589 : Java random strings"
  },
  {
    "input": "diff --git a/spring-session/spring-session-redis/src/test/java/com/baeldung/spring/session/SessionControllerIntegrationTest.java b/spring-session/spring-session-redis/src/test/java/com/baeldung/spring/session/SessionControllerIntegrationTest.java\n--- a/spring-session/spring-session-redis/src/test/java/com/baeldung/spring/session/SessionControllerIntegrationTest.java\n+++ b/spring-session/spring-session-redis/src/test/java/com/baeldung/spring/session/SessionControllerIntegrationTest.java\n@@ -1,16 +1,11 @@\n package com.baeldung.spring.session;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.IOException;\n-import java.util.Set;\n-\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.springframework.boot.context.embedded.LocalServerPort;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n@@ -20,19 +15,27 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit4.SpringRunner;\n-\n import redis.clients.jedis.Jedis;\n import redis.embedded.RedisServer;\n \n+import java.io.IOException;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = SessionWebApplication.class, webEnvironment = WebEnvironment.DEFINED_PORT)\n+@SpringBootTest(classes = SessionWebApplication.class, webEnvironment = WebEnvironment.RANDOM_PORT)\n public class SessionControllerIntegrationTest {\n \n-    private Jedis jedis;\n     private static RedisServer redisServer;\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private Jedis jedis;\n     private TestRestTemplate testRestTemplate;\n     private TestRestTemplate testRestTemplateWithAuth;\n-    private String testUrl = \"http://localhost:8080/\";\n \n     @BeforeClass\n     public static void startRedisServer() throws IOException {\n@@ -41,7 +44,7 @@ public static void startRedisServer() throws IOException {\n     }\n     \n     @AfterClass\n-    public static void stopRedisServer() throws IOException {\n+    public static void stopRedisServer() {\n         redisServer.stop();\n     }\n     \n@@ -63,13 +66,13 @@ public void testRedisIsEmpty() {\n \n     @Test\n     public void testUnauthenticatedCantAccess() {\n-        ResponseEntity<String> result = testRestTemplate.getForEntity(testUrl, String.class);\n+        ResponseEntity<String> result = testRestTemplate.getForEntity(getTestUrl(), String.class);\n         assertEquals(HttpStatus.UNAUTHORIZED, result.getStatusCode());\n     }\n \n     @Test\n     public void testRedisControlsSession() {\n-        ResponseEntity<String> result = testRestTemplateWithAuth.getForEntity(testUrl, String.class);\n+        ResponseEntity<String> result = testRestTemplateWithAuth.getForEntity(getTestUrl(), String.class);\n         assertEquals(\"hello admin\", result.getBody()); // login worked\n \n         Set<String> redisResult = jedis.keys(\"*\");\n@@ -80,13 +83,16 @@ public void testRedisControlsSession() {\n         headers.add(\"Cookie\", sessionCookie);\n         HttpEntity<String> httpEntity = new HttpEntity<>(headers);\n \n-        result = testRestTemplate.exchange(testUrl, HttpMethod.GET, httpEntity, String.class);\n+        result = testRestTemplate.exchange(getTestUrl(), HttpMethod.GET, httpEntity, String.class);\n         assertEquals(\"hello admin\", result.getBody()); // access with session works worked\n \n         jedis.flushAll(); // clear all keys in redis\n \n-        result = testRestTemplate.exchange(testUrl, HttpMethod.GET, httpEntity, String.class);\n+        result = testRestTemplate.exchange(getTestUrl(), HttpMethod.GET, httpEntity, String.class);\n         assertEquals(HttpStatus.UNAUTHORIZED, result.getStatusCode());// access denied after sessions are removed in redis\n+    }\n \n+    private String getTestUrl(){\n+        return \"http://localhost:\" + port;\n     }\n }\n\\ No newline at end of file",
    "output": "BAEL-3271: Use random port in spring-session-redis IntegrationTest (#8359)"
  },
  {
    "input": "diff --git a/java-collections-conversions/src/main/java/com/baeldung/convertToMap/ConvertToMap.java b/java-collections-conversions/src/main/java/com/baeldung/convertToMap/ConvertToMap.java\n--- a/java-collections-conversions/src/main/java/com/baeldung/convertToMap/ConvertToMap.java\n+++ b/java-collections-conversions/src/main/java/com/baeldung/convertToMap/ConvertToMap.java\n@@ -24,10 +24,7 @@ public Map<Integer, Book> listToConcurrentMap(List<Book> books) {\n \n     public TreeMap<String, Book> listToSortedMap(List<Book> books) {\n         return books.stream()\n-                .sorted(Comparator.comparing(Book::getName))\n                 .collect(Collectors.toMap(Book::getName, Function.identity(), (o1, o2) -> o1, TreeMap::new));\n     }\n-\n-\n }\n ",
    "output": "BAEL-3440: Remove unnecessary sorting (#8336)"
  },
  {
    "input": "diff --git a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/hibernate/logging/Employee.java b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/hibernate/logging/Employee.java\n--- a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/hibernate/logging/Employee.java\n+++ b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/hibernate/logging/Employee.java\n@@ -0,0 +1,59 @@\n+package com.baeldung.hibernate.logging;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Employee {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n+    private long id;\n+\n+    private String employeeNumber;\n+\n+    private String title;\n+\n+    private String name;\n+\n+    public Employee() {\n+    }\n+    \n+    public Employee(String name, String employeeNumber) {\n+        this.name = name;\n+        this.employeeNumber = employeeNumber;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getEmployeeNumber() {\n+        return employeeNumber;\n+    }\n+\n+    public void setEmployeeNumber(String employeeNumber) {\n+        this.employeeNumber = employeeNumber;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+}\n\ndiff --git a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernatelogging/HibernateLoggingIntegrationTest.java b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernatelogging/HibernateLoggingIntegrationTest.java\n--- a/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernatelogging/HibernateLoggingIntegrationTest.java\n+++ b/persistence-modules/hibernate5-2/src/test/java/com/baeldung/hibernatelogging/HibernateLoggingIntegrationTest.java\n@@ -0,0 +1,50 @@\n+package com.baeldung.hibernatelogging;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.boot.MetadataSources;\n+import org.hibernate.boot.registry.StandardServiceRegistry;\n+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n+import org.hibernate.query.Query;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.baeldung.hibernate.logging.Employee;\n+\n+public class HibernateLoggingIntegrationTest {\n+\n+    private SessionFactory sessionFactory;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(\"hibernate-logging.cfg.xml\")\n+            .build();\n+        try {\n+            sessionFactory = new MetadataSources(registry).buildMetadata()\n+                .buildSessionFactory();\n+            Session session = sessionFactory.openSession();\n+            session.beginTransaction();\n+            session.save(new Employee(\"John Smith\", \"001\"));\n+            session.getTransaction()\n+                .commit();\n+            session.close();\n+        } catch (Exception e) {\n+            fail(e);\n+            StandardServiceRegistryBuilder.destroy(registry);\n+        }\n+    }\n+    \n+    @Test\n+    public void whenAllEmployeesAreSelected_ThenSuccess() {\n+        Query<Employee> query = sessionFactory.openSession().createQuery(\"from com.baeldung.hibernate.logging.Employee\", Employee.class);\n+        List<Employee> deptEmployees = query.list();\n+        Employee deptEmployee = deptEmployees.get(0);\n+        assertEquals(\"John Smith\", deptEmployee.getName());\n+    }\n+}",
    "output": "BAEL-3387 Hibernate - Different Levels Of Logging (#8326)\n\n* Added module for article\r\n\r\n* Update pom.xml\r\n\r\n* Delete pom.xml\r\n\r\n* Update and rename ForecastProcessorTest.java to ForecastProcessorUnitTest.java\r\n\r\n* Updated code as per review comments\r\n\r\n* Delete .gitignore\r\n\r\n* Update pom.xml\r\n\r\n* BAEL-2904 Moved files\r\n\r\n* BAEL-2904 Deleted files from previous project\r\n\r\n* BAEL-2904 Moved classes for method reference article\r\n\r\n* Update pom.xml\r\n\r\n* BAEL-2904 Updated README.md\r\n\r\n* First draft\r\n\r\n* BAEL-3300 Added more tests\r\n\r\n* BAEL-3300 Removed unused imports\r\n\r\n* BAEL-3300 Run dos2unix on README.md\r\n\r\n* BAEL-3387 Added entity and test classes\r\n\r\n* BAEL-3387 Added logging configuration\r\n\r\n* BAEL-3387 Corrected log4j and log4j2 config"
  },
  {
    "input": "diff --git a/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java b/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n--- a/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n+++ b/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n@@ -6,6 +6,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n@@ -16,9 +17,12 @@\n \n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = SpringSessionMongoDBApplication.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\n+@SpringBootTest(classes = SpringSessionMongoDBApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringSessionMongoDBIntegrationTest {\n \n+    @LocalServerPort\n+    private int port;\n+\n     @Autowired\n     private MongoOperationsSessionRepository repository;\n \n@@ -27,7 +31,7 @@ public class SpringSessionMongoDBIntegrationTest {\n     @Test\n     public void givenEndpointIsCalledTwiceAndResponseIsReturned_whenMongoDBIsQueriedForCount_thenCountMustBeSame() {\n         HttpEntity<String> response = restTemplate\n-                .exchange(\"http://localhost:\" + 8080, HttpMethod.GET, null, String.class);\n+                .exchange(\"http://localhost:\" + port, HttpMethod.GET, null, String.class);\n         HttpHeaders headers = response.getHeaders();\n         String set_cookie = headers.getFirst(HttpHeaders.SET_COOKIE);\n ",
    "output": "Merge pull request #8333 from kwoyke/BAEL-19868\n\nBAEL-19868: Use random port in spring-session-mongodb IntegrationTest"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n@@ -1,34 +1,25 @@\n package com.baeldung.web.controller;\n \n import com.baeldung.web.dto.Foo;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n \n-@Controller\n+@RestController\n public class FooController {\n \n-    public FooController() {\n-        super();\n-    }\n-\n-    // API - read\n-    @RequestMapping(method = RequestMethod.GET, value = \"/foos/{id}\")\n-    @ResponseBody\n+    @GetMapping(\"/foos/{id}\")\n     public Foo findById(@PathVariable final long id, HttpServletRequest req, HttpServletResponse res) {\n-        // System.out.println(req.getHeaderNames());\n-        // System.out.println(\"------\" + req.getHeader(\"Test\"));\n         if (req.getHeader(\"Test\") != null) {\n             res.addHeader(\"Test\", req.getHeader(\"Test\"));\n         }\n+\n         return new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\n     }\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -1,22 +1,15 @@\n package com.baeldung.web.dto;\n \n public class Foo {\n+\n     private long id;\n     private String name;\n \n-    public Foo() {\n-        super();\n-    }\n-\n     public Foo(final long id, final String name) {\n-        super();\n-\n         this.id = id;\n         this.name = name;\n     }\n \n-    //\n-\n     public long getId() {\n         return id;\n     }",
    "output": "Merge pull request #8342 from kwoyke/BAEL-19878\n\nBAEL-19878: Upgrade spring-cloud-zuul to Spring Boot 2.2.2 and Spring…"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n--- a/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n+++ b/core-java-modules/core-java-strings/src/test/java/com/baeldung/randomstrings/RandomStringsUnitTest.java\n@@ -1,72 +1,101 @@\n-package com.baeldung.randomstrings;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.nio.charset.Charset;\n-import java.util.Random;\n-\n-public class RandomStringsUnitTest {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(RandomStringsUnitTest.class);\n-\n-    @Test\n-    public void givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect() {\n-        final byte[] array = new byte[7]; // length is bounded by 7\n-        new Random().nextBytes(array);\n-        final String generatedString = new String(array, Charset.forName(\"UTF-8\"));\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect() {\n-        final int leftLimit = 97; // letter 'a'\n-        final int rightLimit = 122; // letter 'z'\n-        final int targetStringLength = 10;\n-        final Random random = new Random();\n-        final StringBuilder buffer = new StringBuilder(targetStringLength);\n-\n-        for (int i = 0; i < targetStringLength; i++) {\n-            final int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\n-            buffer.append((char) randomLimitedInt);\n-        }\n-        final String generatedString = buffer.toString();\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.random(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.randomAlphabetic(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect() {\n-        final String generatedString = RandomStringUtils.randomAlphanumeric(10);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-    @Test\n-    public void givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect() {\n-        final int length = 10;\n-        final boolean useLetters = true;\n-        final boolean useNumbers = false;\n-        final String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\n-\n-        LOG.debug(generatedString);\n-    }\n-\n-}\n+package com.baeldung.randomstrings;\r\n+\r\n+import org.apache.commons.lang3.RandomStringUtils;\r\n+import org.junit.Test;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import java.nio.charset.Charset;\r\n+import java.util.Random;\r\n+\r\n+public class RandomStringsUnitTest {\r\n+\r\n+    private static final Logger LOG = LoggerFactory.getLogger(RandomStringsUnitTest.class);\r\n+\r\n+    @Test\r\n+    public void givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect() {\r\n+        final byte[] array = new byte[7]; // length is bounded by 7\r\n+        new Random().nextBytes(array);\r\n+        final String generatedString = new String(array, Charset.forName(\"UTF-8\"));\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect() {\r\n+        final int leftLimit = 97; // letter 'a'\r\n+        final int rightLimit = 122; // letter 'z'\r\n+        final int targetStringLength = 10;\r\n+        final Random random = new Random();\r\n+        final StringBuilder buffer = new StringBuilder(targetStringLength);\r\n+\r\n+        for (int i = 0; i < targetStringLength; i++) {\r\n+            final int randomLimitedInt = leftLimit + (int) (random.nextFloat() * (rightLimit - leftLimit + 1));\r\n+            buffer.append((char) randomLimitedInt);\r\n+        }\r\n+        final String generatedString = buffer.toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingJava8_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n+        final int leftLimit = 97; // letter 'a'\r\n+        final int rightLimit = 122; // letter 'z'\r\n+        final int targetStringLength = 10;\r\n+        final Random random = new Random();\r\n+\r\n+        final String generatedString = random.ints(targetStringLength, leftLimit, rightLimit + 1)\r\n+            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n+            .toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingJava8_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n+        final int leftLimit = 48; // numeral '0'\r\n+        final int rightLimit = 122; // letter 'z'\r\n+        final int targetStringLength = 10;\r\n+        final Random random = new Random();\r\n+\r\n+        final String generatedString = random.ints(targetStringLength, leftLimit, rightLimit + 1)\r\n+            .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))\r\n+            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n+            .toString();\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomString_thenCorrect() {\r\n+        final String generatedString = RandomStringUtils.random(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect() {\r\n+        final String generatedString = RandomStringUtils.randomAlphabetic(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect() {\r\n+        final String generatedString = RandomStringUtils.randomAlphanumeric(10);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect() {\r\n+        final int length = 10;\r\n+        final boolean useLetters = true;\r\n+        final boolean useNumbers = false;\r\n+        final String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);\r\n+\r\n+        LOG.debug(generatedString);\r\n+    }\r\n+\r\n+}\r",
    "output": "BAEL-3589 : Improvement: Java Generate Random String"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/patternreuse/PatternJava11UnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.pattern;\n+package com.baeldung.patternreuse;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n--- a/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n+++ b/core-java-modules/core-java-text/src/main/java/com/baeldung/patternreuse/PatternPerformanceComparison.java\n@@ -1,68 +1,88 @@\n-package com.baeldung.pattern;\n+package com.baeldung.patternreuse;\n \n-import java.time.Duration;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.runner.RunnerException;\n+\n+import java.io.IOException;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 1, warmups = 1)\n+@Warmup(iterations = 5)\n+@State(Scope.Benchmark)\n public class PatternPerformanceComparison {\n \n     private static final String PATTERN = \"\\\\d*[02468]\";\n     private static List<String> values;\n \n-    public static void main(String[] args) {\n-        loadValues();\n+    private static Matcher matcherFromPreCompiledPattern;\n+    private static Pattern preCompiledPattern;\n \n-        // 5_000_000 Pattern objects created\n-        // 5_000_000 Matcher objects created\n-        Instant start = Instant.now();\n+    public static void main(String[] args) throws IOException, RunnerException {\n+        org.openjdk.jmh.Main.main(args);\n+    }\n+\n+    @Benchmark\n+    public void matcherFromPreCompiledPatternResetMatches() {\n+        //With pre-compiled pattern and reusing the matcher\n+        // 1 Pattern object created\n+        // 1 Matcher objects created\n         for (String value : values) {\n-            value.matches(PATTERN);\n+            matcherFromPreCompiledPattern.reset(value).matches();\n         }\n-        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> String.matchs(regex)\");\n+    }\n \n-        // Above approach \"value.matches(PATTERN)\" makes this internally\n-        // 5_000_000 Pattern objects created\n+    @Benchmark\n+    public void preCompiledPatternMatcherMatches() {\n+        // With pre-compiled pattern\n+        // 1         Pattern object created\n         // 5_000_000 Matcher objects created\n-        start = Instant.now();\n         for (String value : values) {\n-            Pattern.matches(PATTERN, value);\n+            preCompiledPattern.matcher(value).matches();\n         }\n-        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> Pattern.matches(regex, charSequence)\");\n+    }\n \n+    @Benchmark\n+    public void patternCompileMatcherMatches() {\n         // Above approach \"Pattern.matches(PATTERN, value)\" makes this internally\n         // 5_000_000 Pattern objects created\n         // 5_000_000 Matcher objects created\n-        start = Instant.now();\n         for (String value : values) {\n             Pattern.compile(PATTERN).matcher(value).matches();\n         }\n-        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> Pattern.compile(regex).matcher(charSequence).matches()\");\n+    }\n \n-        // With pre-compiled pattern\n-        // 1         Pattern object created\n+    @Benchmark\n+    public void patternMatches() {\n+        // Above approach \"value.matches(PATTERN)\" makes this internally\n+        // 5_000_000 Pattern objects created\n         // 5_000_000 Matcher objects created\n-        Pattern preCompiledPattern = Pattern.compile(PATTERN);\n-        start = Instant.now();\n         for (String value : values) {\n-            preCompiledPattern.matcher(value).matches();\n+            Pattern.matches(PATTERN, value);\n         }\n-        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms  -> preCompiledPattern.matcher(value).matches()\");\n+    }\n \n-        //With pre-compiled pattern and reusing the matcher\n-        // 1 Pattern object created\n-        // 1 Matcher objects created\n-        Matcher matcherFromPreCompiledPattern = preCompiledPattern.matcher(\"\");\n-        start = Instant.now();\n+    @Benchmark\n+    public void stringMatchs() {\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        Instant start = Instant.now();\n         for (String value : values) {\n-            matcherFromPreCompiledPattern.reset(value).matches();\n+            value.matches(PATTERN);\n         }\n-        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms  -> matcherFromPreCompiledPattern.reset(value).matches()\");\n     }\n \n-    private static void loadValues() {\n+    @Setup()\n+    public void setUp() {\n+        preCompiledPattern = Pattern.compile(PATTERN);\n+        matcherFromPreCompiledPattern = preCompiledPattern.matcher(\"\");\n+\n         values = new ArrayList<>();\n         for (int x = 1; x <= 5_000_000; x++) {\n             values.add(String.valueOf(x));\n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/patternreuse/PatternUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.pattern;\n+package com.baeldung.patternreuse;\n \n import org.junit.jupiter.api.Test;\n ",
    "output": "Josh Cummings suggestions: Package renamed and Benchmark using JMH"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStack.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStack.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStack.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingStack.java\n@@ -5,43 +5,35 @@\n public class BalancedBracketsUsingStack {\n \n         public boolean isBalanced(String str) {\n-                boolean result = true;\n-\n                 if (null == str || str.length() == 0 || ((str.length() % 2) != 0)) {\n-                        result = false;\n+                        return false;\n                 } else {\n                         char[] ch = str.toCharArray();\n                         for (char c : ch) {\n                                 if (!(c == '{' || c == '[' || c == '(' || c == '}' || c == ']' || c == ')')) {\n-                                        result = false;\n-                                        break;\n+                                        return false;\n                                 }\n \n                         }\n                 }\n \n-                if(result) {\n-                        Stack<Character> stack = new Stack<>();\n-                        for (char ch: str.toCharArray()) {\n-                                if (ch == '{' || ch == '[' || ch == '(') {\n-                                        stack.push(ch);\n+                Stack<Character> stack = new Stack<>();\n+                for (char ch: str.toCharArray()) {\n+                        if (ch == '{' || ch == '[' || ch == '(') {\n+                                stack.push(ch);\n+                        } else {\n+                                if ( !stack.isEmpty()\n+                                        && ((stack.peek() == '{' && ch == '}')\n+                                        || (stack.peek() == '[' && ch == ']')\n+                                        || (stack.peek() == '(' && ch == ')')\n+                                    )) {\n+                                        stack.pop();\n                                 } else {\n-                                        if ( !stack.isEmpty()\n-                                                && ((stack.peek() == '{' && ch == '}')\n-                                                || (stack.peek() == '[' && ch == ']')\n-                                                || (stack.peek() == '(' && ch == ')')\n-                                            )) {\n-                                                stack.pop();\n-                                                result = true;\n-                                        } else {\n-                                                result = false;\n-                                                break;\n-                                        }\n+                                        return false;\n                                 }\n-\n                         }\n                 }\n \n-                return result;\n+                return true;\n         }\n }\n\\ No newline at end of file\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbrackets/BalancedBracketsUsingString.java\n@@ -3,35 +3,25 @@\n public class BalancedBracketsUsingString {\n \n         public boolean isBalanced(String str) {\n-                boolean result = true;\n-\n                 if (null == str || str.length() == 0 || ((str.length() % 2) != 0)) {\n-                        result = false;\n+                        return false;\n                 } else {\n                         char[] ch = str.toCharArray();\n                         for(char c : ch) {\n                                 if(!(c == '{' || c == '[' || c == '(' || c == '}' || c == ']' || c == ')')) {\n-                                        result = false;\n-                                        break;\n+                                        return false;\n                                 }\n \n                         }\n                 }\n \n-                if (result) {\n-                        while (str.indexOf(\"()\") >= 0 || str.indexOf(\"[]\") >= 0 || str.indexOf(\"{}\") >= 0) {\n-                                str = str.replaceAll(\"\\\\(\\\\)\", \"\")\n-                                    .replaceAll(\"\\\\[\\\\]\", \"\")\n-                                    .replaceAll(\"\\\\{\\\\}\", \"\");\n-                        }\n-                        if (str.length() > 0) {\n-                                result = false;\n-                        } else {\n-                                result = true;\n-                        }\n+                while (str.contains(\"()\") || str.contains(\"[]\") || str.contains(\"{}\")) {\n+                        str = str.replaceAll(\"\\\\(\\\\)\", \"\")\n+                            .replaceAll(\"\\\\[\\\\]\", \"\")\n+                            .replaceAll(\"\\\\{\\\\}\", \"\");\n                 }\n+                return (str.length() == 0);\n \n-                return result;\n         }\n \n } \n\\ No newline at end of file",
    "output": "BAEL-3481 - updated with review comments."
  },
  {
    "input": "diff --git a/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java b/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n--- a/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n+++ b/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n@@ -34,7 +34,7 @@ public class HttpClientMultipartLiveTest {\n     // No longer available\n     // private static final String SERVER = \"http://echo.200please.com\";\n \n-    private static final String SERVER = \"http://posttestserver.com/post.php\";\n+    private static final String SERVER = \"http://localhost:8080/spring-mvc-java/stub/multipart\";\n     private static final String TEXTFILENAME = \"temp.txt\";\n     private static final String IMAGEFILENAME = \"image.jpg\";\n     private static final String ZIPFILENAME = \"zipFile.zip\";\n@@ -84,7 +84,7 @@ public final void givenFileandMultipleTextParts_whenUploadwithAddPart_thenNoExce\n         //\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addPart(\"upfile\", fileBody);\n+        builder.addPart(\"file\", fileBody);\n         builder.addPart(\"text1\", stringBody1);\n         builder.addPart(\"text2\", stringBody2);\n         final HttpEntity entity = builder.build();\n@@ -112,7 +112,7 @@ public final void givenFileandTextPart_whenUploadwithAddBinaryBodyandAddTextBody\n         final String message = \"This is a multipart post\";\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", file, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n+        builder.addBinaryBody(\"file\", file, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.DEFAULT_BINARY);\n         final HttpEntity entity = builder.build();\n         post.setEntity(entity);\n@@ -141,7 +141,7 @@ public final void givenFileAndInputStreamandText_whenUploadwithAddBinaryBodyandA\n         final String message = \"This is a multipart post\";\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", file, ContentType.DEFAULT_BINARY, IMAGEFILENAME);\n+        builder.addBinaryBody(\"file\", file, ContentType.DEFAULT_BINARY, IMAGEFILENAME);\n         builder.addBinaryBody(\"upstream\", inputStream, ContentType.create(\"application/zip\"), ZIPFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.TEXT_PLAIN);\n         final HttpEntity entity = builder.build();\n@@ -165,7 +165,7 @@ public final void givenCharArrayandText_whenUploadwithAddBinaryBodyandAddTextBod\n         final byte[] bytes = \"binary code\".getBytes();\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", bytes, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n+        builder.addBinaryBody(\"file\", bytes, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.TEXT_PLAIN);\n         final HttpEntity entity = builder.build();\n         post.setEntity(entity);\n\ndiff --git a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n--- a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n+++ b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n@@ -0,0 +1,58 @@\n+package com.baeldung.web.controller;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+@Controller\n+public class MultipartFileUploadStubController {\n+\n+    @PostMapping(\"/stub/multipart\")\n+    public ResponseEntity<UploadResultResource> uploadFile(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n+        UploadResultResource result = new UploadResultResource(file, text, text1, text2, upstream);\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n+    }\n+    \n+    public static class UploadResultResource {\n+        \n+        private final String file;\n+        private final String text;\n+        private final String text1;\n+        private final String text2;\n+        private final String upstream;\n+        \n+        public UploadResultResource(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n+            this.file = format(file);\n+            this.text = text;\n+            this.text1 = text1;\n+            this.text2 = text2;\n+            this.upstream = format(upstream);\n+        }\n+        \n+        private static String format(MultipartFile file) {\n+            return file == null ? null : file.getOriginalFilename() + \" (size: \" + file.getSize() + \" bytes)\";\n+        }\n+\n+        public String getFile() {\n+            return file;\n+        }\n+\n+        public String getText() {\n+            return text;\n+        }\n+\n+        public String getText1() {\n+            return text1;\n+        }\n+\n+        public String getText2() {\n+            return text2;\n+        }\n+\n+        public String getUpstream() {\n+            return upstream;\n+        }\n+    }\n+}",
    "output": "Merge pull request #8315 from albanoj2/BAEL-3559\n\nBAEL-3559: Added purpose-built endpoint for testing multipart uploads with HttpClient"
  },
  {
    "input": "diff --git a/spring-di/src/main/java/org/baeldung/store/AppConfig.java b/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n--- a/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n+++ b/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n@@ -0,0 +1,23 @@\n+package org.baeldung.store;\n+\n+import org.springframework.context.annotation.Bean;\n+\n+public class AppConfig {\n+\n+    @Bean\n+    public Item item1() {\n+        return new ItemImpl1();\n+    }\n+ \n+    @Bean\n+    public Store storeThroughConstructorInjection() {\n+        return new Store(item1());\n+    }\n+    \n+    @Bean\n+    public Store storeThroughSetterInjection() {\n+        Store store = new Store();\n+        store.setItem(item1());\n+        return store;\n+    }\n+}\n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/Item.java b/spring-di/src/main/java/org/baeldung/store/Item.java\n--- a/spring-di/src/main/java/org/baeldung/store/Item.java\n+++ b/spring-di/src/main/java/org/baeldung/store/Item.java\n@@ -0,0 +1,5 @@\n+package org.baeldung.store;\n+\n+public interface Item {\n+\n+}\n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java b/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n--- a/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n+++ b/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n@@ -0,0 +1,5 @@\n+package org.baeldung.store;\n+\n+public class ItemImpl1 implements Item {\n+\n+}\n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/Store.java b/spring-di/src/main/java/org/baeldung/store/Store.java\n--- a/spring-di/src/main/java/org/baeldung/store/Store.java\n+++ b/spring-di/src/main/java/org/baeldung/store/Store.java\n@@ -0,0 +1,23 @@\n+package org.baeldung.store;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class Store {\n+    \n+    @Autowired\n+    private Item item;\n+    \n+    public Store() {}\n+    \n+    public Store(Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setItem(Item item) {\n+        this.item = item;\n+    }\n+}\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n@@ -0,0 +1,35 @@\n+package org.baeldung.store;\r\n+\r\n+import static org.junit.Assert.assertNotNull;\r\n+\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.beans.factory.annotation.Qualifier;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n+\r\n+@RunWith(SpringJUnit4ClassRunner.class)\r\n+@ContextConfiguration(classes = AppConfig.class)\r\n+public class AppConfigUnitTest {\r\n+\r\n+    @Autowired\r\n+    @Qualifier(\"storeThroughConstructorInjection\")\r\n+    private Store storeByConstructorInjection;\r\n+    \r\n+    @Autowired\r\n+    @Qualifier(\"storeThroughSetterInjection\")\r\n+    private Store storeBySetterInjection;\r\n+\r\n+    @Test\r\n+    public void givenValidXmlConfig_WhenInjectStoreByConstructorInjection_ThenBeanIsNotNull() {\r\n+        assertNotNull(storeByConstructorInjection);\r\n+        assertNotNull(storeByConstructorInjection.getItem());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjection_ThenBeanIsNotNull() {\r\n+        assertNotNull(storeBySetterInjection);\r\n+        assertNotNull(storeByConstructorInjection.getItem());\r\n+    }\r\n+}\r\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n@@ -0,0 +1,30 @@\n+package org.baeldung.store;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Separate unit test class where only one Item object is available for \n+ * autowiring. If the ioc-context.xml were used for autowiring by type, there \n+ * would be multiple qualifying Item objects, causing a failure.\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"classpath:/ioc-context-by-type.xml\")\n+public class XmlAppConfigByTypeUnitTest {\n+\n+    @Autowired\n+    @Qualifier(\"xml-store-by-autowire-type\")\n+    private Store storeByAutowireInjectionByType;\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByAutowireInjectionByType_ThenBeanIsNotNull() {\n+        assertNotNull(storeByAutowireInjectionByType);\n+        assertNotNull(storeByAutowireInjectionByType.getItem());\n+    }\n+}\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n@@ -0,0 +1,55 @@\n+package org.baeldung.store;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"classpath:/ioc-context.xml\")\n+public class XmlAppConfigUnitTest {\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-constructor\")\n+    private Store storeByConstructorInjection;\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-setter\")\n+    private Store storeBySetterInjection;\n+\n+    @Autowired\n+    @Qualifier(\"xml-store-by-autowire-name\")\n+    private Store storeByAutowireInjectionByName;\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-setter-lazy\")\n+    private Store storeBySetterInjectionLazy;\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByConstructorInjection_ThenBeanIsNotNull() {\n+        assertNotNull(storeByConstructorInjection);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjection_ThenBeanIsNotNull() {\n+        assertNotNull(storeBySetterInjection);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByAutowireInjectionByName_ThenBeanIsNotNull() {\n+        assertNotNull(storeByAutowireInjectionByName);\n+        assertNotNull(storeByAutowireInjectionByName.getItem());\n+    }\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjectionLazy_ThenBeanIsNotNull() {\n+        assertNotNull(storeBySetterInjectionLazy);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+}",
    "output": "Merge pull request #8346 from albanoj2/BAEL-3290\n\nBAEL-3290: Added source code for Spring DI examples"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowDifferentExceptionDemo.java b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowDifferentExceptionDemo.java\n--- a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowDifferentExceptionDemo.java\n+++ b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowDifferentExceptionDemo.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.rethrow;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.baeldung.rethrow.custom.InvalidDataException;\n+\n+public class RethrowDifferentExceptionDemo {\n+\n+    private final static Logger LOGGER = Logger.getLogger(RethrowDifferentExceptionDemo.class.getName());\n+\n+    public static void main(String[] args) throws Exception {\n+        String name = null;\n+\n+        try {\n+\n+            // Below line will throw NullPointerException\n+            if (name.equals(\"Joe\")) {\n+                // Do blah blah..\n+            }\n+\n+        } catch (Exception e) {\n+            LOGGER.log(Level.WARNING, \"So and so user is unable to cast vote because he is found uneligible\");\n+            throw new InvalidDataException(e);\n+        }\n+\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowSameExceptionDemo.java b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowSameExceptionDemo.java\n--- a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowSameExceptionDemo.java\n+++ b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/RethrowSameExceptionDemo.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.rethrow;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class RethrowSameExceptionDemo {\n+\n+    private final static Logger LOGGER = Logger.getLogger(RethrowDifferentExceptionDemo.class.getName());\n+\n+    public static void main(String[] args) throws Exception {\n+        String name = null;\n+\n+        try {\n+\n+            // Below line will throw NullPointerException\n+            if (name.equals(\"Joe\")) {\n+                // Do blah blah..\n+            }\n+\n+        } catch (Exception e) {\n+            LOGGER.log(Level.WARNING, \"Exception occurred due to invalid name\");\n+            throw e;\n+        }\n+\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/custom/InvalidDataException.java b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/custom/InvalidDataException.java\n--- a/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/custom/InvalidDataException.java\n+++ b/core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/rethrow/custom/InvalidDataException.java\n@@ -0,0 +1,8 @@\n+package com.baeldung.rethrow.custom;\n+\n+public class InvalidDataException extends Exception {\n+\n+    public InvalidDataException(Exception e) {\n+        super(e);\n+    }\n+}",
    "output": "BAEL-3397: Difference between throw e and throw new Exception(e) (#8339)\n\n* Article: Quick and practical example of hexagonal architecture in java with Spring Project\r\n\r\n* Removed server.port property from application.properties\r\n\r\n* BAEL-3397: Difference between throw e and throw new Exception(e) in java\r\n\r\n* BAEL-3397 : Removed links from readme file\r\n\r\n* BAEL-3397: removed hexagonal module from the code\r\n\r\n* BAEL-3397: renamed exceptions package name to rethrow"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n@@ -19,10 +19,4 @@ public List<Book> booksByAuthor(String author) {\n           .filter(book -> Objects.equals(author, book.getAuthor()))\n           .collect(Collectors.toList());\n     }\n-\n-    public Optional<Book> bookByTitle(String title) {\n-        return books.stream()\n-          .filter(book -> book.getTitle().equals(title))\n-          .findFirst();\n-    }\n }\n\ndiff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/Book.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/Book.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/Book.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/Book.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.cucumberbackground.books;\n+\n+public class Book {\n+\n+    private String title;\n+    private String author;\n+    \n+    public Book(String title, String author) {\n+        this.title = title;\n+        this.author = author;\n+    }\n+    \n+    public Book() {}\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+    \n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+    \n+    public String getAuthor() {\n+        return author;\n+    }\n+    \n+    public void setAuthor(String author) {\n+        this.author = author;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Book [title=\" + title + \", author=\" + author + \"]\";\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/BookStore.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/BookStore.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/BookStore.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumberbackground/books/BookStore.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.cucumberbackground.books;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class BookStore {\n+    private List<Book> books = new ArrayList<>();\n+\n+    public void addBook(Book book) {\n+        books.add(book);\n+    }\n+\n+    public void addAllBooks(Collection<Book> books) {\n+        this.books.addAll(books);\n+    }\n+\n+    public List<Book> booksByAuthor(String author) {\n+        return books.stream()\n+          .filter(book -> Objects.equals(author, book.getAuthor()))\n+          .collect(Collectors.toList());\n+    }\n+\n+    public Optional<Book> bookByTitle(String title) {\n+        return books.stream()\n+          .filter(book -> book.getTitle().equals(title))\n+          .findFirst();\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n@@ -56,11 +56,6 @@ public void searchForBooksByAuthor(String author) {\n         foundBooks = store.booksByAuthor(author);\n     }\n \n-    @When(\"^I search for a book titled (.+)$\")\n-    public void searchForBookByTitle(String title) {\n-        foundBook = store.bookByTitle(title).orElse(null);\n-    }\n-    \n     @Then(\"^I find (\\\\d+) books$\")\n     public void findBooks(int count) {\n         assertEquals(count, foundBooks.size());\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreRunSteps.java\n@@ -0,0 +1,58 @@\n+package com.baeldung.cucumberbackground.books;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+public class BookStoreRunSteps {\n+    private BookStore store;\n+    private List<Book> foundBooks;\n+    private Book foundBook;\n+    \n+    @Before\n+    public void setUp() {\n+        store = new BookStore();\n+        foundBooks = new ArrayList<>();\n+    }\n+    \n+    @Given(\"^I have the following books in the store$\")\n+    public void haveBooksInTheStore(DataTable table) {\n+        List<List<String>> rows = table.asLists(String.class);\n+\n+        for (List<String> columns: rows) {\n+            store.addBook(new Book(columns.get(0), columns.get(1)));\n+        }\n+    }\n+    \n+    @When(\"^I search for books by author (.+)$\")\n+    public void searchForBooksByAuthor(String author) {\n+        foundBooks = store.booksByAuthor(author);\n+    }\n+\n+    @When(\"^I search for a book titled (.+)$\")\n+    public void searchForBookByTitle(String title) {\n+        foundBook = store.bookByTitle(title).orElse(null);\n+    }\n+    \n+    @Then(\"^I find (\\\\d+) books$\")\n+    public void findBooks(int count) {\n+        assertEquals(count, foundBooks.size());\n+    }\n+\n+    @Then(\"^I find a book$\")\n+    public void findABook() {\n+        assertNotNull(foundBook);\n+    }\n+\n+    @Then(\"^I find no book$\")\n+    public void findNoBook() {\n+        assertNull(foundBook);\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithBackgroundIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithBackgroundIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithBackgroundIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithBackgroundIntegrationTest.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.cucumberbackground.books;\n+\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(features = \"classpath:features/book-store-with-background.feature\")\n+public class BookStoreWithBackgroundIntegrationTest {\n+\n+}\n+\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithoutBackgroundIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithoutBackgroundIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithoutBackgroundIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumberbackground/books/BookStoreWithoutBackgroundIntegrationTest.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.cucumberbackground.books;\n+\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(features = \"classpath:features/book-store-without-background.feature\")\n+public class BookStoreWithoutBackgroundIntegrationTest {\n+\n+}\n+",
    "output": "dupirefr/dupire.francois+pro@gmail.com [BAEL-3445] Cucumber Backgrounds (Moved package) (#8350)\n\n* [BAEL-3445] Added Background examples to Cucumber examples\r\n\r\n* [BAEL-3445] Copied code to have a package dedicated to the article\r\n\r\n* [BAEL-3445] Removed code from other package"
  },
  {
    "input": "diff --git a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n@@ -1,6 +1,5 @@\n package org.baeldung.store;\r\n \r\n-\r\n import static org.junit.Assert.assertNotNull;\r\n \r\n import org.junit.Test;\r\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n@@ -13,8 +13,6 @@\n  * Separate unit test class where only one Item object is available for \n  * autowiring. If the ioc-context.xml were used for autowiring by type, there \n  * would be multiple qualifying Item objects, causing a failure.\n- * \n- * @author Justin Albano <albano.justin@gmail.com>\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(\"classpath:/ioc-context-by-type.xml\")\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n@@ -1,6 +1,5 @@\n package org.baeldung.store;\n \n-\n import static org.junit.Assert.assertNotNull;\n \n import org.junit.Test;",
    "output": "BAEL-3290: Corrected formatting"
  },
  {
    "input": "diff --git a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n@@ -1,6 +1,5 @@\n package org.baeldung.store;\r\n \r\n-\r\n import static org.junit.Assert.assertNotNull;\r\n \r\n import org.junit.Test;\r\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n@@ -13,8 +13,6 @@\n  * Separate unit test class where only one Item object is available for \n  * autowiring. If the ioc-context.xml were used for autowiring by type, there \n  * would be multiple qualifying Item objects, causing a failure.\n- * \n- * @author Justin Albano <albano.justin@gmail.com>\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(\"classpath:/ioc-context-by-type.xml\")\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n@@ -1,6 +1,5 @@\n package org.baeldung.store;\n \n-\n import static org.junit.Assert.assertNotNull;\n \n import org.junit.Test;",
    "output": "BAEL-3290: Corrected formatting and removed author line in class comment"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpPostingLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpPostingLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpPostingLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpPostingLiveTest.java\n@@ -38,9 +38,15 @@ public void init() {\n \r\n     @Test\r\n     public void whenSendPostRequest_thenCorrect() throws IOException {\r\n-        final RequestBody formBody = new FormBody.Builder().add(\"username\", \"test\").add(\"password\", \"test\").build();\r\n+        final RequestBody formBody = new FormBody.Builder()\r\n+                .add(\"username\", \"test\")\r\n+                .add(\"password\", \"test\")\r\n+                .build();\r\n \r\n-        final Request request = new Request.Builder().url(BASE_URL + \"/users\").post(formBody).build();\r\n+        final Request request = new Request.Builder()\r\n+                .url(BASE_URL + \"/users\")\r\n+                .post(formBody)\r\n+                .build();\r\n \r\n         final Call call = client.newCall(request);\r\n         final Response response = call.execute();\r\n@@ -52,7 +58,11 @@ public void whenSendPostRequest_thenCorrect() throws IOException {\n     public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOException {\r\n         final String postBody = \"test post\";\r\n \r\n-        final Request request = new Request.Builder().url(URL_SECURED_BY_BASIC_AUTHENTICATION).addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\")).post(RequestBody.create(MediaType.parse(\"text/x-markdown; charset=utf-8\"), \"test post\")).build();\r\n+        final Request request = new Request.Builder()\r\n+                .url(URL_SECURED_BY_BASIC_AUTHENTICATION)\r\n+                .addHeader(\"Authorization\", Credentials.basic(\"test\", \"test\"))\r\n+                .post(RequestBody.create(MediaType.parse(\"text/x-markdown\"), \"test post\"))\r\n+                .build();\r\n \r\n         final Call call = client.newCall(request);\r\n         final Response response = call.execute();\r\n@@ -64,7 +74,7 @@ public void whenSendPostRequestWithAuthorization_thenCorrect() throws IOExceptio\n     public void whenPostJson_thenCorrect() throws IOException {\r\n         final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n \r\n-        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\r\n+        final RequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\");\r\n         final Request request = new Request.Builder().url(BASE_URL + \"/users/detail\").post(body).build();\r\n \r\n         final Call call = client.newCall(request);\r\n@@ -73,6 +83,30 @@ public void whenPostJson_thenCorrect() throws IOException {\n         assertThat(response.code(), equalTo(200));\r\n     }\r\n \r\n+    @Test\r\n+    public void whenPostJsonWithoutCharset_thenCharsetIsUtf8() throws IOException {\r\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n+\r\n+        final RequestBody body = RequestBody.create(\r\n+                MediaType.parse(\"application/json\"), json);\r\n+\r\n+        String charset = body.contentType().charset().displayName();\r\n+\r\n+        assertThat(charset, equalTo(\"UTF-8\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void whenPostJsonWithUtf16Charset_thenCharsetIsUtf16() throws IOException {\r\n+        final String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"John\\\"}\";\r\n+\r\n+        final RequestBody body = RequestBody.create(\r\n+                MediaType.parse(\"application/json; charset=utf-16\"), json);\r\n+\r\n+        String charset = body.contentType().charset().displayName();\r\n+\r\n+        assertThat(charset, equalTo(\"UTF-16\"));\r\n+    }\r\n+\r\n     @Test\r\n     public void whenSendMultipartRequest_thenCorrect() throws IOException {\r\n         final RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(\"username\", \"test\").addFormDataPart(\"password\", \"test\")\r",
    "output": "http://team.baeldung.com/browse/BAEL-11412"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyDefaultTimezoneUnitTest.java\n@@ -1,9 +1,8 @@\n-package com.baeldung.timezone;\n+package com.baeldung.jvmtimezone;\n \n import org.junit.Test;\n \n import java.util.Calendar;\n-import java.util.Date;\n import java.util.TimeZone;\n \n import static org.junit.Assert.assertEquals;\n@@ -13,9 +12,7 @@ public class ModifyDefaultTimezoneUnitTest {\n     @Test\n     public void givenDefaultTimezoneSet_thenDateTimezoneIsCorrect() {\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Portugal\"));\n-        Date date = new Date();\n         Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(date);\n         assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Portugal\"));\n     }\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/jvmtimezone/ModifyTimezonePropertyUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.timezone;\n+package com.baeldung.jvmtimezone;\n \n import org.junit.After;\n import org.junit.Before;\n@@ -14,7 +14,7 @@ public class ModifyTimezonePropertyUnitTest {\n \n     @Before\n     public void setup() {\n-        System.setProperty(\"user.timezone\", \"IST\");\n+        System.setProperty(\"user.timezone\", \"Asia/Kolkata\");\n         TimeZone.setDefault(null);\n     }\n \n@@ -25,10 +25,8 @@ public void teardown() {\n \n     @Test\n     public void givenTimezonePropertySet_thenDateTimezoneIsCorrect() {\n-        Date date = new Date();\n         Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(date);\n-        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"IST\"));\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Asia/Kolkata\"));\n     }\n \n }\n\\ No newline at end of file",
    "output": "BAEL-3302: Fix package name & get rid of 3-letter time zone"
  },
  {
    "input": "diff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/Article.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/Article.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/Article.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/Article.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.model;\n+package com.baeldung.controller.optionalpathvars;\n \n public class Article {\n \n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerController.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerController.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerController.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerController.java\n@@ -1,13 +1,11 @@\n package com.baeldung.controller.optionalpathvars;\n \n-import static com.baeldung.model.Article.DEFAULT_ARTICLE;\n+import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;\n \n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.baeldung.model.Article;\n-\n @RestController\n public class ArticleViewerController {\n \n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamController.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamController.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamController.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamController.java\n@@ -1,15 +1,13 @@\n package com.baeldung.controller.optionalpathvars;\n \n-import static com.baeldung.model.Article.DEFAULT_ARTICLE;\n+import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;\n \n import java.util.Map;\n \n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.baeldung.model.Article;\n-\n @RestController\n @RequestMapping(value = \"/mapParam\")\n public class ArticleViewerWithMapParamController {\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithOptionalParamController.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithOptionalParamController.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithOptionalParamController.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithOptionalParamController.java\n@@ -1,14 +1,12 @@\n package com.baeldung.controller.optionalpathvars;\n \n-import static com.baeldung.model.Article.DEFAULT_ARTICLE;\n+import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;\n \n import java.util.Optional;\n \n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import com.baeldung.model.Article;;\n+import org.springframework.web.bind.annotation.RestController;;\n \n @RestController\n @RequestMapping(\"/optionalParam\")\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithRequiredAttributeController.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithRequiredAttributeController.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithRequiredAttributeController.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithRequiredAttributeController.java\n@@ -1,12 +1,10 @@\n package com.baeldung.controller.optionalpathvars;\n \n-import static com.baeldung.model.Article.DEFAULT_ARTICLE;\n+import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;\n \n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import com.baeldung.model.Article;;\n+import org.springframework.web.bind.annotation.RestController;;\n \n @RestController\n @RequestMapping(value = \"/requiredAttribute\")\n\ndiff --git a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java\n--- a/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java\n+++ b/spring-mvc-basics-2/src/main/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java\n@@ -1,13 +1,11 @@\n package com.baeldung.controller.optionalpathvars;\n \n-import static com.baeldung.model.Article.DEFAULT_ARTICLE;\n+import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;\n \n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.baeldung.model.Article;\n-\n @RestController\n @RequestMapping(value = \"/seperateMethods\")\n public class ArticleViewerWithTwoSeparateMethodsController {\n\ndiff --git a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java\n--- a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java\n+++ b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java\n@@ -12,8 +12,6 @@\n import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n import org.springframework.web.context.WebApplicationContext;\n-\n-import com.baeldung.model.Article;\n import org.baeldung.controller.config.WebConfig;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n\ndiff --git a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java\n--- a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java\n+++ b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java\n@@ -12,8 +12,6 @@\n import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n import org.springframework.web.context.WebApplicationContext;\n-\n-import com.baeldung.model.Article;\n import org.baeldung.controller.config.WebConfig;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n\ndiff --git a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java\n--- a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java\n+++ b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java\n@@ -12,8 +12,6 @@\n import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n import org.springframework.web.context.WebApplicationContext;\n-\n-import com.baeldung.model.Article;\n import org.baeldung.controller.config.WebConfig;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n\ndiff --git a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java\n--- a/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java\n+++ b/spring-mvc-basics-2/src/test/java/com/baeldung/controller/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java\n@@ -12,8 +12,6 @@\n import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n import org.springframework.web.context.WebApplicationContext;\n-\n-import com.baeldung.model.Article;\n import org.baeldung.controller.config.WebConfig;\n \n @RunWith(SpringJUnit4ClassRunner.class)",
    "output": "Bael 3395 - spring optional path var (#8341)\n\n* initial test cases\r\n\r\n* changes in @requestMapping\r\n\r\n* moving code to spring-mvc-basic-2 project\r\n\r\n* moving Article class"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n@@ -14,7 +14,7 @@ public class SwitchExpressionsUnitTest {\n \n   @Test\n   @SuppressWarnings (\"preview\")\n-  public void switchExpression() {\n+  public void whenSwitchingOverMonthJune_thenWillReturn3() {\n \n     var month = JUNE;\n \n@@ -30,7 +30,7 @@ public void switchExpression() {\n \n   @Test\n   @SuppressWarnings (\"preview\")\n-  public void switchExpressionWithYieldKeyword() {\n+  public void whenSwitchingOverMonthAugust_thenWillReturn24() {\n     var month = AUGUST;\n \n     var result = switch (month) {\n@@ -48,7 +48,7 @@ public void switchExpressionWithYieldKeyword() {\n \n   @Test\n   @SuppressWarnings (\"preview\")\n-  public void switchStatementWithReturnInsideBlock() {\n+  public void whenSwitchingOverMonthJanuary_thenWillReturn3() {\n \n     Function<Month, Integer> func = (month) -> {\n       switch (month) {\n@@ -62,7 +62,7 @@ public void switchStatementWithReturnInsideBlock() {\n \n   @Test\n   @SuppressWarnings (\"preview\")\n-  public void switchExpressionWithAllCasesCovered() {\n+  public void whenSwitchingOverMonthAugust_thenWillReturn2() {\n     var month = AUGUST;\n \n     var result = switch (month) {",
    "output": "Changing test method names to conform to standard"
  },
  {
    "input": "diff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigByTypeUnitTest.java\n@@ -0,0 +1,32 @@\n+package org.baeldung.store;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Separate unit test class where only one Item object is available for \n+ * autowiring. If the ioc-context.xml were used for autowiring by type, there \n+ * would be multiple qualifying Item objects, causing a failure.\n+ * \n+ * @author Justin Albano <albano.justin@gmail.com>\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"classpath:/ioc-context-by-type.xml\")\n+public class XmlAppConfigByTypeUnitTest {\n+\n+    @Autowired\n+    @Qualifier(\"xml-store-by-autowire-type\")\n+    private Store storeByAutowireInjectionByType;\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByAutowireInjectionByType_ThenBeanIsNotNull() {\n+        assertNotNull(storeByAutowireInjectionByType);\n+        assertNotNull(storeByAutowireInjectionByType.getItem());\n+    }\n+}\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n@@ -21,6 +21,10 @@ public class XmlAppConfigUnitTest {\n     @Autowired\n     @Qualifier(\"xml-store-by-setter\")\n     private Store storeBySetterInjection;\n+\n+    @Autowired\n+    @Qualifier(\"xml-store-by-autowire-name\")\n+    private Store storeByAutowireInjectionByName;\n     \n     @Autowired\n     @Qualifier(\"xml-store-by-setter-lazy\")\n@@ -38,6 +42,12 @@ public void givenValidXmlConfig_WhenInjectStoreBySetterInjection_ThenBeanIsNotNu\n         assertNotNull(storeByConstructorInjection.getItem());\n     }\n \n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByAutowireInjectionByName_ThenBeanIsNotNull() {\n+        assertNotNull(storeByAutowireInjectionByName);\n+        assertNotNull(storeByAutowireInjectionByName.getItem());\n+    }\n+\n     @Test\n     public void givenValidXmlConfig_WhenInjectStoreBySetterInjectionLazy_ThenBeanIsNotNull() {\n         assertNotNull(storeBySetterInjectionLazy);",
    "output": "BAEL-3290: Added unit test for autowiring by type"
  },
  {
    "input": "diff --git a/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java b/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n--- a/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n+++ b/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n@@ -1,5 +0,0 @@\n-package com.baeldung.dependency.ioc;\n-\n-public interface Item {\n-\n-}\n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/AppConfig.java b/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n--- a/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n+++ b/spring-di/src/main/java/org/baeldung/store/AppConfig.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.dependency.ioc;\n+package org.baeldung.store;\n \n import org.springframework.context.annotation.Bean;\n \n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/Item.java b/spring-di/src/main/java/org/baeldung/store/Item.java\n--- a/spring-di/src/main/java/org/baeldung/store/Item.java\n+++ b/spring-di/src/main/java/org/baeldung/store/Item.java\n@@ -0,0 +1,5 @@\n+package org.baeldung.store;\n+\n+public interface Item {\n+\n+}\n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java b/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n--- a/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n+++ b/spring-di/src/main/java/org/baeldung/store/ItemImpl1.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.dependency.ioc;\n+package org.baeldung.store;\n \n public class ItemImpl1 implements Item {\n \n\ndiff --git a/spring-di/src/main/java/org/baeldung/store/Store.java b/spring-di/src/main/java/org/baeldung/store/Store.java\n--- a/spring-di/src/main/java/org/baeldung/store/Store.java\n+++ b/spring-di/src/main/java/org/baeldung/store/Store.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.dependency.ioc;\n+package org.baeldung.store;\n \n import org.springframework.beans.factory.annotation.Autowired;\n \n\ndiff --git a/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java b/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n--- a/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n+++ b/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n@@ -1,24 +0,0 @@\n-package com.baeldung.dependency.ioc;\n-\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(\"classpath:/ioc-context.xml\")\n-public class XmlAppConfigTest {\n-    \n-    @Autowired\n-    @Qualifier(\"xml-store-by-constructor\")\n-    private Store storeByConstructorInjection;\n-\n-    @Test\n-    public void givenValidXmlConfig_WhenInjectStoreByConstructorInject_ThenBeanIsNotNull() {\n-        assertNotNull(storeByConstructorInjection);\n-    }\n-}\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/AppConfigUnitTest.java\n@@ -0,0 +1,36 @@\n+package org.baeldung.store;\r\n+\r\n+\r\n+import static org.junit.Assert.assertNotNull;\r\n+\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.beans.factory.annotation.Qualifier;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n+\r\n+@RunWith(SpringJUnit4ClassRunner.class)\r\n+@ContextConfiguration(classes = AppConfig.class)\r\n+public class AppConfigUnitTest {\r\n+\r\n+    @Autowired\r\n+    @Qualifier(\"storeThroughConstructorInjection\")\r\n+    private Store storeByConstructorInjection;\r\n+    \r\n+    @Autowired\r\n+    @Qualifier(\"storeThroughSetterInjection\")\r\n+    private Store storeBySetterInjection;\r\n+\r\n+    @Test\r\n+    public void givenValidXmlConfig_WhenInjectStoreByConstructorInjection_ThenBeanIsNotNull() {\r\n+        assertNotNull(storeByConstructorInjection);\r\n+        assertNotNull(storeByConstructorInjection.getItem());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjection_ThenBeanIsNotNull() {\r\n+        assertNotNull(storeBySetterInjection);\r\n+        assertNotNull(storeByConstructorInjection.getItem());\r\n+    }\r\n+}\r\n\ndiff --git a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n--- a/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n+++ b/spring-di/src/test/java/org/baeldung/store/XmlAppConfigUnitTest.java\n@@ -0,0 +1,46 @@\n+package org.baeldung.store;\n+\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"classpath:/ioc-context.xml\")\n+public class XmlAppConfigUnitTest {\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-constructor\")\n+    private Store storeByConstructorInjection;\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-setter\")\n+    private Store storeBySetterInjection;\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-setter-lazy\")\n+    private Store storeBySetterInjectionLazy;\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByConstructorInjection_ThenBeanIsNotNull() {\n+        assertNotNull(storeByConstructorInjection);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjection_ThenBeanIsNotNull() {\n+        assertNotNull(storeBySetterInjection);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreBySetterInjectionLazy_ThenBeanIsNotNull() {\n+        assertNotNull(storeBySetterInjectionLazy);\n+        assertNotNull(storeByConstructorInjection.getItem());\n+    }\n+}",
    "output": "BAEL-3290: Added test cases to exercise DI configuration"
  },
  {
    "input": "diff --git a/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java b/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n--- a/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n@@ -0,0 +1,51 @@\n+package com.baeldung.config;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.converter.HttpMessageConverter;\n+\n+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n+\n+import org.springframework.oxm.xstream.XStreamMarshaller;\n+import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+\n+/*\n+ * Please note that main web configuration is in src/main/webapp/WEB-INF/api-servlet.xml\n+ */\n+@Configuration\n+@EnableWebMvc\n+@ComponentScan({ \"com.baeldung.web\", \"com.baeldung.requestmapping\" })\n+public class MvcConfig implements WebMvcConfigurer {\n+\n+    public MvcConfig() {\n+        super();\n+    }\n+\n+    //\n+\n+    @Override\n+    public void configureMessageConverters(final List<HttpMessageConverter<?>> messageConverters) {\n+        final Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();\n+        builder.indentOutput(true)\n+            .dateFormat(new SimpleDateFormat(\"dd-MM-yyyy hh:mm\"));\n+\n+    }\n+\n+\n+    @Override\n+    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n+        configurer.defaultContentType(MediaType.APPLICATION_JSON);\n+    }\n+\n+    @Override\n+    public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\");\n+    }\n+}\n\ndiff --git a/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java b/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n--- a/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.web.dto;\n+\n+public class Bazz {\n+\n+    \n+    public String id;\n+    public String name;\n+\n+    public Bazz(String id){\n+        this.id = id;\n+    }\n+    public Bazz(String id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Bazz [id=\" + id + \", name=\" + name + \"]\";\n+    }\n+    \n+}\n\ndiff --git a/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java b/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -0,0 +1,45 @@\n+package com.baeldung.web.dto;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+@XStreamAlias(\"Foo\")\n+public class Foo {\n+    private long id;\n+    private String name;\n+\n+    public Foo() {\n+        super();\n+    }\n+\n+    public Foo(final String name) {\n+        super();\n+\n+        this.name = name;\n+    }\n+\n+    public Foo(final long id, final String name) {\n+        super();\n+\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    // API\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java b/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n--- a/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n+++ b/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n@@ -1,14 +0,0 @@\n-package com.baeldung.controllers;\n-\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.GetMapping;\n-\n-@Controller\n-public class ViewController {\n-\n-    @GetMapping(\"/\")\n-    public String welcome() {\n-        return \"index\";\n-    }\n-\n-}",
    "output": "Merge pull request #8328 from sjmillington/rest-move-pt-4\n\n[BAEL-18367] Moving articles from rest-spring-** pt 4"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.date.conversion;\n+package com.baeldung.offsetdatetime;\n \n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.datetime;\n+package com.baeldung.skipweekends;\n \n import java.time.DayOfWeek;\n import java.time.LocalDate;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -1,13 +1,13 @@\n package com.baeldung.date.comparison;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n+import org.junit.Test;\r\n \r\n import java.time.LocalDateTime;\r\n import java.time.ZoneId;\r\n import java.util.Date;\r\n \r\n-import org.junit.Test;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n public class DateComparisonUtilsUnitTest {\r\n \r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n@@ -1,15 +1,12 @@\n package com.baeldung.datetime;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.CalendarUtils;\n-import com.baeldung.datetime.DateUtils;\n-\n import java.text.ParseException;\n import java.util.Date;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class CalendarUtilsUnitTest {\n \n     @Test\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n@@ -1,14 +1,12 @@\n package com.baeldung.datetime;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.DateUtils;\n-\n import java.text.ParseException;\n import java.util.Date;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class DateUtilsUnitTest {\n \n     @Test\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n@@ -1,12 +1,12 @@\n-package com.baeldung.date.conversion;\n+package com.baeldung.offsetdatetime;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n \n import java.time.OffsetDateTime;\n import java.util.Date;\n \n-import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n public class ConvertToOffsetDateTimeUnitTest {\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n@@ -1,7 +1,8 @@\n-package com.baeldung.datetime;\n+package com.baeldung.skipweekends;\n \n import static org.junit.Assert.assertEquals;\n \n+import com.baeldung.skipweekends.AddSubtractDaysSkippingWeekendsUtils;\n import org.junit.Test;\n \n import java.time.LocalDate;",
    "output": "Merge pull request #8323 from catalin-burcea/BAEL-19059\n\n[BAEL-19059] - Move new articles to java-dates-operations module"
  },
  {
    "input": "diff --git a/spring-di/src/main/java/com/baeldung/dependency/ioc/AppConfig.java b/spring-di/src/main/java/com/baeldung/dependency/ioc/AppConfig.java\n--- a/spring-di/src/main/java/com/baeldung/dependency/ioc/AppConfig.java\n+++ b/spring-di/src/main/java/com/baeldung/dependency/ioc/AppConfig.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.dependency.ioc;\n+\n+import org.springframework.context.annotation.Bean;\n+\n+public class AppConfig {\n+\n+    @Bean\n+    public Item item1() {\n+        return new ItemImpl1();\n+    }\n+ \n+    @Bean\n+    public Store storeThroughConstructorInjection() {\n+        return new Store(item1());\n+    }\n+    \n+    @Bean\n+    public Store storeThroughSetterInjection() {\n+        Store store = new Store();\n+        store.setItem(item1());\n+        return store;\n+    }\n+}\n\ndiff --git a/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java b/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n--- a/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n+++ b/spring-di/src/main/java/com/baeldung/dependency/ioc/Item.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.dependency.ioc;\n+\n+public interface Item {\n+\n+}\n\ndiff --git a/spring-di/src/main/java/com/baeldung/dependency/ioc/ItemImpl1.java b/spring-di/src/main/java/com/baeldung/dependency/ioc/ItemImpl1.java\n--- a/spring-di/src/main/java/com/baeldung/dependency/ioc/ItemImpl1.java\n+++ b/spring-di/src/main/java/com/baeldung/dependency/ioc/ItemImpl1.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.dependency.ioc;\n+\n+public class ItemImpl1 implements Item {\n+\n+}\n\ndiff --git a/spring-di/src/main/java/com/baeldung/dependency/ioc/Store.java b/spring-di/src/main/java/com/baeldung/dependency/ioc/Store.java\n--- a/spring-di/src/main/java/com/baeldung/dependency/ioc/Store.java\n+++ b/spring-di/src/main/java/com/baeldung/dependency/ioc/Store.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.dependency.ioc;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class Store {\n+    \n+    @Autowired\n+    private Item item;\n+    \n+    public Store() {}\n+    \n+    public Store(Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setItem(Item item) {\n+        this.item = item;\n+    }\n+}\n\ndiff --git a/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java b/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n--- a/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n+++ b/spring-di/src/test/java/com/baeldung/dependency/ioc/XmlAppConfigTest.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.dependency.ioc;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"classpath:/ioc-context.xml\")\n+public class XmlAppConfigTest {\n+    \n+    @Autowired\n+    @Qualifier(\"xml-store-by-constructor\")\n+    private Store storeByConstructorInjection;\n+\n+    @Test\n+    public void givenValidXmlConfig_WhenInjectStoreByConstructorInject_ThenBeanIsNotNull() {\n+        assertNotNull(storeByConstructorInjection);\n+    }\n+}",
    "output": "BAEL-3290: Basic injection added"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n@@ -1,34 +1,25 @@\n package com.baeldung.web.controller;\n \n import com.baeldung.web.dto.Foo;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n \n-@Controller\n+@RestController\n public class FooController {\n \n-    public FooController() {\n-        super();\n-    }\n-\n-    // API - read\n-    @RequestMapping(method = RequestMethod.GET, value = \"/foos/{id}\")\n-    @ResponseBody\n+    @GetMapping(\"/foos/{id}\")\n     public Foo findById(@PathVariable final long id, HttpServletRequest req, HttpServletResponse res) {\n-        // System.out.println(req.getHeaderNames());\n-        // System.out.println(\"------\" + req.getHeader(\"Test\"));\n         if (req.getHeader(\"Test\") != null) {\n             res.addHeader(\"Test\", req.getHeader(\"Test\"));\n         }\n+\n         return new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\n     }\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -1,22 +1,15 @@\n package com.baeldung.web.dto;\n \n public class Foo {\n+\n     private long id;\n     private String name;\n \n-    public Foo() {\n-        super();\n-    }\n-\n     public Foo(final long id, final String name) {\n-        super();\n-\n         this.id = id;\n         this.name = name;\n     }\n \n-    //\n-\n     public long getId() {\n         return id;\n     }",
    "output": "BAEL-19878: Upgrade spring-cloud-zuul to Spring Boot 2.2.2 and Spring Cloud Hoxton"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n@@ -0,0 +1,47 @@\n+package com.baeldung.shutdownhook;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class ShutdownHookUnitTest {\n+\n+    @Test\n+    public void givenAHook_WhenShutsDown_ThenHookShouldBeExecuted() {\n+        Thread printingHook = new Thread(() -> System.out.println(\"In the middle of a shutdown\"));\n+        Runtime.getRuntime().addShutdownHook(printingHook);\n+    }\n+\n+    @Test\n+    public void addingAHook_WhenThreadAlreadyStarted_ThenThrowsAnException() {\n+        Thread longRunningHook = new Thread(() -> {\n+            try {\n+                Thread.sleep(300);\n+            } catch (InterruptedException ignored) {}\n+        });\n+        longRunningHook.start();\n+\n+        assertThatThrownBy(() -> Runtime.getRuntime().addShutdownHook(longRunningHook))\n+          .isInstanceOf(IllegalArgumentException.class)\n+          .hasMessage(\"Hook already running\");\n+    }\n+\n+    @Test\n+    public void addingAHook_WhenAlreadyExists_ThenAnExceptionWouldBeThrown() {\n+        Thread unfortunateHook = new Thread(() -> {});\n+        Runtime.getRuntime().addShutdownHook(unfortunateHook);\n+\n+        assertThatThrownBy(() -> Runtime.getRuntime().addShutdownHook(unfortunateHook))\n+          .isInstanceOf(IllegalArgumentException.class)\n+          .hasMessage(\"Hook previously registered\");\n+    }\n+\n+    @Test\n+    public void removeAHook_WhenItIsAlreadyRegistered_ThenWouldDeRegisterTheHook() {\n+        Thread willNotRun = new Thread(() -> System.out.println(\"Won't run!\"));\n+        Runtime.getRuntime().addShutdownHook(willNotRun);\n+\n+        assertThat(Runtime.getRuntime().removeShutdownHook(willNotRun)).isTrue();\n+    }\n+}",
    "output": "Merge pull request #8289 from mona-mohamadinia/BAEL-3520\n\nBAEL-3520: Shutdown Hooks for JVM"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java b/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n--- a/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n+++ b/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JvmExitAndHaltDemo {\n+\n+    private static Logger LOGGER = LoggerFactory.getLogger(JvmExitAndHaltDemo.class);\n+\n+    static {\n+        Runtime.getRuntime()\n+            .addShutdownHook(new Thread(() -> {\n+                LOGGER.info(\"Shutdown hook initiated.\");\n+            }));\n+    }\n+\n+    public void processAndExit() {\n+        process();\n+        LOGGER.info(\"Calling System.exit().\");\n+        System.exit(0);\n+    }\n+\n+    public void processAndHalt() {\n+        process();\n+        LOGGER.info(\"Calling Runtime.getRuntime().halt().\");\n+        Runtime.getRuntime()\n+            .halt(0);\n+    }\n+\n+    private void process() {\n+        LOGGER.info(\"Process started.\");\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.junit.Test;\n+\n+public class JvmExitDemoUnitTest {\n+\n+    JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n+\n+    @Test\n+    public void givenProcessComplete_whenExitCalled_thenTriggerShutdownHook() {\n+        jvmExitAndHaltDemo.processAndExit();\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.junit.Test;\n+\n+public class JvmHaltDemoUnitTest {\n+\n+    JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n+\n+    @Test\n+    public void givenProcessComplete_whenHaltCalled_thenDoNotTriggerShutdownHook() {\n+        jvmExitAndHaltDemo.processAndHalt();\n+    }\n+\n+}",
    "output": "Merge pull request #8281 from kamleshkr/BAEL-3525\n\nBAEL-3525: System.exit() vs Runtime.getRuntime().halt()"
  },
  {
    "input": "diff --git a/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java b/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n--- a/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n+++ b/spring-session/spring-session-mongodb/src/test/java/com/baeldung/springsessionmongodb/SpringSessionMongoDBIntegrationTest.java\n@@ -6,6 +6,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n@@ -16,9 +17,12 @@\n \n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = SpringSessionMongoDBApplication.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\n+@SpringBootTest(classes = SpringSessionMongoDBApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringSessionMongoDBIntegrationTest {\n \n+    @LocalServerPort\n+    private int port;\n+\n     @Autowired\n     private MongoOperationsSessionRepository repository;\n \n@@ -27,7 +31,7 @@ public class SpringSessionMongoDBIntegrationTest {\n     @Test\n     public void givenEndpointIsCalledTwiceAndResponseIsReturned_whenMongoDBIsQueriedForCount_thenCountMustBeSame() {\n         HttpEntity<String> response = restTemplate\n-                .exchange(\"http://localhost:\" + 8080, HttpMethod.GET, null, String.class);\n+                .exchange(\"http://localhost:\" + port, HttpMethod.GET, null, String.class);\n         HttpHeaders headers = response.getHeaders();\n         String set_cookie = headers.getFirst(HttpHeaders.SET_COOKIE);\n ",
    "output": "BAEL-19868: Use random port in spring-session-mongodb IntegrationTest"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n@@ -13,19 +13,17 @@\n \n public class PatternJava11UnitTest {\n \n-    private static final String VALID_NAME = \"Fabio Silva\";\n-    private static final String INVALID_NAME = \"Fabio Luis Silva\";\n-    private static final List<String> NAMES_TO_VALIDATE = Arrays.asList(VALID_NAME, INVALID_NAME);\n-    private static final Pattern FIRST_LAST_NAME_PRE_COMPILED_PATTERN = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n-\n     @Test\n     public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesThePatternInTheListElements() {\n-        Predicate<String> patternAsMatchPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asMatchPredicate();\n-        List<String> validatedNames = NAMES_TO_VALIDATE.stream()\n+        List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Fabio Luis Silva\");\n+        Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n+\n+        Predicate<String> patternAsMatchPredicate = firstLastNamePreCompiledPattern.asMatchPredicate();\n+        List<String> validatedNames = namesToValidate.stream()\n                 .filter(patternAsMatchPredicate)\n                 .collect(Collectors.toList());\n \n-        assertTrue(validatedNames.contains(VALID_NAME));\n-        assertFalse(validatedNames.contains(INVALID_NAME));\n+        assertTrue(validatedNames.contains(\"Fabio Silva\"));\n+        assertFalse(validatedNames.contains(\"Fabio Luis Silva\"));\n     }\n }\n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n@@ -15,17 +15,12 @@\n public class PatternUnitTest {\n \n     private static final Pattern FIRST_LAST_NAME_PRE_COMPILED_PATTERN = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n-    private static final String VALID_NAME = \"Fabio Silva\";\n-    private static final String INVALID_NAME = \"Mr. Silva\";\n-    private static final List<String> NAMES_TO_VALIDATE = Arrays.asList(VALID_NAME, INVALID_NAME);\n-\n     private static final Pattern SPLIT_PRE_COMPILED_PATTERN = Pattern.compile(\"__\");\n-    private static final String TEXT_TO_SPLIT = \"My_Name__is__Fabio_Silva\";\n \n     @Test\n     public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches() {\n-        Matcher matcherName1 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(VALID_NAME);\n-        Matcher matcherName2 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(INVALID_NAME);\n+        Matcher matcherName1 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(\"Fabio Silva\");\n+        Matcher matcherName2 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(\"Mr. Silva\");\n \n         boolean matchesName1 = matcherName1.matches();\n         boolean matchesName2 = matcherName2.matches();\n@@ -36,19 +31,20 @@ public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches(\n \n     @Test\n     public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindThePatternInTheListElements() {\n+        List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Mr. Silva\");\n         Predicate<String> patternsAsPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asPredicate();\n \n-        List<String> validNames = NAMES_TO_VALIDATE.stream()\n+        List<String> validNames = namesToValidate.stream()\n                 .filter(patternsAsPredicate)\n                 .collect(Collectors.toList());\n \n-        assertEquals(1,validNames.size());\n-        assertTrue(validNames.contains(VALID_NAME));\n+        assertEquals(1, validNames.size());\n+        assertTrue(validNames.contains(\"Fabio Silva\"));\n     }\n \n     @Test\n     public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplitByThePattern() {\n-        String[] textSplit = SPLIT_PRE_COMPILED_PATTERN.split(TEXT_TO_SPLIT);\n+        String[] textSplit = SPLIT_PRE_COMPILED_PATTERN.split(\"My_Name__is__Fabio_Silva\");\n \n         assertEquals(\"My_Name\", textSplit[0]);\n         assertEquals(\"is\", textSplit[1]);\n@@ -57,12 +53,11 @@ public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplit\n \n     @Test\n     public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArrayWithValuesSplitByThePattern() {\n-        Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(TEXT_TO_SPLIT);\n+        Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(\"My_Name__is__Fabio_Silva\");\n         String[] textSplit = textSplitAsStream.toArray(String[]::new);\n \n         assertEquals(\"My_Name\", textSplit[0]);\n         assertEquals(\"is\", textSplit[1]);\n         assertEquals(\"Fabio_Silva\", textSplit[2]);\n     }\n-\n }",
    "output": "Ruy Vilão suggestions: no point in declaring the variables for the match result, let's put them directly in the assert (to be fixed in both tutorial and code)."
  },
  {
    "input": "diff --git a/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java b/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n--- a/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n+++ b/testing-modules/junit-5-basics/src/test/java/com/baeldung/assertexception/ExceptionAssertionUnitTest.java\n@@ -1,23 +1,32 @@\n package com.baeldung.assertexception;\n \n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.junit.jupiter.api.Test;\n \n public class ExceptionAssertionUnitTest {\n     @Test\n     public void whenExceptionThrown_thenAssertionSucceeds() {\n-        String test = null;\n-        assertThrows(NullPointerException.class, () -> {\n-            test.length();\n+        Exception exception = assertThrows(NumberFormatException.class, () -> {\n+            Integer.parseInt(\"1a\");\n         });\n+\n+        String expectedMessage = \"For input string\";\n+        String actualMessage = exception.getMessage();\n+\n+        assertTrue(actualMessage.contains(expectedMessage));\n     }\n \n     @Test\n     public void whenDerivedExceptionThrown_thenAssertionSucceds() {\n-        String test = null;\n-        assertThrows(RuntimeException.class, () -> {\n-            test.length();\n+        Exception exception = assertThrows(RuntimeException.class, () -> {\n+            Integer.parseInt(\"1a\");\n         });\n+\n+        String expectedMessage = \"For input string\";\n+        String actualMessage = exception.getMessage();\n+\n+        assertTrue(actualMessage.contains(expectedMessage));\n     }\n }\n\\ No newline at end of file",
    "output": "http://jira.baeldung.com/browse/BAEL-3586"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/configuration/SpringFoxConfig.java\n@@ -1,22 +1,29 @@\n package com.baeldung.swagger2boot.configuration;\n \n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import com.baeldung.swagger2boot.plugin.EmailAnnotationPlugin;\n+\n+import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;\n import springfox.documentation.builders.PathSelectors;\n import springfox.documentation.builders.RequestHandlerSelectors;\n import springfox.documentation.service.ApiInfo;\n import springfox.documentation.service.Contact;\n import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration;\n import springfox.documentation.spring.web.plugins.Docket;\n import springfox.documentation.swagger.web.*;\n-import springfox.documentation.swagger2.annotations.EnableSwagger2;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n \n import java.util.Collections;\n \n @Configuration\n-@EnableSwagger2\n-@ComponentScan(\"com.baeldung.swaggerboot.controller\")\n+@EnableSwagger2WebMvc\n+@Import({SpringDataRestConfiguration.class, BeanValidatorPluginsConfiguration.class})\n public class SpringFoxConfig {\n \n     private ApiInfo apiInfo() {\n@@ -65,4 +72,8 @@ UiConfiguration uiConfig() {\n                 .build();\n     }\n \n+    @Bean\n+    public EmailAnnotationPlugin emailPlugin() {\n+        return new EmailAnnotationPlugin();\n+    }\n }\n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/model/User.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.springfox.model;\n+package com.baeldung.swagger2boot.model;\n \n import javax.persistence.Id;\n import javax.validation.constraints.Email;\n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/plugin/EmailAnnotationPlugin.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.springfox.plugin;\n+package com.baeldung.swagger2boot.plugin;\n \n import static springfox.bean.validators.plugins.Validators.annotationFromBean;\n \n\ndiff --git a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/swagger2boot/repository/UserRepository.java\n@@ -1,9 +1,9 @@\n-package com.baeldung.springfox.repository;\n+package com.baeldung.swagger2boot.repository;\n \n import org.springframework.data.repository.CrudRepository;\n import org.springframework.stereotype.Repository;\n \n-import com.baeldung.springfox.model.User;\n+import com.baeldung.swagger2boot.model.User;\n \n @Repository\n public interface UserRepository extends CrudRepository<User, Long> {\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n--- a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n@@ -1,69 +0,0 @@\n-package com.baeldung.springfox;\n-\n-import static springfox.documentation.builders.PathSelectors.regex;\n-\n-import java.util.Collections;\n-import java.util.function.Predicate;\n-\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.boot.autoconfigure.domain.EntityScan;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Import;\n-import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n-\n-import com.baeldung.springfox.plugin.EmailAnnotationPlugin;\n-\n-import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;\n-import springfox.documentation.service.ApiInfo;\n-import springfox.documentation.spi.DocumentationType;\n-import springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration;\n-import springfox.documentation.spring.web.plugins.Docket;\n-import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n-\n-\n-@SpringBootApplication\n-@EnableSwagger2WebMvc\n-@EntityScan(\"com.baeldung.springfox.model\")\n-@ComponentScan(\"com.baeldung.springfox.controller\")\n-@EnableJpaRepositories(\"com.baeldung.springfox.repository\")\n-@Import({SpringDataRestConfiguration.class, BeanValidatorPluginsConfiguration.class})\n-public class SpringfoxApplication {\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(SpringfoxApplication.class, args);\n-    }\n-\n-    @Bean\n-    public Docket springfoxAppInfo() {\n-        return new Docket(DocumentationType.SWAGGER_2)\n-          .groupName(\"baeldung-springfox-api\")\n-          .select()\n-          .paths(paths())\n-          .build()\n-          .apiInfo(apiInfo());\n-    }\n-\n-    private Predicate<String> paths() {\n-        return regex(\"/users.*\").or(regex(\"/api.*\"));       \n-    }\n-\n-    private ApiInfo apiInfo() {\n-        return new ApiInfo(\n-          \"Springfox API specification\", \n-          \"User REST and Spring Data APIs\", \n-          \"\", \n-          \"\", \n-          null, \n-          \"License of API\", \n-          \"API license URL\", \n-          Collections.emptyList());\n-    }\n-\n-    @Bean\n-    public EmailAnnotationPlugin emailPlugin() {\n-        return new EmailAnnotationPlugin();\n-    }\n-\n-}\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n--- a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n@@ -1,39 +0,0 @@\n-package com.baeldung.springfox.controller;\n-\n-import java.util.Optional;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.baeldung.springfox.model.User;\n-import com.baeldung.springfox.repository.UserRepository;\n-\n-@Controller\n-@RequestMapping(value = \"/api/user\", produces = MediaType.APPLICATION_JSON_VALUE)\n-public class UserController {\n-    \n-    @Autowired\n-    private UserRepository userRepository;\n-\n-    @PostMapping\n-    public @ResponseBody ResponseEntity<User> createUser(@RequestBody User user) {\n-        userRepository.save(user);\n-        return new ResponseEntity<>(user, HttpStatus.OK);\n-    }\n-    \n-    @GetMapping\n-    public @ResponseBody ResponseEntity<User> getUser(@RequestParam Long id) {\n-        Optional<User> user = userRepository.findById(id);\n-        return new ResponseEntity<>(user.get(), HttpStatus.OK);\n-    }\n-\n-}",
    "output": "Springfox improvement code moved to spring-boot-mvc module"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmUnitTest.java\n@@ -4,7 +4,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-class BruteForceAlgorithmTest {\n+class BruteForceAlgorithmUnitTest {\n \n     @Test\n     void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmUnitTest.java\n@@ -4,7 +4,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-class KadaneAlgorithmTest {\n+class KadaneAlgorithmUnitTest {\n \n     @Test\n     void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {",
    "output": "BAEL3455 Max subarray problem"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithm.java\n@@ -1,7 +1,12 @@\n-package com.baeldung.algorithms.subarray.maximum;\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BruteForceAlgorithm {\n \n+    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n+\n     public int maxSubArray(int[] arr) {\n \n         int size = arr.length;\n@@ -23,7 +28,7 @@ public int maxSubArray(int[] arr) {\n                 }\n             }\n         }\n-        System.out.println(\"Found Maximum Subarray between \" + start + \" and \" + end);\n+        logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\n         return maximumSubArraySum;\n     }\n \n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java\n@@ -1,7 +1,12 @@\n-package com.baeldung.algorithms.subarray.maximum;\n+package com.baeldung.algorithms.maximumsubarray;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class KadaneAlgorithm {\n \n+    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n+\n     public int maxSubArraySum(int[] arr) {\n \n         int size = arr.length;\n@@ -23,7 +28,7 @@ public int maxSubArraySum(int[] arr) {\n                 end = i;\n             }\n         }\n-        System.out.println(\"Found Maximum Subarray between \" + start + \" and \" + end);\n+        logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\n         return maxSoFar;\n     }\n }\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/BruteForceAlgorithmTest.java\n@@ -1,24 +1,19 @@\n-package com.baeldung.algorithms.subarray.maximum;\n+package com.baeldung.algorithms.maximumsubarray;\n \n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-class BruteForceAlgorithmUnitTest {\n+class BruteForceAlgorithmTest {\n \n     @Test\n     void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n         //given\n         int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n-\n         //when\n         BruteForceAlgorithm algorithm = new BruteForceAlgorithm();\n         int maximumSum = algorithm.maxSubArray(arr);\n-\n         //then\n         assertEquals(6, maximumSum);\n-\n     }\n-\n }\n\\ No newline at end of file\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithmTest.java\n@@ -1,23 +1,19 @@\n-package com.baeldung.algorithms.subarray.maximum;\n+package com.baeldung.algorithms.maximumsubarray;\n \n import org.junit.jupiter.api.Test;\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-class KadaneAlgorithmUnitTest {\n+class KadaneAlgorithmTest {\n \n     @Test\n     void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n         //given\n         int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n-\n         //when\n         KadaneAlgorithm algorithm = new KadaneAlgorithm();\n         int maxSum = algorithm.maxSubArraySum(arr);\n-\n         //then\n         assertEquals(6, maxSum);\n-\n     }\n-\n }\n\\ No newline at end of file",
    "output": "BAEL3455 Max subarray problem"
  },
  {
    "input": "diff --git a/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java b/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n--- a/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java\n@@ -0,0 +1,51 @@\n+package com.baeldung.config;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.converter.HttpMessageConverter;\n+\n+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n+\n+import org.springframework.oxm.xstream.XStreamMarshaller;\n+import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+\n+/*\n+ * Please note that main web configuration is in src/main/webapp/WEB-INF/api-servlet.xml\n+ */\n+@Configuration\n+@EnableWebMvc\n+@ComponentScan({ \"com.baeldung.web\", \"com.baeldung.requestmapping\" })\n+public class MvcConfig implements WebMvcConfigurer {\n+\n+    public MvcConfig() {\n+        super();\n+    }\n+\n+    //\n+\n+    @Override\n+    public void configureMessageConverters(final List<HttpMessageConverter<?>> messageConverters) {\n+        final Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();\n+        builder.indentOutput(true)\n+            .dateFormat(new SimpleDateFormat(\"dd-MM-yyyy hh:mm\"));\n+\n+    }\n+\n+\n+    @Override\n+    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n+        configurer.defaultContentType(MediaType.APPLICATION_JSON);\n+    }\n+\n+    @Override\n+    public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\");\n+    }\n+}\n\ndiff --git a/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java b/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n--- a/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/web/dto/Bazz.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.web.dto;\n+\n+public class Bazz {\n+\n+    \n+    public String id;\n+    public String name;\n+\n+    public Bazz(String id){\n+        this.id = id;\n+    }\n+    public Bazz(String id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Bazz [id=\" + id + \", name=\" + name + \"]\";\n+    }\n+    \n+}\n\ndiff --git a/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java b/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-rest-http/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -0,0 +1,45 @@\n+package com.baeldung.web.dto;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+@XStreamAlias(\"Foo\")\n+public class Foo {\n+    private long id;\n+    private String name;\n+\n+    public Foo() {\n+        super();\n+    }\n+\n+    public Foo(final String name) {\n+        super();\n+\n+        this.name = name;\n+    }\n+\n+    public Foo(final long id, final String name) {\n+        super();\n+\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    // API\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java b/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n--- a/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n+++ b/spring-rest/src/main/java/com/baeldung/controllers/ViewController.java\n@@ -1,14 +0,0 @@\n-package com.baeldung.controllers;\n-\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.GetMapping;\n-\n-@Controller\n-public class ViewController {\n-\n-    @GetMapping(\"/\")\n-    public String welcome() {\n-        return \"index\";\n-    }\n-\n-}",
    "output": "[BAEL-18367] Moving articles from rest-spring-** pt 4"
  },
  {
    "input": "diff --git a/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffBenchmarkUnitTest.java b/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffBenchmarkUnitTest.java\n--- a/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffBenchmarkUnitTest.java\n+++ b/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffBenchmarkUnitTest.java\n@@ -1,73 +0,0 @@\n-package com.baeldung.stringdiff;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.bitbucket.cowwoc.diffmatchpatch.DiffMatchPatch;\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@State(Scope.Benchmark)\n-public class StringDiffBenchmarkUnitTest {\n-\n-    private DiffMatchPatch diffMatchPatch = new DiffMatchPatch();\n-\n-    private List<String> inputs = randomizeInputs(10000);\n-\n-    public static void main(String[] args) throws RunnerException {\n-        Options opts = new OptionsBuilder().include(\".*\")\n-            .warmupIterations(1)\n-            .measurementIterations(50)\n-            .jvmArgs(\"-Xms2g\", \"-Xmx2g\")\n-            .shouldDoGC(true)\n-            .forks(1)\n-            .build();\n-\n-        new Runner(opts).run();\n-    }\n-\n-    @Benchmark\n-    public int diffMatchPatch() {\n-        for (int i = 0; i < inputs.size() - 1; i++) {\n-            diffMatchPatch.diffMain(inputs.get(i), inputs.get(i + 1), false);\n-        }\n-        return inputs.size();\n-    }\n-\n-    @Benchmark\n-    public int stringUtils() {\n-        for (int i = 0; i < inputs.size() - 1; i++) {\n-            StringUtils.difference(inputs.get(i), inputs.get(i + 1));\n-        }\n-        return inputs.size();\n-    }\n-\n-    /**\n-     * Creates a list of a given size, containing 30 character long strings,\n-     * each starting with a static prefix of 10 characters and followed by\n-     * a random 20 character suffix\n-     *\n-     * @return a {@link List} of randomised strings\n-     */\n-    private List<String> randomizeInputs(int size) {\n-        String staticPart = \"ABCDEF1234\";\n-        List<String> inputs = new ArrayList<>();\n-        for (int i = 0; i < size; i++) {\n-            inputs.add(staticPart + RandomStringUtils.randomAlphabetic(20));\n-        }\n-        return inputs;\n-    }\n-}\n\ndiff --git a/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffUnitTest.java b/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffUnitTest.java\n--- a/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffUnitTest.java\n+++ b/java-strings-3/src/test/java/com/baeldung/stringdiff/StringDiffUnitTest.java\n@@ -1,39 +0,0 @@\n-package com.baeldung.stringdiff;\n-\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.bitbucket.cowwoc.diffmatchpatch.DiffMatchPatch;\n-import org.bitbucket.cowwoc.diffmatchpatch.DiffMatchPatch.Operation;\n-import org.junit.Test;\n-\n-public class StringDiffUnitTest {\n-\n-    private DiffMatchPatch diffMatchPatch = new DiffMatchPatch();\n-\n-    // Test samples\n-    private final String text1 = \"ABCDELMN\";\n-    private final String text2 = \"ABCFGLMN\";\n-\n-    @Test\n-    public void givenTwoStrings_whenDiffMatchPatch_thenReturnCorrectDiff() {\n-        assertThat(diffMatchPatch.diffMain(text1, text2, false), containsInAnyOrder(\n-            new DiffMatchPatch.Diff(Operation.EQUAL, \"ABC\"),\n-            new DiffMatchPatch.Diff(Operation.DELETE, \"DE\"),\n-            new DiffMatchPatch.Diff(Operation.INSERT, \"FG\"),\n-            new DiffMatchPatch.Diff(Operation.EQUAL, \"LMN\")));\n-        assertThat(diffMatchPatch.diffMain(text2, text1, false), containsInAnyOrder(\n-            new DiffMatchPatch.Diff(Operation.EQUAL, \"ABC\"),\n-            new DiffMatchPatch.Diff(Operation.INSERT, \"DE\"),\n-            new DiffMatchPatch.Diff(Operation.DELETE, \"FG\"),\n-            new DiffMatchPatch.Diff(Operation.EQUAL, \"LMN\")));\n-    }\n-\n-    @Test\n-    public void givenTwoStrings_whenStringUtilsDifference_thenReturnCorrectDiff() {\n-        assertThat(StringUtils.difference(text1, text2), is(\"FGLMN\"));\n-        assertThat(StringUtils.difference(text2, text1), is(\"DELMN\"));\n-    }\n-}",
    "output": "Removing unnecessary files"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n--- a/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n+++ b/core-java-modules/core-java-13/src/test/java/com/baeldung/switchExpression/SwitchExpressionsUnitTest.java\n@@ -0,0 +1,76 @@\n+package com.baeldung.switchExpression;\n+\n+import static java.time.Month.AUGUST;\n+import static java.time.Month.JUNE;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.time.Month;\n+import java.util.function.Function;\n+\n+import org.junit.Test;\n+\n+public class SwitchExpressionsUnitTest {\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void switchExpression() {\n+\n+    var month = JUNE;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL -> 2;\n+      default -> 0;\n+    };\n+\n+    assertEquals(result, 3);\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void switchExpressionWithYieldKeyword() {\n+    var month = AUGUST;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL, AUGUST -> {\n+        int monthLength = month.toString().length();\n+        yield monthLength * 4;\n+      }\n+      default -> 0;\n+    };\n+\n+    assertEquals(24, result);\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void switchStatementWithReturnInsideBlock() {\n+\n+    Function<Month, Integer> func = (month) -> {\n+      switch (month) {\n+        case JANUARY, JUNE, JULY -> { return 3; }\n+        default -> { return 0; }\n+      }\n+    };\n+\n+    assertEquals(Integer.valueOf(3), func.apply(Month.JANUARY));\n+  }\n+\n+  @Test\n+  @SuppressWarnings (\"preview\")\n+  public void switchExpressionWithAllCasesCovered() {\n+    var month = AUGUST;\n+\n+    var result = switch (month) {\n+      case JANUARY, JUNE, JULY -> 3;\n+      case FEBRUARY, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER -> 1;\n+      case MARCH, MAY, APRIL, AUGUST -> 2;\n+    };\n+\n+    assertEquals(result, 2);\n+  }\n+}",
    "output": "Code samples for Java Switch Statement"
  },
  {
    "input": "diff --git a/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java b/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n--- a/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n+++ b/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n@@ -16,7 +16,7 @@\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = ComponentScanAspectJFilterApp.class)\n-public class ComponentScanAspectJFilterAppIntegrationTest {\n+public class ComponentScanAspectJFilterAppUnitTest {\n \n     @Test\n     public void whenAspectJFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingAspectJCreteria() {",
    "output": "Merge pull request #8324 from dkapil/task/BAEL-19369_springdifix\n\nBAEL-19369 go through the integration test results and see what NEW f…"
  },
  {
    "input": "diff --git a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/controller/PostRestController.java b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/controller/PostRestController.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/controller/PostRestController.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/controller/PostRestController.java\n@@ -1,24 +1,25 @@\n package com.baeldung.modelmapper.controller;\n \n-import java.text.ParseException;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n+import com.baeldung.modelmapper.dto.PostDto;\n+import com.baeldung.modelmapper.model.Post;\n+import com.baeldung.modelmapper.service.IPostService;\n+import com.baeldung.modelmapper.service.IUserService;\n import org.modelmapper.ModelMapper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.bind.annotation.ResponseStatus;\n \n-import com.baeldung.modelmapper.dto.PostDto;\n-import com.baeldung.modelmapper.model.Post;\n-import com.baeldung.modelmapper.service.IPostService;\n-import com.baeldung.modelmapper.service.IUserService;\n+import java.text.ParseException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n @Controller\n @RequestMapping(\"/posts\")\n@@ -33,7 +34,7 @@ public class PostRestController {\n     @Autowired\n     private ModelMapper modelMapper;\n  \n-    @RequestMapping(method = RequestMethod.GET)\n+    @GetMapping\n     @ResponseBody\n     public List<PostDto> getPosts(\n             @PathVariable(\"page\") int page,\n@@ -43,11 +44,11 @@ public List<PostDto> getPosts(\n         \n         List<Post> posts = postService.getPostsList(page, size, sortDir, sort);\n         return posts.stream()\n-          .map(post -> convertToDto(post))\n+          .map(this::convertToDto)\n           .collect(Collectors.toList());\n     }\n  \n-    @RequestMapping(method = RequestMethod.POST)\n+    @PostMapping\n     @ResponseStatus(HttpStatus.CREATED)\n     @ResponseBody\n     public PostDto createPost(@RequestBody PostDto postDto) throws ParseException {\n@@ -56,13 +57,13 @@ public PostDto createPost(@RequestBody PostDto postDto) throws ParseException {\n         return convertToDto(postCreated);\n     }\n  \n-    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n+    @GetMapping(value = \"/{id}\")\n     @ResponseBody\n     public PostDto getPost(@PathVariable(\"id\") Long id) {\n         return convertToDto(postService.getPostById(id));\n     }\n  \n-    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n+    @PutMapping(value = \"/{id}\")\n     @ResponseStatus(HttpStatus.OK)\n     public void updatePost(@RequestBody PostDto postDto) throws ParseException {\n         Post post = convertToEntity(postDto);\n\ndiff --git a/spring-boot-rest/src/test/java/com/baeldung/modelmapper/PostDtoUnitTest.java b/spring-boot-rest/src/test/java/com/baeldung/modelmapper/PostDtoUnitTest.java\n--- a/spring-boot-rest/src/test/java/com/baeldung/modelmapper/PostDtoUnitTest.java\n+++ b/spring-boot-rest/src/test/java/com/baeldung/modelmapper/PostDtoUnitTest.java\n@@ -15,7 +15,7 @@ public class PostDtoUnitTest {\n     @Test\n     public void whenConvertPostEntityToPostDto_thenCorrect() {\n         Post post = new Post();\n-        post.setId(Long.valueOf(1));\n+        post.setId(1L);\n         post.setTitle(randomAlphabetic(6));\n         post.setUrl(\"www.test.com\");\n  \n@@ -28,7 +28,7 @@ public void whenConvertPostEntityToPostDto_thenCorrect() {\n     @Test\n     public void whenConvertPostDtoToPostEntity_thenCorrect() {\n         PostDto postDto = new PostDto();\n-        postDto.setId(Long.valueOf(1));\n+        postDto.setId(1L);\n         postDto.setTitle(randomAlphabetic(6));\n         postDto.setUrl(\"www.test.com\");\n  ",
    "output": "BAEL-3576: Improve \"Spring REST Entity to Dto\" article (#8320)\n\n* BAEL-3576: Update modelmapper to 2.3.5\r\n\r\n* BAEL-3576: Code cleanup"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-algorithms-3/src/main/java/com/baeldung/anagram/Anagram.java b/core-java-modules/core-java-string-algorithms-3/src/main/java/com/baeldung/anagram/Anagram.java\n--- a/core-java-modules/core-java-string-algorithms-3/src/main/java/com/baeldung/anagram/Anagram.java\n+++ b/core-java-modules/core-java-string-algorithms-3/src/main/java/com/baeldung/anagram/Anagram.java\n@@ -0,0 +1,62 @@\n+package com.baeldung.anagram;\n+\n+import java.util.Arrays;\n+import com.google.common.collect.HashMultiset;\n+import com.google.common.collect.Multiset;\n+\n+public class Anagram {\n+    // This definition only works for single byte encoding character set.\n+    // For multibyte encoding, such as UTF-8, 16, 32 etc.,\n+    // we need to increase this number so that it can contain all possible characters.\n+    private static int CHARACTER_RANGE = 256;\n+\n+    public boolean isAnagramSort(String string1, String string2) {\n+        if (string1.length() != string2.length()) {\n+            return false;\n+        }\n+        char[] a1 = string1.toCharArray();\n+        char[] a2 = string2.toCharArray();\n+        Arrays.sort(a1);\n+        Arrays.sort(a2);\n+        return Arrays.equals(a1, a2);\n+    }\n+\n+    public boolean isAnagramCounting(String string1, String string2) {\n+        if (string1.length() != string2.length()) {\n+            return false;\n+        }\n+        int count[] = new int[CHARACTER_RANGE];\n+        for (int i = 0; i < string1.length(); i++) {\n+            count[string1.charAt(i)]++;\n+            count[string2.charAt(i)]--;\n+        }\n+        for (int i = 0; i < CHARACTER_RANGE; i++) {\n+            if (count[i] != 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isAnagramMultiset(String string1, String string2) {\n+        if (string1.length() != string2.length()) {\n+            return false;\n+        }\n+        Multiset<Character> multiset1 = HashMultiset.create();\n+        Multiset<Character> multiset2 = HashMultiset.create();\n+        for (int i = 0; i < string1.length(); i++) {\n+            multiset1.add(string1.charAt(i));\n+            multiset2.add(string2.charAt(i));\n+        }\n+        return multiset1.equals(multiset2);\n+    }\n+\n+    public boolean isLetterBasedAnagramMultiset(String string1, String string2) {\n+        return isAnagramMultiset(preprocess(string1), preprocess(string2));\n+    }\n+\n+    private String preprocess(String source) {\n+        return source.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-string-algorithms-3/src/test/java/com/baeldung/anagram/AnagramUnitTest.java b/core-java-modules/core-java-string-algorithms-3/src/test/java/com/baeldung/anagram/AnagramUnitTest.java\n--- a/core-java-modules/core-java-string-algorithms-3/src/test/java/com/baeldung/anagram/AnagramUnitTest.java\n+++ b/core-java-modules/core-java-string-algorithms-3/src/test/java/com/baeldung/anagram/AnagramUnitTest.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.anagram;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class AnagramUnitTest {\n+    @Test\n+    public void givenAnagram_whenUsingSort_thenIdentifyAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcab\";\n+        String string2 = \"cabba\";\n+        assertTrue(anagram.isAnagramSort(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenAnagram_whenUsingCounting_thenIdentifyAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcab\";\n+        String string2 = \"cabba\";\n+        assertTrue(anagram.isAnagramCounting(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenAnagram_whenUsingMultiset_thenIdentifyAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcab\";\n+        String string2 = \"cabba\";\n+        assertTrue(anagram.isAnagramMultiset(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenAnagram_whenUsingLetterBasedMultiset_thenIdentifyAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"A decimal point\";\n+        String string2 = \"I’m a dot in place.\";\n+        assertTrue(anagram.isLetterBasedAnagramMultiset(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenNonAnagram_whenUsingSort_thenIdentifyNotAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcaba\";\n+        String string2 = \"cabbac\";\n+        assertFalse(anagram.isAnagramSort(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenNonAnagram_whenUsingCounting_thenIdentifyNotAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcaba\";\n+        String string2 = \"cabbac\";\n+        assertFalse(anagram.isAnagramCounting(string1, string2));\n+    }\n+\n+    @Test\n+    public void givenNonAnagram_whenUsingMultiset_thenIdentifyNotAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"abcaba\";\n+        String string2 = \"cabbac\";\n+        assertFalse(anagram.isAnagramMultiset(string1, string2));\n+    }\n+\n+    @Test\n+    public void ggivenNonAnagram_whenUsingLetterBasedMultiset_thenIdentifyAnagram() {\n+        Anagram anagram = new Anagram();\n+        String string1 = \"A decimal point\";\n+        String string2 = \"I’m dot in place.\";\n+        assertFalse(anagram.isAnagramMultiset(string1, string2));\n+    }\n+}",
    "output": "BAEL-3418 Check If Two Strings Are Anagrams in Java (#8139)\n\n* BAEL-3418 Check If Two Strings Are Anagrams in Java\r\n\r\n* BAEL-3418 Update code based on code review feedback.\r\n\r\n* BAEL-3418 Update comments and rename constant based on code review feedback.\r\n\r\n* Move the repository to core-java-modules/core-java-string-algorithms-3/\r\n\r\n* BAEL-3418 Only support alpha characters for the anagram\r\n\r\n* BAEL-3418 use preprocess in a separate method\r\n\r\n* BAEL-3418 Remove the temp variables"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/shutdownhook/ShutdownHookUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.hook;\n+package com.baeldung.shutdownhook;\n \n import org.junit.Test;\n ",
    "output": "Refactoring to a better package name"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n--- a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n+++ b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n@@ -4,9 +4,8 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n @SpringBootApplication\n@@ -22,7 +21,7 @@ public static void main(String[] args) {\n         SpringApplication.run(ConfigClient.class, args);\n     }\n \n-    @RequestMapping(value = \"/whoami/{username}\", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = \"/whoami/{username}\", produces = MediaType.TEXT_PLAIN_VALUE)\n     public String whoami(@PathVariable(\"username\") String username) {\n         return String.format(\"Hello %s! You are a(n) %s and your password is '%s'.\\n\", username, role, password);\n     }\n\ndiff --git a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n--- a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n+++ b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.spring.cloud.config.server;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+@Configuration\n+public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        http.csrf()\n+                .ignoringAntMatchers(\"/encrypt/**\")\n+                .ignoringAntMatchers(\"/decrypt/**\");\n+\n+        super.configure(http);\n+    }\n+}",
    "output": "Merge pull request #8303 from kwoyke/BAEL-19790\n\nBAEL-19790 Update Spring Cloud Configuration article"
  },
  {
    "input": "diff --git a/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java b/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n--- a/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n+++ b/spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java\n@@ -16,7 +16,7 @@\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = ComponentScanAspectJFilterApp.class)\n-public class ComponentScanAspectJFilterAppIntegrationTest {\n+public class ComponentScanAspectJFilterAppUnitTest {\n \n     @Test\n     public void whenAspectJFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingAspectJCreteria() {",
    "output": "BAEL-19369 go through the integration test results and see what NEW failing tests we have\n\n- Fixes ComponentScanAspectJFilterAppUnitTest"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTime.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.date.conversion;\n+package com.baeldung.offsetdatetime;\n \n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.datetime;\n+package com.baeldung.skipweekends;\n \n import java.time.DayOfWeek;\n import java.time.LocalDate;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -1,13 +1,13 @@\n package com.baeldung.date.comparison;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n+import org.junit.Test;\r\n \r\n import java.time.LocalDateTime;\r\n import java.time.ZoneId;\r\n import java.util.Date;\r\n \r\n-import org.junit.Test;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n public class DateComparisonUtilsUnitTest {\r\n \r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n@@ -1,15 +1,12 @@\n package com.baeldung.datetime;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.CalendarUtils;\n-import com.baeldung.datetime.DateUtils;\n-\n import java.text.ParseException;\n import java.util.Date;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class CalendarUtilsUnitTest {\n \n     @Test\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n@@ -1,14 +1,12 @@\n package com.baeldung.datetime;\n \n-import static org.junit.Assert.assertEquals;\n-\n import org.junit.Test;\n \n-import com.baeldung.datetime.DateUtils;\n-\n import java.text.ParseException;\n import java.util.Date;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class DateUtilsUnitTest {\n \n     @Test\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/offsetdatetime/ConvertToOffsetDateTimeUnitTest.java\n@@ -1,12 +1,12 @@\n-package com.baeldung.date.conversion;\n+package com.baeldung.offsetdatetime;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n \n import java.time.OffsetDateTime;\n import java.util.Date;\n \n-import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n public class ConvertToOffsetDateTimeUnitTest {\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/skipweekends/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n@@ -1,7 +1,8 @@\n-package com.baeldung.datetime;\n+package com.baeldung.skipweekends;\n \n import static org.junit.Assert.assertEquals;\n \n+import com.baeldung.skipweekends.AddSubtractDaysSkippingWeekendsUtils;\n import org.junit.Test;\n \n import java.time.LocalDate;",
    "output": "[BAEL-19059] - Move new articles to java-dates-operations module"
  },
  {
    "input": "diff --git a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n--- a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n+++ b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n@@ -1,33 +1,58 @@\n package com.baeldung.web.controller;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.multipart.MultipartFile;\n \n @Controller\n public class MultipartFileUploadStubController {\n-    \n-    private static final Logger logger = LoggerFactory.getLogger(MultipartFileUploadStubController.class);\n \n     @PostMapping(\"/stub/multipart\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public void uploadFile(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n-        logger.info(\"Uploaded file: \" + format(file));\n-        logger.info(\"  - text: [\" + format(text) + \"]\");\n-        logger.info(\"  - text1: [\" + format(text1) + \"]\");\n-        logger.info(\"  - text2: [\" + format(text2) + \"]\");\n-        logger.info(\"  - upstream: [\" + format(upstream) + \"]\");\n-    }\n-    \n-    private static String format(MultipartFile file) {\n-        return file == null ? \"<null>\" : file.getOriginalFilename() + \" (size: \" + file.getSize() + \" bytes)\";\n+    public ResponseEntity<UploadResultResource> uploadFile(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n+        UploadResultResource result = new UploadResultResource(file, text, text1, text2, upstream);\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n     \n-    private static String format(String str) {\n-        return str == null ? \"<null>\" : str;\n+    public static class UploadResultResource {\n+        \n+        private final String file;\n+        private final String text;\n+        private final String text1;\n+        private final String text2;\n+        private final String upstream;\n+        \n+        public UploadResultResource(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n+            this.file = format(file);\n+            this.text = text;\n+            this.text1 = text1;\n+            this.text2 = text2;\n+            this.upstream = format(upstream);\n+        }\n+        \n+        private static String format(MultipartFile file) {\n+            return file == null ? null : file.getOriginalFilename() + \" (size: \" + file.getSize() + \" bytes)\";\n+        }\n+\n+        public String getFile() {\n+            return file;\n+        }\n+\n+        public String getText() {\n+            return text;\n+        }\n+\n+        public String getText1() {\n+            return text1;\n+        }\n+\n+        public String getText2() {\n+            return text2;\n+        }\n+\n+        public String getUpstream() {\n+            return upstream;\n+        }\n     }\n }",
    "output": "BAEL-3559: Change server response to mimic an echo server"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n--- a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n+++ b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n@@ -4,9 +4,8 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n @SpringBootApplication\n@@ -22,7 +21,7 @@ public static void main(String[] args) {\n         SpringApplication.run(ConfigClient.class, args);\n     }\n \n-    @RequestMapping(value = \"/whoami/{username}\", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = \"/whoami/{username}\", produces = MediaType.TEXT_PLAIN_VALUE)\n     public String whoami(@PathVariable(\"username\") String username) {\n         return String.format(\"Hello %s! You are a(n) %s and your password is '%s'.\\n\", username, role, password);\n     }\n\ndiff --git a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n--- a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n+++ b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n@@ -5,11 +5,14 @@\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n @Configuration\n-public class SecurityConfigurer extends WebSecurityConfigurerAdapter {\n+public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n     @Override\n     public void configure(HttpSecurity http) throws Exception {\n         http.csrf()\n-                .disable()\n-                .httpBasic();\n+                .ignoringAntMatchers(\"/encrypt/**\")\n+                .ignoringAntMatchers(\"/decrypt/**\");\n+\n+        super.configure(http);\n     }\n }",
    "output": "Merge branch 'BAEL-19790' of https://github.com/kwoyke/tutorials into BAEL-19790"
  },
  {
    "input": "diff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n@@ -15,7 +15,7 @@\n @CucumberOptions(features = \"classpath:karate\")\n public class KarateIntegrationTest {\n \n-    public static final int PORT_NUMBER = 8097;\n+    private static final int PORT_NUMBER = 8097;\n \n     private static final WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.options().port(PORT_NUMBER));\n ",
    "output": "Merge pull request #8313 from kwoyke/BAEL-19798\n\nBAEL-19798: Make PORT_NUMBER private"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java b/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreeModel.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.binarytree;\n+package com.baeldung.printbinarytree;\n \n public class BinaryTreeModel {\n \n\ndiff --git a/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java b/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/printbinarytree/BinaryTreePrinter.java\n@@ -1,4 +1,6 @@\n-package com.baeldung.binarytree;\n+package com.baeldung.printbinarytree;\n+\n+import java.io.PrintStream;\n \n public class BinaryTreePrinter {\n \n@@ -54,8 +56,8 @@ private void traverseNodes(StringBuilder sb, String padding, String pointer, Bin\n \n     }\n \n-    public void print() {\n-        System.out.print(traversePreOrder(tree));\n+    public void print(PrintStream os) {\n+        os.print(traversePreOrder(tree));\n     }\n \n }\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/printbinarytree/PrintingBinaryTreeModelUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.binarytree;\n+package com.baeldung.printbinarytree;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n@@ -10,6 +10,9 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import com.baeldung.printbinarytree.BinaryTreeModel;\n+import com.baeldung.printbinarytree.BinaryTreePrinter;\n+\n public class PrintingBinaryTreeModelUnitTest {\n \n     private BinaryTreeModel balanced;\n@@ -129,7 +132,7 @@ public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter_thenProd\n         expected.append(\"   ├──node5\").append(\"\\n\");\n         expected.append(\"   └──node6\");\n         \n-        new BinaryTreePrinter(balanced).print();\n+        new BinaryTreePrinter(balanced).print(System.out);\n         \n         assertEquals(expected.toString(), output.toString());\n     }\n@@ -148,7 +151,7 @@ public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter_th\n         expected.append(\"│                 └──node8\").append(\"\\n\");\n         expected.append(\"└──node2\");\n         \n-        new BinaryTreePrinter(leftSkewed).print();\n+        new BinaryTreePrinter(leftSkewed).print(System.out);\n         \n         assertEquals(expected.toString(), output.toString());\n     }\n@@ -167,7 +170,7 @@ public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter_t\n         expected.append(\"               └──node7\").append(\"\\n\");\n         expected.append(\"                  └──node8\");\n         \n-        new BinaryTreePrinter(rightSkewed).print();\n+        new BinaryTreePrinter(rightSkewed).print(System.out);\n         \n         assertEquals(expected.toString(), output.toString());\n     }",
    "output": "change package name and update print method"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/pattern/PatternJava11UnitTest.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.pattern;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PatternJava11UnitTest {\n+\n+    private static final String VALID_NAME = \"Fabio Silva\";\n+    private static final String INVALID_NAME = \"Fabio Luis Silva\";\n+    private static final List<String> NAMES_TO_VALIDATE = Arrays.asList(VALID_NAME, INVALID_NAME);\n+    private static final Pattern FIRST_LAST_NAME_PRE_COMPILED_PATTERN = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesThePatternInTheListElements() {\n+        Predicate<String> patternAsMatchPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asMatchPredicate();\n+        List<String> validatedNames = NAMES_TO_VALIDATE.stream()\n+                .filter(patternAsMatchPredicate)\n+                .collect(Collectors.toList());\n+\n+        assertTrue(validatedNames.contains(VALID_NAME));\n+        assertFalse(validatedNames.contains(INVALID_NAME));\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-text/src/main/java/com/baeldung/pattern/PatternPerformanceComparison.java b/core-java-modules/core-java-text/src/main/java/com/baeldung/pattern/PatternPerformanceComparison.java\n--- a/core-java-modules/core-java-text/src/main/java/com/baeldung/pattern/PatternPerformanceComparison.java\n+++ b/core-java-modules/core-java-text/src/main/java/com/baeldung/pattern/PatternPerformanceComparison.java\n@@ -0,0 +1,71 @@\n+package com.baeldung.pattern;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class PatternPerformanceComparison {\n+\n+    private static final String PATTERN = \"\\\\d*[02468]\";\n+    private static List<String> values;\n+\n+    public static void main(String[] args) {\n+        loadValues();\n+\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        Instant start = Instant.now();\n+        for (String value : values) {\n+            value.matches(PATTERN);\n+        }\n+        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> String.matchs(regex)\");\n+\n+        // Above approach \"value.matches(PATTERN)\" makes this internally\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        start = Instant.now();\n+        for (String value : values) {\n+            Pattern.matches(PATTERN, value);\n+        }\n+        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> Pattern.matches(regex, charSequence)\");\n+\n+        // Above approach \"Pattern.matches(PATTERN, value)\" makes this internally\n+        // 5_000_000 Pattern objects created\n+        // 5_000_000 Matcher objects created\n+        start = Instant.now();\n+        for (String value : values) {\n+            Pattern.compile(PATTERN).matcher(value).matches();\n+        }\n+        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms -> Pattern.compile(regex).matcher(charSequence).matches()\");\n+\n+        // With pre-compiled pattern\n+        // 1         Pattern object created\n+        // 5_000_000 Matcher objects created\n+        Pattern preCompiledPattern = Pattern.compile(PATTERN);\n+        start = Instant.now();\n+        for (String value : values) {\n+            preCompiledPattern.matcher(value).matches();\n+        }\n+        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms  -> preCompiledPattern.matcher(value).matches()\");\n+\n+        //With pre-compiled pattern and reusing the matcher\n+        // 1 Pattern object created\n+        // 1 Matcher objects created\n+        Matcher matcherFromPreCompiledPattern = preCompiledPattern.matcher(\"\");\n+        start = Instant.now();\n+        for (String value : values) {\n+            matcherFromPreCompiledPattern.reset(value).matches();\n+        }\n+        System.out.println(Duration.between(start, Instant.now()).toMillis() + \"ms  -> matcherFromPreCompiledPattern.reset(value).matches()\");\n+    }\n+\n+    private static void loadValues() {\n+        values = new ArrayList<>();\n+        for (int x = 1; x <= 5_000_000; x++) {\n+            values.add(String.valueOf(x));\n+        }\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java b/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n--- a/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n+++ b/core-java-modules/core-java-text/src/test/java/com/baeldung/pattern/PatternUnitTest.java\n@@ -0,0 +1,68 @@\n+package com.baeldung.pattern;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.*;\n+\n+public class PatternUnitTest {\n+\n+    private static final Pattern FIRST_LAST_NAME_PRE_COMPILED_PATTERN = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\n+    private static final String VALID_NAME = \"Fabio Silva\";\n+    private static final String INVALID_NAME = \"Mr. Silva\";\n+    private static final List<String> NAMES_TO_VALIDATE = Arrays.asList(VALID_NAME, INVALID_NAME);\n+\n+    private static final Pattern SPLIT_PRE_COMPILED_PATTERN = Pattern.compile(\"__\");\n+    private static final String TEXT_TO_SPLIT = \"My_Name__is__Fabio_Silva\";\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallMatcher_thenReturnAMatcherToMatches() {\n+        Matcher matcherName1 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(VALID_NAME);\n+        Matcher matcherName2 = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.matcher(INVALID_NAME);\n+\n+        boolean matchesName1 = matcherName1.matches();\n+        boolean matchesName2 = matcherName2.matches();\n+\n+        assertTrue(matchesName1);\n+        assertFalse(matchesName2);\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindThePatternInTheListElements() {\n+        Predicate<String> patternsAsPredicate = FIRST_LAST_NAME_PRE_COMPILED_PATTERN.asPredicate();\n+\n+        List<String> validNames = NAMES_TO_VALIDATE.stream()\n+                .filter(patternsAsPredicate)\n+                .collect(Collectors.toList());\n+\n+        assertEquals(1,validNames.size());\n+        assertTrue(validNames.contains(VALID_NAME));\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallSplit_thenReturnArrayWithValuesSplitByThePattern() {\n+        String[] textSplit = SPLIT_PRE_COMPILED_PATTERN.split(TEXT_TO_SPLIT);\n+\n+        assertEquals(\"My_Name\", textSplit[0]);\n+        assertEquals(\"is\", textSplit[1]);\n+        assertEquals(\"Fabio_Silva\", textSplit[2]);\n+    }\n+\n+    @Test\n+    public void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArrayWithValuesSplitByThePattern() {\n+        Stream<String> textSplitAsStream = SPLIT_PRE_COMPILED_PATTERN.splitAsStream(TEXT_TO_SPLIT);\n+        String[] textSplit = textSplitAsStream.toArray(String[]::new);\n+\n+        assertEquals(\"My_Name\", textSplit[0]);\n+        assertEquals(\"is\", textSplit[1]);\n+        assertEquals(\"Fabio_Silva\", textSplit[2]);\n+    }\n+\n+}",
    "output": "Pre-compile the regex pattern into a Pattern object and reuse"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/cucumber/books/BookStore.java\n@@ -1,13 +1,9 @@\n package com.baeldung.cucumber.books;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Objects;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n public class BookStore {\n-\n     private List<Book> books = new ArrayList<>();\n     \n     public void addBook(Book book) {\n@@ -20,7 +16,13 @@ public void addAllBooks(Collection<Book> books) {\n     \n     public List<Book> booksByAuthor(String author) {\n         return books.stream()\n-            .filter(book -> Objects.equals(author, book.getAuthor()))\n-            .collect(Collectors.toList());\n+          .filter(book -> Objects.equals(author, book.getAuthor()))\n+          .collect(Collectors.toList());\n+    }\n+\n+    public Optional<Book> bookByTitle(String title) {\n+        return books.stream()\n+          .filter(book -> book.getTitle().equals(title))\n+          .findFirst();\n     }\n }\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n@@ -1,7 +1,5 @@\n package com.baeldung.cucumber.books;\n \n-import static org.junit.Assert.assertEquals;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -12,30 +10,35 @@\n import io.cucumber.java.en.When;\n import io.cucumber.datatable.DataTable;\n \n-public class BookStoreRunSteps {\n+import static org.junit.Assert.*;\n \n+public class BookStoreRunSteps {\n     private BookStore store;\n     private List<Book> foundBooks;\n+    private Book foundBook;\n     \n     @Before\n     public void setUp() {\n         store = new BookStore();\n         foundBooks = new ArrayList<>();\n     }\n     \n+    @Given(\"^I have the following books in the store$\")\n+    public void haveBooksInTheStore(DataTable table) {\n+        haveBooksInTheStoreByList(table);\n+    }\n+\n     @Given(\"^I have the following books in the store by list$\")\n     public void haveBooksInTheStoreByList(DataTable table) {\n-        \n         List<List<String>> rows = table.asLists(String.class);\n-        \n+\n         for (List<String> columns: rows) {\n             store.addBook(new Book(columns.get(0), columns.get(1)));\n         }\n     }\n-    \n+\n     @Given(\"^I have the following books in the store by map$\")\n     public void haveBooksInTheStoreByMap(DataTable table) {\n-        \n         List<Map<String, String>> rows = table.asMaps(String.class, String.class);\n         \n         for (Map<String, String> columns: rows) {\n@@ -52,9 +55,24 @@ public void haveBooksInTheStoreByTransformer(BookCatalog catalog) {\n     public void searchForBooksByAuthor(String author) {\n         foundBooks = store.booksByAuthor(author);\n     }\n+\n+    @When(\"^I search for a book titled (.+)$\")\n+    public void searchForBookByTitle(String title) {\n+        foundBook = store.bookByTitle(title).orElse(null);\n+    }\n     \n     @Then(\"^I find (\\\\d+) books$\")\n     public void findBooks(int count) {\n         assertEquals(count, foundBooks.size());\n     }\n+\n+    @Then(\"^I find a book$\")\n+    public void findABook() {\n+        assertNotNull(foundBook);\n+    }\n+\n+    @Then(\"^I find no book$\")\n+    public void findNoBook() {\n+        assertNull(foundBook);\n+    }\n }",
    "output": "[BAEL-3445] Added Background examples to Cucumber examples (#8319)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/defaultparams/Tea.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/defaultparams/Tea.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/defaultparams/Tea.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/defaultparams/Tea.java\n@@ -0,0 +1,61 @@\n+package com.baeldung.defaultparams;\r\n+\r\n+public class Tea {\r\n+\r\n+    static final int DEFAULT_TEA_POWDER = 1; // add 1 tbsp tea powder by default\r\n+\r\n+    private String name; // mandatory\r\n+    private int milk; // ml\r\n+    private boolean herbs; // add herbs or don't\r\n+    private int sugar; // tbsp\r\n+    private int teaPowder; // tbsp\r\n+\r\n+    public Tea(String name, int milk, boolean herbs, int sugar, int teaPowder) {\r\n+        this.name = name;\r\n+        this.milk = milk;\r\n+        this.herbs = herbs;\r\n+        this.sugar = sugar;\r\n+        this.teaPowder = teaPowder;\r\n+    }\r\n+\r\n+    // when tea powder is not provided by client, use default value\r\n+    public Tea(String name, int milk, boolean herbs, int sugar) {\r\n+        this(name, milk, herbs, sugar, DEFAULT_TEA_POWDER);\r\n+    }\r\n+\r\n+    // when sugar is not provided by client, don't add it\r\n+    public Tea(String name, int milk, boolean herbs) {\r\n+        this(name, milk, herbs, 0);\r\n+    }\r\n+\r\n+    // when herbs is not provided by client, don't add it\r\n+    public Tea(String name, int milk) {\r\n+        this(name, milk, false);\r\n+    }\r\n+\r\n+    // when milk is not provided by client, don't add it\r\n+    public Tea(String name) {\r\n+        this(name, 0);\r\n+    }   \r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public int getMilk() {\r\n+        return milk;\r\n+    }\r\n+\r\n+    public boolean isHerbs() {\r\n+        return herbs;\r\n+    }\r\n+\r\n+    public int getSugar() {\r\n+        return sugar;\r\n+    }\r\n+\r\n+    public int getTeaPowder() {\r\n+        return teaPowder;\r\n+    }\r\n+\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/defaultparams/TeaUnitTest.java b/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/defaultparams/TeaUnitTest.java\n--- a/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/defaultparams/TeaUnitTest.java\n+++ b/core-java-modules/core-java-lang-2/src/test/java/com/baeldung/defaultparams/TeaUnitTest.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.defaultparams;\r\n+\r\n+import static org.assertj.core.api.Assertions.assertThat;\r\n+import org.junit.Test;\r\n+\r\n+\r\n+public class TeaUnitTest {\r\n+    \r\n+    @Test\r\n+    public void whenTeaWithOnlyName_thenCreateDefaultTea() {\r\n+        Tea blackTea = new Tea(\"Black Tea\");\r\n+\r\n+        assertThat(blackTea.getName()).isEqualTo(\"Black Tea\");\r\n+        assertThat(blackTea.getMilk()).isEqualTo(0);\r\n+        assertThat(blackTea.isHerbs()).isFalse();\r\n+        assertThat(blackTea.getSugar()).isEqualTo(0);\r\n+        assertThat(blackTea.getTeaPowder()).isEqualTo(Tea.DEFAULT_TEA_POWDER);\r\n+    }\r\n+\r\n+}\r",
    "output": "BAEL-3511 : Default parameters in Java (#8317)\n\n* Added Assertj dependency\r\n\r\n* Default parameter example POJO and test class"
  },
  {
    "input": "diff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n@@ -15,7 +15,7 @@\n @CucumberOptions(features = \"classpath:karate\")\n public class KarateIntegrationTest {\n \n-    public static final int PORT_NUMBER = 8097;\n+    private static final int PORT_NUMBER = 8097;\n \n     private static final WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.options().port(PORT_NUMBER));\n ",
    "output": "BAEL-19798: Make PORT_NUMBER private"
  },
  {
    "input": "diff --git a/intelliJ/remote-debugging/src/main/java/hello/Application.java b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/Application.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/Application.java\n@@ -0,0 +1,14 @@\n+package hello;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+\n+@SpringBootApplication\n+@EnableScheduling\n+public class Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class);\n+    }\n+}\n\ndiff --git a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n--- a/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n+++ b/intelliJ/remote-debugging/src/main/java/hello/ScheduledTasks.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package hello;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ScheduledTasks {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);\n+\n+    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n+\n+    @Scheduled(fixedRate = 5000)\n+    public void reportCurrentTime() {\n+        log.info(\"The time is now {}\", dateFormat.format(new Date()));\n+    }\n+}",
    "output": "Merge pull request #8142 from smokeyrobot/bael-3391\n\nBael-3391 - Remote Debugger"
  },
  {
    "input": "diff --git a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoInitWithMockitoJUnitRuleUnitTest.java b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoInitWithMockitoJUnitRuleUnitTest.java\n--- a/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoInitWithMockitoJUnitRuleUnitTest.java\n+++ b/testing-modules/mockito/src/test/java/com/baeldung/mockito/MockitoInitWithMockitoJUnitRuleUnitTest.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.mockito;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class MockitoInitWithMockitoJUnitRuleUnitTest {\n+\n+    @Rule\n+    public MockitoRule initRule = MockitoJUnit.rule();\n+    \n+    @Mock\n+    private List<String> mockedList;\n+\n+    @Test\n+    public void whenUsingMockitoJUnitRule_thenMocksInitialized() {\n+        when(mockedList.size()).thenReturn(41);\n+\n+        assertThat(mockedList.size()).isEqualTo(41);\n+    }\n+}",
    "output": "BAEL-3231: Add usage example for MockitoJUnit.rule() (#8304)"
  },
  {
    "input": "diff --git a/java-numbers-2/src/main/java/com/baeldung/fibonacci/FibonacciSeriesUtils.java b/java-numbers-2/src/main/java/com/baeldung/fibonacci/FibonacciSeriesUtils.java\n--- a/java-numbers-2/src/main/java/com/baeldung/fibonacci/FibonacciSeriesUtils.java\n+++ b/java-numbers-2/src/main/java/com/baeldung/fibonacci/FibonacciSeriesUtils.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.fibonacci;\n+\n+import static java.lang.Math.pow;\n+\n+public class FibonacciSeriesUtils {\n+\n+    public static int nthFibonacciTermRecursiveMethod(int n) {\n+        if (n == 0 || n == 1) {\n+            return n;\n+        }\n+        return nthFibonacciTermRecursiveMethod(n - 1) + nthFibonacciTermRecursiveMethod(n - 2);\n+    }\n+\n+    public static int nthFibonacciTermIterativeMethod(int n) {\n+        if (n == 0 || n == 1) {\n+            return n;\n+        }\n+        int n0 = 0, n1 = 1;\n+        int tempNthTerm;\n+        for (int i = 2; i <= n; i++) {\n+            tempNthTerm = n0 + n1;\n+            n0 = n1;\n+            n1 = tempNthTerm;\n+        }\n+        return n1;\n+    }\n+\n+    public static int nthFibonacciTermUsingBinetsFormula(int n) {\n+        final double squareRootOf5 = Math.sqrt(5);\n+        final double phi = (1 + squareRootOf5)/2;\n+        int nthTerm = (int) ((Math.pow(phi, n) - Math.pow(-phi, -n))/squareRootOf5);\n+        return nthTerm;\n+    }\n+}\n\ndiff --git a/java-numbers-2/src/test/java/com/baeldung/fibonacci/FibonacciSeriesUtilsUnitTest.java b/java-numbers-2/src/test/java/com/baeldung/fibonacci/FibonacciSeriesUtilsUnitTest.java\n--- a/java-numbers-2/src/test/java/com/baeldung/fibonacci/FibonacciSeriesUtilsUnitTest.java\n+++ b/java-numbers-2/src/test/java/com/baeldung/fibonacci/FibonacciSeriesUtilsUnitTest.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.fibonacci;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class FibonacciSeriesUtilsUnitTest {\n+\n+    @Test\n+    public void givenTermToCalculate_thenReturnThatTermUsingRecursion() {\n+        int term = 10;\n+        int expectedValue = 55;\n+        assertEquals(FibonacciSeriesUtils.nthFibonacciTermRecursiveMethod(term), expectedValue);\n+    }\n+\n+    @Test\n+    public void givenTermToCalculate_thenReturnThatTermUsingIteration() {\n+        int term = 10;\n+        int expectedValue = 55;\n+        assertEquals(FibonacciSeriesUtils.nthFibonacciTermIterativeMethod(term), expectedValue);\n+    }\n+\n+    @Test\n+    public void givenTermToCalculate_thenReturnThatTermUsingBinetsFormula() {\n+        int term = 10;\n+        int expectedValue = 55;\n+        assertEquals(FibonacciSeriesUtils.nthFibonacciTermUsingBinetsFormula(term), expectedValue);\n+    }\n+}",
    "output": "BAEL-3519 (#8169)\n\n* BAEL-3519\r\n- Fibonacci Series\r\n- Recursive method\r\n- Iterative method\r\n\r\n* - Added new method that uses Golden Ratio to calculate the given term of Fibonacci Series\r\n\r\n* added binet formula implementation of constant time for fibonacci term"
  },
  {
    "input": "diff --git a/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java b/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n--- a/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n+++ b/httpclient/src/test/java/org/baeldung/httpclient/HttpClientMultipartLiveTest.java\n@@ -34,7 +34,7 @@ public class HttpClientMultipartLiveTest {\n     // No longer available\n     // private static final String SERVER = \"http://echo.200please.com\";\n \n-    private static final String SERVER = \"http://posttestserver.com/post.php\";\n+    private static final String SERVER = \"http://localhost:8080/spring-mvc-java/stub/multipart\";\n     private static final String TEXTFILENAME = \"temp.txt\";\n     private static final String IMAGEFILENAME = \"image.jpg\";\n     private static final String ZIPFILENAME = \"zipFile.zip\";\n@@ -84,7 +84,7 @@ public final void givenFileandMultipleTextParts_whenUploadwithAddPart_thenNoExce\n         //\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addPart(\"upfile\", fileBody);\n+        builder.addPart(\"file\", fileBody);\n         builder.addPart(\"text1\", stringBody1);\n         builder.addPart(\"text2\", stringBody2);\n         final HttpEntity entity = builder.build();\n@@ -112,7 +112,7 @@ public final void givenFileandTextPart_whenUploadwithAddBinaryBodyandAddTextBody\n         final String message = \"This is a multipart post\";\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", file, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n+        builder.addBinaryBody(\"file\", file, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.DEFAULT_BINARY);\n         final HttpEntity entity = builder.build();\n         post.setEntity(entity);\n@@ -141,7 +141,7 @@ public final void givenFileAndInputStreamandText_whenUploadwithAddBinaryBodyandA\n         final String message = \"This is a multipart post\";\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", file, ContentType.DEFAULT_BINARY, IMAGEFILENAME);\n+        builder.addBinaryBody(\"file\", file, ContentType.DEFAULT_BINARY, IMAGEFILENAME);\n         builder.addBinaryBody(\"upstream\", inputStream, ContentType.create(\"application/zip\"), ZIPFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.TEXT_PLAIN);\n         final HttpEntity entity = builder.build();\n@@ -165,7 +165,7 @@ public final void givenCharArrayandText_whenUploadwithAddBinaryBodyandAddTextBod\n         final byte[] bytes = \"binary code\".getBytes();\n         final MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n-        builder.addBinaryBody(\"upfile\", bytes, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n+        builder.addBinaryBody(\"file\", bytes, ContentType.DEFAULT_BINARY, TEXTFILENAME);\n         builder.addTextBody(\"text\", message, ContentType.TEXT_PLAIN);\n         final HttpEntity entity = builder.build();\n         post.setEntity(entity);\n\ndiff --git a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n--- a/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n+++ b/spring-mvc-java/src/main/java/com/baeldung/web/controller/MultipartFileUploadStubController.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.web.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+@Controller\n+public class MultipartFileUploadStubController {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(MultipartFileUploadStubController.class);\n+\n+    @PostMapping(\"/stub/multipart\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public void uploadFile(MultipartFile file, String text, String text1, String text2, MultipartFile upstream) {\n+        logger.info(\"Uploaded file: \" + format(file));\n+        logger.info(\"  - text: [\" + format(text) + \"]\");\n+        logger.info(\"  - text1: [\" + format(text1) + \"]\");\n+        logger.info(\"  - text2: [\" + format(text2) + \"]\");\n+        logger.info(\"  - upstream: [\" + format(upstream) + \"]\");\n+    }\n+    \n+    private static String format(MultipartFile file) {\n+        return file == null ? \"<null>\" : file.getOriginalFilename() + \" (size: \" + file.getSize() + \" bytes)\";\n+    }\n+    \n+    private static String format(String str) {\n+        return str == null ? \"<null>\" : str;\n+    }\n+}",
    "output": "BAEL-3559: Added purpose-built endpoint for testing multipart uploads with HttpClient."
  },
  {
    "input": "diff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/HexagonalArchitecturePocApplication.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/HexagonalArchitecturePocApplication.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/HexagonalArchitecturePocApplication.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/HexagonalArchitecturePocApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.hexagonal;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class HexagonalArchitecturePocApplication {\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(HexagonalArchitecturePocApplication.class, args);\n+\t}\n+\n+}\n\ndiff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/input/OrderService.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/input/OrderService.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/input/OrderService.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/input/OrderService.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.hexagonal.boundary.input;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.baeldung.hexagonal.core.entities.Order;\n+\n+@Service public interface OrderService {\n+\tIterable<Order> getOrders();\n+\tOrder createOrder(Double total);\n+\tboolean registerOrder(Order order);\n+}\n\ndiff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/output/OrderRepository.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/output/OrderRepository.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/output/OrderRepository.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/boundary/output/OrderRepository.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.hexagonal.boundary.output;\n+\n+import java.util.List;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.hexagonal.core.entities.Order;\n+\n+@Repository public interface OrderRepository extends CrudRepository<Order, Long>{\n+}\n\ndiff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/entities/Order.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/entities/Order.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/entities/Order.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/entities/Order.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.hexagonal.core.entities;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity @Table(name=\"Orders\") public class Order {\n+\t@Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id;\n+\tDouble total;\n+\t\n+\tpublic Order() {\n+\t\tsuper();\n+\t}\n+\tpublic Double getTotal() {\n+\t\treturn total;\n+\t}\n+\tpublic void setTotal(Double total) {\n+\t\tthis.total = total;\n+\t}\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\t\n+}\n\ndiff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/services/OrderServiceImpl.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/services/OrderServiceImpl.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/services/OrderServiceImpl.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/core/services/OrderServiceImpl.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.hexagonal.core.services;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.baeldung.hexagonal.boundary.input.OrderService;\n+import com.baeldung.hexagonal.boundary.output.OrderRepository;\n+import com.baeldung.hexagonal.core.entities.Order;\n+\n+@Service public class OrderServiceImpl implements OrderService {\n+\n+\t@Autowired OrderRepository orderRepository;\n+\t\n+\t@Override\n+\tpublic Iterable<Order> getOrders() {\n+\t\treturn orderRepository.findAll();\n+\t}\n+\n+\t@Override\n+\tpublic boolean registerOrder(Order order) {\n+\t\tif (order.getTotal() > 0)\n+\t\t\torderRepository.save(order);\n+\t\telse\n+\t\t\treturn false;\n+\t\t\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic Order createOrder(Double total) {\n+\t\tOrder order = new Order();\n+\t\torder.setTotal(total);\t\n+\t\treturn order;\n+\t}\n+}\n\ndiff --git a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/outside/OrderController.java b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/outside/OrderController.java\n--- a/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/outside/OrderController.java\n+++ b/hexagonal-architecture-poc/src/main/java/com/baeldung/hexagonal/outside/OrderController.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.hexagonal.outside;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.baeldung.hexagonal.boundary.input.OrderService;\n+import com.baeldung.hexagonal.core.entities.Order;\n+\n+@RestController public class OrderController {\n+\n+\t@Autowired OrderService orderService;\n+\t\n+\t@GetMapping(path = \"/orders/list\")\n+\tpublic Iterable<Order> getOrders(){\n+\t\treturn orderService.getOrders();\n+\t}\n+\t\n+\t@GetMapping(path = \"/orders/add\")\n+\tpublic String placeOrder(@RequestParam Double total) {\n+\t\tboolean isPlaced = orderService.registerOrder(orderService.createOrder(total));\t\n+\t\treturn isPlaced ? \"Ok\" : \"Nok\";\n+\t}\n+\t\n+\t@GetMapping(path = \"/orders/add-commission\")\n+\tpublic String placeCommissionOrder(@RequestParam Double total) {\n+\t\tboolean isPlaced = orderService.registerOrder(orderService.createOrder(total*1.05));\t\t\n+\t\treturn isPlaced ? \"Ok\" : \"Nok\";\n+\t}\n+\n+}",
    "output": "Hexagonal architecture: a quick and practical example"
  },
  {
    "input": "diff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n@@ -1,6 +1,7 @@\n package com.baeldung.rest.karate;\n \n import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n import com.intuit.karate.junit4.Karate;\n import cucumber.api.CucumberOptions;\n import org.junit.AfterClass;\n@@ -14,13 +15,15 @@\n @CucumberOptions(features = \"classpath:karate\")\n public class KarateIntegrationTest {\n \n-    private static final WireMockServer wireMockServer = new WireMockServer();\n+    public static final int PORT_NUMBER = 8097;\n+\n+    private static final WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.options().port(PORT_NUMBER));\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n         wireMockServer.start();\n \n-        configureFor(\"localhost\", 8080);\n+        configureFor(\"localhost\", PORT_NUMBER);\n         stubFor(get(urlEqualTo(\"/user/get\"))\n                 .willReturn(aResponse()\n                         .withStatus(200)",
    "output": "Merge pull request #8295 from kwoyke/BAEL-19798\n\nBAEL-19798: Change port number for KarateIntegrationTest"
  },
  {
    "input": "diff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n@@ -0,0 +1,52 @@\n+package com.baeldung.graphframes;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.function.VoidFunction;\n+import org.apache.spark.graphx.Edge;\n+import org.apache.spark.graphx.Graph;\n+import org.apache.spark.graphx.VertexRDD;\n+import org.graphframes.GraphFrame;\n+import scala.Tuple2;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GraphExperiments {\n+    public static Map<Long, User> USERS = new HashMap<>();\n+\n+    public static void main(String[] args) throws IOException {\n+        Logger.getLogger(\"org\").setLevel(Level.OFF);\n+        GraphLoader loader = new GraphLoader();\n+        GraphFrame graph = loader.getGraphFrameUserRelationship();\n+\n+        GraphExperiments experiments = new GraphExperiments();\n+        experiments.doGraphFrameOperations(graph);\n+        experiments.doGraphFrameAlgorithms(graph);\n+    }\n+\n+    private void doGraphFrameOperations(GraphFrame graph) {\n+        graph.vertices().show();\n+        graph.edges().show();\n+\n+        graph.vertices().filter(\"name = 'Martin'\").show();\n+\n+        graph.filterEdges(\"type = 'Friend'\")\n+            .dropIsolatedVertices().vertices().show();\n+\n+        graph.degrees().show();\n+        graph.inDegrees().show();\n+        graph.outDegrees().show();\n+    }\n+\n+    private void doGraphFrameAlgorithms(GraphFrame graph) {\n+\n+        graph.pageRank().maxIter(20).resetProbability(0.15).run().vertices().show();\n+\n+        graph.connectedComponents().run().show();\n+\n+        graph.triangleCount().run().show();\n+    }\n+\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.graphframes;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.graphframes.GraphFrame;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GraphLoader {\n+\n+    public JavaSparkContext getSparkContext() throws IOException {\n+        Path temp = Files.createTempDirectory(\"sparkGraphFrames\");\n+        SparkConf sparkConf = new SparkConf().setAppName(\"SparkGraphX\").setMaster(\"local[*]\");\n+        JavaSparkContext javaSparkContext = new JavaSparkContext(sparkConf);\n+        javaSparkContext.setCheckpointDir(temp.toString());\n+        return javaSparkContext;\n+    }\n+\n+    public GraphFrame getGraphFrameUserRelationship() throws IOException {\n+        Path temp = Files.createTempDirectory(\"sparkGraphFrames\");\n+        SparkSession session = SparkSession.builder()\n+            .appName(\"SparkGraphFrameSample\")\n+            .config(\"spark.sql.warehouse.dir\", temp.toString())\n+            .sparkContext(getSparkContext().sc())\n+            .master(\"local[*]\")\n+            .getOrCreate();\n+        List<User> users = loadUsers();\n+\n+        Dataset<Row> userDataset = session.createDataFrame(users, User.class);\n+\n+        List<Relationship> relationshipsList = getRelations();\n+        Dataset<Row> relationshipDataset = session.createDataFrame(relationshipsList, Relationship.class);\n+\n+        GraphFrame graphFrame = new GraphFrame(userDataset, relationshipDataset);\n+\n+        return graphFrame;\n+    }\n+\n+    public List<Relationship> getRelations() {\n+        List<Relationship> relationships = new ArrayList<>();\n+        relationships.add(new Relationship(\"Friend\", \"1\", \"2\"));\n+        relationships.add(new Relationship(\"Following\", \"1\", \"4\"));\n+        relationships.add(new Relationship(\"Friend\", \"2\", \"4\"));\n+        relationships.add(new Relationship(\"Relative\", \"3\", \"1\"));\n+        relationships.add(new Relationship(\"Relative\", \"3\", \"4\"));\n+\n+        return relationships;\n+    }\n+\n+    private List<User> loadUsers() {\n+        User john = new User(1L, \"John\");\n+        User martin = new User(2L, \"Martin\");\n+        User peter = new User(3L, \"Peter\");\n+        User alicia = new User(4L, \"Alicia\");\n+\n+        List<User> users = new ArrayList<>();\n+\n+        users.add(new User(1L, \"John\"));\n+        users.add(new User(2L, \"Martin\"));\n+        users.add(new User(3L, \"Peter\"));\n+        users.add(new User(4L, \"Alicia\"));\n+\n+        return users;\n+    }\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java b/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.graphframes;\n+\n+import java.io.Serializable;\n+import java.util.UUID;\n+\n+public class Relationship implements Serializable {\n+    private String type;\n+    private String src;\n+    private String dst;\n+    private UUID id;\n+\n+    public Relationship(String type, String src, String dst) {\n+        this.type = type;\n+        this.src = src;\n+        this.dst = dst;\n+        this.id = UUID.randomUUID();\n+    }\n+\n+    public String getId() {\n+        return id.toString();\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getSrc() {\n+        return src;\n+    }\n+\n+    public String getDst() {\n+        return dst;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+    \treturn getSrc() + \" -- \" + getType() + \" --> \" + getDst();\n+    }\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/User.java b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.graphframes;\n+\n+import java.io.Serializable;\n+\n+public class User implements Serializable {\n+\n+    private Long id;\n+    private String name;\n+\n+    public User(long id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public String getId() {\n+        return id.toString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return \"<\" + id + \",\" + name + \">\";\n+    }\n+}",
    "output": "Merge pull request #7953 from norbertoritzmann/master\n\n[BAEL-3086] Changes related to Apache Spark GraphX article"
  },
  {
    "input": "diff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/transaction/TransactionListenerImpl.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.rocketmq.transaction;\n+\n+import org.apache.rocketmq.spring.annotation.RocketMQTransactionListener;\n+import org.apache.rocketmq.spring.core.RocketMQLocalTransactionListener;\n+import org.apache.rocketmq.spring.core.RocketMQLocalTransactionState;\n+import org.springframework.messaging.Message;\n+\n+@RocketMQTransactionListener(txProducerGroup = \"test-transaction\")\n+class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n+    @Override\n+    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n+        // ... local transaction process, return ROLLBACK, COMMIT or UNKNOWN\n+        return RocketMQLocalTransactionState.UNKNOWN;\n+    }\n+\n+    @Override\n+    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n+        // ... check transaction status and return ROLLBACK, COMMIT or UNKNOWN\n+        return RocketMQLocalTransactionState.COMMIT;\n+    }\n+}",
    "output": "BAEL-3457 Apache RocketMq"
  },
  {
    "input": "diff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/consumer/CartEventConsumer.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.rocketmq.consumer;\n+\n+import com.baeldung.rocketmq.event.CartItemEvent;\n+import org.apache.rocketmq.spring.annotation.RocketMQMessageListener;\n+import org.apache.rocketmq.spring.core.RocketMQListener;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.stereotype.Service;\n+\n+@SpringBootApplication\n+public class CartEventConsumer {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(CartEventConsumer.class, args);\n+    }\n+\n+    @Service\n+    @RocketMQMessageListener(topic = \"cart-item-add-topic\", consumerGroup = \"cart-consumer_cart-item-add-topic\")\n+    public class CardItemAddConsumer implements RocketMQListener<CartItemEvent> {\n+        public void onMessage(CartItemEvent addItemEvent) {\n+            System.out.println(\"Adding item: \" + addItemEvent);\n+            // logic\n+        }\n+    }\n+\n+    @Service\n+    @RocketMQMessageListener(topic = \"cart-item-removed-topic\", consumerGroup = \"cart-consumer_cart-item-removed-topic\")\n+    public class CardItemRemoveConsumer implements RocketMQListener<CartItemEvent> {\n+        public void onMessage(CartItemEvent removeItemEvent) {\n+            System.out.println(\"Removing item: \" + removeItemEvent);\n+            // logic\n+        }\n+    }\n+}\n\ndiff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/event/CartItemEvent.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.rocketmq.event;\n+\n+public class CartItemEvent {\n+    private String itemId;\n+    private int quantity;\n+\n+    public CartItemEvent(String itemId, int quantity) {\n+        this.itemId = itemId;\n+        this.quantity = quantity;\n+    }\n+\n+    public String getItemId() {\n+        return itemId;\n+    }\n+\n+    public void setItemId(String itemId) {\n+        this.itemId = itemId;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CartItemEvent{\" + \"itemId='\" + itemId + '\\'' + \", quantity=\" + quantity + '}';\n+    }\n+}\n\ndiff --git a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n--- a/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n+++ b/apache-rocketmq/src/main/java/com/baeldung/rocketmq/producer/CartEventProducer.java\n@@ -0,0 +1,26 @@\n+package com.baeldung.rocketmq.producer;\n+\n+\n+import com.baeldung.rocketmq.event.CartItemEvent;\n+import org.apache.rocketmq.spring.core.RocketMQTemplate;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class CartEventProducer implements CommandLineRunner {\n+\n+    @Autowired\n+    private RocketMQTemplate rocketMQTemplate;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(CartEventProducer.class, args);\n+    }\n+\n+    public void run(String... args) throws Exception {\n+        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"bike\", 1));\n+        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"computer\", 2));\n+        rocketMQTemplate.convertAndSend(\"cart-item-removed-topic\", new CartItemEvent(\"bike\", 1));\n+    }\n+}",
    "output": "BAEL-3457 Apache RocketMQ"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n--- a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n+++ b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n@@ -85,4 +85,13 @@ void givenArrayWithoutMissingInteger_whenSearchInUnsortedArrayBooleanArray_thenA\n \n         assertThat(result).isEqualTo(input.length);\n     }\n+\n+    @Test\n+    void givenArrayWithoutZero_whenSearchInUnsortedArrayBooleanArray_thenZero() {\n+        int[] input = new int[] {11, 13, 14, 15};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n+\n+        assertThat(result).isEqualTo(0);\n+    }\n }\n\\ No newline at end of file",
    "output": "Merge pull request #8299 from dupirefr/bael-3348-comment\n\ndupirefr/dupire.francois+pro@gmail.com [BAEL-3348] Added test using array from article comment"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n--- a/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n+++ b/spring-cloud/spring-cloud-config/client/src/main/java/com/baeldung/spring/cloud/config/client/ConfigClient.java\n@@ -4,9 +4,8 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n @SpringBootApplication\n@@ -22,7 +21,7 @@ public static void main(String[] args) {\n         SpringApplication.run(ConfigClient.class, args);\n     }\n \n-    @RequestMapping(value = \"/whoami/{username}\", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = \"/whoami/{username}\", produces = MediaType.TEXT_PLAIN_VALUE)\n     public String whoami(@PathVariable(\"username\") String username) {\n         return String.format(\"Hello %s! You are a(n) %s and your password is '%s'.\\n\", username, role, password);\n     }\n\ndiff --git a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n--- a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n+++ b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfiguration.java\n@@ -5,11 +5,14 @@\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n @Configuration\n-public class SecurityConfigurer extends WebSecurityConfigurerAdapter {\n+public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n     @Override\n     public void configure(HttpSecurity http) throws Exception {\n         http.csrf()\n-                .disable()\n-                .httpBasic();\n+                .ignoringAntMatchers(\"/encrypt/**\")\n+                .ignoringAntMatchers(\"/decrypt/**\");\n+\n+        super.configure(http);\n     }\n }",
    "output": "BAEL-19790: Use GetMapping and rename SecurityConfigurer"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n--- a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n+++ b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n@@ -87,7 +87,7 @@ void givenArrayWithoutMissingInteger_whenSearchInUnsortedArrayBooleanArray_thenA\n     }\n \n     @Test\n-    void givenArrayFromArticleComment_whenSearchInUnsortedArrayBooleanArray_thenZero() {\n+    void givenArrayWithoutZero_whenSearchInUnsortedArrayBooleanArray_thenZero() {\n         int[] input = new int[] {11, 13, 14, 15};\n \n         int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);",
    "output": "[BAEL-3348] Renamed test"
  },
  {
    "input": "diff --git a/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java b/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n--- a/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n+++ b/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n@@ -34,15 +34,15 @@ public void finalize() {\n     }\n \n     @Test\n-    public void whenCheckingListSize_ThenSizeEqualsToInit() {\n+    public void whenCheckingListSize_thenSizeEqualsToInit() {\n         LOG.info(\"executing test\");\n         assertEquals(2, list.size());\n \n         list.add(\"another test\");\n     }\n \n     @Test\n-    public void whenCheckingListSizeAgain_ThenSizeEqualsToInit() {\n+    public void whenCheckingListSizeAgain_thenSizeEqualsToInit() {\n         LOG.info(\"executing another test\");\n         assertEquals(2, list.size());\n ",
    "output": "Merge pull request #8127 from amit2103/BAEL-17317-2\n\n[BAEL-17317] - Check article code - https://www.baeldung.com/junit-be…"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfigurer.java b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfigurer.java\n--- a/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfigurer.java\n+++ b/spring-cloud/spring-cloud-config/server/src/main/java/com/baeldung/spring/cloud/config/server/SecurityConfigurer.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.spring.cloud.config.server;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+@Configuration\n+public class SecurityConfigurer extends WebSecurityConfigurerAdapter {\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        http.csrf()\n+                .disable()\n+                .httpBasic();\n+    }\n+}",
    "output": "BAEL-19790: Fix encryption issues after Spring Boot 2 migration"
  },
  {
    "input": "diff --git a/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixMultiplicationBenchmarking.java b/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixMultiplicationBenchmarking.java\n--- a/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixMultiplicationBenchmarking.java\n+++ b/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixMultiplicationBenchmarking.java\n@@ -0,0 +1,121 @@\n+package com.baeldung.matrices.benchmark;\n+\n+import cern.colt.matrix.DoubleFactory2D;\n+import cern.colt.matrix.DoubleMatrix2D;\n+import cern.colt.matrix.linalg.Algebra;\n+import com.baeldung.matrices.HomemadeMatrix;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.ejml.simple.SimpleMatrix;\n+import org.la4j.Matrix;\n+import org.la4j.matrix.dense.Basic2DMatrix;\n+import org.nd4j.linalg.api.ndarray.INDArray;\n+import org.nd4j.linalg.factory.Nd4j;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.ChainedOptionsBuilder;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+public class BigMatrixMultiplicationBenchmarking {\n+    private static final int DEFAULT_FORKS = 2;\n+    private static final int DEFAULT_WARMUP_ITERATIONS = 5;\n+    private static final int DEFAULT_MEASUREMENT_ITERATIONS = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        Map<String, String> parameters = parseParameters(args);\n+\n+        ChainedOptionsBuilder builder = new OptionsBuilder()\n+          .include(BigMatrixMultiplicationBenchmarking.class.getSimpleName())\n+          .mode(Mode.AverageTime)\n+          .forks(forks(parameters))\n+          .warmupIterations(warmupIterations(parameters))\n+          .measurementIterations(measurementIterations(parameters))\n+          .timeUnit(TimeUnit.SECONDS);\n+\n+        parameters.forEach(builder::param);\n+\n+        new Runner(builder.build()).run();\n+    }\n+\n+    private static Map<String, String> parseParameters(String[] args) {\n+        return Arrays.stream(args)\n+          .map(arg -> arg.split(\"=\"))\n+          .collect(Collectors.toMap(\n+            arg -> arg[0],\n+            arg -> arg[1]\n+          ));\n+    }\n+\n+    private static int forks(Map<String, String> parameters) {\n+        String forks = parameters.remove(\"forks\");\n+        return parseOrDefault(forks, DEFAULT_FORKS);\n+    }\n+\n+    private static int warmupIterations(Map<String, String> parameters) {\n+        String warmups = parameters.remove(\"warmupIterations\");\n+        return parseOrDefault(warmups, DEFAULT_WARMUP_ITERATIONS);\n+    }\n+\n+    private static int measurementIterations(Map<String, String> parameters) {\n+        String measurements = parameters.remove(\"measurementIterations\");\n+        return parseOrDefault(measurements, DEFAULT_MEASUREMENT_ITERATIONS);\n+    }\n+\n+    private static int parseOrDefault(String parameter, int defaultValue) {\n+        return parameter != null ? Integer.parseInt(parameter) : defaultValue;\n+    }\n+\n+    @Benchmark\n+    public Object homemadeMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        return HomemadeMatrix.multiplyMatrices(matrixProvider.getFirstMatrix(), matrixProvider.getSecondMatrix());\n+    }\n+\n+    @Benchmark\n+    public Object ejmlMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        SimpleMatrix firstMatrix = new SimpleMatrix(matrixProvider.getFirstMatrix());\n+        SimpleMatrix secondMatrix = new SimpleMatrix(matrixProvider.getSecondMatrix());\n+\n+        return firstMatrix.mult(secondMatrix);\n+    }\n+\n+    @Benchmark\n+    public Object apacheCommonsMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        RealMatrix firstMatrix = new Array2DRowRealMatrix(matrixProvider.getFirstMatrix());\n+        RealMatrix secondMatrix = new Array2DRowRealMatrix(matrixProvider.getSecondMatrix());\n+\n+        return firstMatrix.multiply(secondMatrix);\n+    }\n+\n+    @Benchmark\n+    public Object la4jMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        Matrix firstMatrix = new Basic2DMatrix(matrixProvider.getFirstMatrix());\n+        Matrix secondMatrix = new Basic2DMatrix(matrixProvider.getSecondMatrix());\n+\n+        return firstMatrix.multiply(secondMatrix);\n+    }\n+\n+    @Benchmark\n+    public Object nd4jMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        INDArray firstMatrix = Nd4j.create(matrixProvider.getFirstMatrix());\n+        INDArray secondMatrix = Nd4j.create(matrixProvider.getSecondMatrix());\n+\n+        return firstMatrix.mmul(secondMatrix);\n+    }\n+\n+    @Benchmark\n+    public Object coltMatrixMultiplication(BigMatrixProvider matrixProvider) {\n+        DoubleFactory2D doubleFactory2D = DoubleFactory2D.dense;\n+\n+        DoubleMatrix2D firstMatrix = doubleFactory2D.make(matrixProvider.getFirstMatrix());\n+        DoubleMatrix2D secondMatrix = doubleFactory2D.make(matrixProvider.getSecondMatrix());\n+\n+        Algebra algebra = new Algebra();\n+        return algebra.mult(firstMatrix, secondMatrix);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixProvider.java b/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixProvider.java\n--- a/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixProvider.java\n+++ b/java-math/src/main/java/com/baeldung/matrices/benchmark/BigMatrixProvider.java\n@@ -0,0 +1,46 @@\n+package com.baeldung.matrices.benchmark;\n+\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+\n+import java.util.Random;\n+import java.util.stream.DoubleStream;\n+\n+@State(Scope.Benchmark)\n+public class BigMatrixProvider {\n+    @Param({})\n+    private int matrixSize;\n+    private double[][] firstMatrix;\n+    private double[][] secondMatrix;\n+\n+    public BigMatrixProvider() {}\n+\n+    @Setup\n+    public void setup(BenchmarkParams parameters) {\n+        firstMatrix = createMatrix(matrixSize);\n+        secondMatrix = createMatrix(matrixSize);\n+    }\n+\n+    private double[][] createMatrix(int matrixSize) {\n+        Random random = new Random();\n+\n+        double[][] result = new double[matrixSize][matrixSize];\n+        for (int row = 0; row < result.length; row++) {\n+            for (int col = 0; col < result[row].length; col++) {\n+                result[row][col] = random.nextDouble();\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public double[][] getFirstMatrix() {\n+        return firstMatrix;\n+    }\n+\n+    public double[][] getSecondMatrix() {\n+        return secondMatrix;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixMultiplicationBenchmarking.java b/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixMultiplicationBenchmarking.java\n--- a/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixMultiplicationBenchmarking.java\n+++ b/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixMultiplicationBenchmarking.java\n@@ -1,8 +1,9 @@\n-package com.baeldung.matrices;\n+package com.baeldung.matrices.benchmark;\n \n import cern.colt.matrix.DoubleFactory2D;\n import cern.colt.matrix.DoubleMatrix2D;\n import cern.colt.matrix.linalg.Algebra;\n+import com.baeldung.matrices.HomemadeMatrix;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.RealMatrix;\n import org.ejml.simple.SimpleMatrix;\n@@ -23,9 +24,10 @@ public class MatrixMultiplicationBenchmarking {\n     public static void main(String[] args) throws Exception {\n         Options opt = new OptionsBuilder()\n           .include(MatrixMultiplicationBenchmarking.class.getSimpleName())\n+          .exclude(BigMatrixMultiplicationBenchmarking.class.getSimpleName())\n           .mode(Mode.AverageTime)\n           .forks(2)\n-          .warmupIterations(5)\n+          .warmupIterations(10)\n           .measurementIterations(10)\n           .timeUnit(TimeUnit.MICROSECONDS)\n           .build();\n\ndiff --git a/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixProvider.java b/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixProvider.java\n--- a/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixProvider.java\n+++ b/java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixProvider.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.matrices;\n+package com.baeldung.matrices.benchmark;\n \n import org.openjdk.jmh.annotations.Scope;\n import org.openjdk.jmh.annotations.State;",
    "output": "dupirefr/dupire.francois+pro@gmail.com [BAEL-3606] Matrix Multiplication Libraries Comparison (#8298)\n\n* Added benchmarking on larger matrices\r\n\r\n* [BAEL-3606] Moved benchmarking to production code\r\n\r\n* [BAEL-3606] Added minor fix"
  },
  {
    "input": "diff --git a/maven-all/maven-custom-plugin/counter-maven-plugin/src/main/java/com/baeldung/maven/plugin/validator/DependencyCounterMojo.java b/maven-all/maven-custom-plugin/counter-maven-plugin/src/main/java/com/baeldung/maven/plugin/validator/DependencyCounterMojo.java\n--- a/maven-all/maven-custom-plugin/counter-maven-plugin/src/main/java/com/baeldung/maven/plugin/validator/DependencyCounterMojo.java\n+++ b/maven-all/maven-custom-plugin/counter-maven-plugin/src/main/java/com/baeldung/maven/plugin/validator/DependencyCounterMojo.java\n@@ -0,0 +1,45 @@\n+package com.baeldung.maven.plugin.validator;\n+\n+import java.util.List;\n+\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.project.MavenProject;\n+\n+/**\n+ * Counts the number of maven dependencies of a project.\n+ * \n+ * It can be filtered by scope.\n+ *\n+ */\n+@Mojo(name = \"dependency-counter\", defaultPhase = LifecyclePhase.COMPILE)\n+public class DependencyCounterMojo extends AbstractMojo {\n+\n+    /**\n+     * Scope to filter the dependencies.\n+     */\n+    @Parameter(property = \"scope\")\n+    String scope;\n+\n+    /**\n+     * Gives access to the Maven project information.\n+     */\n+    @Parameter(defaultValue = \"${project}\", required = true, readonly = true)\n+    MavenProject project;\n+\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        List<Dependency> dependencies = project.getDependencies();\n+\n+        long numDependencies = dependencies.stream()\n+            .filter(d -> (scope == null || scope.isEmpty()) || scope.equals(d.getScope()))\n+            .count();\n+\n+        getLog().info(\"Number of dependencies: \" + numDependencies);\n+    }\n+\n+}",
    "output": "Bael 3501 how to create a maven plugin (#8257)\n\n* BAEL-3501 - maven plugin\r\n\r\n* formatting\r\n\r\n* build\r\n\r\n* maven plugin moved to maven-all module\r\n\r\n* maven-custom-plugin moved to maven-all\r\n\r\n* pom fix\r\n\r\n* format"
  },
  {
    "input": "diff --git a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n--- a/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n+++ b/testing-modules/rest-testing/src/test/java/com/baeldung/rest/karate/KarateIntegrationTest.java\n@@ -1,6 +1,7 @@\n package com.baeldung.rest.karate;\n \n import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n import com.intuit.karate.junit4.Karate;\n import cucumber.api.CucumberOptions;\n import org.junit.AfterClass;\n@@ -14,13 +15,15 @@\n @CucumberOptions(features = \"classpath:karate\")\n public class KarateIntegrationTest {\n \n-    private static final WireMockServer wireMockServer = new WireMockServer();\n+    public static final int PORT_NUMBER = 8097;\n+\n+    private static final WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.options().port(PORT_NUMBER));\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n         wireMockServer.start();\n \n-        configureFor(\"localhost\", 8080);\n+        configureFor(\"localhost\", PORT_NUMBER);\n         stubFor(get(urlEqualTo(\"/user/get\"))\n                 .willReturn(aResponse()\n                         .withStatus(200)",
    "output": "BAEL-19798: Change port number for KarateIntegrationTest"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamUnitTest.java\n@@ -7,7 +7,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n-public class MedianOfIntegerStreamTest {\n+public class MedianOfIntegerStreamUnitTest {\n \n     @Test\n     public void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach1() {",
    "output": "rename unit test"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithm.java\n@@ -0,0 +1,30 @@\n+package com.baeldung.algorithms.subarray.maximum;\n+\n+public class BruteForceAlgorithm {\n+\n+    public int maxSubArray(int[] arr) {\n+\n+        int size = arr.length;\n+        int maximumSubArraySum = Integer.MIN_VALUE;\n+        int start = 0;\n+        int end = 0;\n+\n+        for (int left = 0; left < size; left++) {\n+\n+            int runningWindowSum = 0;\n+\n+            for (int right = left; right < size; right++) {\n+                runningWindowSum += arr[right];\n+\n+                if (runningWindowSum > maximumSubArraySum) {\n+                    maximumSubArraySum = runningWindowSum;\n+                    start = left;\n+                    end = right;\n+                }\n+            }\n+        }\n+        System.out.println(\"Found Maximum Subarray between \" + start + \" and \" + end);\n+        return maximumSubArraySum;\n+    }\n+\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithm.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithm.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithm.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithm.java\n@@ -0,0 +1,29 @@\n+package com.baeldung.algorithms.subarray.maximum;\n+\n+public class KadaneAlgorithm {\n+\n+    public int maxSubArraySum(int[] arr) {\n+\n+        int size = arr.length;\n+        int start = 0;\n+        int end = 0;\n+\n+        int maxSoFar = 0, maxEndingHere = 0;\n+\n+        for (int i = 0; i < size; i++) {\n+\n+            if (arr[i] > maxEndingHere + arr[i]) {\n+                start = i;\n+                maxEndingHere = arr[i];\n+            } else\n+                maxEndingHere = maxEndingHere + arr[i];\n+\n+            if (maxSoFar < maxEndingHere) {\n+                maxSoFar = maxEndingHere;\n+                end = i;\n+            }\n+        }\n+        System.out.println(\"Found Maximum Subarray between \" + start + \" and \" + end);\n+        return maxSoFar;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/BruteForceAlgorithmUnitTest.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.algorithms.subarray.maximum;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class BruteForceAlgorithmUnitTest {\n+\n+    @Test\n+    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n+        //given\n+        int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n+\n+        //when\n+        BruteForceAlgorithm algorithm = new BruteForceAlgorithm();\n+        int maximumSum = algorithm.maxSubArray(arr);\n+\n+        //then\n+        assertEquals(6, maximumSum);\n+\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithmUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithmUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithmUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/subarray/maximum/KadaneAlgorithmUnitTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.algorithms.subarray.maximum;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class KadaneAlgorithmUnitTest {\n+\n+    @Test\n+    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n+        //given\n+        int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n+\n+        //when\n+        KadaneAlgorithm algorithm = new KadaneAlgorithm();\n+        int maxSum = algorithm.maxSubArraySum(arr);\n+\n+        //then\n+        assertEquals(6, maxSum);\n+\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "BAEL3455 Maximum Subarray Problem"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.algorithms.integerstreammedian;\n+\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+\n+import static java.util.Comparator.reverseOrder;\n+\n+public class MedianOfIntegerStream {\n+\n+    private Queue<Integer> minHeap, maxHeap;\n+\n+    MedianOfIntegerStream() {\n+        minHeap = new PriorityQueue<>();\n+        maxHeap = new PriorityQueue<>(reverseOrder());\n+    }\n+\n+    void add(int num) {\n+        if (!minHeap.isEmpty() && num < minHeap.peek()) {\n+            maxHeap.offer(num);\n+            if (maxHeap.size() > minHeap.size() + 1) {\n+                minHeap.offer(maxHeap.poll());\n+            }\n+        } else {\n+            minHeap.offer(num);\n+            if (minHeap.size() > maxHeap.size() + 1) {\n+                maxHeap.offer(minHeap.poll());\n+            }\n+        }\n+    }\n+\n+    double getMedian() {\n+        int median;\n+        if (minHeap.size() < maxHeap.size()) {\n+            median = maxHeap.peek();\n+        } else if (minHeap.size() > maxHeap.size()) {\n+            median = minHeap.peek();\n+        } else {\n+            median = (minHeap.peek() + maxHeap.peek()) / 2;\n+        }\n+        return median;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java\n@@ -1,25 +1,26 @@\n-package com.baeldung.algorithms.datastreammedian;\n+package com.baeldung.algorithms.integerstreammedian;\n \n import java.util.PriorityQueue;\n import java.util.Queue;\n \n import static java.util.Comparator.reverseOrder;\n \n-public class DataStreamMedian {\n+public class MedianOfIntegerStream2 {\n \n     private Queue<Integer> minHeap, maxHeap;\n \n-    DataStreamMedian() {\n+    MedianOfIntegerStream2() {\n         minHeap = new PriorityQueue<>();\n         maxHeap = new PriorityQueue<>(reverseOrder());\n     }\n \n     void add(int num) {\n-        minHeap.offer(num);\n-        maxHeap.offer(minHeap.poll());\n-\n-        if (minHeap.size() < maxHeap.size()) {\n+        if (minHeap.size() == maxHeap.size()) {\n+            maxHeap.offer(num);\n             minHeap.offer(maxHeap.poll());\n+        } else {\n+            minHeap.offer(num);\n+            maxHeap.offer(minHeap.poll());\n         }\n     }\n \n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStreamTest.java\n@@ -0,0 +1,41 @@\n+package com.baeldung.algorithms.integerstreammedian;\n+\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class MedianOfIntegerStreamTest {\n+\n+    @Test\n+    public void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach1() {\n+        MedianOfIntegerStream mis = new MedianOfIntegerStream();\n+        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n+            mis.add(e.getKey());\n+            assertEquals(e.getValue(), (Double) mis.getMedian());\n+        }\n+    }\n+\n+    @Test\n+    public void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach2() {\n+        MedianOfIntegerStream2 mis = new MedianOfIntegerStream2();\n+        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n+            mis.add(e.getKey());\n+            assertEquals(e.getValue(), (Double) mis.getMedian());\n+        }\n+    }\n+\n+    private Map<Integer, Double> testcaseFixture() {\n+        return new LinkedHashMap<Integer, Double>() {{\n+            put(1, 1d);\n+            put(7, 4d);\n+            put(5, 5d);\n+            put(8, 6d);\n+            put(3, 5d);\n+            put(9, 6d);\n+            put(4, 5d);\n+        }};\n+    }\n+}",
    "output": "final solution with tests"
  },
  {
    "input": "diff --git a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Animal.java b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Animal.java\n--- a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Animal.java\n+++ b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Animal.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.componentscan.filter.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface Animal {\n+}\n\ndiff --git a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/ComponentScanAnnotationFilterApp.java b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/ComponentScanAnnotationFilterApp.java\n--- a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/ComponentScanAnnotationFilterApp.java\n+++ b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/ComponentScanAnnotationFilterApp.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.componentscan.filter.annotation;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+\n+@Configuration\n+@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Animal.class))\n+public class ComponentScanAnnotationFilterApp {\n+\n+    public static void main(String[] args) {\n+    }\n+}\n\ndiff --git a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Elephant.java b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Elephant.java\n--- a/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Elephant.java\n+++ b/spring-di/src/main/java/com/baeldung/componentscan/filter/annotation/Elephant.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.componentscan.filter.annotation;\n+\n+@Animal\n+public class Elephant {\n+}",
    "output": "Move code to right package (#8285)\n\n* Move code to rigth package\r\n\r\n* Move code to correct module"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/hook/ShutdownHookUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/hook/ShutdownHookUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/hook/ShutdownHookUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/hook/ShutdownHookUnitTest.java\n@@ -0,0 +1,47 @@\n+package com.baeldung.hook;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class ShutdownHookUnitTest {\n+\n+    @Test\n+    public void givenAHook_WhenShutsDown_ThenHookShouldBeExecuted() {\n+        Thread printingHook = new Thread(() -> System.out.println(\"In the middle of a shutdown\"));\n+        Runtime.getRuntime().addShutdownHook(printingHook);\n+    }\n+\n+    @Test\n+    public void addingAHook_WhenThreadAlreadyStarted_ThenThrowsAnException() {\n+        Thread longRunningHook = new Thread(() -> {\n+            try {\n+                Thread.sleep(300);\n+            } catch (InterruptedException ignored) {}\n+        });\n+        longRunningHook.start();\n+\n+        assertThatThrownBy(() -> Runtime.getRuntime().addShutdownHook(longRunningHook))\n+          .isInstanceOf(IllegalArgumentException.class)\n+          .hasMessage(\"Hook already running\");\n+    }\n+\n+    @Test\n+    public void addingAHook_WhenAlreadyExists_ThenAnExceptionWouldBeThrown() {\n+        Thread unfortunateHook = new Thread(() -> {});\n+        Runtime.getRuntime().addShutdownHook(unfortunateHook);\n+\n+        assertThatThrownBy(() -> Runtime.getRuntime().addShutdownHook(unfortunateHook))\n+          .isInstanceOf(IllegalArgumentException.class)\n+          .hasMessage(\"Hook previously registered\");\n+    }\n+\n+    @Test\n+    public void removeAHook_WhenItIsAlreadyRegistered_ThenWouldDeRegisterTheHook() {\n+        Thread willNotRun = new Thread(() -> System.out.println(\"Won't run!\"));\n+        Runtime.getRuntime().addShutdownHook(willNotRun);\n+\n+        assertThat(Runtime.getRuntime().removeShutdownHook(willNotRun)).isTrue();\n+    }\n+}",
    "output": "Added the sample codes"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n@@ -9,7 +9,6 @@\n @CucumberOptions(\n   features = {\"classpath:features/calculator.feature\", \"classpath:features/calculator-scenario-outline.feature\"}\n   , plugin = {\"pretty\", \"json:target/reports/json/calculator.json\"}\n-  , glue = {\"com.baeldung.cucumber.calculator\"}\n )\n public class CalculatorIntegrationTest {\n }",
    "output": "Merge pull request #8282 from albanoj2/BAEL-3444_unittest-fix\n\nBAEL-3444: Fixed calculator unit tests due to incorrect Cucumber glue directory"
  },
  {
    "input": "diff --git a/quarkus-extension/quarkus-liquibase/deployment/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProcessor.java b/quarkus-extension/quarkus-liquibase/deployment/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProcessor.java\n--- a/quarkus-extension/quarkus-liquibase/deployment/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProcessor.java\n+++ b/quarkus-extension/quarkus-liquibase/deployment/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProcessor.java\n@@ -0,0 +1,40 @@\n+package com.baeldung.quarkus.liquibase;\n+\n+import io.quarkus.agroal.deployment.DataSourceInitializedBuildItem;\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import liquibase.exception.LiquibaseException;\n+\n+public class LiquibaseProcessor {\n+\n+    private LiquibaseConfig liquibaseConfig;\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n+    @BuildStep\n+    void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n+               BuildProducer<FeatureBuildItem> featureProducer,\n+               LiquibaseRecorder recorder,\n+               BuildProducer<BeanContainerListenerBuildItem> containerListenerProducer,\n+               DataSourceInitializedBuildItem dataSourceInitializedBuildItem) {\n+\n+        featureProducer.produce(new FeatureBuildItem(\"liquibase\"));\n+\n+        AdditionalBeanBuildItem unremovableProducer = AdditionalBeanBuildItem.unremovableOf(LiquibaseProducer.class);\n+        additionalBeanProducer.produce(unremovableProducer);\n+\n+        containerListenerProducer.produce(\n+                new BeanContainerListenerBuildItem(recorder.setLiquibaseConfig(liquibaseConfig)));\n+    }\n+\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    @BuildStep\n+    void processMigration(LiquibaseRecorder recorder, BeanContainerBuildItem beanContainer) throws LiquibaseException {\n+        recorder.migrate(beanContainer.getValue());\n+    }\n+}\n\ndiff --git a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseConfig.java b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseConfig.java\n--- a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseConfig.java\n+++ b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseConfig.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.quarkus.liquibase;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"liquibase\", phase = ConfigPhase.BUILD_AND_RUN_TIME_FIXED)\n+public final class LiquibaseConfig {\n+    /**\n+     * master change log file\n+     */\n+    @ConfigItem\n+    public String changeLog;\n+}\n\\ No newline at end of file\n\ndiff --git a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProducer.java b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProducer.java\n--- a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProducer.java\n+++ b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseProducer.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.quarkus.liquibase;\n+\n+import io.agroal.api.AgroalDataSource;\n+import liquibase.Liquibase;\n+import liquibase.database.jvm.JdbcConnection;\n+import liquibase.resource.ClassLoaderResourceAccessor;\n+import liquibase.resource.ResourceAccessor;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+@ApplicationScoped\n+public class LiquibaseProducer {\n+\n+    @Inject\n+    AgroalDataSource dataSource;\n+\n+    private LiquibaseConfig liquibaseConfig;\n+\n+    @Produces\n+    public Liquibase produceLiquibase() throws Exception {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        ResourceAccessor classLoaderResourceAccessor = new ClassLoaderResourceAccessor(classLoader);\n+        Liquibase liquibase = new Liquibase(liquibaseConfig.changeLog, classLoaderResourceAccessor, new JdbcConnection(dataSource.getConnection()));\n+        return liquibase;\n+    }\n+\n+    public void setLiquibaseConfig(LiquibaseConfig liquibaseConfig) {\n+        this.liquibaseConfig = liquibaseConfig;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseRecorder.java b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseRecorder.java\n--- a/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseRecorder.java\n+++ b/quarkus-extension/quarkus-liquibase/runtime/src/main/java/com/baeldung/quarkus/liquibase/LiquibaseRecorder.java\n@@ -0,0 +1,25 @@\n+package com.baeldung.quarkus.liquibase;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.arc.runtime.BeanContainerListener;\n+import io.quarkus.runtime.annotations.Recorder;\n+import liquibase.Contexts;\n+import liquibase.Liquibase;\n+import liquibase.exception.LiquibaseException;\n+\n+@Recorder\n+public class LiquibaseRecorder {\n+\n+    public BeanContainerListener setLiquibaseConfig(LiquibaseConfig liquibaseConfig) {\n+        return beanContainer -> {\n+            LiquibaseProducer producer = beanContainer.instance(LiquibaseProducer.class);\n+            producer.setLiquibaseConfig(liquibaseConfig);\n+        };\n+    }\n+\n+    public void migrate(BeanContainer container) throws LiquibaseException {\n+        Liquibase liquibase = container.instance(Liquibase.class);\n+        liquibase.update(new Contexts());\n+    }\n+\n+}",
    "output": "[BAEL-3443] How To Write A Quarkus Extension (#8260)\n\n* quarkus extension\r\n\r\n* add the extension module to default-first profile.\r\n\r\n* 1.0.0.CR1 ==> 1.0.0.CR2\r\n\r\n* Quarkus version ==> 1.0.0.Final\r\n\r\n* remove comment.\r\n\r\n* reorder module builds"
  },
  {
    "input": "diff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/Application.java b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/Application.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/Application.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/Application.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.form_submission;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+\n+@SpringBootApplication\n+public class Application extends SpringBootServletInitializer {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/controllers/FeedbackForm.java b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/controllers/FeedbackForm.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/controllers/FeedbackForm.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/controllers/FeedbackForm.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.form_submission.controllers;\n+\n+import com.baeldung.form_submission.model.Feedback;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+public class FeedbackForm {\n+\n+    @GetMapping(path = \"/feedback\")\n+    public String getFeedbackForm(Model model) {\n+        Feedback feedback = new Feedback();\n+        model.addAttribute(\"feedback\", feedback);\n+        return \"feedback\";\n+    }\n+\n+    @PostMapping(\n+      path = \"/web/feedback\",\n+      consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})\n+    public String handleBrowserSubmissions(Feedback feedback) throws Exception {\n+        // Save feedback data\n+        return \"redirect:/feedback/success\";\n+    }\n+\n+    @GetMapping(\"/feedback/success\")\n+    public ResponseEntity<String> getSuccess() {\n+        return new ResponseEntity<String>(\"Thank you for submitting feedback.\", HttpStatus.OK);\n+    }\n+\n+    @PostMapping(\n+      path = \"/feedback\",\n+      consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})\n+    public ResponseEntity<String> handleNonBrowserSubmissions(@RequestParam MultiValueMap paramMap) throws Exception {\n+        // Save feedback data\n+        return new ResponseEntity<String>(\"Thank you for submitting feedback\", HttpStatus.OK);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/model/Feedback.java b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/model/Feedback.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/model/Feedback.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/form_submission/model/Feedback.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.form_submission.model;\n+\n+public class Feedback {\n+    private String emailId;\n+    private String comment;\n+\n+    public String getEmailId() {\n+        return this.emailId;\n+    }\n+\n+    public void setEmailId(String emailId) {\n+        this.emailId = emailId;\n+    }\n+\n+    public String getComment() {\n+        return this.comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        this.comment = comment;\n+    }\n+\n+}",
    "output": "BAEL-3307: Handling URL Encoded data in Form Submission in a Spring REST Service (#8255)"
  },
  {
    "input": "diff --git a/ninja/src/main/java/conf/Filters.java b/ninja/src/main/java/conf/Filters.java\n--- a/ninja/src/main/java/conf/Filters.java\n+++ b/ninja/src/main/java/conf/Filters.java\n@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (C) 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package conf;\n+\n+import java.util.List;\n+import ninja.Filter;\n+\n+public class Filters implements ninja.application.ApplicationFilters {\n+\n+    @Override\n+    public void addFilters(List<Class<? extends Filter>> filters) {\n+        // Add your application - wide filters here\n+        // filters.add(MyFilter.class);\n+    }\n+}\n\ndiff --git a/ninja/src/main/java/conf/Module.java b/ninja/src/main/java/conf/Module.java\n--- a/ninja/src/main/java/conf/Module.java\n+++ b/ninja/src/main/java/conf/Module.java\n@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (C) 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package conf;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Singleton;\n+\n+import services.UserService;\n+import services.UserServiceImpl;\n+\n+@Singleton\n+public class Module extends AbstractModule {\n+    \n+\n+    protected void configure() {\n+        \n+        // bind your injections here!\n+        bind(UserService.class).to(UserServiceImpl.class);\n+        \n+    }\n+\n+}\n\ndiff --git a/ninja/src/main/java/conf/Routes.java b/ninja/src/main/java/conf/Routes.java\n--- a/ninja/src/main/java/conf/Routes.java\n+++ b/ninja/src/main/java/conf/Routes.java\n@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (C) 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package conf;\n+\n+\n+import ninja.AssetsController;\n+import ninja.Router;\n+import ninja.application.ApplicationRoutes;\n+import controllers.ApplicationController;\n+\n+public class Routes implements ApplicationRoutes {\n+\n+    @Override\n+    public void init(Router router) {  \n+        \n+        router.GET().route(\"/\").with(ApplicationController::index);\n+        router.GET().route(\"/hello_world.json\").with(ApplicationController::helloWorldJson);\n+        \n+ \n+        ///////////////////////////////////////////////////////////////////////\n+        // Assets (pictures / javascript)\n+        ///////////////////////////////////////////////////////////////////////    \n+        router.GET().route(\"/assets/webjars/{fileName: .*}\").with(AssetsController::serveWebJars);\n+        router.GET().route(\"/assets/{fileName: .*}\").with(AssetsController::serveStatic);\n+        \n+        ///////////////////////////////////////////////////////////////////////\n+        // Index / Catchall shows index page\n+        ///////////////////////////////////////////////////////////////////////\n+        router.GET().route(\"/.*\").with(ApplicationController::index);\n+    }\n+\n+}\n\ndiff --git a/ninja/src/main/java/controllers/ApplicationController.java b/ninja/src/main/java/controllers/ApplicationController.java\n--- a/ninja/src/main/java/controllers/ApplicationController.java\n+++ b/ninja/src/main/java/controllers/ApplicationController.java\n@@ -0,0 +1,36 @@\n+package controllers;\n+\n+import ninja.Result;\n+import ninja.Results;\n+import services.UserService;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import com.google.inject.Singleton;\n+\n+@Singleton\n+public class ApplicationController {\n+    \n+    private static Log logger = LogFactory.getLog(ApplicationController.class);\n+    \n+    @Inject\n+    UserService userService;\n+\n+    public Result index() {\n+        return Results.html();\n+    }\n+    \n+    public Result helloWorldJson() {\n+        SimplePojo simplePojo = new SimplePojo();\n+        simplePojo.content = \"Hello World! Hello Json!\";\n+        logger.info(userService.getUserName());\n+        return Results.json().render(simplePojo);\n+    }\n+    \n+    public static class SimplePojo {\n+        public String content;\n+    }\n+    \n+}\n\ndiff --git a/ninja/src/main/java/services/UserService.java b/ninja/src/main/java/services/UserService.java\n--- a/ninja/src/main/java/services/UserService.java\n+++ b/ninja/src/main/java/services/UserService.java\n@@ -0,0 +1,7 @@\n+package services;\n+\n+public interface UserService {\n+    \n+    String getUserName();\n+\n+}\n\ndiff --git a/ninja/src/main/java/services/UserServiceImpl.java b/ninja/src/main/java/services/UserServiceImpl.java\n--- a/ninja/src/main/java/services/UserServiceImpl.java\n+++ b/ninja/src/main/java/services/UserServiceImpl.java\n@@ -0,0 +1,10 @@\n+package services;\n+\n+public class UserServiceImpl implements UserService {\n+    \n+    @Override\n+    public String getUserName() {\n+        return \"Eugen Parashic\";\n+    }\n+\n+}\n\ndiff --git a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n--- a/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n+++ b/ninja/src/test/java/controllers/ApiControllerDocTesterTest.java\n@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (C) 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Copyright (C) 2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package controllers;\n+\n+\n+import org.junit.Test;\n+\n+import ninja.NinjaDocTester;\n+import org.doctester.testbrowser.Request;\n+import org.doctester.testbrowser.Response;\n+import org.hamcrest.CoreMatchers;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertThat;\n+\n+public class ApiControllerDocTesterTest extends NinjaDocTester {\n+    \n+    String URL_INDEX = \"/\";\n+    String URL_HELLO_WORLD_JSON = \"/hello_world.json\";\n+    \n+    @Test\n+    public void testGetIndex() {\n+    \n+        Response response = makeRequest(\n+                Request.GET().url(\n+                        testServerUrl().path(URL_INDEX)));\n+\n+        assertThat(response.payload, containsString(\"Hello World!\"));\n+        assertThat(response.payload, containsString(\"BAM!\"));\n+\n+\n+    }\n+    \n+    @Test\n+    public void testGetHelloWorldJson() {\n+    \n+        Response response = makeRequest(\n+                Request.GET().url(\n+                        testServerUrl().path(URL_HELLO_WORLD_JSON)));\n+\n+        ApplicationController.SimplePojo simplePojo \n+                = response.payloadJsonAs(ApplicationController.SimplePojo.class);\n+        \n+        assertThat(simplePojo.content, CoreMatchers.equalTo(\"Hello World! Hello Json!\"));\n+\n+    \n+    }\n+\n+}",
    "output": "Initial commit"
  },
  {
    "input": "diff --git a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n--- a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n@@ -50,7 +50,8 @@ private Predicate<String> paths() {\n     }\n \n     private ApiInfo apiInfo() {\n-        return new ApiInfo(\"Springfox API specification\", \n+        return new ApiInfo(\n+          \"Springfox API specification\", \n           \"User REST and Spring Data APIs\", \n           \"\", \n           \"\", ",
    "output": "PR fix"
  },
  {
    "input": "diff --git a/spring-mvc-simple/src/main/java/com/baeldung/spring/requestparam/RequestParamController.java b/spring-mvc-simple/src/main/java/com/baeldung/spring/requestparam/RequestParamController.java\n--- a/spring-mvc-simple/src/main/java/com/baeldung/spring/requestparam/RequestParamController.java\n+++ b/spring-mvc-simple/src/main/java/com/baeldung/spring/requestparam/RequestParamController.java\n@@ -2,6 +2,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -31,6 +32,12 @@ public String addFoo(@RequestParam(name = \"id\") String fooId, @RequestParam Stri\n     public String getFoos2(@RequestParam(required = false) String id){ \n         return \"ID: \" + id;\n     }\n+\n+    @GetMapping(\"/api/foosOptional\")\n+    @ResponseBody\n+    public String getFoosOptional(@RequestParam Optional<String> id){\n+        return \"ID: \" + id.orElseGet(() -> \"not provided\");\n+    }\n     \n     @GetMapping(\"/api/foos3\")\n     @ResponseBody",
    "output": "BAEL-3226: Add java.util.Optional @RequestParam example (#8279)"
  },
  {
    "input": "diff --git a/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java b/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n--- a/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n+++ b/java-numbers/src/main/java/com/baeldung/casting/DoubleToInteger.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.casting;\n+\n+public class DoubleToInteger {\n+\n+    static Double value = 99999.999;\n+\n+    public static void main(String[] args) {\n+\n+        System.out.println(usingIntValue(value));\n+\n+        System.out.println(usingMathRound(value));\n+        System.out.println(usingMathCeil(value));\n+\n+        System.out.println(usingMathFloor(value));\n+        System.out.println(usingMathAbs(value));\n+    }\n+\n+    public static Integer usingIntValue(Double value) {\n+        return value.intValue();\n+    }\n+\n+    public static Integer usingMathRound(Double value) {\n+        return (int) Math.round(value);\n+    }\n+\n+    public static Integer usingMathCeil(Double value) {\n+        return (int) Math.ceil(value);\n+    }\n+\n+    public static Integer usingMathFloor(Double value) {\n+        return (int) Math.floor(value);\n+    }\n+\n+    public static Integer usingMathAbs(Double value) {\n+        return (int) Math.abs(value);\n+    }\n+\n+    public static Integer usingCast(Double value) {\n+        return (int) value.doubleValue();\n+    }\n+\n+}",
    "output": "Double to Integer Casting"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java\n@@ -9,7 +9,6 @@\n @CucumberOptions(\n   features = {\"classpath:features/calculator.feature\", \"classpath:features/calculator-scenario-outline.feature\"}\n   , plugin = {\"pretty\", \"json:target/reports/json/calculator.json\"}\n-  , glue = {\"com.baeldung.cucumber.calculator\"}\n )\n public class CalculatorIntegrationTest {\n }",
    "output": "BAEL-3444: Fixed calculator unit tests due to incorrect Cucumber glue directory."
  },
  {
    "input": "diff --git a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n--- a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n@@ -50,8 +50,14 @@ private Predicate<String> paths() {\n     }\n \n     private ApiInfo apiInfo() {\n-        return new ApiInfo(\"Springfox API specification\", \"User REST and Spring Data APIs\", \n-          \"\", \"\", null, \"License of API\", \"API license URL\", Collections.emptyList());\n+        return new ApiInfo(\"Springfox API specification\", \n+          \"User REST and Spring Data APIs\", \n+          \"\", \n+          \"\", \n+          null, \n+          \"License of API\", \n+          \"API license URL\", \n+          Collections.emptyList());\n     }\n \n     @Bean\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/model/User.java b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n--- a/springfox/src/main/java/com/baeldung/springfox/model/User.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n@@ -8,41 +8,41 @@\n import javax.persistence.Entity;\n \n @Entity\n-public class User{\n-    \n+public class User {\n+\n     @Id\n     private Long id;\n-    \n+\n     @NotNull(message = \"First Name cannot be null\")\n     private String firstName;\n-    \n+\n     @Min(value = 15, message = \"Age should not be less than 15\")\n     @Max(value = 65, message = \"Age should not be greater than 65\")\n     private int age;\n-    \n+\n     @Email(regexp=\".@.\\\\..*\", message = \"Email should be valid\")\n     private String email;\n-    \n+\n     public Long getId() {\n         return id;\n     }\n-    \n+\n     public void setId(Long id) {\n         this.id = id;\n     }\n-    \n+\n     public String getFirstName() {\n         return firstName;\n     }\n-    \n+\n     public void setFirstName(String firstName) {\n         this.firstName = firstName;\n     }\n-    \n+\n     public String getEmail() {\n         return email;\n     }\n-    \n+\n     public void setEmail(String email) {\n         this.email = email;\n     }\n@@ -54,5 +54,5 @@ public int getAge() {\n     public void setAge(int age) {\n         this.age = age;\n     }\n-    \n-  }\n+\n+}",
    "output": "Springfox - PR review fixes"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java b/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n--- a/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n+++ b/core-java-modules/core-java-jvm/src/main/java/com/baeldung/exitvshalt/JvmExitAndHaltDemo.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JvmExitAndHaltDemo {\n+\n+    private static Logger LOGGER = LoggerFactory.getLogger(JvmExitAndHaltDemo.class);\n+\n+    static {\n+        Runtime.getRuntime()\n+            .addShutdownHook(new Thread(() -> {\n+                LOGGER.info(\"Shutdown hook initiated.\");\n+            }));\n+    }\n+\n+    public void processAndExit() {\n+        process();\n+        LOGGER.info(\"Calling System.exit().\");\n+        System.exit(0);\n+    }\n+\n+    public void processAndHalt() {\n+        process();\n+        LOGGER.info(\"Calling Runtime.getRuntime().halt().\");\n+        Runtime.getRuntime()\n+            .halt(0);\n+    }\n+\n+    private void process() {\n+        LOGGER.info(\"Process started.\");\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoUnitTest.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.junit.Test;\n+\n+public class JvmExitDemoUnitTest {\n+\n+    JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n+\n+    @Test\n+    public void givenProcessComplete_whenExitCalled_thenTriggerShutdownHook() {\n+        jvmExitAndHaltDemo.processAndExit();\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n--- a/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n+++ b/core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoUnitTest.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.exitvshalt;\n+\n+import org.junit.Test;\n+\n+public class JvmHaltDemoUnitTest {\n+\n+    JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();\n+\n+    @Test\n+    public void givenProcessComplete_whenHaltCalled_thenDoNotTriggerShutdownHook() {\n+        jvmExitAndHaltDemo.processAndHalt();\n+    }\n+\n+}",
    "output": "BAEL-3525: System.exit() vs Runtime.getRuntime().halt()"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n@@ -21,7 +21,7 @@ public class OkHttpTimeoutLiveTest {\n     private static final String HTTPS_ADDRESS_DELAY_2 = \"https://httpbin.org/delay/2\";\n \n     @Test\n-    public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n+    public void whenConnectTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .connectTimeout(10, TimeUnit.MILLISECONDS)\n@@ -41,7 +41,7 @@ public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenReadTimeoutExceededThenSocketTimeoutException() {\n+    public void whenReadTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .readTimeout(10, TimeUnit.MILLISECONDS)\n@@ -61,7 +61,7 @@ public void whenReadTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n+    public void whenWriteTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .writeTimeout(10, TimeUnit.MILLISECONDS)\n@@ -82,7 +82,7 @@ public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenCallTimeoutExceededThenInterruptedIOException() {\n+    public void whenCallTimeoutExceeded_thenInterruptedIOException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .callTimeout(1, TimeUnit.SECONDS)\n@@ -102,7 +102,7 @@ public void whenCallTimeoutExceededThenInterruptedIOException() {\n     }\n \n     @Test\n-    public void whenPerRequestTimeoutExtendedThenResponseSuccess() throws IOException {\n+    public void whenPerRequestTimeoutExtended_thenResponseSuccess() throws IOException {\n         // Given\n         OkHttpClient defaultClient = new OkHttpClient.Builder()\n                 .readTimeout(1, TimeUnit.SECONDS)",
    "output": "Merge pull request #8280 from kwoyke/BAEL-11410\n\nBAEL-11410: Fix test methods' names"
  },
  {
    "input": "diff --git a/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java b/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n--- a/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n+++ b/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n@@ -21,19 +21,19 @@ public OrderController(OrderService orderService) {\n         this.orderService = orderService;\n     }\n \n-    @PostMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n     CreateOrderResponse createOrder(@RequestBody final CreateOrderRequest createOrderRequest) {\n         final UUID id = orderService.createOrder(createOrderRequest.getProduct());\n \n         return new CreateOrderResponse(id);\n     }\n \n-    @PostMapping(value = \"/{id}/products\", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    @PostMapping(value = \"/{id}/products\", consumes = MediaType.APPLICATION_JSON_VALUE)\n     void addProduct(@PathVariable final UUID id, @RequestBody final AddProductRequest addProductRequest) {\n         orderService.addProduct(id, addProductRequest.getProduct());\n     }\n \n-    @DeleteMapping(value = \"/{id}/products\", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    @DeleteMapping(value = \"/{id}/products\", consumes = MediaType.APPLICATION_JSON_VALUE)\n     void deleteProduct(@PathVariable final UUID id, @RequestParam final UUID productId) {\n         orderService.deleteProduct(id, productId);\n     }",
    "output": "[ BAEL - 2275 ] : Remove UTF from APPLICATION_JSON"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n@@ -21,7 +21,7 @@ public class OkHttpTimeoutLiveTest {\n     private static final String HTTPS_ADDRESS_DELAY_2 = \"https://httpbin.org/delay/2\";\n \n     @Test\n-    public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n+    public void whenConnectTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .connectTimeout(10, TimeUnit.MILLISECONDS)\n@@ -41,7 +41,7 @@ public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenReadTimeoutExceededThenSocketTimeoutException() {\n+    public void whenReadTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .readTimeout(10, TimeUnit.MILLISECONDS)\n@@ -61,7 +61,7 @@ public void whenReadTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n+    public void whenWriteTimeoutExceeded_thenSocketTimeoutException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .writeTimeout(10, TimeUnit.MILLISECONDS)\n@@ -82,7 +82,7 @@ public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenCallTimeoutExceededThenInterruptedIOException() {\n+    public void whenCallTimeoutExceeded_thenInterruptedIOException() {\n         // Given\n         OkHttpClient client = new OkHttpClient.Builder()\n                 .callTimeout(1, TimeUnit.SECONDS)\n@@ -102,7 +102,7 @@ public void whenCallTimeoutExceededThenInterruptedIOException() {\n     }\n \n     @Test\n-    public void whenPerRequestTimeoutExtendedThenResponseSuccess() throws IOException {\n+    public void whenPerRequestTimeoutExtended_thenResponseSuccess() throws IOException {\n         // Given\n         OkHttpClient defaultClient = new OkHttpClient.Builder()\n                 .readTimeout(1, TimeUnit.SECONDS)",
    "output": "BAEL-11410: Fix test methods' names"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n@@ -0,0 +1,136 @@\n+package com.baeldung.okhttp.timeout;\n+\n+import okhttp3.*;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.SocketTimeoutException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+public class OkHttpTimeoutLiveTest {\n+\n+    private static Logger logger = LoggerFactory.getLogger(OkHttpTimeoutLiveTest.class);\n+\n+    private static final String HTTP_NON_ROUTABLE_ADDRESS = \"http://203.0.113.1\";\n+    private static final String HTTPS_ADDRESS_DELAY_2 = \"https://httpbin.org/delay/2\";\n+\n+    @Test\n+    public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        OkHttpClient client = new OkHttpClient.Builder()\n+                .connectTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTP_NON_ROUTABLE_ADDRESS)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenReadTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        OkHttpClient client = new OkHttpClient.Builder()\n+                .readTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        OkHttpClient client = new OkHttpClient.Builder()\n+                .writeTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .post(RequestBody.create(MediaType.parse(\"text/plain\"), create1MBString()))\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenCallTimeoutExceededThenInterruptedIOException() {\n+        // Given\n+        OkHttpClient client = new OkHttpClient.Builder()\n+                .callTimeout(1, TimeUnit.SECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(InterruptedIOException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenPerRequestTimeoutExtendedThenResponseSuccess() throws IOException {\n+        // Given\n+        OkHttpClient defaultClient = new OkHttpClient.Builder()\n+                .readTimeout(1, TimeUnit.SECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        Throwable thrown = catchThrowable(() -> defaultClient.newCall(request).execute());\n+\n+        assertThat(thrown).isInstanceOf(InterruptedIOException.class);\n+\n+        // When\n+        OkHttpClient extendedTimeoutClient = defaultClient.newBuilder()\n+                .readTimeout(5, TimeUnit.SECONDS)\n+                .build();\n+\n+        // Then\n+        Response response = extendedTimeoutClient.newCall(request).execute();\n+        assertThat(response.code()).isEqualTo(200);\n+    }\n+\n+    private void logThrown(Throwable thrown) {\n+        logger.info(\"Thrown: \", thrown);\n+    }\n+\n+    private String create1MBString() {\n+        return new String(new char[512 * 1024]);\n+    }\n+}",
    "output": "Merge pull request #8262 from kwoyke/BAEL-11410\n\nBAEL-11410: A Quick Guide to Timeouts in OkHttp"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.list;\n+package com.baeldung.circularlinkedlist;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,13 +49,11 @@ public void deleteNode(int valueToDelete) {\n             if (currentNode.value == valueToDelete) {\n                 head = head.nextNode;\n                 tail.nextNode = head;\n-                currentNode = null;\n             } else {\n                 do {\n                     Node nextNode = currentNode.nextNode;\n                     if (nextNode.value == valueToDelete) {\n                         currentNode.nextNode = nextNode.nextNode;\n-                        nextNode = null;\n                         break;\n                     }\n                     currentNode = currentNode.nextNode;\n\ndiff --git a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.list;\n+package com.baeldung.circularlinkedlist;\n \n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;",
    "output": "Merge pull request #8269 from radhe-sravan/master\n\nCircular linked list Java implementation"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n@@ -4,29 +4,29 @@ public class SortedArrays {\n \n     public static int[] merge(int[] first, int[] second) {\n \n-        int m = first.length;\n-        int n = second.length;\n+        int firstLength = first.length;\n+        int secondLength = second.length;\n \n-        int i, j, k;\n-        i = j = k = 0;\n+        int[] result = new int[firstLength + secondLength];\n \n-        int[] result = new int[m + n];\n+        int firstPosition, secondPosition, resultPosition;\n+        firstPosition = secondPosition = resultPosition = 0;\n \n-        while (i < m && j < n) {\n+        while (firstPosition < firstLength && secondPosition < secondLength) {\n \n-            if (first[i] < second[j]) {\n-                result[k++] = first[i++];\n+            if (first[firstPosition] < second[secondPosition]) {\n+                result[resultPosition++] = first[firstPosition++];\n             } else {\n-                result[k++] = second[j++];\n+                result[resultPosition++] = second[secondPosition++];\n             }\n         }\n \n-        while (i < m) {\n-            result[k++] = first[i++];\n+        while (firstPosition < firstLength) {\n+            result[resultPosition++] = first[firstPosition++];\n         }\n \n-        while (j < n) {\n-            result[k++] = second[j++];\n+        while (secondPosition < secondLength) {\n+            result[resultPosition++] = second[secondPosition++];\n         }\n \n         return result;",
    "output": "How to merge sorted arrays: Renamed the variables"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n--- a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n+++ b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n@@ -85,4 +85,13 @@ void givenArrayWithoutMissingInteger_whenSearchInUnsortedArrayBooleanArray_thenA\n \n         assertThat(result).isEqualTo(input.length);\n     }\n+\n+    @Test\n+    void givenArrayFromArticleComment_whenSearchInUnsortedArrayBooleanArray_thenZero() {\n+        int[] input = new int[] {11, 13, 14, 15};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n+\n+        assertThat(result).isEqualTo(0);\n+    }\n }\n\\ No newline at end of file",
    "output": "[BAEL-3348] Added test to prove algorithm behaviour on array suggested in article comment"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n@@ -32,34 +32,29 @@ public void setup() {\n     public void tearDown() {\n         System.setOut(System.out);\n     }\n-\n+    \n     private BinaryTreeModel createBalancedTree() {\n-\n+        \n         BinaryTreeModel root = new BinaryTreeModel(\"root\");\n-\n+        \n         BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n         BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n         root.setLeft(node1);\n         root.setRight(node2);\n-\n+         \n         BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n         BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n         node1.setLeft(node3);\n         node1.setRight(node4);\n-\n-        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n-        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n-        node2.setLeft(node5);\n-        node2.setRight(node6);\n-\n+         \n+        node2.setLeft(new BinaryTreeModel(\"node5\"));\n+        node2.setRight(new BinaryTreeModel(\"node6\"));\n+         \n         BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n         node3.setLeft(node7);\n-\n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        BinaryTreeModel node9 = new BinaryTreeModel(\"node9\");\n-        node7.setLeft(node8);\n-        node7.setRight(node9);\n-\n+        node7.setLeft(new BinaryTreeModel(\"node8\"));\n+        node7.setRight(new BinaryTreeModel(\"node9\"));\n+        \n         return root;\n     }\n \n@@ -68,9 +63,8 @@ private BinaryTreeModel createLeftUnbalancedTree() {\n         BinaryTreeModel root = new BinaryTreeModel(\"root\");\n \n         BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n-        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n         root.setLeft(node1);\n-        root.setRight(node2);\n+        root.setRight(new BinaryTreeModel(\"node2\"));\n         \n         BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n         node1.setLeft(node3);\n@@ -87,8 +81,7 @@ private BinaryTreeModel createLeftUnbalancedTree() {\n         BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n         node6.setLeft(node7);\n         \n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        node7.setLeft(node8);\n+        node7.setLeft(new BinaryTreeModel(\"node8\"));\n \n         return root;\n     }\n@@ -97,9 +90,8 @@ private BinaryTreeModel createRightUnbalancedTree() {\n \n         BinaryTreeModel root = new BinaryTreeModel(\"root\");\n \n-        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n         BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n-        root.setLeft(node1);\n+        root.setLeft(new BinaryTreeModel(\"node1\"));\n         root.setRight(node2);\n         \n         BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n@@ -117,8 +109,7 @@ private BinaryTreeModel createRightUnbalancedTree() {\n         BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n         node6.setRight(node7);\n         \n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        node7.setRight(node8);\n+        node7.setRight(new BinaryTreeModel(\"node8\"));\n \n         return root;\n     }",
    "output": "condense a little bit the code of test data"
  },
  {
    "input": "diff --git a/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java b/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n--- a/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n@@ -1,11 +0,0 @@\n-package com.baeldung.springfox.repository;\n-\n-import org.springframework.data.repository.CrudRepository;\n-import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n-\n-import com.baeldung.springfox.model.User;\n-\n-@RepositoryRestResource(collectionResourceRel = \"users\", path = \"users\")\n-public interface UserRestRepository extends CrudRepository<User, Long> {\n-\n-}",
    "output": "Springfox - pom.xml updated, removed UserRestRepository"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/tx/ManualTransactionIntegrationTest.java b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/tx/ManualTransactionIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/tx/ManualTransactionIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/tx/ManualTransactionIntegrationTest.java\n@@ -77,7 +77,7 @@ void givenAPayment_WhenMarkAsRollback_ThenShouldRollback() {\n         });\n \n         assertThat(entityManager\n-                .createQuery(\"select p from Payment p\")\n+                .createQuery(\"select p from Payment p\", Payment.class)\n                 .getResultList()).isEmpty();\n     }\n \n@@ -104,7 +104,7 @@ void givenTwoPayments_WhenRefIsDuplicate_ThenShouldRollback() {\n         }\n \n         assertThat(entityManager\n-                .createQuery(\"select p from Payment p\")\n+                .createQuery(\"select p from Payment p\", Payment.class)\n                 .getResultList()).isEmpty();\n     }\n \n@@ -122,7 +122,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n         });\n \n         assertThat(entityManager\n-                .createQuery(\"select p from Payment p\")\n+                .createQuery(\"select p from Payment p\", Payment.class)\n                 .getResultList()).hasSize(1);\n     }\n \n@@ -145,7 +145,7 @@ void givenAPayment_WhenUsingTxManager_ThenShouldCommit() {\n         }\n \n         assertThat(entityManager\n-                .createQuery(\"select p from Payment p\")\n+                .createQuery(\"select p from Payment p\", Payment.class)\n                 .getResultList()).hasSize(1);\n     }\n ",
    "output": "moved programmatic transaction examples from spring-data-jpa-3 to spring-data-jpa-4"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/Application.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/Application.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/Application.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/Application.java\n@@ -2,8 +2,10 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n \n @SpringBootApplication\n+@EnableJpaRepositories\n public class Application {\n \n     public static void main(String[] args) {\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/daos/CustomerRepository.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/daos/CustomerRepository.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/daos/CustomerRepository.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/daos/CustomerRepository.java\n@@ -1,6 +1,8 @@\n package com.baeldung.boot.daos;\n \n import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n import com.baeldung.boot.domain.Customer;\n \n@@ -10,6 +12,8 @@\n  * @author ysharma2512\n  *\n  */\n+@Repository\n+@Transactional\n public interface CustomerRepository extends CrudRepository<Customer, Long>{\n \n }\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/web/controllers/CustomerController.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/web/controllers/CustomerController.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/web/controllers/CustomerController.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/boot/web/controllers/CustomerController.java\n@@ -4,7 +4,6 @@\n import java.util.Arrays;\n import java.util.List;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RestController;\n@@ -22,7 +21,6 @@\n @RestController\n public class CustomerController {\n \n-    @Autowired\n     CustomerRepository customerRepository;\n \n     public CustomerController(CustomerRepository customerRepository2) {\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n@@ -1,16 +1,13 @@\n package com.baeldung.repository;\n \n-import com.baeldung.model.BasicUser;\n-import org.springframework.data.jpa.repository.EntityGraph;\n+import java.util.Optional;\n+\n import org.springframework.data.jpa.repository.JpaRepository;\n \n-import java.util.Optional;\n+import com.baeldung.model.BasicUser;\n \n public interface UserRepository extends JpaRepository<BasicUser, Long> {\n \n-    @EntityGraph(attributePaths = \"permissions\")\n-    Optional<BasicUser> findDetailedByUsername(String username);\n-\n     Optional<BasicUser> findSummaryByUsername(String username);\n \n     Optional<BasicUser> findByUsername(String username);\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/Application.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/Application.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/Application.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/Application.java\n@@ -2,8 +2,12 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n \n @SpringBootApplication\n+@EnableJpaRepositories\n+@EntityScan\n public class Application {\n \n     public static void main(String[] args) {\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/model/BasicUser.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/model/BasicUser.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/model/BasicUser.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/model/BasicUser.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.model;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+\n+@Entity\n+@Table(name = \"users\")\n+public class BasicUser {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String username;\n+\n+    @ElementCollection\n+    private Set<String> permissions;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public Set<String> getPermissions() {\n+        return permissions;\n+    }\n+\n+    public void setPermissions(Set<String> permissions) {\n+        this.permissions = permissions;\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/repository/BasicUserRepository.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/repository/BasicUserRepository.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/repository/BasicUserRepository.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/repository/BasicUserRepository.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.repository;\n+\n+import java.util.Optional;\n+\n+import org.springframework.data.jpa.repository.EntityGraph;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.baeldung.model.BasicUser;\n+\n+@Repository\n+@Transactional\n+public interface BasicUserRepository extends JpaRepository<BasicUser, Long> {\n+    \n+    @EntityGraph(attributePaths = \"permissions\")\n+    Optional<BasicUser> findDetailedByUsername(String username);\n+\n+}\n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/service/SimpleUserService.java b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/service/SimpleUserService.java\n--- a/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/service/SimpleUserService.java\n+++ b/persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/service/SimpleUserService.java\n@@ -1,18 +1,19 @@\n package com.baeldung.service;\n \n-import com.baeldung.model.BasicUser;\n-import com.baeldung.repository.UserRepository;\n+import java.util.Optional;\n+\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.Optional;\n+import com.baeldung.model.BasicUser;\n+import com.baeldung.repository.BasicUserRepository;\n \n @Service\n public class SimpleUserService implements UserService {\n \n-    private final UserRepository userRepository;\n+    private final BasicUserRepository userRepository;\n \n-    public SimpleUserService(UserRepository userRepository) {\n+    public SimpleUserService(BasicUserRepository userRepository) {\n         this.userRepository = userRepository;\n     }\n \n\ndiff --git a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n@@ -1,14 +1,16 @@\n package com.baeldung.osiv;\n \n+import com.baeldung.Application;\n import com.baeldung.model.BasicUser;\n-import com.baeldung.repository.UserRepository;\n+import com.baeldung.repository.BasicUserRepository;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.web.servlet.MockMvc;\n \n import java.util.Arrays;\n@@ -21,11 +23,12 @@\n \n @SpringBootTest\n @AutoConfigureMockMvc\n+@ContextConfiguration(classes = Application.class)\n @ActiveProfiles(\"test\")\n class UserControllerIntegrationTest {\n \n     @Autowired\n-    private UserRepository userRepository;\n+    private BasicUserRepository userRepository;\n \n     @Autowired\n     private MockMvc mockMvc;",
    "output": "moved OSIV examples from spring-data-jpa-3 to spring-data-jpa-4"
  },
  {
    "input": "diff --git a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n@@ -5,8 +5,6 @@\n \n import org.junit.Test;\n \n-import com.baeldung.circularlinkedlist.CircularLinkedList;\n-\n public class CircularLinkedListUnitTest {\n \n     @Test",
    "output": "Fixed the review comments"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.list;\n+package com.baeldung.circularlinkedlist;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,13 +49,11 @@ public void deleteNode(int valueToDelete) {\n             if (currentNode.value == valueToDelete) {\n                 head = head.nextNode;\n                 tail.nextNode = head;\n-                currentNode = null;\n             } else {\n                 do {\n                     Node nextNode = currentNode.nextNode;\n                     if (nextNode.value == valueToDelete) {\n                         currentNode.nextNode = nextNode.nextNode;\n-                        nextNode = null;\n                         break;\n                     }\n                     currentNode = currentNode.nextNode;\n\ndiff --git a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java\n@@ -1,10 +1,12 @@\n-package com.baeldung.list;\n+package com.baeldung.circularlinkedlist;\n \n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n \n+import com.baeldung.circularlinkedlist.CircularLinkedList;\n+\n public class CircularLinkedListUnitTest {\n \n     @Test",
    "output": "Fixed the review comments"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/timeout/OkHttpTimeoutLiveTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.okhttp;\n+package com.baeldung.okhttp.timeout;\n \n import okhttp3.*;\n import org.junit.Test;",
    "output": "BAEL-11410: Move OkHttpTimeoutLiveTest to com.baeldung.okhttp.timeout"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.streamreduce.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Rating {\n+\n+    double points;\n+    List<Review> reviews = new ArrayList<>();\n+\n+    public Rating() {}\n+\n+    public void add(Review review) {\n+        reviews.add(review);\n+        computeRating();\n+    }\n+\n+    private double computeRating() {\n+        double totalPoints = reviews.stream().map(Review::getPoints).reduce(0, Integer::sum);\n+        this.points = totalPoints / reviews.size();\n+        return this.points;\n+    }\n+\n+    public static Rating average(Rating r1, Rating r2) {\n+        Rating combined = new Rating();\n+        combined.reviews = new ArrayList<>(r1.reviews);\n+        combined.reviews.addAll(r2.reviews);\n+        combined.computeRating();\n+        return combined;\n+    }\n+\n+    public double getPoints() {\n+        return points;\n+    }\n+\n+    public List<Review> getReviews() {\n+        return reviews;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.streamreduce.entities;\n+\n+public class Review {\n+\n+    int points;\n+    String review;\n+\n+    public Review(int points, String review) {\n+        this.points = points;\n+        this.review = review;\n+    }\n+\n+    public int getPoints() {\n+        return points;\n+    }\n+\n+    public void setPoints(int points) {\n+        this.points = points;\n+    }\n+\n+    public String getReview() {\n+        return review;\n+    }\n+\n+    public void setReview(String review) {\n+        this.review = review;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n@@ -4,6 +4,7 @@ public class User {\n \n     private final String name;\n     private final int age;\n+    private final Rating rating = new Rating();\n \n     public User(String name, int age) {\n         this.name = name;\n@@ -17,7 +18,11 @@ public String getName() {\n     public int getAge() {\n         return age;\n     }\n-    \n+\n+    public Rating getRating() {\n+        return rating;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"User{\" + \"name=\" + name + \", age=\" + age + '}';\n\ndiff --git a/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java b/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n--- a/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n+++ b/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n@@ -1,5 +1,7 @@\n package com.baeldung.streamreduce.tests;\n \n+import com.baeldung.streamreduce.entities.Rating;\n+import com.baeldung.streamreduce.entities.Review;\n import com.baeldung.streamreduce.entities.User;\n import com.baeldung.streamreduce.utilities.NumberUtils;\n import java.util.ArrayList;\n@@ -64,6 +66,31 @@ public void givenUserList_whenReduceWithAgeAccumulatorAndSumCombiner_thenCorrect\n         assertThat(result).isEqualTo(65);\n     }\n \n+    @Test\n+    public void givenUserList_whenReduceWithGreaterAgeAccumulator_thenFindsOldest() {\n+        List<User> users = Arrays.asList(new User(\"John\", 30), new User(\"Alex\", 40), new User(\"Julie\", 35));\n+\n+        User oldest = users.stream().reduce(users.get(0), (user1, user2) -> user1.getAge() >= user2.getAge() ? user1 : user2);\n+\n+        assertThat(oldest).isEqualTo(users.get(1));\n+    }\n+\n+    @Test\n+    public void givenUserListWithRatings_whenReduceWithGreaterAgeAccumulator_thenFindsOldest() {\n+        User john = new User(\"John\", 30);\n+        john.getRating().add(new Review(5, \"\"));\n+        john.getRating().add(new Review(3, \"not bad\"));\n+        User julie = new User(\"Julie\", 35);\n+        john.getRating().add(new Review(4, \"great!\"));\n+        john.getRating().add(new Review(2, \"terrible experience\"));\n+        john.getRating().add(new Review(4, \"\"));\n+        List<User> users = Arrays.asList(john, julie);\n+\n+        Rating averageRating = users.stream().reduce(new Rating(), (rating, user) -> Rating.average(rating, user.getRating()), Rating::average);\n+\n+        assertThat(averageRating.getPoints()).isEqualTo(3.6);\n+    }\n+\n     @Test\n     public void givenStringList_whenReduceWithParallelStream_thenCorrect() {\n         List<String> letters = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\");",
    "output": "Merge pull request #8160 from alessiostalla/BAEL-18410\n\n#BAEL-18410 add code sample for reduce with complex objects"
  },
  {
    "input": "diff --git a/spring-rest-testing/src/test/java/org/baeldung/SpringContextIntegrationTest.java b/spring-rest-testing/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n--- a/spring-rest-testing/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-rest-testing/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n@@ -0,0 +1,16 @@\n+package org.baeldung;\n+\n+import org.baeldung.spring.Application;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Application.class)\n+public class SpringContextIntegrationTest {\n+\n+    @Test\n+    public void whenSpringContextIsBootstrapped_thenNoExceptions() {\n+    }\n+}",
    "output": "Merge pull request #8254 from sjmillington/rest-move-3\n\nRest move 3"
  },
  {
    "input": "diff --git a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n--- a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n@@ -12,7 +12,9 @@\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Import;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n+\n import com.baeldung.springfox.plugin.EmailAnnotationPlugin;\n+\n import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;\n import springfox.documentation.service.ApiInfo;\n import springfox.documentation.spi.DocumentationType;\n@@ -36,25 +38,20 @@ public static void main(String[] args) {\n     @Bean\n     public Docket springfoxAppInfo() {\n         return new Docket(DocumentationType.SWAGGER_2)\n-            .groupName(\"baeldung-springfox-api\")\n-            .select()\n-            .paths(paths())\n-            .build()\n-            .apiInfo(apiInfo());\n+          .groupName(\"baeldung-springfox-api\")\n+          .select()\n+          .paths(paths())\n+          .build()\n+          .apiInfo(apiInfo());\n     }\n \n     private Predicate<String> paths() {\n         return regex(\"/users.*\").or(regex(\"/api.*\"));       \n     }\n \n     private ApiInfo apiInfo() {\n-        return new ApiInfo(\n-            \"Springfox API specification\", \n-            \"User REST and Spring Data APIs\", \n-            \"\", \n-            \"\", \n-            null, \n-            \"License of API\", \"API license URL\", Collections.emptyList());\n+        return new ApiInfo(\"Springfox API specification\", \"User REST and Spring Data APIs\", \n+          \"\", \"\", null, \"License of API\", \"API license URL\", Collections.emptyList());\n     }\n \n     @Bean\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n--- a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n@@ -1,15 +1,14 @@\n package com.baeldung.springfox.controller;\n \n-import static org.springframework.web.bind.annotation.RequestMethod.GET;\n-import static org.springframework.web.bind.annotation.RequestMethod.POST;\n-\n import java.util.Optional;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n@@ -25,16 +24,14 @@ public class UserController {\n     @Autowired\n     private UserRepository userRepository;\n \n-    @RequestMapping(method = POST)\n-    @ResponseBody\n-    public ResponseEntity<User> createUser(@RequestBody User user) {\n+    @PostMapping\n+    public @ResponseBody ResponseEntity<User> createUser(@RequestBody User user) {\n         userRepository.save(user);\n         return new ResponseEntity<>(user, HttpStatus.OK);\n     }\n     \n-    @RequestMapping(method = GET)\n-    @ResponseBody\n-    public ResponseEntity<User> getUser(@RequestParam Long id) {\n+    @GetMapping\n+    public @ResponseBody ResponseEntity<User> getUser(@RequestParam Long id) {\n         Optional<User> user = userRepository.findById(id);\n         return new ResponseEntity<>(user.get(), HttpStatus.OK);\n     }\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/model/User.java b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n--- a/springfox/src/main/java/com/baeldung/springfox/model/User.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n@@ -16,8 +16,6 @@ public class User{\n     @NotNull(message = \"First Name cannot be null\")\n     private String firstName;\n     \n-    private String lastName;\n-    \n     @Min(value = 15, message = \"Age should not be less than 15\")\n     @Max(value = 65, message = \"Age should not be greater than 65\")\n     private int age;\n@@ -41,14 +39,6 @@ public void setFirstName(String firstName) {\n         this.firstName = firstName;\n     }\n     \n-    public String getLastName() {\n-        return lastName;\n-    }\n-    \n-    public void setLastName(String lastName) {\n-        this.lastName = lastName;\n-    }\n-    \n     public String getEmail() {\n         return email;\n     }",
    "output": "Springfox - PR review fix"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/combinatorics/Combinatorics.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/combinatorics/Combinatorics.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/combinatorics/Combinatorics.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/combinatorics/Combinatorics.java\n@@ -0,0 +1,67 @@\n+package com.baeldung.algorithms.combinatorics;\n+\n+import java.util.*;\n+\n+import static java.util.Collections.swap;\n+\n+public class Combinatorics {\n+\n+    public static List<List<Integer>> permutations(List<Integer> sequence) {\n+        List<List<Integer>> results = new ArrayList<>();\n+        permutationsInternal(sequence, results, 0);\n+        return results;\n+    }\n+\n+    private static void permutationsInternal(List<Integer> sequence, List<List<Integer>> results, int index) {\n+        if (index == sequence.size() - 1) {\n+            results.add(new ArrayList<>(sequence));\n+        }\n+\n+        for (int i = index; i < sequence.size(); i++) {\n+            swap(sequence, i, index);\n+            permutationsInternal(sequence, results, index + 1);\n+            swap(sequence, i, index);\n+        }\n+    }\n+\n+    public static List<List<Integer>> combinations(List<Integer> inputSet, int k) {\n+        List<List<Integer>> results = new ArrayList<>();\n+        combinationsInternal(inputSet, k, results, new ArrayList<>(), 0);\n+        return results;\n+    }\n+\n+    private static void combinationsInternal(\n+      List<Integer> inputSet, int k, List<List<Integer>> results, ArrayList<Integer> accumulator, int index) {\n+        int leftToAccumulate = k - accumulator.size();\n+        int possibleToAcculumate = inputSet.size() - index;\n+\n+        if (accumulator.size() == k) {\n+            results.add(new ArrayList<>(accumulator));\n+        } else if (leftToAccumulate <= possibleToAcculumate) {\n+            combinationsInternal(inputSet, k, results, accumulator, index + 1);\n+\n+            accumulator.add(inputSet.get(index));\n+            combinationsInternal(inputSet, k, results, accumulator, index + 1);\n+            accumulator.remove(accumulator.size() - 1);\n+        }\n+    }\n+\n+    public static List<List<Character>> powerSet(List<Character> sequence) {\n+        List<List<Character>> results = new ArrayList<>();\n+        powerSetInternal(sequence, results, new ArrayList<>(), 0);\n+        return results;\n+    }\n+\n+    private static void powerSetInternal(\n+      List<Character> set, List<List<Character>> powerSet, List<Character> accumulator, int index) {\n+        if (index == set.size()) {\n+            powerSet.add(new ArrayList<>(accumulator));\n+        } else {\n+            accumulator.add(set.get(index));\n+\n+            powerSetInternal(set, powerSet, accumulator, index + 1);\n+            accumulator.remove(accumulator.size() - 1);\n+            powerSetInternal(set, powerSet, accumulator, index + 1);\n+        }\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/combinatorics/CombinatoricsUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/combinatorics/CombinatoricsUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/combinatorics/CombinatoricsUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/combinatorics/CombinatoricsUnitTest.java\n@@ -0,0 +1,80 @@\n+package com.baeldung.algorithms.combinatorics;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+public class CombinatoricsUnitTest {\n+\n+    @Test\n+    public void givenEmptySequence_whenCallingPermutations_ShouldReturnEmptyList() {\n+        List<Integer> sequence = Arrays.asList();\n+\n+        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n+\n+        assertEquals(0, permutations.size());\n+    }\n+\n+    @Test\n+    public void givenOneElementSequence_whenCallingPermutations_ShouldReturnPermutations() {\n+        List<Integer> sequence = Arrays.asList(1);\n+\n+        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n+\n+        assertEquals(1, permutations.size());\n+        assertEquals(1, permutations.get(0).size());\n+        assertSame(1, permutations.get(0).get(0));\n+    }\n+\n+    @Test\n+    public void givenFourElementsSequence_whenCallingPermutations_ShouldReturnPermutations() {\n+        List<Integer> sequence = Arrays.asList(1, 2, 3, 4);\n+\n+        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n+\n+        assertEquals(24, permutations.size());\n+        assertEquals(24, new HashSet<>(permutations).size());\n+    }\n+\n+    @Test\n+    public void givenTwoElements_whenCalling3Combinations_ShouldReturnEmptyList() {\n+        List<Integer> set = Arrays.asList(1, 2);\n+\n+        List<List<Integer>> combinations = Combinatorics.combinations(set, 3);\n+\n+        assertEquals(0, combinations.size());\n+    }\n+\n+    @Test\n+    public void givenThreeElements_whenCalling3Combinations_ShouldReturnOneCombination() {\n+        List<Integer> set = Arrays.asList(1, 2, 3);\n+\n+        List<List<Integer>> combinations = Combinatorics.combinations(set, 3);\n+\n+        assertEquals(1, combinations.size());\n+        assertEquals(combinations.get(0), Arrays.asList(1, 2, 3));\n+    }\n+\n+    @Test\n+    public void givenFourElements_whenCalling2Combinations_ShouldReturnCombinations() {\n+        List<Integer> set = Arrays.asList(1, 2, 3, 4);\n+\n+        List<List<Integer>> combinations = Combinatorics.combinations(set, 2);\n+\n+        assertEquals(6, combinations.size());\n+        assertEquals(6, new HashSet<>(combinations).size());\n+    }\n+\n+    @Test\n+    public void givenFourElements_whenCallingPowerSet_ShouldReturn15Sets() {\n+        List<Character> sequence = Arrays.asList('a', 'b', 'c', 'd');\n+\n+        List<List<Character>> combinations = Combinatorics.powerSet(sequence);\n+\n+        assertEquals(16, combinations.size());\n+    }\n+}",
    "output": "BAEL-3479 | combinatorics (#8233)\n\n* BAEL-3479 | combinatorics\r\n\r\n* BAEL-3479 | style fix"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n@@ -1,13 +1,11 @@\n package com.baeldung.okhttp;\n \n-import okhttp3.MediaType;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n+import okhttp3.*;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n import java.io.InterruptedIOException;\n import java.net.SocketTimeoutException;\n import java.util.concurrent.TimeUnit;\n@@ -25,7 +23,7 @@ public class OkHttpTimeoutLiveTest {\n     @Test\n     public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n         // Given\n-        final OkHttpClient client = new OkHttpClient.Builder()\n+        OkHttpClient client = new OkHttpClient.Builder()\n                 .connectTimeout(10, TimeUnit.MILLISECONDS)\n                 .build();\n \n@@ -45,7 +43,7 @@ public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n     @Test\n     public void whenReadTimeoutExceededThenSocketTimeoutException() {\n         // Given\n-        final OkHttpClient client = new OkHttpClient.Builder()\n+        OkHttpClient client = new OkHttpClient.Builder()\n                 .readTimeout(10, TimeUnit.MILLISECONDS)\n                 .build();\n \n@@ -65,7 +63,7 @@ public void whenReadTimeoutExceededThenSocketTimeoutException() {\n     @Test\n     public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n         // Given\n-        final OkHttpClient client = new OkHttpClient.Builder()\n+        OkHttpClient client = new OkHttpClient.Builder()\n                 .writeTimeout(10, TimeUnit.MILLISECONDS)\n                 .build();\n \n@@ -84,9 +82,9 @@ public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n     }\n \n     @Test\n-    public void whenCallTimeoutExceededThenSocketTimeoutException() {\n+    public void whenCallTimeoutExceededThenInterruptedIOException() {\n         // Given\n-        final OkHttpClient client = new OkHttpClient.Builder()\n+        OkHttpClient client = new OkHttpClient.Builder()\n                 .callTimeout(1, TimeUnit.SECONDS)\n                 .build();\n \n@@ -103,6 +101,31 @@ public void whenCallTimeoutExceededThenSocketTimeoutException() {\n         logThrown(thrown);\n     }\n \n+    @Test\n+    public void whenPerRequestTimeoutExtendedThenResponseSuccess() throws IOException {\n+        // Given\n+        OkHttpClient defaultClient = new OkHttpClient.Builder()\n+                .readTimeout(1, TimeUnit.SECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        Throwable thrown = catchThrowable(() -> defaultClient.newCall(request).execute());\n+\n+        assertThat(thrown).isInstanceOf(InterruptedIOException.class);\n+\n+        // When\n+        OkHttpClient extendedTimeoutClient = defaultClient.newBuilder()\n+                .readTimeout(5, TimeUnit.SECONDS)\n+                .build();\n+\n+        // Then\n+        Response response = extendedTimeoutClient.newCall(request).execute();\n+        assertThat(response.code()).isEqualTo(200);\n+    }\n+\n     private void logThrown(Throwable thrown) {\n         logger.info(\"Thrown: \", thrown);\n     }",
    "output": "BAEL-11410: Add per request test"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n@@ -0,0 +1,90 @@\n+package com.baeldung.list;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CircularLinkedList {\n+\n+    final Logger LOGGER = LoggerFactory.getLogger(CircularLinkedList.class);\n+\n+    private Node head = null;\n+    private Node tail = null;\n+\n+    public void addNode(int value) {\n+\n+        Node newNode = new Node(value);\n+\n+        if (head == null) {\n+            head = newNode;\n+        } else {\n+            tail.nextNode = newNode;\n+        }\n+\n+        tail = newNode;\n+        tail.nextNode = head;\n+    }\n+\n+    public boolean containsNode(int searchValue) {\n+\n+        Node currentNode = head;\n+\n+        if (head == null) {\n+            return false;\n+        } else {\n+            do {\n+                if (currentNode.value == searchValue) {\n+                    return true;\n+                }\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+            return false;\n+        }\n+    }\n+\n+    public void deleteNode(int valueToDelete) {\n+\n+        Node currentNode = head;\n+\n+        if (head != null) {\n+            if (currentNode.value == valueToDelete) {\n+                head = head.nextNode;\n+                tail.nextNode = head;\n+                currentNode = null;\n+            } else {\n+                do {\n+                    Node nextNode = currentNode.nextNode;\n+                    if (nextNode.value == valueToDelete) {\n+                        currentNode.nextNode = nextNode.nextNode;\n+                        nextNode = null;\n+                        break;\n+                    }\n+                    currentNode = currentNode.nextNode;\n+                } while (currentNode != head);\n+            }\n+        }\n+    }\n+\n+    public void traverseList() {\n+\n+        Node currentNode = head;\n+\n+        if (head != null) {\n+            do {\n+                LOGGER.info(currentNode.value + \" \");\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+        }\n+    }\n+\n+}\n+\n+class Node {\n+\n+    int value;\n+    Node nextNode;\n+\n+    public Node(int value) {\n+        this.value = value;\n+    }\n+\n+}\n\ndiff --git a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n@@ -0,0 +1,56 @@\n+package com.baeldung.list;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class CircularLinkedListUnitTest {\n+\n+    @Test\n+    public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(8));\n+        assertTrue(cll.containsNode(37));\n+    }\n+\n+    @Test\n+    public void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertFalse(cll.containsNode(11));\n+    }\n+\n+    @Test\n+    public void givenACircularLinkedList_WhenDeletingElements_ThenListDoesNotContainThoseElements() {\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(13));\n+        cll.deleteNode(13);\n+        assertFalse(cll.containsNode(13));\n+\n+        assertTrue(cll.containsNode(1));\n+        cll.deleteNode(1);\n+        assertFalse(cll.containsNode(1));\n+\n+        assertTrue(cll.containsNode(46));\n+        cll.deleteNode(46);\n+        assertFalse(cll.containsNode(46));\n+    }\n+\n+    private CircularLinkedList createCircularLinkedList() {\n+        CircularLinkedList cll = new CircularLinkedList();\n+\n+        cll.addNode(13);\n+        cll.addNode(7);\n+        cll.addNode(24);\n+        cll.addNode(1);\n+        cll.addNode(8);\n+        cll.addNode(37);\n+        cll.addNode(46);\n+\n+        return cll;\n+    }\n+\n+}",
    "output": "Merge pull request #8231 from radhe-sravan/master\n\nBAEL-3453 - Circular linked list Java implementation"
  },
  {
    "input": "diff --git a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n--- a/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n+++ b/libraries-http/src/test/java/com/baeldung/okhttp/OkHttpTimeoutLiveTest.java\n@@ -0,0 +1,113 @@\n+package com.baeldung.okhttp;\n+\n+import okhttp3.MediaType;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InterruptedIOException;\n+import java.net.SocketTimeoutException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+public class OkHttpTimeoutLiveTest {\n+\n+    private static Logger logger = LoggerFactory.getLogger(OkHttpTimeoutLiveTest.class);\n+\n+    private static final String HTTP_NON_ROUTABLE_ADDRESS = \"http://203.0.113.1\";\n+    private static final String HTTPS_ADDRESS_DELAY_2 = \"https://httpbin.org/delay/2\";\n+\n+    @Test\n+    public void whenConnectTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        final OkHttpClient client = new OkHttpClient.Builder()\n+                .connectTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTP_NON_ROUTABLE_ADDRESS)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenReadTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        final OkHttpClient client = new OkHttpClient.Builder()\n+                .readTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenWriteTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        final OkHttpClient client = new OkHttpClient.Builder()\n+                .writeTimeout(10, TimeUnit.MILLISECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .post(RequestBody.create(MediaType.parse(\"text/plain\"), create1MBString()))\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    @Test\n+    public void whenCallTimeoutExceededThenSocketTimeoutException() {\n+        // Given\n+        final OkHttpClient client = new OkHttpClient.Builder()\n+                .callTimeout(1, TimeUnit.SECONDS)\n+                .build();\n+\n+        Request request = new Request.Builder()\n+                .url(HTTPS_ADDRESS_DELAY_2)\n+                .build();\n+\n+        // When\n+        Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\n+\n+        // Then\n+        assertThat(thrown).isInstanceOf(InterruptedIOException.class);\n+\n+        logThrown(thrown);\n+    }\n+\n+    private void logThrown(Throwable thrown) {\n+        logger.info(\"Thrown: \", thrown);\n+    }\n+\n+    private String create1MBString() {\n+        return new String(new char[512 * 1024]);\n+    }\n+}",
    "output": "BAEL-11410: Add timeout OkHttp live tests"
  },
  {
    "input": "diff --git a/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java b/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n--- a/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n+++ b/ddd/src/main/java/com/baeldung/ddd/layers/application/controller/OrderController.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.ddd.layers.application;\n+package com.baeldung.ddd.layers.application.controller;\n \n import com.baeldung.ddd.layers.application.request.AddProductRequest;\n import com.baeldung.ddd.layers.application.request.CreateOrderRequest;",
    "output": "[ BAEL-2275 ]: Move controller to controller package"
  },
  {
    "input": "diff --git a/spring-mvc-views/src/main/java/com/baeldung/config/DataSourceConfig.java b/spring-mvc-views/src/main/java/com/baeldung/config/DataSourceConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/config/DataSourceConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/config/DataSourceConfig.java\n@@ -19,8 +19,8 @@ public class DataSourceConfig {\n     public DataSource dataSource() {\n         EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();\n         return builder.setType(EmbeddedDatabaseType.HSQL)\n-                .addScripts(\"db/sql/create-db.sql\", \"db/sql/insert-data.sql\")\n-                .build();\n+            .addScripts(\"db/sql/create-db.sql\", \"db/sql/insert-data.sql\")\n+            .build();\n     }\n \n     @Bean\n\ndiff --git a/spring-mvc-views/src/main/java/com/baeldung/config/SecurityConfig.java b/spring-mvc-views/src/main/java/com/baeldung/config/SecurityConfig.java\n--- a/spring-mvc-views/src/main/java/com/baeldung/config/SecurityConfig.java\n+++ b/spring-mvc-views/src/main/java/com/baeldung/config/SecurityConfig.java\n@@ -26,27 +26,26 @@ public PasswordEncoder passwordEncoder() {\n     @Override\n     protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n         auth.jdbcAuthentication()\n-                .passwordEncoder(passwordEncoder())\n-                .dataSource(dataSource);\n+           .passwordEncoder(passwordEncoder())\n+           .dataSource(dataSource);\n     }\n \n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n \n-        http\n-                .csrf()\n-                .disable()\n-                .authorizeRequests()\n-                .antMatchers(\"/anonymous*\").anonymous()\n-                .antMatchers(\"/login*\").permitAll()\n-                .anyRequest().authenticated()\n-                .and()\n-                .formLogin()\n-                .and()\n-                .logout()\n-                .logoutUrl(\"/logout.do\")\n-                .invalidateHttpSession(true)\n-                .clearAuthentication(true);\n+        http.csrf()\n+           .disable()\n+           .authorizeRequests()\n+           .antMatchers(\"/anonymous*\").anonymous()\n+           .antMatchers(\"/login*\").permitAll()\n+           .anyRequest().authenticated()\n+           .and()\n+           .formLogin()\n+           .and()\n+           .logout()\n+           .logoutUrl(\"/logout.do\")\n+           .invalidateHttpSession(true)\n+           .clearAuthentication(true);\n     }\n \n     @Override",
    "output": "BAEL-3283 Corrected the indentation as per the review comments."
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n@@ -1,40 +1,37 @@\n package com.baeldung.list;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class CircularLinkedList {\n \n-    Node head = null;\n-    Node tail = null;\n+    final Logger LOGGER = LoggerFactory.getLogger(CircularLinkedList.class);\n+\n+    private Node head = null;\n+    private Node tail = null;\n \n     public void addNode(int value) {\n \n         Node newNode = new Node(value);\n \n-        // If no elements are present, make the newly addNodeed node as head\n         if (head == null) {\n             head = newNode;\n-        }\n-        // If there are elements already present, the existing tail should point to new node\n-        else {\n+        } else {\n             tail.nextNode = newNode;\n         }\n \n-        // Irrespective of whether or not elements are added, assign the\n-        // tail to newNode and the nextNode for tail as head\n         tail = newNode;\n         tail.nextNode = head;\n     }\n \n     public boolean containsNode(int searchValue) {\n \n-        // Start traversing from the head\n         Node currentNode = head;\n \n-        // If list is empty no need of traversal and can return false\n         if (head == null) {\n             return false;\n         } else {\n             do {\n-                // Compares the search value with each node value present in the list\n                 if (currentNode.value == searchValue) {\n                     return true;\n                 }\n@@ -46,24 +43,16 @@ public boolean containsNode(int searchValue) {\n \n     public void deleteNode(int valueToDelete) {\n \n-        // Start traversing from the head\n         Node currentNode = head;\n \n-        // If list is non empty\n         if (head != null) {\n-            // If the node to delete is the head node itself,\n-            // update the head as the next node of current head\n-            // and the nextNode of tail as new head\n             if (currentNode.value == valueToDelete) {\n                 head = head.nextNode;\n                 tail.nextNode = head;\n                 currentNode = null;\n             } else {\n                 do {\n-                    // Fetch the next node of current node\n                     Node nextNode = currentNode.nextNode;\n-                    // If the value to delete matches the next node's value,\n-                    // update the next node of current node as the next node of present next node\n                     if (nextNode.value == valueToDelete) {\n                         currentNode.nextNode = nextNode.nextNode;\n                         nextNode = null;\n@@ -77,12 +66,11 @@ public void deleteNode(int valueToDelete) {\n \n     public void traverseList() {\n \n-        // Start traversing from the head\n         Node currentNode = head;\n \n         if (head != null) {\n             do {\n-                System.out.print(currentNode.value + \" \");\n+                LOGGER.info(currentNode.value + \" \");\n                 currentNode = currentNode.nextNode;\n             } while (currentNode != head);\n         }\n@@ -99,4 +87,4 @@ public Node(int value) {\n         this.value = value;\n     }\n \n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n@@ -9,41 +9,37 @@ public class CircularLinkedListUnitTest {\n \n     @Test\n     public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\n-\n         CircularLinkedList cll = createCircularLinkedList();\n \n         assertTrue(cll.containsNode(8));\n         assertTrue(cll.containsNode(37));\n     }\n-    \n+\n     @Test\n     public void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\n-\n         CircularLinkedList cll = createCircularLinkedList();\n \n         assertFalse(cll.containsNode(11));\n     }\n-    \n+\n     @Test\n     public void givenACircularLinkedList_WhenDeletingElements_ThenListDoesNotContainThoseElements() {\n-\n         CircularLinkedList cll = createCircularLinkedList();\n \n         assertTrue(cll.containsNode(13));\n         cll.deleteNode(13);\n         assertFalse(cll.containsNode(13));\n-        \n+\n         assertTrue(cll.containsNode(1));\n         cll.deleteNode(1);\n         assertFalse(cll.containsNode(1));\n-        \n+\n         assertTrue(cll.containsNode(46));\n         cll.deleteNode(46);\n-        assertFalse(cll.containsNode(46));  \n+        assertFalse(cll.containsNode(46));\n     }\n \n     private CircularLinkedList createCircularLinkedList() {\n-\n         CircularLinkedList cll = new CircularLinkedList();\n \n         cll.addNode(13);",
    "output": "Fixed the code as per review comments"
  },
  {
    "input": "diff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.prototype;\n+\n+public class PineTree extends Tree {\n+\n+    private String type;\n+\n+    public PineTree(double mass, double height) {\n+        super(mass, height);\n+        this.type = \"Pine\";\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public Tree copy() {\n+        PineTree pineTreeClone = new PineTree(this.getMass(), this.getHeight());\n+        pineTreeClone.setPosition(this.getPosition());\n+        return pineTreeClone;\n+    }\n+\n+}\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.prototype;\n+\n+public class PlasticTree extends Tree {\n+\n+    private String name;\n+\n+    public PlasticTree(double mass, double height) {\n+        super(mass, height);\n+        this.name = \"PlasticTree\";\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Tree copy() {\n+        PlasticTree plasticTreeClone = new PlasticTree(this.getMass(), this.getHeight());\n+        plasticTreeClone.setPosition(this.getPosition());\n+        return plasticTreeClone;\n+    }\n+\n+}\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n@@ -1,6 +1,6 @@\n package com.baeldung.prototype;\n \n-public class Tree implements Cloneable {\n+public abstract class Tree {\n \n     private double mass;\n     private double height;\n@@ -35,20 +35,10 @@ public Position getPosition() {\n         return position;\n     }\n \n-    @Override\n-    public Tree clone() {\n-        Tree tree = null;\n-        try {\n-            tree = (Tree) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            e.printStackTrace();\n-        }\n-        return tree;\n-    }\n-\n     @Override\n     public String toString() {\n         return \"Tree [mass=\" + mass + \", height=\" + height + \", position=\" + position + \"]\";\n     }\n \n+    public abstract Tree copy();\n }\n\ndiff --git a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n--- a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n+++ b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n@@ -2,23 +2,67 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import static java.util.stream.Collectors.toList;\n+\n import org.junit.jupiter.api.Test;\n \n public class TreePrototypeUnitTest {\n \n     @Test\n-    public void givenATreePrototypeWhenClonedThenCreateA_Clone() {\n+    public void givenAPlasticTreePrototypeWhenClonedThenCreateA_Clone() {\n         double mass = 10.0;\n         double height = 3.7;\n         Position position = new Position(3, 7);\n         Position otherPosition = new Position(4, 8);\n \n-        Tree tree = new Tree(mass, height);\n-        tree.setPosition(position);\n-        Tree anotherTree = tree.clone();\n-        anotherTree.setPosition(otherPosition);\n+        PlasticTree plasticTree = new PlasticTree(mass, height);\n+        plasticTree.setPosition(position);\n+        PlasticTree anotherPlasticTree = (PlasticTree) plasticTree.copy();\n+        anotherPlasticTree.setPosition(otherPosition);\n+\n+        assertEquals(position, plasticTree.getPosition());\n+        assertEquals(otherPosition, anotherPlasticTree.getPosition());\n \n-        assertEquals(position, tree.getPosition());\n-        assertEquals(otherPosition, anotherTree.getPosition());\n+    }\n+\n+    @Test\n+    public void givenAPineTreePrototypeWhenClonedThenCreateA_Clone() {\n+        double mass = 10.0;\n+        double height = 3.7;\n+        Position position = new Position(3, 7);\n+        Position otherPosition = new Position(4, 8);\n+\n+        PineTree pineTree = new PineTree(mass, height);\n+        pineTree.setPosition(position);\n+        PineTree anotherPineTree = (PineTree) pineTree.copy();\n+        anotherPineTree.setPosition(otherPosition);\n+\n+        assertEquals(position, pineTree.getPosition());\n+        assertEquals(otherPosition, anotherPineTree.getPosition());\n+    }\n+    \n+    @Test\n+    public void givenA_ListOfTreesWhenClonedThenCreateListOfClones() {\n+        double mass = 10.0;\n+        double height = 3.7;\n+        Position position = new Position(3, 7);\n+        Position otherPosition = new Position(4, 8);\n+        \n+        PlasticTree plasticTree = new PlasticTree(mass, height);\n+        plasticTree.setPosition(position);\n+        PineTree pineTree = new PineTree(mass, height);\n+        pineTree.setPosition(otherPosition);\n+        \n+        List<Tree> trees = Arrays.asList(plasticTree, pineTree);\n+        \n+        List<Tree> treeClones = trees.stream().map(Tree::copy).collect(toList());\n+        \n+        Tree plasticTreeClone = treeClones.get(0);\n+        \n+        assertEquals(mass, plasticTreeClone.getMass());\n+        assertEquals(height, plasticTreeClone.getHeight());\n+        assertEquals(position, plasticTreeClone.getPosition());\n     }\n }",
    "output": "Merge pull request #8105 from vimde/master\n\nBAEL-3091: The Prototype Pattern in Java (changed code based on valid comments from a reader)"
  },
  {
    "input": "diff --git a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n--- a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n+++ b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n@@ -0,0 +1,20 @@\n+package com.baeldung.flywaycallbacks;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class EmptyMigrationStrategyConfig {\n+\n+    private Log log = LogFactory.getLog(\"EmptyMigrationStrategy\");\n+\n+    @Bean\n+    public FlywayMigrationStrategy flywayMigrationStrategy() {\n+        return flyway -> {\n+            log.info(\"Skipping Flyway migration!\");\n+        };\n+    }\n+}\n\ndiff --git a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n--- a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n+++ b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.flywaycallbacks;\n+\n+import org.flywaydb.core.Flyway;\n+import org.flywaydb.core.api.MigrationInfo;\n+import org.flywaydb.core.api.MigrationState;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class ManualFlywayMigrationIntegrationTest {\n+\n+    @Autowired\n+    private Flyway flyway;\n+\n+    @Test\n+    public void skipAutomaticAndTriggerManualFlywayMigration() {\n+\n+        assertAllMigrationsAre(MigrationState.PENDING);\n+\n+        flyway.migrate();\n+\n+        assertAllMigrationsAre(MigrationState.SUCCESS);\n+    }\n+\n+    private void assertAllMigrationsAre(MigrationState expectedState) {\n+        for (MigrationInfo migrationInfo : flyway.info().all()) {\n+            assertThat(migrationInfo.getState()).isEqualTo(expectedState);\n+        }\n+    }\n+}",
    "output": "Merge pull request #8230 from kwoyke/BAEL-3498\n\nBAEL-3498: Conditionally Disable Flyway"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -0,0 +1,136 @@\n+package com.baeldung.rejection;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.DiscardPolicy;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class SaturationPolicyUnitTest {\n+\n+    private ThreadPoolExecutor executor;\n+\n+    @After\n+    public void shutdownExecutor() {\n+        if (executor != null && !executor.isTerminated()) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\"))).isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        long startTime = System.nanoTime();\n+        executor.execute(() -> waitFor(100));\n+        double blockedDuration = (System.nanoTime() - startTime) / 1_000_000.0;\n+\n+        assertThat(blockedDuration).isGreaterThanOrEqualTo(100);\n+    }\n+\n+    @Test\n+    public void givenDiscardPolicy_WhenSaturated_ThenExecutorDiscardsTheNewTask() throws InterruptedException {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new DiscardPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"Result\"));\n+\n+        assertThat(queue.poll(200, MILLISECONDS)).isNull();\n+    }\n+\n+    @Test\n+    public void givenDiscardOldestPolicy_WhenSaturated_ThenExecutorDiscardsTheOldestTask() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new ArrayBlockingQueue<>(2), new DiscardOldestPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"First\"));\n+        executor.execute(() -> queue.offer(\"Second\"));\n+        executor.execute(() -> queue.offer(\"Third\"));\n+\n+        waitFor(150);\n+        List<String> results = new ArrayList<>();\n+        queue.drainTo(results);\n+        assertThat(results).containsExactlyInAnyOrder(\"Second\", \"Third\");\n+    }\n+\n+    @Test\n+    public void givenGrowPolicy_WhenSaturated_ThenExecutorIncreaseTheMaxPoolSize() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new ArrayBlockingQueue<>(2), new GrowPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"First\"));\n+        executor.execute(() -> queue.offer(\"Second\"));\n+        executor.execute(() -> queue.offer(\"Third\"));\n+\n+        waitFor(150);\n+        List<String> results = new ArrayList<>();\n+        queue.drainTo(results);\n+        assertThat(results).containsExactlyInAnyOrder(\"First\", \"Second\", \"Third\");\n+    }\n+\n+    @Test\n+    public void givenExecutorIsTerminated_WhenSubmittedNewTask_ThenTheSaturationPolicyApplies() {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n+        executor.shutdownNow();\n+\n+        assertThatThrownBy(() -> executor.execute(() -> {\n+        })).isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void givenExecutorIsTerminating_WhenSubmittedNewTask_ThenTheSaturationPolicyApplies() {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n+        executor.execute(() -> waitFor(100));\n+        executor.shutdown();\n+\n+        assertThatThrownBy(() -> executor.execute(() -> {\n+        })).isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    private static class GrowPolicy implements RejectedExecutionHandler {\n+\n+        private final Lock lock = new ReentrantLock();\n+\n+        @Override\n+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+            lock.lock();\n+            try {\n+                executor.setMaximumPoolSize(executor.getMaximumPoolSize() + 1);\n+            } finally {\n+                lock.unlock();\n+            }\n+\n+            executor.submit(r);\n+        }\n+    }\n+\n+    private void waitFor(int millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+}",
    "output": "Merge pull request #8196 from alimate/BAEL-3521\n\nBAEL-3521: RejectedExecutionHandler"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n@@ -18,8 +18,11 @@ public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         Counter counter = new Counter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new CounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new CounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n@@ -18,8 +18,11 @@ public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExtrinsicLockCounter counter = new ExtrinsicLockCounter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n@@ -11,15 +11,18 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class ReentrantLockCounterUnitTest {\n-    \n+\n     @Test\n     public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExecutorService executorService = Executors.newFixedThreadPool(2);\n         ReentrantLockCounter counter = new ReentrantLockCounter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n@@ -11,16 +11,19 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class ReentrantReadWriteLockCounterUnitTest {\n-    \n+\n     @Test\n     public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExecutorService executorService = Executors.newFixedThreadPool(2);\n         ReentrantReadWriteLockCounter counter = new ReentrantReadWriteLockCounter();\n-        Future<Integer> future1 = (Future<Integer>) executorService.submit(new  ReentranReadWriteLockCounterCallable(counter));\n-        Future<Integer> future2 = (Future<Integer>) executorService.submit(new  ReentranReadWriteLockCounterCallable(counter));\n+        Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n+        Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n \n-        assertThat(future2.get()).isEqualTo(2);\n-        assertThat(future1.get()).isEqualTo(1);\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n-    \n+\n }",
    "output": "Merge pull request #8252 from kwoyke/BAEL-19699\n\nBAEL-19699: Fix core-java-concurrency-basic unit tests"
  },
  {
    "input": "diff --git a/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java b/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n--- a/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n+++ b/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n@@ -76,6 +76,6 @@ public BigDecimal getPrice() {\n     }\n \n     public List<OrderItem> getOrderItems() {\n-        return orderItems;\n+        return Collections.unmodifiableList(orderItems);\n     }\n }",
    "output": "BAEL-2275: Return immutable list when getting order items"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/CounterUnitTest.java\n@@ -18,8 +18,11 @@ public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         Counter counter = new Counter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new CounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new CounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ExtrinsicLockCounterUnitTest.java\n@@ -18,8 +18,11 @@ public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExtrinsicLockCounter counter = new ExtrinsicLockCounter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantLockCounterUnitTest.java\n@@ -11,15 +11,18 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class ReentrantLockCounterUnitTest {\n-    \n+\n     @Test\n     public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExecutorService executorService = Executors.newFixedThreadPool(2);\n         ReentrantLockCounter counter = new ReentrantLockCounter();\n         Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n         Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n-        \n-        assertThat(future1.get()).isEqualTo(1);\n-        assertThat(future2.get()).isEqualTo(2);\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n+\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n }\n\ndiff --git a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n--- a/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-basic/src/test/java/com/baeldung/concurrent/threadsafety/ReentrantReadWriteLockCounterUnitTest.java\n@@ -11,16 +11,19 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class ReentrantReadWriteLockCounterUnitTest {\n-    \n+\n     @Test\n     public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n         ExecutorService executorService = Executors.newFixedThreadPool(2);\n         ReentrantReadWriteLockCounter counter = new ReentrantReadWriteLockCounter();\n-        Future<Integer> future1 = (Future<Integer>) executorService.submit(new  ReentranReadWriteLockCounterCallable(counter));\n-        Future<Integer> future2 = (Future<Integer>) executorService.submit(new  ReentranReadWriteLockCounterCallable(counter));\n+        Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n+        Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n+\n+        // Just to make sure both are completed\n+        future1.get();\n+        future2.get();\n \n-        assertThat(future2.get()).isEqualTo(2);\n-        assertThat(future1.get()).isEqualTo(1);\n+        assertThat(counter.getCounter()).isEqualTo(2);\n     }\n-    \n+\n }",
    "output": "BAEL-19699: Fix core-java-concurrency-basic unit tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.timezone;\n+\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ModifyDefaultTimezoneUnitTest {\n+\n+    @Test\n+    public void givenDefaultTimezoneSet_thenDateTimezoneIsCorrect() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Portugal\"));\n+        Date date = new Date();\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.setTime(date);\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Portugal\"));\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.timezone;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ModifyTimezonePropertyUnitTest {\n+\n+    @Before\n+    public void setup() {\n+        System.setProperty(\"user.timezone\", \"IST\");\n+        TimeZone.setDefault(null);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        System.clearProperty(\"user.timezone\");\n+    }\n+\n+    @Test\n+    public void givenTimezonePropertySet_thenDateTimezoneIsCorrect() {\n+        Date date = new Date();\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.setTime(date);\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"IST\"));\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #7950 from kertpjatkin/master\n\n[BAEL-3302] How to set the JVM Timezone"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -96,7 +96,8 @@ public void givenExecutorIsTerminated_WhenSubmittedNewTask_ThenTheSaturationPoli\n         ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n         executor.shutdownNow();\n \n-        assertThatThrownBy(() -> executor.execute(() -> {})).isInstanceOf(RejectedExecutionException.class);\n+        assertThatThrownBy(() -> executor.execute(() -> {\n+        })).isInstanceOf(RejectedExecutionException.class);\n     }\n \n     @Test",
    "output": "Using a new module."
  },
  {
    "input": "diff --git a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n--- a/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java\n@@ -0,0 +1,65 @@\n+package com.baeldung.springfox;\n+\n+import static springfox.documentation.builders.PathSelectors.regex;\n+\n+import java.util.Collections;\n+import java.util.function.Predicate;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n+import com.baeldung.springfox.plugin.EmailAnnotationPlugin;\n+import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;\n+import springfox.documentation.service.ApiInfo;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration;\n+import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n+\n+\n+@SpringBootApplication\n+@EnableSwagger2WebMvc\n+@EntityScan(\"com.baeldung.springfox.model\")\n+@ComponentScan(\"com.baeldung.springfox.controller\")\n+@EnableJpaRepositories(\"com.baeldung.springfox.repository\")\n+@Import({SpringDataRestConfiguration.class, BeanValidatorPluginsConfiguration.class})\n+public class SpringfoxApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(SpringfoxApplication.class, args);\n+    }\n+\n+    @Bean\n+    public Docket springfoxAppInfo() {\n+        return new Docket(DocumentationType.SWAGGER_2)\n+            .groupName(\"baeldung-springfox-api\")\n+            .select()\n+            .paths(paths())\n+            .build()\n+            .apiInfo(apiInfo());\n+    }\n+\n+    private Predicate<String> paths() {\n+        return regex(\"/users.*\").or(regex(\"/api.*\"));       \n+    }\n+\n+    private ApiInfo apiInfo() {\n+        return new ApiInfo(\n+            \"Springfox API specification\", \n+            \"User REST and Spring Data APIs\", \n+            \"\", \n+            \"\", \n+            null, \n+            \"License of API\", \"API license URL\", Collections.emptyList());\n+    }\n+\n+    @Bean\n+    public EmailAnnotationPlugin emailPlugin() {\n+        return new EmailAnnotationPlugin();\n+    }\n+\n+}\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n--- a/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/controller/UserController.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.springfox.controller;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import com.baeldung.springfox.model.User;\n+import com.baeldung.springfox.repository.UserRepository;\n+\n+@Controller\n+@RequestMapping(value = \"/api/user\", produces = MediaType.APPLICATION_JSON_VALUE)\n+public class UserController {\n+    \n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    @RequestMapping(method = POST)\n+    @ResponseBody\n+    public ResponseEntity<User> createUser(@RequestBody User user) {\n+        userRepository.save(user);\n+        return new ResponseEntity<>(user, HttpStatus.OK);\n+    }\n+    \n+    @RequestMapping(method = GET)\n+    @ResponseBody\n+    public ResponseEntity<User> getUser(@RequestParam Long id) {\n+        Optional<User> user = userRepository.findById(id);\n+        return new ResponseEntity<>(user.get(), HttpStatus.OK);\n+    }\n+\n+}\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/model/User.java b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n--- a/springfox/src/main/java/com/baeldung/springfox/model/User.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/model/User.java\n@@ -0,0 +1,68 @@\n+package com.baeldung.springfox.model;\n+\n+import javax.persistence.Id;\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class User{\n+    \n+    @Id\n+    private Long id;\n+    \n+    @NotNull(message = \"First Name cannot be null\")\n+    private String firstName;\n+    \n+    private String lastName;\n+    \n+    @Min(value = 15, message = \"Age should not be less than 15\")\n+    @Max(value = 65, message = \"Age should not be greater than 65\")\n+    private int age;\n+    \n+    @Email(regexp=\".@.\\\\..*\", message = \"Email should be valid\")\n+    private String email;\n+    \n+    public Long getId() {\n+        return id;\n+    }\n+    \n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+    \n+    public String getFirstName() {\n+        return firstName;\n+    }\n+    \n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+    \n+    public String getLastName() {\n+        return lastName;\n+    }\n+    \n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+    \n+    public String getEmail() {\n+        return email;\n+    }\n+    \n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+    \n+  }\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/plugin/EmailAnnotationPlugin.java b/springfox/src/main/java/com/baeldung/springfox/plugin/EmailAnnotationPlugin.java\n--- a/springfox/src/main/java/com/baeldung/springfox/plugin/EmailAnnotationPlugin.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/plugin/EmailAnnotationPlugin.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.springfox.plugin;\n+\n+import static springfox.bean.validators.plugins.Validators.annotationFromBean;\n+\n+import java.util.Optional;\n+\n+import javax.validation.constraints.Email;\n+\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import springfox.bean.validators.plugins.Validators;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;\n+import springfox.documentation.spi.schema.contexts.ModelPropertyContext;\n+\n+@Component\n+@Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)\n+public class EmailAnnotationPlugin implements ModelPropertyBuilderPlugin {\n+\n+    @Override\n+    public boolean supports(DocumentationType delimiter) {\n+        return true;\n+    }\n+\n+    /**\n+     * read Email annotation\n+     */\n+    @Override\n+    public void apply(ModelPropertyContext context) {\n+        Optional<Email> email = annotationFromBean(context, Email.class);\n+        if (email.isPresent()) {\n+            context.getBuilder().pattern(email.get().regexp());\n+            context.getBuilder().example(\"email@email.com\");\n+        }\n+    }\n+\n+}\n+\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/repository/UserRepository.java b/springfox/src/main/java/com/baeldung/springfox/repository/UserRepository.java\n--- a/springfox/src/main/java/com/baeldung/springfox/repository/UserRepository.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/repository/UserRepository.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.springfox.repository;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.springfox.model.User;\n+\n+@Repository\n+public interface UserRepository extends CrudRepository<User, Long> {\n+    \n+}\n\ndiff --git a/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java b/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n--- a/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n+++ b/springfox/src/main/java/com/baeldung/springfox/repository/UserRestRepository.java\n@@ -0,0 +1,11 @@\n+package com.baeldung.springfox.repository;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n+\n+import com.baeldung.springfox.model.User;\n+\n+@RepositoryRestResource(collectionResourceRel = \"users\", path = \"users\")\n+public interface UserRestRepository extends CrudRepository<User, Long> {\n+\n+}",
    "output": "BAEL-3456 - Springfox"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/PersistenceContextDemoApplication.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/PersistenceContextDemoApplication.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/PersistenceContextDemoApplication.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/PersistenceContextDemoApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.persistencecontext;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.ComponentScan;\n+\n+@SpringBootApplication\n+@ComponentScan(basePackages=\"com.baeldung.persistencecontext\")\n+public class PersistenceContextDemoApplication {\n+    public static void main(String[] args) {\n+        SpringApplication.run(PersistenceContextDemoApplication.class, args);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/entity/User.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/entity/User.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/entity/User.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/entity/User.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.persistencecontext.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class User {\n+\n+    @Id\n+    private Long id;\n+    private String name;\n+    private String role;\n+\n+    public User() {\n+\n+    }\n+\n+    public User(Long id, String name, String role) {\n+        this.id = id;\n+        this.name = name;\n+        this.role = role;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getRole() {\n+        return role;\n+    }\n+\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.persistencecontext.service;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.baeldung.persistencecontext.entity.User;\n+\n+@Component\n+public class ExtendedPersistenceContextUserService {\n+\n+    @PersistenceContext(type = PersistenceContextType.EXTENDED)\n+    private EntityManager entityManager;\n+\n+    @Transactional\n+    public User insertWithTransaction(User user) {\n+        entityManager.persist(user);\n+        return user;\n+    }\n+\n+    public User insertWithoutTransaction(User user) {\n+        entityManager.persist(user);\n+        return user;\n+    }\n+\n+    public User find(long id) {\n+        User user = entityManager.find(User.class, id);\n+        return user;\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.persistencecontext.service;\n+\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.baeldung.persistencecontext.entity.User;\n+\n+@Component\n+public class TransctionPersistenceContextUserService {\n+\n+    @PersistenceContext\n+    private EntityManager entityManager;\n+    \n+    @Transactional\n+    public User insertWithTransaction(User user) {\n+        entityManager.persist(user);\n+        return user;\n+    }\n+    \n+    public User insertWithoutTransaction(User user) {\n+        entityManager.persist(user);\n+        return user;\n+    }\n+    \n+    public User find(long id) {\n+        return entityManager.find(User.class, id);\n+    }\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n@@ -0,0 +1,90 @@\n+package com.baeldung.persistencecontext;\n+\n+import com.baeldung.persistencecontext.entity.User;\n+import com.baeldung.persistencecontext.service.ExtendedPersistenceContextUserService;\n+import com.baeldung.persistencecontext.service.TransctionPersistenceContextUserService;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.TransactionRequiredException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = com.baeldung.persistencecontext.PersistenceContextDemoApplication.class)\n+public class PersistenceContextIntegrationTest {\n+\n+    @Autowired\n+    private TransctionPersistenceContextUserService transctionPersistenceContext;\n+    @Autowired\n+    private ExtendedPersistenceContextUserService extendedPersistenceContext;\n+\n+    @Test\n+    public void testThatWhenUserSavedWithTransctionPersistenceContextThenUserShouldGetSavedInDB() {\n+        User user = new User(121L, \"Devender\", \"admin\");\n+        transctionPersistenceContext.insertWithTransaction(user);\n+\n+        User userFromTransctionPersistenceContext = transctionPersistenceContext.find(user.getId());\n+        assertNotNull(userFromTransctionPersistenceContext);\n+\n+        User userFromExtendedPersistenceContext = extendedPersistenceContext.find(user.getId());\n+        assertNotNull(userFromExtendedPersistenceContext);\n+    }\n+\n+    @Test(expected = TransactionRequiredException.class)\n+    public void testThatUserSaveWithoutTransactionThrowException() {\n+        User user = new User(122L, \"Devender\", \"admin\");\n+        transctionPersistenceContext.insertWithoutTransaction(user);\n+    }\n+\n+    @Test\n+    public void testThatWhenUserSavedWithExtendedPersistenceContextWithoutTransactionThenUserShouldGetCached() {\n+        User user = new User(123L, \"Devender\", \"admin\");\n+        extendedPersistenceContext.insertWithoutTransaction(user);\n+\n+        User userFromExtendedPersistenceContext = extendedPersistenceContext.find(user.getId());\n+        assertNotNull(userFromExtendedPersistenceContext);\n+\n+        User userFromTransctionPersistenceContext = transctionPersistenceContext.find(user.getId());\n+        assertNull(userFromTransctionPersistenceContext);\n+    }\n+\n+    @Test(expected = EntityExistsException.class)\n+    public void testThatPersistUserWithSameIdentifierThrowException() {\n+        User user1 = new User(126L, \"Devender\", \"admin\");\n+        User user2 = new User(126L, \"Devender\", \"admin\");\n+        extendedPersistenceContext.insertWithoutTransaction(user1);\n+        extendedPersistenceContext.insertWithoutTransaction(user2);\n+    }\n+\n+    @Test\n+    public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldSaveEntityIntoDB() {\n+        User user = new User(127L, \"Devender\", \"admin\");\n+        extendedPersistenceContext.insertWithTransaction(user);\n+\n+        User userFromDB = transctionPersistenceContext.find(user.getId());\n+        assertNotNull(userFromDB);\n+    }\n+\n+    @Test\n+    public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldFlushCachedEntityIntoDB() {\n+        User user1 = new User(124L, \"Devender\", \"admin\");\n+        extendedPersistenceContext.insertWithoutTransaction(user1);\n+\n+        User user2 = new User(125L, \"Devender\", \"admin\");\n+        extendedPersistenceContext.insertWithTransaction(user2);\n+\n+        User user1FromTransctionPersistenceContext = transctionPersistenceContext.find(user1.getId());\n+        assertNotNull(user1FromTransctionPersistenceContext);\n+\n+        User user2FromTransctionPersistenceContext = transctionPersistenceContext.find(user2.getId());\n+        assertNotNull(user2FromTransctionPersistenceContext);\n+    }\n+\n+}",
    "output": "Merge pull request #8246 from kumar-devender/master\n\nPersistence context example"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n@@ -6,7 +6,7 @@ public class Edge {\n     private boolean isIncluded = false;\n     private boolean isPrinted = false;\n \n-    public Edge (int weight){\n+    public Edge(int weight) {\n         this.weight = weight;\n     }\n \n@@ -34,4 +34,3 @@ public void setPrinted(boolean printed) {\n         isPrinted = printed;\n     }\n }\n-\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n@@ -10,21 +10,23 @@ public class Prim {\n \n     private List<Vertex> graph;\n \n-    public Prim(List<Vertex> graph){\n+    public Prim(List<Vertex> graph) {\n         this.graph = graph;\n     }\n \n-    public void run(){\n-        if (graph.size() > 0){\n-            graph.get(0).setVisited(true);\n+    public void run() {\n+        if (graph.size() > 0) {\n+            graph.get(0)\n+                .setVisited(true);\n         }\n-        while (isDisconnected()){\n+        while (isDisconnected()) {\n             Edge nextMinimum = new Edge(Integer.MAX_VALUE);\n             Vertex nextVertex = graph.get(0);\n-            for (Vertex vertex : graph){\n-                if (vertex.isVisited()){\n+            for (Vertex vertex : graph) {\n+                if (vertex.isVisited()) {\n                     Pair<Vertex, Edge> candidate = vertex.nextMinimum();\n-                    if (candidate.getValue().getWeight() < nextMinimum.getWeight()){\n+                    if (candidate.getValue()\n+                        .getWeight() < nextMinimum.getWeight()) {\n                         nextMinimum = candidate.getValue();\n                         nextVertex = candidate.getKey();\n                     }\n@@ -35,40 +37,41 @@ public void run(){\n         }\n     }\n \n-    private boolean isDisconnected(){\n-        for (Vertex vertex : graph){\n-            if (!vertex.isVisited()){\n+    private boolean isDisconnected() {\n+        for (Vertex vertex : graph) {\n+            if (!vertex.isVisited()) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    public String originalGraphToString(){\n+    public String originalGraphToString() {\n         StringBuilder sb = new StringBuilder();\n-        for (Vertex vertex : graph){\n+        for (Vertex vertex : graph) {\n             sb.append(vertex.originalToString());\n         }\n         return sb.toString();\n     }\n \n-    public void resetPrintHistory(){\n-        for (Vertex vertex : graph){\n-            Iterator it = vertex.getEdges().entrySet().iterator();\n+    public void resetPrintHistory() {\n+        for (Vertex vertex : graph) {\n+            Iterator it = vertex.getEdges()\n+                .entrySet()\n+                .iterator();\n             while (it.hasNext()) {\n                 Map.Entry pair = (Map.Entry) it.next();\n-                ((Edge)pair.getValue()).setPrinted(false);\n+                ((Edge) pair.getValue()).setPrinted(false);\n             }\n         }\n     }\n \n-    public String minimumSpanningTreeToString(){\n+    public String minimumSpanningTreeToString() {\n         StringBuilder sb = new StringBuilder();\n-        for (Vertex vertex : graph){\n+        for (Vertex vertex : graph) {\n             sb.append(vertex.includedToString());\n         }\n         return sb.toString();\n     }\n \n }\n-\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n@@ -12,7 +12,7 @@ public class Vertex {\n     private Map<Vertex, Edge> edges = new HashMap<>();\n     private boolean isVisited = false;\n \n-    public Vertex(String label){\n+    public Vertex(String label) {\n         this.label = label;\n     }\n \n@@ -28,7 +28,7 @@ public Map<Vertex, Edge> getEdges() {\n         return edges;\n     }\n \n-    public void addEdge(Vertex vertex, Edge edge){\n+    public void addEdge(Vertex vertex, Edge edge) {\n         this.edges.put(vertex, edge);\n     }\n \n@@ -40,14 +40,15 @@ public void setVisited(boolean visited) {\n         isVisited = visited;\n     }\n \n-    public Pair<Vertex, Edge> nextMinimum(){\n+    public Pair<Vertex, Edge> nextMinimum() {\n         Edge nextMinimum = new Edge(Integer.MAX_VALUE);\n         Vertex nextVertex = this;\n-        Iterator it = edges.entrySet().iterator();\n+        Iterator it = edges.entrySet()\n+            .iterator();\n         while (it.hasNext()) {\n             Map.Entry pair = (Map.Entry) it.next();\n-            if (!((Vertex)pair.getKey()).isVisited()){\n-                if (!((Edge)pair.getValue()).isIncluded()) {\n+            if (!((Vertex) pair.getKey()).isVisited()) {\n+                if (!((Edge) pair.getValue()).isIncluded()) {\n                     if (((Edge) pair.getValue()).getWeight() < nextMinimum.getWeight()) {\n                         nextMinimum = (Edge) pair.getValue();\n                         nextVertex = (Vertex) pair.getKey();\n@@ -58,12 +59,13 @@ public Pair<Vertex, Edge> nextMinimum(){\n         return new Pair<>(nextVertex, nextMinimum);\n     }\n \n-    public String originalToString(){\n+    public String originalToString() {\n         StringBuilder sb = new StringBuilder();\n-        Iterator it = edges.entrySet().iterator();\n+        Iterator it = edges.entrySet()\n+            .iterator();\n         while (it.hasNext()) {\n             Map.Entry pair = (Map.Entry) it.next();\n-            if (!((Edge)pair.getValue()).isPrinted()) {\n+            if (!((Edge) pair.getValue()).isPrinted()) {\n                 sb.append(getLabel());\n                 sb.append(\" --- \");\n                 sb.append(((Edge) pair.getValue()).getWeight());\n@@ -76,14 +78,15 @@ public String originalToString(){\n         return sb.toString();\n     }\n \n-    public String includedToString(){\n+    public String includedToString() {\n         StringBuilder sb = new StringBuilder();\n         if (isVisited()) {\n-            Iterator it = edges.entrySet().iterator();\n+            Iterator it = edges.entrySet()\n+                .iterator();\n             while (it.hasNext()) {\n                 Map.Entry pair = (Map.Entry) it.next();\n                 if (((Edge) pair.getValue()).isIncluded()) {\n-                    if (!((Edge)pair.getValue()).isPrinted()) {\n+                    if (!((Edge) pair.getValue()).isPrinted()) {\n                         sb.append(getLabel());\n                         sb.append(\" --- \");\n                         sb.append(((Edge) pair.getValue()).getWeight());\n@@ -98,4 +101,3 @@ public String includedToString(){\n         return sb.toString();\n     }\n }\n-\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n@@ -18,7 +18,7 @@ public void givenAGraph_whenPrimRuns_thenPrintMST() {\n         System.out.println(prim.minimumSpanningTreeToString());\n     }\n \n-    public static List<Vertex> createGraph(){\n+    public static List<Vertex> createGraph() {\n         List<Vertex> graph = new ArrayList<>();\n         Vertex a = new Vertex(\"A\");\n         Vertex b = new Vertex(\"B\");\n@@ -52,4 +52,3 @@ public static List<Vertex> createGraph(){\n     }\n \n }\n-",
    "output": "addEdge fix"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.maths.calculator.basic;\n+package com.baeldung.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n@@ -7,19 +7,14 @@ public class BasicCalculatorIfElse {\n \n     public static void main(String[] args) {\n \n-        System.out.println(\"---------------------------------- \\n\" +\n-                \"Welcome to Basic Calculator \\n\" +\n-                \"----------------------------------\");\n-        System.out.println(\"Following operations are supported : \\n\" +\n-                \"1. Addition (+) \\n\" +\n-                \"2. Subtraction (-) \\n\" +\n-                \"3. Multiplication (* OR x) \\n\" +\n-                \"4. Division (/) \\n\");\n+        System.out.println(\"---------------------------------- \\n\" + \"Welcome to Basic Calculator \\n\" + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" + \"1. Addition (+) \\n\" + \"2. Subtraction (-) \\n\" + \"3. Multiplication (* OR x) \\n\" + \"4. Division (/) \\n\");\n \n         Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n-            char operation = scanner.next().charAt(0);\n+            char operation = scanner.next()\n+                .charAt(0);\n \n             if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n                 System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n\ndiff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n@@ -1,24 +1,19 @@\n-package com.baeldung.maths.calculator.basic;\n+package com.baeldung.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n \n public class BasicCalculatorSwitchCase {\n     public static void main(String[] args) {\n \n-        System.out.println(\"---------------------------------- \\n\"\n-            + \"Welcome to Basic Calculator \\n\"\n-            + \"----------------------------------\");\n-        System.out.println(\"Following operations are supported : \\n\" +\n-                \"1. Addition (+) \\n\" +\n-                \"2. Subtraction (-) \\n\" +\n-                \"3. Multiplication (* OR x) \\n\" +\n-                \"4. Division (/) \\n\");\n+        System.out.println(\"---------------------------------- \\n\" + \"Welcome to Basic Calculator \\n\" + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" + \"1. Addition (+) \\n\" + \"2. Subtraction (-) \\n\" + \"3. Multiplication (* OR x) \\n\" + \"4. Division (/) \\n\");\n \n         Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n-            char operation = scanner.next().charAt(0);\n+            char operation = scanner.next()\n+                .charAt(0);\n \n             if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n                 System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n@@ -35,30 +30,29 @@ public static void main(String[] args) {\n             }\n \n             switch (operation) {\n-                case '+':\n-                    System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n-                    break;\n-                case '-':\n-                    System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n-                    break;\n-                case '*':\n-                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n-                    break;\n-                case 'x':\n-                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n-                    break;\n-                case '/':\n-                    System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n-                    break;\n-                default:\n-                    System.err.println(\"Invalid Operator Specified.\");\n-                    break;\n+            case '+':\n+                System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+                break;\n+            case '-':\n+                System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+                break;\n+            case '*':\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                break;\n+            case 'x':\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                break;\n+            case '/':\n+                System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+                break;\n+            default:\n+                System.err.println(\"Invalid Operator Specified.\");\n+                break;\n             }\n         } catch (InputMismatchException exc) {\n             System.err.println(exc.getMessage());\n         } finally {\n             scanner.close();\n         }\n     }\n-}\n-\n+}\n\\ No newline at end of file",
    "output": "BAEL-3506 - Refactoring. (#8238)\n\n* BAEL-3506\r\n\r\n* BAEL-3506\r\n\r\n* BAEL-3506 - Added java-math-2 to parent pom.\r\n\r\n* BAEL-3506 - Refactoring."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/overflow/Overflow.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/overflow/Overflow.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/overflow/Overflow.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/overflow/Overflow.java\n@@ -0,0 +1,70 @@\n+package com.baeldung.overflow;\n+\n+import java.math.BigInteger;\n+\n+public class Overflow {\n+\n+    public static void showIntegerOverflow() {\n+\n+        int value = Integer.MAX_VALUE-1;\n+\n+        for(int i = 0; i < 4; i++, value++) {\n+            System.out.println(value);\n+        }\n+    }\n+\n+    public static void noOverflowWithBigInteger() {\n+\n+        BigInteger largeValue = new BigInteger(Integer.MAX_VALUE + \"\");\n+        for(int i = 0; i < 4; i++) {\n+            System.out.println(largeValue);\n+            largeValue = largeValue.add(BigInteger.ONE);\n+        }\n+    }\n+\n+    public static void exceptionWithAddExact() {\n+\n+        int value = Integer.MAX_VALUE-1;\n+        for(int i = 0; i < 4; i++) {\n+            System.out.println(value);\n+            value = Math.addExact(value, 1);\n+        }\n+    }\n+\n+    public static int addExact(int x, int y) {\n+\n+        int r = x + y;\n+        if (((x ^ r) & (y ^ r)) < 0) {\n+            throw new ArithmeticException(\"int overflow\");\n+        }\n+        return r;\n+    }\n+\n+    public static void demonstrateUnderflow() {\n+\n+        for(int i = 1073; i <= 1076; i++) {\n+            System.out.println(\"2^\" + i + \" = \" + Math.pow(2, -i));\n+        }\n+    }\n+\n+    public static double powExact(double base, double exponent)\n+    {\n+        if(base == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double result = Math.pow(base, exponent);\n+\n+        if(result == Double.POSITIVE_INFINITY ) {\n+            throw new ArithmeticException(\"Double overflow resulting in POSITIVE_INFINITY\");\n+        } else if(result == Double.NEGATIVE_INFINITY) {\n+            throw new ArithmeticException(\"Double overflow resulting in NEGATIVE_INFINITY\");\n+        } else if(Double.compare(-0.0f, result) == 0) {\n+            throw new ArithmeticException(\"Double overflow resulting in negative zero\");\n+        } else if(Double.compare(+0.0f, result) == 0) {\n+            throw new ArithmeticException(\"Double overflow resulting in positive zero\");\n+        }\n+\n+        return result;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/math/OverflowUnitTest.java b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/math/OverflowUnitTest.java\n--- a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/math/OverflowUnitTest.java\n+++ b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/math/OverflowUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.math;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class OverflowUnitTest {\n+\n+    @Test\n+    public void positive_and_negative_zero_are_not_always_equal() {\n+\n+        double a = +0f;\n+        double b = -0f;\n+\n+        assertTrue(a == b);\n+\n+        assertTrue(1/a == Double.POSITIVE_INFINITY);\n+        assertTrue(1/b == Double.NEGATIVE_INFINITY);\n+\n+        assertTrue(1/a != 1/b);\n+    }\n+}",
    "output": "BAEL-3131 Guide to Java HashMap (#8229)\n\nhttp://jira.baeldung.com/browse/BAEL-3130"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/sortedarrays/SortedArrays.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.algorithms.sortedarrays;\n+\n+public class SortedArrays {\n+\n+    public static int[] merge(int[] first, int[] second) {\n+\n+        int m = first.length;\n+        int n = second.length;\n+\n+        int i, j, k;\n+        i = j = k = 0;\n+\n+        int[] result = new int[m + n];\n+\n+        while (i < m && j < n) {\n+\n+            if (first[i] < second[j]) {\n+                result[k++] = first[i++];\n+            } else {\n+                result[k++] = second[j++];\n+            }\n+        }\n+\n+        while (i < m) {\n+            result[k++] = first[i++];\n+        }\n+\n+        while (j < n) {\n+            result[k++] = second[j++];\n+        }\n+\n+        return result;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/sortedarrays/SortedArraysUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.algorithms.sortedarrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import org.junit.jupiter.api.Test;\n+\n+public class SortedArraysUnitTest {\n+\n+    @Test\n+    public void givenTwoSortedArraysWhenMergeThenReturnMergedSortedArray() {\n+\n+        int[] first = { 3, 7 };\n+        int[] second = { 4, 8, 11 };\n+        int[] result = { 3, 4, 7, 8, 11 };\n+\n+        assertArrayEquals(result, SortedArrays.merge(first, second));\n+    }\n+\n+    @Test\n+    public void givenTwoSortedArraysWithDuplicatesWhenMergeThenReturnMergedSortedArray() {\n+\n+        int[] first = { 3, 3, 7 };\n+        int[] second = { 4, 8, 8, 11 };\n+        int[] result = { 3, 3, 4, 7, 8, 8, 11 };\n+\n+        assertArrayEquals(result, SortedArrays.merge(first, second));\n+    }\n+}",
    "output": "BAEL-3399: How to merge two sorted arrays into a sorted array"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorIfElse.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.maths.calculator.basic;\n+package com.baeldung.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n@@ -7,19 +7,14 @@ public class BasicCalculatorIfElse {\n \n     public static void main(String[] args) {\n \n-        System.out.println(\"---------------------------------- \\n\" +\n-                \"Welcome to Basic Calculator \\n\" +\n-                \"----------------------------------\");\n-        System.out.println(\"Following operations are supported : \\n\" +\n-                \"1. Addition (+) \\n\" +\n-                \"2. Subtraction (-) \\n\" +\n-                \"3. Multiplication (* OR x) \\n\" +\n-                \"4. Division (/) \\n\");\n+        System.out.println(\"---------------------------------- \\n\" + \"Welcome to Basic Calculator \\n\" + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" + \"1. Addition (+) \\n\" + \"2. Subtraction (-) \\n\" + \"3. Multiplication (* OR x) \\n\" + \"4. Division (/) \\n\");\n \n         Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n-            char operation = scanner.next().charAt(0);\n+            char operation = scanner.next()\n+                .charAt(0);\n \n             if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n                 System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n\ndiff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/calculator/basic/BasicCalculatorSwitchCase.java\n@@ -1,24 +1,19 @@\n-package com.baeldung.maths.calculator.basic;\n+package com.baeldung.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n \n public class BasicCalculatorSwitchCase {\n     public static void main(String[] args) {\n \n-        System.out.println(\"---------------------------------- \\n\"\n-            + \"Welcome to Basic Calculator \\n\"\n-            + \"----------------------------------\");\n-        System.out.println(\"Following operations are supported : \\n\" +\n-                \"1. Addition (+) \\n\" +\n-                \"2. Subtraction (-) \\n\" +\n-                \"3. Multiplication (* OR x) \\n\" +\n-                \"4. Division (/) \\n\");\n+        System.out.println(\"---------------------------------- \\n\" + \"Welcome to Basic Calculator \\n\" + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" + \"1. Addition (+) \\n\" + \"2. Subtraction (-) \\n\" + \"3. Multiplication (* OR x) \\n\" + \"4. Division (/) \\n\");\n \n         Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n-            char operation = scanner.next().charAt(0);\n+            char operation = scanner.next()\n+                .charAt(0);\n \n             if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n                 System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n@@ -35,30 +30,29 @@ public static void main(String[] args) {\n             }\n \n             switch (operation) {\n-                case '+':\n-                    System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n-                    break;\n-                case '-':\n-                    System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n-                    break;\n-                case '*':\n-                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n-                    break;\n-                case 'x':\n-                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n-                    break;\n-                case '/':\n-                    System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n-                    break;\n-                default:\n-                    System.err.println(\"Invalid Operator Specified.\");\n-                    break;\n+            case '+':\n+                System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+                break;\n+            case '-':\n+                System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+                break;\n+            case '*':\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                break;\n+            case 'x':\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                break;\n+            case '/':\n+                System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+                break;\n+            default:\n+                System.err.println(\"Invalid Operator Specified.\");\n+                break;\n             }\n         } catch (InputMismatchException exc) {\n             System.err.println(exc.getMessage());\n         } finally {\n             scanner.close();\n         }\n     }\n-}\n-\n+}\n\\ No newline at end of file",
    "output": "BAEL-3506 - Refactoring."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/CheckIntegerInput.java b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/CheckIntegerInput.java\n--- a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/CheckIntegerInput.java\n+++ b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/CheckIntegerInput.java\n@@ -1,18 +0,0 @@\n-package com.baeldung.isnumeric;\n-\n-import java.util.Scanner;\n-\n-public class CheckIntegerInput {\n-\n-    public static void main(String[] args) {\n-        try (Scanner scanner = new Scanner(System.in)) {\n-            System.out.println(\"Enter an integer : \");\n-\n-            if (scanner.hasNextInt()) {\n-                System.out.println(\"You entered : \" + scanner.nextInt());\n-            } else {\n-                System.out.println(\"The input is not an integer\");\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file",
    "output": "[BAEL-3518] Removed the CheckIntegerInput because its removed from the article (#8228)"
  },
  {
    "input": "diff --git a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n--- a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n+++ b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n@@ -2,7 +2,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.flywaydb.core.Flyway;\n import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -14,11 +13,8 @@ public class EmptyMigrationStrategyConfig {\n \n     @Bean\n     public FlywayMigrationStrategy flywayMigrationStrategy() {\n-        return new FlywayMigrationStrategy() {\n-            @Override\n-            public void migrate(Flyway flyway) {\n-                log.info(\"Skipping Flyway migration!\");\n-            }\n+        return flyway -> {\n+            log.info(\"Skipping Flyway migration!\");\n         };\n     }\n }",
    "output": "BAEL-3498: Change anonymous inner class to lambda"
  },
  {
    "input": "diff --git a/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java b/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n--- a/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n+++ b/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.servlets;\n+package com.baeldung.test;\n \n import org.apache.http.HttpResponse;\n import org.apache.http.client.HttpClient;\n\ndiff --git a/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java b/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n--- a/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n+++ b/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.servlets;\r\n+package com.baeldung.test;\r\n \r\n import javax.servlet.http.HttpServletRequest;\r\n import javax.servlet.http.HttpServletResponse;\r",
    "output": "Merge pull request #8234 from dkapil/task/BAEL-18777_j\n\nBAEL-18777 POM Properties Cleanup"
  },
  {
    "input": "diff --git a/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java b/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n--- a/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n+++ b/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n@@ -1,43 +1,61 @@\n package org.baeldung.cachedrequest;\n \n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.io.IOException;\n-\n-import javax.print.attribute.PrintRequestAttribute;\n-\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.AnnotationConfigWebContextLoader;\n+import org.springframework.test.context.web.WebAppConfiguration;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.ResultActions;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = { HttpRequestDemoConfig.class, ContentCachingFilter.class, PrintRequestAttribute.class })\n-@AutoConfigureMockMvc\n+@ContextConfiguration(loader = AnnotationConfigWebContextLoader.class, classes = { HttpRequestDemoConfig.class, ContentCachingFilter.class, PrintRequestContentFilter.class, PersonController.class })\n+@WebAppConfiguration\n public class PersonControllerIntegrationTest {\n \n     @Autowired\n+    private WebApplicationContext wac;\n+\n     private MockMvc mockMvc;\n \n     ObjectMapper objectMapper = new ObjectMapper();\n \n+    @Autowired\n+    private ContentCachingFilter contentCachingFilter;\n+\n+    @Autowired\n+    private PrintRequestContentFilter printRequestContentFilter;\n+\n+    @Before\n+    public void setup() throws Exception {\n+\n+        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac)\n+                .addFilter(contentCachingFilter, \"/**\")\n+                .addFilter(printRequestContentFilter, \"/**\")\n+                .build();\n+    }\n+\n     @Test\n     public void whenValidInput_thenCreateBook() throws IOException, Exception {\n         // assign - given\n-        Person book = new Person(\"sumit\", \"abc\", 100);\n+        Person person = new Person(\"sumit\", \"abc\", 100);\n \n         // act - when\n         ResultActions result = mockMvc.perform(post(\"/person\").accept(MediaType.APPLICATION_JSON)\n-            .contentType(MediaType.APPLICATION_JSON)\n-            .content(objectMapper.writeValueAsString(book)));\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(person)));\n \n         // assert - then\n         result.andExpect(status().isNoContent());",
    "output": "Merge pull request #8232 from sumit-bhawsar/BAEL-3335\n\nBael 3335 fixing integration tests"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/datastreammedian/DataStreamMedian.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/datastreammedian/DataStreamMedian.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/datastreammedian/DataStreamMedian.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/datastreammedian/DataStreamMedian.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.algorithms.datastreammedian;\n+\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+\n+import static java.util.Comparator.reverseOrder;\n+\n+public class DataStreamMedian {\n+\n+    private Queue<Integer> minHeap, maxHeap;\n+\n+    DataStreamMedian() {\n+        minHeap = new PriorityQueue<>();\n+        maxHeap = new PriorityQueue<>(reverseOrder());\n+    }\n+\n+    void add(int num) {\n+        minHeap.offer(num);\n+        maxHeap.offer(minHeap.poll());\n+\n+        if (minHeap.size() < maxHeap.size()) {\n+            minHeap.offer(maxHeap.poll());\n+        }\n+    }\n+\n+    double getMedian() {\n+        int median;\n+        if (minHeap.size() > maxHeap.size()) {\n+            median = minHeap.peek();\n+        } else {\n+            median = (minHeap.peek() + maxHeap.peek()) / 2;\n+        }\n+        return median;\n+    }\n+}",
    "output": "init"
  },
  {
    "input": "diff --git a/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java b/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n--- a/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n+++ b/javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.servlets;\n+package com.baeldung.test;\n \n import org.apache.http.HttpResponse;\n import org.apache.http.client.HttpClient;\n\ndiff --git a/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java b/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n--- a/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n+++ b/javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.servlets;\r\n+package com.baeldung.test;\r\n \r\n import javax.servlet.http.HttpServletRequest;\r\n import javax.servlet.http.HttpServletResponse;\r",
    "output": "BAEL-18777 POM Properties Cleanup\n\n- Properties cleanup of projects starting with j"
  },
  {
    "input": "diff --git a/spring-boot-runtime/src/test/java/com/baeldung/web/controller/TaxiFareControllerIntegrationTest.java b/spring-boot-runtime/src/test/java/com/baeldung/web/controller/TaxiFareControllerIntegrationTest.java\n--- a/spring-boot-runtime/src/test/java/com/baeldung/web/controller/TaxiFareControllerIntegrationTest.java\n+++ b/spring-boot-runtime/src/test/java/com/baeldung/web/controller/TaxiFareControllerIntegrationTest.java\n@@ -7,14 +7,17 @@\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n import com.baeldung.web.log.app.Application;\n import com.baeldung.web.log.data.TaxiRide;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = { Application.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@SpringBootTest(classes = { Application.class, TaxiFareControllerIntegrationTest.SecurityConfig.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class TaxiFareControllerIntegrationTest {\n     \n     @LocalServerPort\n@@ -23,13 +26,27 @@ public class TaxiFareControllerIntegrationTest {\n     @Test\n     public void givenRequest_whenFetchTaxiFareRateCard_thanOK() {\n \n+        System.out.println(port);\n         String URL = \"http://localhost:\" + port + \"/spring-rest\";\n         TestRestTemplate testRestTemplate = new TestRestTemplate();\n         TaxiRide taxiRide = new TaxiRide(true, 10l);\n         String fare = testRestTemplate.postForObject(\n           URL + \"/taxifare/calculate/\", \n           taxiRide, String.class);\n       \n-        //assertThat(fare, equalTo(\"200\"));\n+        assertThat(fare, equalTo(\"200\"));\n+    }\n+\n+    @Configuration\n+    static class SecurityConfig extends WebSecurityConfigurerAdapter {\n+        @Override\n+        protected void configure(HttpSecurity http) throws Exception {\n+            System.out.println(\"security being set\");\n+            http\n+                    .authorizeRequests()\n+                    .anyRequest().permitAll()\n+                    .and()\n+                    .csrf().disable();\n+        }\n     }\n }\n\\ No newline at end of file",
    "output": "added SecurityConfig"
  },
  {
    "input": "diff --git a/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java b/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n--- a/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n+++ b/spring-core-2/src/test/java/org/baeldung/cachedrequest/PersonControllerIntegrationTest.java\n@@ -1,43 +1,61 @@\n package org.baeldung.cachedrequest;\n \n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.io.IOException;\n-\n-import javax.print.attribute.PrintRequestAttribute;\n-\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.AnnotationConfigWebContextLoader;\n+import org.springframework.test.context.web.WebAppConfiguration;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.ResultActions;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = { HttpRequestDemoConfig.class, ContentCachingFilter.class, PrintRequestAttribute.class })\n-@AutoConfigureMockMvc\n+@ContextConfiguration(loader = AnnotationConfigWebContextLoader.class, classes = { HttpRequestDemoConfig.class, ContentCachingFilter.class, PrintRequestContentFilter.class, PersonController.class })\n+@WebAppConfiguration\n public class PersonControllerIntegrationTest {\n \n     @Autowired\n+    private WebApplicationContext wac;\n+\n     private MockMvc mockMvc;\n \n     ObjectMapper objectMapper = new ObjectMapper();\n \n+    @Autowired\n+    private ContentCachingFilter contentCachingFilter;\n+\n+    @Autowired\n+    private PrintRequestContentFilter printRequestContentFilter;\n+\n+    @Before\n+    public void setup() throws Exception {\n+\n+        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac)\n+                .addFilter(contentCachingFilter, \"/**\")\n+                .addFilter(printRequestContentFilter, \"/**\")\n+                .build();\n+    }\n+\n     @Test\n     public void whenValidInput_thenCreateBook() throws IOException, Exception {\n         // assign - given\n-        Person book = new Person(\"sumit\", \"abc\", 100);\n+        Person person = new Person(\"sumit\", \"abc\", 100);\n \n         // act - when\n         ResultActions result = mockMvc.perform(post(\"/person\").accept(MediaType.APPLICATION_JSON)\n-            .contentType(MediaType.APPLICATION_JSON)\n-            .content(objectMapper.writeValueAsString(book)));\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(person)));\n \n         // assert - then\n         result.andExpect(status().isNoContent());",
    "output": "BAEL-3335 fixing PersonControllerIntegrationTest"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyDefaultTimezoneUnitTest.java\n@@ -0,0 +1,22 @@\n+package com.baeldung.timezone;\n+\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ModifyDefaultTimezoneUnitTest {\n+\n+    @Test\n+    public void givenDefaultTimezoneSet_thenDateTimezoneIsCorrect() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Portugal\"));\n+        Date date = new Date();\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.setTime(date);\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"Portugal\"));\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/timezone/ModifyTimezonePropertyUnitTest.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.timezone;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ModifyTimezonePropertyUnitTest {\n+\n+    @Before\n+    public void setup() {\n+        System.setProperty(\"user.timezone\", \"IST\");\n+        TimeZone.setDefault(null);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        System.clearProperty(\"user.timezone\");\n+    }\n+\n+    @Test\n+    public void givenTimezonePropertySet_thenDateTimezoneIsCorrect() {\n+        Date date = new Date();\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.setTime(date);\n+        assertEquals(calendar.getTimeZone(), TimeZone.getTimeZone(\"IST\"));\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "[BAEL-3302] How to set the JVM Timezone"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n@@ -0,0 +1,102 @@\n+package com.baeldung.list;\n+\n+public class CircularLinkedList {\n+\n+    Node head = null;\n+    Node tail = null;\n+\n+    public void addNode(int value) {\n+\n+        Node newNode = new Node(value);\n+\n+        // If no elements are present, make the newly addNodeed node as head\n+        if (head == null) {\n+            head = newNode;\n+        }\n+        // If there are elements already present, the existing tail should point to new node\n+        else {\n+            tail.nextNode = newNode;\n+        }\n+\n+        // Irrespective of whether or not elements are addNodeed, assign the\n+        // tail to newNode and the nextNode for tail as head\n+        tail = newNode;\n+        tail.nextNode = head;\n+    }\n+\n+    public boolean containsNode(int searchValue) {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        // If list is empty no need of traversal and can return false\n+        if (head == null) {\n+            return false;\n+        } else {\n+            do {\n+                // Compares the search value with each node value present in the list\n+                if (currentNode.value == searchValue) {\n+                    return true;\n+                }\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+            return false;\n+        }\n+    }\n+\n+    public void deleteNode(int valueToDelete) {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        // If list is non empty\n+        if (head != null) {\n+            // If the node to delete is the head node itself,\n+            // update the head as the next node of current head\n+            // and the nextNode of tail as new head\n+            if (currentNode.value == valueToDelete) {\n+                head = head.nextNode;\n+                tail.nextNode = head;\n+                currentNode = null;\n+            } else {\n+                do {\n+                    // Fetch the next node of current node\n+                    Node nextNode = currentNode.nextNode;\n+                    // If the value to delete matches the next node's value,\n+                    // update the next node of current node as the next node of present next node\n+                    if (nextNode.value == valueToDelete) {\n+                        currentNode.nextNode = nextNode.nextNode;\n+                        nextNode = null;\n+                        break;\n+                    }\n+                    currentNode = currentNode.nextNode;\n+                } while (currentNode != head);\n+            }\n+        }\n+    }\n+\n+    public void traverseList() {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        if (head != null) {\n+            do {\n+                System.out.print(currentNode.value + \" \");\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+        }\n+    }\n+\n+}\n+\n+class Node {\n+\n+    int value;\n+    Node nextNode;\n+\n+    public Node(int value) {\n+        this.value = value;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n@@ -0,0 +1,60 @@\n+package com.baeldung.list;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class CircularLinkedListUnitTest {\n+\n+    @Test\n+    public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(8));\n+        assertTrue(cll.containsNode(37));\n+    }\n+    \n+    @Test\n+    public void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertFalse(cll.containsNode(11));\n+    }\n+    \n+    @Test\n+    public void givenACircularLinkedList_WhenDeletingElements_ThenListDoesNotContainThoseElements() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(13));\n+        cll.deleteNode(13);\n+        assertFalse(cll.containsNode(13));\n+        \n+        assertTrue(cll.containsNode(1));\n+        cll.deleteNode(1);\n+        assertFalse(cll.containsNode(1));\n+        \n+        assertTrue(cll.containsNode(46));\n+        cll.deleteNode(46);\n+        assertFalse(cll.containsNode(46));  \n+    }\n+\n+    private CircularLinkedList createCircularLinkedList() {\n+\n+        CircularLinkedList cll = new CircularLinkedList();\n+\n+        cll.addNode(13);\n+        cll.addNode(7);\n+        cll.addNode(24);\n+        cll.addNode(1);\n+        cll.addNode(8);\n+        cll.addNode(37);\n+        cll.addNode(46);\n+\n+        return cll;\n+    }\n+\n+}",
    "output": "BAEL-3453 - Circular linked list Java implementation"
  },
  {
    "input": "diff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n@@ -1,16 +0,0 @@\n-package com.baeldung.hexagonal.arch;\n-\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n-\n-@SpringBootApplication\n-@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })\n-public class AddressBookApplication {\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(AddressBookApplication.class, args);\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n@@ -1,32 +0,0 @@\n-package com.baeldung.hexagonal.arch.adapter.controller;\n-\n-import java.util.List;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n-\n-@RestController\n-@RequestMapping(\"/contacts\")\n-public class AddressBookController {\n-\n-    @Autowired\n-    private AddressBookService addressBookService;\n-\n-    @PostMapping\n-    public void addContact(@RequestBody Contact contact) {\n-        addressBookService.createContact(contact);\n-    }\n-\n-    @GetMapping\n-    public List<Contact> getAllContacts() {\n-        return addressBookService.getAllContacts();\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n@@ -1,30 +0,0 @@\n-package com.baeldung.hexagonal.arch.adapter.repository;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.springframework.stereotype.Repository;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n-\n-@Repository\n-public class ContactRepositoryImpl implements ContactRepository {\n-\n-    private Map<String, Contact> contactsRepo = new HashMap<String, Contact>();\n-\n-    @Override\n-    public void createContact(Contact contact) {\n-        contactsRepo.put(contact.getName(), contact);\n-    }\n-\n-    @Override\n-    public List<Contact> getAllContacts() {\n-        return contactsRepo.values()\n-            .stream()\n-            .collect(Collectors.toList());\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n@@ -1,33 +0,0 @@\n-package com.baeldung.hexagonal.arch.core.domain;\n-\n-public class Contact {\n-\n-    private String name;\n-    private String address;\n-    private int contactNumber;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getAddress() {\n-        return address;\n-    }\n-\n-    public void setAddress(String address) {\n-        this.address = address;\n-    }\n-\n-    public int getContactNumber() {\n-        return contactNumber;\n-    }\n-\n-    public void setContactNumber(int contactNumber) {\n-        this.contactNumber = contactNumber;\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n@@ -1,28 +0,0 @@\n-package com.baeldung.hexagonal.arch.core.service;\n-\n-import java.util.List;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n-import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n-\n-@Service\n-public class AddressBookServiceImpl implements AddressBookService {\n-\n-    @Autowired\n-    ContactRepository contactRepository;\n-\n-    @Override\n-    public void createContact(Contact contact) {\n-        contactRepository.createContact(contact);\n-    }\n-\n-    @Override\n-    public List<Contact> getAllContacts() {\n-        return contactRepository.getAllContacts();\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n@@ -1,13 +0,0 @@\n-package com.baeldung.hexagonal.arch.port.repo;\n-\n-import java.util.List;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-\n-public interface ContactRepository {\n-\n-    void createContact(Contact contact);\n-\n-    List<Contact> getAllContacts();\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n@@ -1,13 +0,0 @@\n-package com.baeldung.hexagonal.arch.port.service;\n-\n-import java.util.List;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-\n-public interface AddressBookService {\n-\n-    public void createContact(Contact contact);\n-\n-    public List<Contact> getAllContacts();\n-\n-}",
    "output": "Removed source code for evaluation article"
  },
  {
    "input": "diff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.hexagonal.arch;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+\n+@SpringBootApplication\n+@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })\n+public class AddressBookApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(AddressBookApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.hexagonal.arch.adapter.controller;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n+\n+@RestController\n+@RequestMapping(\"/contacts\")\n+public class AddressBookController {\n+\n+    @Autowired\n+    private AddressBookService addressBookService;\n+\n+    @PostMapping\n+    public void addContact(@RequestBody Contact contact) {\n+        addressBookService.createContact(contact);\n+    }\n+\n+    @GetMapping\n+    public List<Contact> getAllContacts() {\n+        return addressBookService.getAllContacts();\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n@@ -0,0 +1,30 @@\n+package com.baeldung.hexagonal.arch.adapter.repository;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n+\n+@Repository\n+public class ContactRepositoryImpl implements ContactRepository {\n+\n+    private Map<String, Contact> contactsRepo = new HashMap<String, Contact>();\n+\n+    @Override\n+    public void createContact(Contact contact) {\n+        contactsRepo.put(contact.getName(), contact);\n+    }\n+\n+    @Override\n+    public List<Contact> getAllContacts() {\n+        return contactsRepo.values()\n+            .stream()\n+            .collect(Collectors.toList());\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.hexagonal.arch.core.domain;\n+\n+public class Contact {\n+\n+    private String name;\n+    private String address;\n+    private int contactNumber;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public int getContactNumber() {\n+        return contactNumber;\n+    }\n+\n+    public void setContactNumber(int contactNumber) {\n+        this.contactNumber = contactNumber;\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.hexagonal.arch.core.service;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n+import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n+\n+@Service\n+public class AddressBookServiceImpl implements AddressBookService {\n+\n+    @Autowired\n+    ContactRepository contactRepository;\n+\n+    @Override\n+    public void createContact(Contact contact) {\n+        contactRepository.createContact(contact);\n+    }\n+\n+    @Override\n+    public List<Contact> getAllContacts() {\n+        return contactRepository.getAllContacts();\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.hexagonal.arch.port.repo;\n+\n+import java.util.List;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+\n+public interface ContactRepository {\n+\n+    void createContact(Contact contact);\n+\n+    List<Contact> getAllContacts();\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.hexagonal.arch.port.service;\n+\n+import java.util.List;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+\n+public interface AddressBookService {\n+\n+    public void createContact(Contact contact);\n+\n+    public List<Contact> getAllContacts();\n+\n+}",
    "output": "Example for hexagonal architecture in java"
  },
  {
    "input": "diff --git a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n--- a/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n+++ b/data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java\n@@ -0,0 +1,102 @@\n+package com.baeldung.list;\n+\n+public class CircularLinkedList {\n+\n+    Node head = null;\n+    Node tail = null;\n+\n+    public void addNode(int value) {\n+\n+        Node newNode = new Node(value);\n+\n+        // If no elements are present, make the newly addNodeed node as head\n+        if (head == null) {\n+            head = newNode;\n+        }\n+        // If there are elements already present, the existing tail should point to new node\n+        else {\n+            tail.nextNode = newNode;\n+        }\n+\n+        // Irrespective of whether or not elements are addNodeed, assign the\n+        // tail to newNode and the nextNode for tail as head\n+        tail = newNode;\n+        tail.nextNode = head;\n+    }\n+\n+    public boolean containsNode(int searchValue) {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        // If list is empty no need of traversal and can return false\n+        if (head == null) {\n+            return false;\n+        } else {\n+            do {\n+                // Compares the search value with each node value present in the list\n+                if (currentNode.value == searchValue) {\n+                    return true;\n+                }\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+            return false;\n+        }\n+    }\n+\n+    public void deleteNode(int valueToDelete) {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        // If list is non empty\n+        if (head != null) {\n+            // If the node to delete is the head node itself,\n+            // update the head as the next node of current head\n+            // and the nextNode of tail as new head\n+            if (currentNode.value == valueToDelete) {\n+                head = head.nextNode;\n+                tail.nextNode = head;\n+                currentNode = null;\n+            } else {\n+                do {\n+                    // Fetch the next node of current node\n+                    Node nextNode = currentNode.nextNode;\n+                    // If the value to delete matches the next node's value,\n+                    // update the next node of current node as the next node of present next node\n+                    if (nextNode.value == valueToDelete) {\n+                        currentNode.nextNode = nextNode.nextNode;\n+                        nextNode = null;\n+                        break;\n+                    }\n+                    currentNode = currentNode.nextNode;\n+                } while (currentNode != head);\n+            }\n+        }\n+    }\n+\n+    public void traverseList() {\n+\n+        // Start traversing from the head\n+        Node currentNode = head;\n+\n+        if (head != null) {\n+            do {\n+                System.out.print(currentNode.value + \" \");\n+                currentNode = currentNode.nextNode;\n+            } while (currentNode != head);\n+        }\n+    }\n+\n+}\n+\n+class Node {\n+\n+    int value;\n+    Node nextNode;\n+\n+    public Node(int value) {\n+        this.value = value;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n--- a/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n+++ b/data-structures/src/test/java/com/baeldung/list/CircularLinkedListUnitTest.java\n@@ -0,0 +1,60 @@\n+package com.baeldung.list;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class CircularLinkedListUnitTest {\n+\n+    @Test\n+    public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(8));\n+        assertTrue(cll.containsNode(37));\n+    }\n+    \n+    @Test\n+    public void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertFalse(cll.containsNode(11));\n+    }\n+    \n+    @Test\n+    public void givenACircularLinkedList_WhenDeletingElements_ThenListDoesNotContainThoseElements() {\n+\n+        CircularLinkedList cll = createCircularLinkedList();\n+\n+        assertTrue(cll.containsNode(13));\n+        cll.deleteNode(13);\n+        assertFalse(cll.containsNode(13));\n+        \n+        assertTrue(cll.containsNode(1));\n+        cll.deleteNode(1);\n+        assertFalse(cll.containsNode(1));\n+        \n+        assertTrue(cll.containsNode(46));\n+        cll.deleteNode(46);\n+        assertFalse(cll.containsNode(46));  \n+    }\n+\n+    private CircularLinkedList createCircularLinkedList() {\n+\n+        CircularLinkedList cll = new CircularLinkedList();\n+\n+        cll.addNode(13);\n+        cll.addNode(7);\n+        cll.addNode(24);\n+        cll.addNode(1);\n+        cll.addNode(8);\n+        cll.addNode(37);\n+        cll.addNode(46);\n+\n+        return cll;\n+    }\n+\n+}",
    "output": "BAEL-3453 - Circular linked list Java implementation"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/CollectionsConcurrencyIssues.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/CollectionsConcurrencyIssues.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/CollectionsConcurrencyIssues.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/CollectionsConcurrencyIssues.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.commonissues;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class CollectionsConcurrencyIssues {\n+\n+    private void putIfAbsentList_NonAtomicOperation_ProneToConcurrencyIssues() {\n+        List<String> list = Collections.synchronizedList(new ArrayList<>());\n+        if (!list.contains(\"foo\")) {\n+            list.add(\"foo\");\n+        }\n+    }\n+\n+    private void putIfAbsentList_AtomicOperation_ThreadSafe() {\n+        List<String> list = Collections.synchronizedList(new ArrayList<>());\n+        synchronized (list) {\n+            if (!list.contains(\"foo\")) {\n+                list.add(\"foo\");\n+            }\n+        }\n+    }\n+\n+    private void putIfAbsentMap_NonAtomicOperation_ProneToConcurrencyIssues() {\n+        Map<String, String> map = new ConcurrentHashMap<>();\n+        if (!map.containsKey(\"foo\")) {\n+            map.put(\"foo\", \"bar\");\n+        }\n+    }\n+\n+    private void putIfAbsentMap_AtomicOperation_BetterApproach() {\n+        Map<String, String> map = new ConcurrentHashMap<>();\n+        synchronized (map) {\n+            if (!map.containsKey(\"foo\")) {\n+                map.put(\"foo\", \"bar\");\n+            }\n+        }\n+    }\n+\n+    private void putIfAbsentMap_AtomicOperation_BestApproach() {\n+        Map<String, String> map = new ConcurrentHashMap<>();\n+        map.putIfAbsent(\"foo\", \"bar\");\n+    }\n+\n+    private void computeIfAbsentMap_AtomicOperation() {\n+        Map<String, String> map = new ConcurrentHashMap<>();\n+        map.computeIfAbsent(\"foo\", key -> key + \"bar\");\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/Counter.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/Counter.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/Counter.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/Counter.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.commonissues;\n+\n+class Counter {\n+    private int counter = 0;\n+\n+    public void increment() {\n+        counter++;\n+    }\n+\n+    public int getValue() {\n+        return counter;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/DeadlockExample.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/DeadlockExample.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/DeadlockExample.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/DeadlockExample.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.commonissues;\n+\n+public class DeadlockExample {\n+\n+    public static Object lock1 = new Object();\n+    public static Object lock2 = new Object();\n+\n+    public static void main(String args[]) {\n+        Thread threadA = new Thread(() -> {\n+            synchronized (lock1) {\n+                System.out.println(\"ThreadA: Holding lock 1...\");\n+                sleep();\n+                System.out.println(\"ThreadA: Waiting for lock 2...\");\n+\n+                synchronized (lock2) {\n+                    System.out.println(\"ThreadA: Holding lock 1 & 2...\");\n+                }\n+            }\n+        });\n+        Thread threadB = new Thread(() -> {\n+            synchronized (lock2) {\n+                System.out.println(\"ThreadB: Holding lock 2...\");\n+                sleep();\n+                System.out.println(\"ThreadB: Waiting for lock 1...\");\n+\n+                synchronized (lock1) {\n+                    System.out.println(\"ThreadB: Holding lock 1 & 2...\");\n+                }\n+            }\n+        });\n+        threadA.start();\n+        threadB.start();\n+    }\n+\n+    private static void sleep() {\n+        try {\n+            Thread.sleep(100);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SimpleDateFormatThreadUnsafetyExample.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SimpleDateFormatThreadUnsafetyExample.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SimpleDateFormatThreadUnsafetyExample.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SimpleDateFormatThreadUnsafetyExample.java\n@@ -0,0 +1,35 @@\n+package com.baeldung.commonissues;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class SimpleDateFormatThreadUnsafetyExample {\n+\n+    private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n+\n+    public static void main(String[] args) {\n+        String dateStr = \"2019-10-29T11:12:21\";\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(10);\n+\n+        for (int i = 0; i < 20; i++) {\n+            executorService.submit(() -> parseDate(dateStr));\n+        }\n+\n+        executorService.shutdown();\n+    }\n+\n+    private static void parseDate(String dateStr) {\n+        try {\n+            Date date = simpleDateFormat.parse(dateStr);\n+            System.out.println(\"Successfully Parsed Date \" + date);\n+        } catch (ParseException e) {\n+            System.out.println(\"ParseError \" + e.getMessage());\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedCounter.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedCounter.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedCounter.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedCounter.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.commonissues;\n+\n+class SynchronizedCounter {\n+    private int counter = 0;\n+\n+    public synchronized void increment() {\n+        counter++;\n+    }\n+\n+    public synchronized int getValue() {\n+        return counter;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedVolatileCounter.java b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedVolatileCounter.java\n--- a/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedVolatileCounter.java\n+++ b/core-java-modules/core-java-concurrency-advanced-3/src/main/java/com/baeldung/commonissues/SynchronizedVolatileCounter.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.commonissues;\n+\n+class SynchronizedVolatileCounter {\n+    private volatile int counter = 0;\n+\n+    public synchronized void increment() {\n+        counter++;\n+    }\n+\n+    public int getValue() {\n+        return counter;\n+    }\n+}\n\\ No newline at end of file",
    "output": "[BAEL-3351] - Common Concurrency Pitfalls in Java (#8104)"
  },
  {
    "input": "diff --git a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n--- a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n+++ b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java\n@@ -13,7 +13,7 @@\n \n @RunWith(SpringRunner.class)\n @SpringBootTest\n-public class ManualFlywayMigrationTest {\n+public class ManualFlywayMigrationIntegrationTest {\n \n     @Autowired\n     private Flyway flyway;",
    "output": "BAEL-3498: Fix test's name"
  },
  {
    "input": "diff --git a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n--- a/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n+++ b/persistence-modules/flyway/src/main/java/com/baeldung/flywaycallbacks/EmptyMigrationStrategyConfig.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.flywaycallbacks;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.flywaydb.core.Flyway;\n+import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class EmptyMigrationStrategyConfig {\n+\n+    private Log log = LogFactory.getLog(\"EmptyMigrationStrategy\");\n+\n+    @Bean\n+    public FlywayMigrationStrategy flywayMigrationStrategy() {\n+        return new FlywayMigrationStrategy() {\n+            @Override\n+            public void migrate(Flyway flyway) {\n+                log.info(\"Skipping Flyway migration!\");\n+            }\n+        };\n+    }\n+}\n\ndiff --git a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationTest.java b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationTest.java\n--- a/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationTest.java\n+++ b/persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationTest.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.flywaycallbacks;\n+\n+import org.flywaydb.core.Flyway;\n+import org.flywaydb.core.api.MigrationInfo;\n+import org.flywaydb.core.api.MigrationState;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class ManualFlywayMigrationTest {\n+\n+    @Autowired\n+    private Flyway flyway;\n+\n+    @Test\n+    public void skipAutomaticAndTriggerManualFlywayMigration() {\n+\n+        assertAllMigrationsAre(MigrationState.PENDING);\n+\n+        flyway.migrate();\n+\n+        assertAllMigrationsAre(MigrationState.SUCCESS);\n+    }\n+\n+    private void assertAllMigrationsAre(MigrationState expectedState) {\n+        for (MigrationInfo migrationInfo : flyway.info().all()) {\n+            assertThat(migrationInfo.getState()).isEqualTo(expectedState);\n+        }\n+    }\n+}",
    "output": "BAEL-3498: Conditionally Disable Flyway"
  },
  {
    "input": "diff --git a/aws/src/test/java/com/baeldung/dynamodb/rule/LocalDbCreationRule.java b/aws/src/test/java/com/baeldung/dynamodb/rule/LocalDbCreationRule.java\n--- a/aws/src/test/java/com/baeldung/dynamodb/rule/LocalDbCreationRule.java\n+++ b/aws/src/test/java/com/baeldung/dynamodb/rule/LocalDbCreationRule.java\n@@ -15,7 +15,7 @@ public LocalDbCreationRule() {\n     @Override\n     protected void before() throws Exception {\n         String port = \"8000\";\n-        this.server = ServerRunner.createServerFromCommandLineArgs(new String[]{\"-inMemory\", \"-port\", port});\n+        this.server = ServerRunner.createServerFromCommandLineArgs(new String[]{\"-inMemory\",\"-sharedDb\" ,\"-port\", port});\n         server.start();\n     }\n ",
    "output": "Update LocalDbCreationRule to respect shareDb parameter for embedded DynamoDB (#8058)"
  },
  {
    "input": "diff --git a/spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java b/spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java\n--- a/spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java\n+++ b/spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java\n@@ -19,7 +19,7 @@\n public class ComponentScanAssignableTypeFilterAppIntegrationTest {\n \n     @Test\n-    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBeanOfAssignableTypeAndItsSubClass() {\n+    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBean() {\n         ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ComponentScanAssignableTypeFilterApp.class);\n         List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\n             .filter(bean -> !bean.contains(\"org.springframework\") && !bean.contains(\"componentScanAssignableTypeFilterApp\"))",
    "output": "Update ComponentScanAssignableTypeFilterAppIntegrationTest.java (#8045)"
  },
  {
    "input": "diff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n@@ -42,7 +42,7 @@ private void doGraphFrameOperations(GraphFrame graph) {\n \n     private void doGraphFrameAlgorithms(GraphFrame graph) {\n \n-        graph.pageRank().maxIter(20).resetProbability(0.0001).run().vertices().show();\n+        graph.pageRank().maxIter(20).resetProbability(0.15).run().vertices().show();\n \n         graph.connectedComponents().run().show();\n \n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n@@ -27,7 +27,7 @@ public GraphFrame getGraphFrameUserRelationship() throws IOException {\n         Path temp = Files.createTempDirectory(\"sparkGraphFrames\");\n         SparkSession session = SparkSession.builder()\n             .appName(\"SparkGraphFrameSample\")\n-            .config(\"spark.sql.warehouse.dir\", temp.toString())//\"/file:C:/temp\"\n+            .config(\"spark.sql.warehouse.dir\", temp.toString())\n             .sparkContext(getSparkContext().sc())\n             .master(\"local[*]\")\n             .getOrCreate();\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/User.java b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n@@ -22,6 +22,6 @@ public String getName() {\n     \n     @Override\n     public String toString() {\n-    \treturn \"struct<\" + id + \",\" + name + \">\";\n+        return \"<\" + id + \",\" + name + \">\";\n     }\n }",
    "output": "BAEL-3086 - Clean up"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/Benchmarking.java b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/Benchmarking.java\n--- a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/Benchmarking.java\n+++ b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/Benchmarking.java\n@@ -1,6 +1,9 @@\n package com.baeldung.isnumeric;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n \n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n@@ -14,6 +17,8 @@\n import org.openjdk.jmh.runner.options.OptionsBuilder;\n \n public class Benchmarking {\n+    private static final TestMode MODE = TestMode.DIVERS;\n+\n     public static void main(String[] args) throws RunnerException {\n         Options opt = new OptionsBuilder().include(Benchmarking.class.getSimpleName())\n             .forks(1)\n@@ -22,52 +27,89 @@ public static void main(String[] args) throws RunnerException {\n         new Runner(opt).run();\n     }\n \n+    private static final IsNumeric subject = new IsNumeric();\n+\n     @State(Scope.Thread)\n     public static class ExecutionPlan {\n-        public String number = Integer.toString(Integer.MAX_VALUE);\n-        public boolean isNumber = false;\n-        public IsNumeric isNumeric = new IsNumeric();\n+        private final Map<String, Boolean> testPlan = testPlan();\n+\n+        void validate(Function<String, Boolean> functionUnderTest) {\n+            testPlan.forEach((key, value) -> {\n+                Boolean result = functionUnderTest.apply(key);\n+\n+                assertEquals(value, result, key);\n+            });\n+        }\n+\n+        private void assertEquals(Boolean expectedResult, Boolean result, String input) {\n+            if (result != expectedResult) {\n+                throw new IllegalStateException(\"The output does not match the expected output, for input: \" + input);\n+            }\n+        }\n+\n+        private Map<String, Boolean> testPlan() {\n+            HashMap<String, Boolean> plan = new HashMap<>();\n+            plan.put(Integer.toString(Integer.MAX_VALUE), true);\n+\n+            if (MODE == TestMode.SIMPLE) {\n+                return plan;\n+            }\n+\n+            plan.put(\"x0\", false);\n+            plan.put(\"0..005\", false);\n+            plan.put(\"--11\", false);\n+            plan.put(\"test\", false);\n+            plan.put(null, false);\n+            for (int i = 0; i < 94; i++) {\n+                plan.put(Integer.toString(i), true);\n+            }\n+            return plan;\n+        }\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingCoreJava(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingCoreJava(plan.number);\n+        plan.validate(subject::usingCoreJava);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingRegularExpressions(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingRegularExpressions(plan.number);\n+        plan.validate(subject::usingPreCompiledRegularExpressions);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingNumberUtils_isCreatable(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingNumberUtils_isCreatable(plan.number);\n+        plan.validate(subject::usingNumberUtils_isCreatable);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingNumberUtils_isParsable(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingNumberUtils_isParsable(plan.number);\n+        plan.validate(subject::usingNumberUtils_isParsable);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingStringUtils_isNumeric(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingStringUtils_isNumeric(plan.number);\n+        plan.validate(subject::usingStringUtils_isNumeric);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n     @OutputTimeUnit(TimeUnit.NANOSECONDS)\n     public void usingStringUtils_isNumericSpace(ExecutionPlan plan) {\n-        plan.isNumber = plan.isNumeric.usingStringUtils_isNumericSpace(plan.number);\n+        plan.validate(subject::usingStringUtils_isNumericSpace);\n+    }\n+\n+    private enum TestMode {\n+        SIMPLE, DIVERS\n     }\n }\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumeric.java b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumeric.java\n--- a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumeric.java\n+++ b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumeric.java\n@@ -1,20 +1,33 @@\n package com.baeldung.isnumeric;\n \n+import java.util.regex.Pattern;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n \n public class IsNumeric {\n+    private final Pattern pattern = Pattern.compile(\"-?\\\\d+(\\\\.\\\\d+)?\");\n+\n     public boolean usingCoreJava(String strNum) {\n+        if (strNum == null) {\n+            return false;\n+        }\n+\n         try {\n             Double.parseDouble(strNum);\n-        } catch (NumberFormatException | NullPointerException nfe) {\n+        } catch (NumberFormatException nfe) {\n             return false;\n         }\n         return true;\n     }\n \n-    public boolean usingRegularExpressions(String strNum) {\n-        return strNum.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");\n+    public boolean usingPreCompiledRegularExpressions(String strNum) {\n+        if (strNum == null) {\n+            return false;\n+        }\n+\n+        return pattern.matcher(strNum)\n+            .matches();\n     }\n \n     public boolean usingNumberUtils_isCreatable(String strNum) {\n\ndiff --git a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumericDriver.java b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumericDriver.java\n--- a/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumericDriver.java\n+++ b/core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumericDriver.java\n@@ -13,8 +13,8 @@ public static void main(String[] args) {\n         boolean res = isNumeric.usingCoreJava(\"1001\");\n         LOG.info(\"Using Core Java : \" + res);\n \n-        res = isNumeric.usingRegularExpressions(\"1001\");\n-        LOG.info(\"Using Regular Expressions : \" + res);\n+        res = isNumeric.usingPreCompiledRegularExpressions(\"1001\");\n+        LOG.info(\"Using Pre-compiled Regular Expressions : \" + res);\n \n         res = isNumeric.usingNumberUtils_isCreatable(\"1001\");\n         LOG.info(\"Using NumberUtils.isCreatable : \" + res);\n\ndiff --git a/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/CoreJavaIsNumericUnitTest.java b/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/CoreJavaIsNumericUnitTest.java\n--- a/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/CoreJavaIsNumericUnitTest.java\n+++ b/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/CoreJavaIsNumericUnitTest.java\n@@ -6,9 +6,13 @@\n \n public class CoreJavaIsNumericUnitTest {\n     public static boolean isNumeric(String strNum) {\n+        if (strNum == null) {\n+            return false;\n+        }\n+\n         try {\n-            double d = Double.parseDouble(strNum);\n-        } catch (NumberFormatException | NullPointerException nfe) {\n+            Double.parseDouble(strNum);\n+        } catch (NumberFormatException nfe) {\n             return false;\n         }\n         return true;\n\ndiff --git a/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/RegularExpressionsUnitTest.java b/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/RegularExpressionsUnitTest.java\n--- a/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/RegularExpressionsUnitTest.java\n+++ b/core-java-modules/core-java-string-operations/src/test/java/com/baeldung/isnumeric/RegularExpressionsUnitTest.java\n@@ -2,11 +2,19 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.regex.Pattern;\n+\n import org.junit.Test;\n \n public class RegularExpressionsUnitTest {\n-    public static boolean isNumeric(String strNum) {\n-        return strNum.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");\n+    private final Pattern pattern = Pattern.compile(\"-?\\\\d+(\\\\.\\\\d+)?\");\n+\n+    public boolean isNumeric(String strNum) {\n+        if (strNum == null) {\n+            return false;\n+        }\n+        return pattern.matcher(strNum)\n+            .matches();\n     }\n \n     @Test\n@@ -17,6 +25,7 @@ public void whenUsingRegularExpressions_thenTrue() {\n         assertThat(isNumeric(\"-200\")).isTrue();\n \n         // Invalid Numbers\n+        assertThat(isNumeric(null)).isFalse();\n         assertThat(isNumeric(\"abc\")).isFalse();\n     }\n }",
    "output": "Some changes in the is-numeric (#8171)\n\n* Perform a null-check instead of catching NPE's\r\n* Use pre-compiled regular expressions and perform a null-check before testing it against the regex\r\n* Made the test usable with two modes, one using a single values and another one using a more realistic workload.\r\n* Upgraded the commons-lang version"
  },
  {
    "input": "diff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n@@ -15,7 +15,9 @@ public String getType() {\n \n     @Override\n     public Tree copy() {\n-        return new PineTree(this.getMass(), this.getHeight());\n+        PineTree pineTreeClone = new PineTree(this.getMass(), this.getHeight());\n+        pineTreeClone.setPosition(this.getPosition());\n+        return pineTreeClone;\n     }\n \n }\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n@@ -8,14 +8,16 @@ public PlasticTree(double mass, double height) {\n         super(mass, height);\n         this.name = \"PlasticTree\";\n     }\n-    \n+\n     public String getName() {\n         return name;\n     }\n \n     @Override\n     public Tree copy() {\n-        return new PlasticTree(this.getMass(), this.getHeight());\n+        PlasticTree plasticTreeClone = new PlasticTree(this.getMass(), this.getHeight());\n+        plasticTreeClone.setPosition(this.getPosition());\n+        return plasticTreeClone;\n     }\n \n }\n\ndiff --git a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n--- a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n+++ b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n@@ -2,6 +2,10 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import static java.util.stream.Collectors.toList;\n+\n import org.junit.jupiter.api.Test;\n \n public class TreePrototypeUnitTest {\n@@ -38,4 +42,27 @@ public void givenAPineTreePrototypeWhenClonedThenCreateA_Clone() {\n         assertEquals(position, pineTree.getPosition());\n         assertEquals(otherPosition, anotherPineTree.getPosition());\n     }\n+    \n+    @Test\n+    public void givenA_ListOfTreesWhenClonedThenCreateListOfClones() {\n+        double mass = 10.0;\n+        double height = 3.7;\n+        Position position = new Position(3, 7);\n+        Position otherPosition = new Position(4, 8);\n+        \n+        PlasticTree plasticTree = new PlasticTree(mass, height);\n+        plasticTree.setPosition(position);\n+        PineTree pineTree = new PineTree(mass, height);\n+        pineTree.setPosition(otherPosition);\n+        \n+        List<Tree> trees = Arrays.asList(plasticTree, pineTree);\n+        \n+        List<Tree> treeClones = trees.stream().map(Tree::copy).collect(toList());\n+        \n+        Tree plasticTreeClone = treeClones.get(0);\n+        \n+        assertEquals(mass, plasticTreeClone.getMass());\n+        assertEquals(height, plasticTreeClone.getHeight());\n+        assertEquals(position, plasticTreeClone.getPosition());\n+    }\n }",
    "output": "BAEL-3091: The Prototype Pattern in Java (further changes based on suggestions)"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java\n@@ -5,7 +5,7 @@\n \n import org.junit.Test;\n \n-public class PrimTest {\n+public class PrimUnitTest {\n \n     @Test\n     public void givenAGraph_whenPrimRuns_thenPrintMST() {",
    "output": "fix"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.algorithms.prim;\n+\n+public class Edge {\n+\n+    private int weight;\n+    private boolean isIncluded = false;\n+    private boolean isPrinted = false;\n+\n+    public Edge (int weight){\n+        this.weight = weight;\n+    }\n+\n+    public int getWeight() {\n+        return weight;\n+    }\n+\n+    public void setWeight(int weight) {\n+        this.weight = weight;\n+    }\n+\n+    public boolean isIncluded() {\n+        return isIncluded;\n+    }\n+\n+    public void setIncluded(boolean included) {\n+        isIncluded = included;\n+    }\n+\n+    public boolean isPrinted() {\n+        return isPrinted;\n+    }\n+\n+    public void setPrinted(boolean printed) {\n+        isPrinted = printed;\n+    }\n+}\n+\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Prim.java\n@@ -0,0 +1,74 @@\n+package com.baeldung.algorithms.prim;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.math3.util.Pair;\n+\n+public class Prim {\n+\n+    private List<Vertex> graph;\n+\n+    public Prim(List<Vertex> graph){\n+        this.graph = graph;\n+    }\n+\n+    public void run(){\n+        if (graph.size() > 0){\n+            graph.get(0).setVisited(true);\n+        }\n+        while (isDisconnected()){\n+            Edge nextMinimum = new Edge(Integer.MAX_VALUE);\n+            Vertex nextVertex = graph.get(0);\n+            for (Vertex vertex : graph){\n+                if (vertex.isVisited()){\n+                    Pair<Vertex, Edge> candidate = vertex.nextMinimum();\n+                    if (candidate.getValue().getWeight() < nextMinimum.getWeight()){\n+                        nextMinimum = candidate.getValue();\n+                        nextVertex = candidate.getKey();\n+                    }\n+                }\n+            }\n+            nextMinimum.setIncluded(true);\n+            nextVertex.setVisited(true);\n+        }\n+    }\n+\n+    private boolean isDisconnected(){\n+        for (Vertex vertex : graph){\n+            if (!vertex.isVisited()){\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public String originalGraphToString(){\n+        StringBuilder sb = new StringBuilder();\n+        for (Vertex vertex : graph){\n+            sb.append(vertex.originalToString());\n+        }\n+        return sb.toString();\n+    }\n+\n+    public void resetPrintHistory(){\n+        for (Vertex vertex : graph){\n+            Iterator it = vertex.getEdges().entrySet().iterator();\n+            while (it.hasNext()) {\n+                Map.Entry pair = (Map.Entry) it.next();\n+                ((Edge)pair.getValue()).setPrinted(false);\n+            }\n+        }\n+    }\n+\n+    public String minimumSpanningTreeToString(){\n+        StringBuilder sb = new StringBuilder();\n+        for (Vertex vertex : graph){\n+            sb.append(vertex.includedToString());\n+        }\n+        return sb.toString();\n+    }\n+\n+}\n+\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Vertex.java\n@@ -0,0 +1,101 @@\n+package com.baeldung.algorithms.prim;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.commons.math3.util.Pair;\n+\n+public class Vertex {\n+\n+    private String label = null;\n+    private Map<Vertex, Edge> edges = new HashMap<>();\n+    private boolean isVisited = false;\n+\n+    public Vertex(String label){\n+        this.label = label;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public void setLabel(String label) {\n+        this.label = label;\n+    }\n+\n+    public Map<Vertex, Edge> getEdges() {\n+        return edges;\n+    }\n+\n+    public void addEdge(Vertex vertex, Edge edge){\n+        this.edges.put(vertex, edge);\n+    }\n+\n+    public boolean isVisited() {\n+        return isVisited;\n+    }\n+\n+    public void setVisited(boolean visited) {\n+        isVisited = visited;\n+    }\n+\n+    public Pair<Vertex, Edge> nextMinimum(){\n+        Edge nextMinimum = new Edge(Integer.MAX_VALUE);\n+        Vertex nextVertex = this;\n+        Iterator it = edges.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry pair = (Map.Entry) it.next();\n+            if (!((Vertex)pair.getKey()).isVisited()){\n+                if (!((Edge)pair.getValue()).isIncluded()) {\n+                    if (((Edge) pair.getValue()).getWeight() < nextMinimum.getWeight()) {\n+                        nextMinimum = (Edge) pair.getValue();\n+                        nextVertex = (Vertex) pair.getKey();\n+                    }\n+                }\n+            }\n+        }\n+        return new Pair<>(nextVertex, nextMinimum);\n+    }\n+\n+    public String originalToString(){\n+        StringBuilder sb = new StringBuilder();\n+        Iterator it = edges.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry pair = (Map.Entry) it.next();\n+            if (!((Edge)pair.getValue()).isPrinted()) {\n+                sb.append(getLabel());\n+                sb.append(\" --- \");\n+                sb.append(((Edge) pair.getValue()).getWeight());\n+                sb.append(\" --- \");\n+                sb.append(((Vertex) pair.getKey()).getLabel());\n+                sb.append(\"\\n\");\n+                ((Edge) pair.getValue()).setPrinted(true);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String includedToString(){\n+        StringBuilder sb = new StringBuilder();\n+        if (isVisited()) {\n+            Iterator it = edges.entrySet().iterator();\n+            while (it.hasNext()) {\n+                Map.Entry pair = (Map.Entry) it.next();\n+                if (((Edge) pair.getValue()).isIncluded()) {\n+                    if (!((Edge)pair.getValue()).isPrinted()) {\n+                        sb.append(getLabel());\n+                        sb.append(\" --- \");\n+                        sb.append(((Edge) pair.getValue()).getWeight());\n+                        sb.append(\" --- \");\n+                        sb.append(((Vertex) pair.getKey()).getLabel());\n+                        sb.append(\"\\n\");\n+                        ((Edge) pair.getValue()).setPrinted(true);\n+                    }\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n+\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimTest.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.algorithms.prim;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+public class PrimTest {\n+\n+    @Test\n+    public void givenAGraph_whenPrimRuns_thenPrintMST() {\n+        Prim prim = new Prim(createGraph());\n+        System.out.println(prim.originalGraphToString());\n+        System.out.println(\"----------------\");\n+        prim.run();\n+        System.out.println();\n+        prim.resetPrintHistory();\n+        System.out.println(prim.minimumSpanningTreeToString());\n+    }\n+\n+    public static List<Vertex> createGraph(){\n+        List<Vertex> graph = new ArrayList<>();\n+        Vertex a = new Vertex(\"A\");\n+        Vertex b = new Vertex(\"B\");\n+        Vertex c = new Vertex(\"C\");\n+        Vertex d = new Vertex(\"D\");\n+        Vertex e = new Vertex(\"E\");\n+        Edge ab = new Edge(2);\n+        a.addEdge(b, ab);\n+        b.addEdge(a, ab);\n+        Edge ac = new Edge(3);\n+        a.addEdge(c, ac);\n+        c.addEdge(a, ac);\n+        Edge bc = new Edge(2);\n+        b.addEdge(c, bc);\n+        c.addEdge(b, bc);\n+        Edge be = new Edge(5);\n+        b.addEdge(e, be);\n+        e.addEdge(b, be);\n+        Edge cd = new Edge(1);\n+        c.addEdge(d, cd);\n+        d.addEdge(c, cd);\n+        Edge ce = new Edge(1);\n+        c.addEdge(e, ce);\n+        e.addEdge(c, ce);\n+        graph.add(a);\n+        graph.add(b);\n+        graph.add(c);\n+        graph.add(d);\n+        graph.add(e);\n+        return graph;\n+    }\n+\n+}\n+",
    "output": "aaa"
  },
  {
    "input": "diff --git a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n--- a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n+++ b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.maths.calculator.basic;\n+\n+import java.util.InputMismatchException;\n+import java.util.Scanner;\n+\n+public class BasicCalculatorIfElse {\n+\n+    public static void main(String[] args) {\n+\n+        System.out.println(\"---------------------------------- \\n\" +\n+                \"Welcome to Basic Calculator \\n\" +\n+                \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" +\n+                \"1. Addition (+) \\n\" +\n+                \"2. Subtraction (-) \\n\" +\n+                \"3. Multiplication (* OR x) \\n\" +\n+                \"4. Division (/) \\n\");\n+\n+        Scanner scanner = new Scanner(System.in);\n+        try {\n+            System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n+            char operation = scanner.next().charAt(0);\n+\n+            if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n+                System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n+            }\n+\n+            System.out.println(\"Enter First Number: \");\n+            double num1 = scanner.nextDouble();\n+\n+            System.out.println(\"Enter Second Number: \");\n+            double num2 = scanner.nextDouble();\n+\n+            if (operation == '/' && num2 == 0.0) {\n+                System.err.println(\"Second Number cannot be zero for Division operation.\");\n+            }\n+\n+            if (operation == '+') {\n+                System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+            } else if (operation == '-') {\n+                System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+            } else if (operation == '*' || operation == 'x') {\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+            } else if (operation == '/') {\n+                System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+            } else {\n+                System.err.println(\"Invalid Operator Specified.\");\n+            }\n+        } catch (InputMismatchException exc) {\n+            System.err.println(exc.getMessage());\n+        } finally {\n+            scanner.close();\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n--- a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n+++ b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n@@ -0,0 +1,64 @@\n+package com.baeldung.maths.calculator.basic;\n+\n+import java.util.InputMismatchException;\n+import java.util.Scanner;\n+\n+public class BasicCalculatorSwitchCase {\n+    public static void main(String[] args) {\n+\n+        System.out.println(\"---------------------------------- \\n\"\n+            + \"Welcome to Basic Calculator \\n\"\n+            + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" +\n+                \"1. Addition (+) \\n\" +\n+                \"2. Subtraction (-) \\n\" +\n+                \"3. Multiplication (* OR x) \\n\" +\n+                \"4. Division (/) \\n\");\n+\n+        Scanner scanner = new Scanner(System.in);\n+        try {\n+            System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n+            char operation = scanner.next().charAt(0);\n+\n+            if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n+                System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n+            }\n+\n+            System.out.println(\"Enter First Number: \");\n+            double num1 = scanner.nextDouble();\n+\n+            System.out.println(\"Enter Second Number: \");\n+            double num2 = scanner.nextDouble();\n+\n+            if (operation == '/' && num2 == 0.0) {\n+                System.err.println(\"Second Number cannot be zero for Division operation.\");\n+            }\n+\n+            switch (operation) {\n+                case '+':\n+                    System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+                    break;\n+                case '-':\n+                    System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+                    break;\n+                case '*':\n+                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                    break;\n+                case 'x':\n+                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                    break;\n+                case '/':\n+                    System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+                    break;\n+                default:\n+                    System.err.println(\"Invalid Operator Specified.\");\n+                    break;\n+            }\n+        } catch (InputMismatchException exc) {\n+            System.err.println(exc.getMessage());\n+        } finally {\n+            scanner.close();\n+        }\n+    }\n+}\n+",
    "output": "BAEL-3506 (#8210)\n\n* BAEL-3506\r\n\r\n* BAEL-3506\r\n\r\n* BAEL-3506 - Added java-math-2 to parent pom."
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n@@ -124,7 +124,7 @@ private BinaryTreeModel createRightUnbalancedTree() {\n     }\n \n     @Test\n-    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n+    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n         \n         StringBuilder expected = new StringBuilder();\n         expected.append(\"root\").append(\"\\n\");\n@@ -144,7 +144,7 @@ public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n     }\n \n     @Test\n-    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n+    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n         \n         StringBuilder expected = new StringBuilder();\n         expected.append(\"root\").append(\"\\n\");\n@@ -163,7 +163,7 @@ public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter()\n     }\n \n     @Test\n-    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n+    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter_thenProduceCorrectOutput() {\n         \n         StringBuilder expected = new StringBuilder();\n         expected.append(\"root\").append(\"\\n\");",
    "output": "correct test method names as proper to our convention"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n@@ -16,7 +16,6 @@ private String traversePreOrder(BinaryTreeModel root) {\n \n         StringBuilder sb = new StringBuilder();\n         sb.append(root.getValue());\n-        sb.append(\"\\n\");\n \n         String pointerRight = \"└──\";\n         String pointerLeft = (root.getRight() != null) ? \"├──\" : \"└──\";\n@@ -32,10 +31,10 @@ private void traverseNodes(StringBuilder sb, String padding, String pointer, Bin\n \n         if (node != null) {\n \n+            sb.append(\"\\n\");\n             sb.append(padding);\n             sb.append(pointer);\n             sb.append(node.getValue());\n-            sb.append(\"\\n\");\n \n             StringBuilder paddingBuilder = new StringBuilder(padding);\n             if (hasRightSibling) {\n@@ -56,7 +55,7 @@ private void traverseNodes(StringBuilder sb, String padding, String pointer, Bin\n     }\n \n     public void print() {\n-        System.out.println(traversePreOrder(tree));\n+        System.out.print(traversePreOrder(tree));\n     }\n \n }\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeModelUnitTest.java\n@@ -1,19 +1,36 @@\n package com.baeldung.binarytree;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n-public class PrintingBinaryTreeUnitTest {\n+public class PrintingBinaryTreeModelUnitTest {\n \n     private BinaryTreeModel balanced;\n-    private BinaryTreeModel leftUnbalanced;\n-    private BinaryTreeModel rightUnbalanced;\n+    private BinaryTreeModel leftSkewed;\n+    private BinaryTreeModel rightSkewed;\n+    \n+    private OutputStream output;\n \n     @Before\n     public void setup() {\n         balanced = createBalancedTree();\n-        leftUnbalanced = createLeftUnbalancedTree();\n-        rightUnbalanced = createRightUnbalancedTree();\n+        leftSkewed = createLeftUnbalancedTree();\n+        rightSkewed = createRightUnbalancedTree();\n+        \n+        output = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(output));\n+    }\n+    \n+    @After\n+    public void tearDown() {\n+        System.setOut(System.out);\n     }\n \n     private BinaryTreeModel createBalancedTree() {\n@@ -48,7 +65,7 @@ private BinaryTreeModel createBalancedTree() {\n \n     private BinaryTreeModel createLeftUnbalancedTree() {\n \n-        BinaryTreeModel root = new BinaryTreeModel(\"left\");\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n \n         BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n         BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n@@ -78,7 +95,7 @@ private BinaryTreeModel createLeftUnbalancedTree() {\n \n     private BinaryTreeModel createRightUnbalancedTree() {\n \n-        BinaryTreeModel root = new BinaryTreeModel(\"right\");\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n \n         BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n         BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n@@ -108,17 +125,60 @@ private BinaryTreeModel createRightUnbalancedTree() {\n \n     @Test\n     public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"│  ├──node3\").append(\"\\n\");\n+        expected.append(\"│  │  └──node7\").append(\"\\n\");\n+        expected.append(\"│  │     ├──node8\").append(\"\\n\");\n+        expected.append(\"│  │     └──node9\").append(\"\\n\");\n+        expected.append(\"│  └──node4\").append(\"\\n\");\n+        expected.append(\"└──node2\").append(\"\\n\");\n+        expected.append(\"   ├──node5\").append(\"\\n\");\n+        expected.append(\"   └──node6\");\n+        \n         new BinaryTreePrinter(balanced).print();\n+        \n+        assertEquals(expected.toString(), output.toString());\n     }\n \n     @Test\n     public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n-        new BinaryTreePrinter(leftUnbalanced).print();\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"│  └──node3\").append(\"\\n\");\n+        expected.append(\"│     └──node4\").append(\"\\n\");\n+        expected.append(\"│        └──node5\").append(\"\\n\");\n+        expected.append(\"│           └──node6\").append(\"\\n\");\n+        expected.append(\"│              └──node7\").append(\"\\n\");\n+        expected.append(\"│                 └──node8\").append(\"\\n\");\n+        expected.append(\"└──node2\");\n+        \n+        new BinaryTreePrinter(leftSkewed).print();\n+        \n+        assertEquals(expected.toString(), output.toString());\n     }\n \n     @Test\n     public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n-        new BinaryTreePrinter(rightUnbalanced).print();\n+        \n+        StringBuilder expected = new StringBuilder();\n+        expected.append(\"root\").append(\"\\n\");\n+        expected.append(\"├──node1\").append(\"\\n\");\n+        expected.append(\"└──node2\").append(\"\\n\");\n+        expected.append(\"   └──node3\").append(\"\\n\");\n+        expected.append(\"      └──node4\").append(\"\\n\");\n+        expected.append(\"         └──node5\").append(\"\\n\");\n+        expected.append(\"            └──node6\").append(\"\\n\");\n+        expected.append(\"               └──node7\").append(\"\\n\");\n+        expected.append(\"                  └──node8\");\n+        \n+        new BinaryTreePrinter(rightSkewed).print();\n+        \n+        assertEquals(expected.toString(), output.toString());\n     }\n \n }",
    "output": "update unit tests"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n@@ -2,18 +2,16 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import org.junit.Test;\n-\n-import com.baeldung.datetime.sql.DateUtils;\n-\n import java.text.ParseException;\n-import java.util.Date;\n+import java.time.LocalDate;\n+\n+import org.junit.Test;\n \n public class DateUtilsUnitTest {\n \n     @Test\n     public void givenCurrentDate_thenTodayIsReturned() {\n-        assertEquals(DateUtils.getNow(), new Date());\n+        assertEquals(DateUtils.getNow().toLocalDate(), LocalDate.now());\n     }\n \n     @Test(expected = IllegalArgumentException.class)",
    "output": "[BAEL-19420] - Fixed DateUtilsUnitTest"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/daos/ItemRepository.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/daos/ItemRepository.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/daos/ItemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/daos/ItemRepository.java\n@@ -0,0 +1,9 @@\n+package com.baeldung.h2db.springboot.daos;\n+\n+import com.baeldung.h2db.springboot.models.Item;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import java.math.BigDecimal;\n+\n+public interface ItemRepository extends CrudRepository<Item, BigDecimal> {\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/models/Item.java b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/models/Item.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/models/Item.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/main/java/com/baeldung/h2db/springboot/models/Item.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.h2db.springboot.models;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+import java.math.BigDecimal;\n+\n+@Entity\n+public class Item {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    @NotNull\n+    private BigDecimal price;\n+}\n\ndiff --git a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/ItemIntegrationTest.java b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/ItemIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/ItemIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-h2/src/test/java/com/baeldung/ItemIntegrationTest.java\n@@ -0,0 +1,29 @@\n+package com.baeldung;\n+\n+import com.baeldung.h2db.springboot.SpringBootH2Application;\n+import com.baeldung.h2db.springboot.daos.ItemRepository;\n+import com.baeldung.h2db.springboot.models.Item;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import javax.validation.ConstraintViolationException;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = SpringBootH2Application.class)\n+public class ItemIntegrationTest {\n+\n+    @Autowired\n+    private ItemRepository itemRepository;\n+\n+    @Test\n+    public void shouldNotAllowToPersistNullItemsPrice() {\n+        assertThatThrownBy(() -> itemRepository.save(new Item()))\n+                .hasRootCauseInstanceOf(ConstraintViolationException.class)\n+                .hasStackTraceContaining(\"must not be null\");\n+    }\n+}",
    "output": "BAEL-3385: Hibernate @NotNull vs @Column(nullable = false) (#8194)\n\n* BAEL-3385: Hibernate @NotNull vs @Column(nullable = false)\r\n\r\n* BAEL-3385: Fix test's assertion"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.LocalDate;\r\n+import java.time.ZoneId;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+import org.apache.commons.lang3.time.DateUtils;\r\n+\r\n+import hirondelle.date4j.DateTime;\r\n+\r\n+public class DateComparisonUtils {\r\n+\r\n+    public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\r\n+        LocalDate localDate1 = date1.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        LocalDate localDate2 = date2.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        return localDate1.isEqual(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n+        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n+        return fmt.format(date1)\r\n+            .equals(fmt.format(date2));\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingCalendar(Date date1, Date date2) {\r\n+        Calendar calendar1 = Calendar.getInstance();\r\n+        calendar1.setTime(date1);\r\n+        Calendar calendar2 = Calendar.getInstance();\r\n+        calendar2.setTime(date2);\r\n+        return calendar1.get(Calendar.YEAR) == calendar2.get(Calendar.YEAR) && calendar1.get(Calendar.MONTH) == calendar2.get(Calendar.MONTH) && calendar1.get(Calendar.DAY_OF_MONTH) == calendar2.get(Calendar.DAY_OF_MONTH);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingApacheCommons(Date date1, Date date2) {\r\n+        return DateUtils.isSameDay(date1, date2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingJoda(Date date1, Date date2) {\r\n+        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(date1);\r\n+        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(date2);\r\n+        return localDate1.equals(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingDate4j(Date date1, Date date2) {\r\n+        DateTime dateObject1 = DateTime.forInstant(date1.getTime(), TimeZone.getDefault());\r\n+        DateTime dateObject2 = DateTime.forInstant(date2.getTime(), TimeZone.getDefault());\r\n+        return dateObject1.isSameDayAs(dateObject2);\r\n+    }\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.time.LocalDateTime;\r\n+import java.time.ZoneId;\r\n+import java.util.Date;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class DateComparisonUtilsUnitTest {\r\n+\r\n+    private Date day1Morning = toDate(LocalDateTime.of(2019, 10, 19, 6, 30, 40));\r\n+    private Date day1Evening = toDate(LocalDateTime.of(2019, 10, 19, 18, 30, 50));\r\n+    private Date day2Morning = toDate(LocalDateTime.of(2019, 10, 20, 6, 30, 50));\r\n+\r\n+    private Date toDate(LocalDateTime localDateTime) {\r\n+        return Date.from(localDateTime.atZone(ZoneId.systemDefault())\r\n+            .toInstant());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day1Evening));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Evening, day2Morning));\r\n+    }\r\n+}\r",
    "output": "Merge remote-tracking branch 'upstream/master'"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -33,8 +33,7 @@ public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionExcep\n         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());\n         executor.execute(() -> waitFor(100));\n \n-        assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\")))\n-                .isInstanceOf(RejectedExecutionException.class);\n+        assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\"))).isInstanceOf(RejectedExecutionException.class);\n     }\n \n     @Test\n@@ -97,8 +96,7 @@ public void givenExecutorIsTerminated_WhenSubmittedNewTask_ThenTheSaturationPoli\n         ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n         executor.shutdownNow();\n \n-        assertThatThrownBy(() -> executor.execute(() -> {}))\n-                .isInstanceOf(RejectedExecutionException.class);\n+        assertThatThrownBy(() -> executor.execute(() -> {})).isInstanceOf(RejectedExecutionException.class);\n     }\n \n     @Test\n@@ -107,8 +105,8 @@ public void givenExecutorIsTerminating_WhenSubmittedNewTask_ThenTheSaturationPol\n         executor.execute(() -> waitFor(100));\n         executor.shutdown();\n \n-        assertThatThrownBy(() -> executor.execute(() -> {}))\n-                .isInstanceOf(RejectedExecutionException.class);\n+        assertThatThrownBy(() -> executor.execute(() -> {\n+        })).isInstanceOf(RejectedExecutionException.class);\n     }\n \n     private static class GrowPolicy implements RejectedExecutionHandler {",
    "output": "Sample codes for RejectedExecutionHandler article."
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n@@ -7,7 +7,7 @@\n \n @Configuration\n @EnableWebMvc\n-@ComponentScan({ \"org.baeldung.web.controller\" })\n+@ComponentScan({ \"com.baeldung.web.controller\" })\n public class ResourceServerWebConfig implements WebMvcConfigurer {\n \n }\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n@@ -1,18 +1,18 @@\n-package org.baeldung.web.controller;\n+package com.baeldung.web.controller;\n \n-import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n-import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.baeldung.web.dto.Foo;\n+import com.baeldung.web.dto.Foo;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n+\n @Controller\n public class FooController {\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.web.dto;\n+package com.baeldung.web.dto;\n \n public class Foo {\n     private long id;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.ResourceServerApplication;\n+import com.baeldung.config.ResourceServerApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.ResourceServerApplication;\n+import com.baeldung.config.ResourceServerApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.stereotype.Component;\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.UiApplication;\n+import com.baeldung.config.UiApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.UiApplication;\n+import com.baeldung.config.UiApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n@@ -1,11 +1,10 @@\n-package org.baeldung.web;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Test;\n+package com.baeldung.web;\n \n import io.restassured.RestAssured;\n import io.restassured.response.Response;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n \n public class LiveTest {\n ",
    "output": "Merge pull request #8199 from catalin-burcea/BAEL-19176\n\n[BAEL-19176] - Move spring-zuul under spring-cloud"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n@@ -1,124 +0,0 @@\n-package com.baeldung.binarytree;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class PrintingBinaryTreeTest {\n-\n-    private BinaryTreeModel balanced;\n-    private BinaryTreeModel leftUnbalanced;\n-    private BinaryTreeModel rightUnbalanced;\n-\n-    @Before\n-    public void setup() {\n-        balanced = createBalancedTree();\n-        leftUnbalanced = createLeftUnbalancedTree();\n-        rightUnbalanced = createRightUnbalancedTree();\n-    }\n-\n-    private BinaryTreeModel createBalancedTree() {\n-\n-        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n-\n-        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n-        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n-        root.setLeft(node1);\n-        root.setRight(node2);\n-\n-        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n-        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n-        node1.setLeft(node3);\n-        node1.setRight(node4);\n-\n-        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n-        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n-        node2.setLeft(node5);\n-        node2.setRight(node6);\n-\n-        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n-        node3.setLeft(node7);\n-\n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        BinaryTreeModel node9 = new BinaryTreeModel(\"node9\");\n-        node7.setLeft(node8);\n-        node7.setRight(node9);\n-\n-        return root;\n-    }\n-\n-    private BinaryTreeModel createLeftUnbalancedTree() {\n-\n-        BinaryTreeModel root = new BinaryTreeModel(\"left\");\n-\n-        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n-        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n-        root.setLeft(node1);\n-        root.setRight(node2);\n-        \n-        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n-        node1.setLeft(node3);\n-        \n-        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n-        node3.setLeft(node4);\n-        \n-        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n-        node4.setLeft(node5);\n-        \n-        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n-        node5.setLeft(node6);\n-        \n-        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n-        node6.setLeft(node7);\n-        \n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        node7.setLeft(node8);\n-\n-        return root;\n-    }\n-\n-    private BinaryTreeModel createRightUnbalancedTree() {\n-\n-        BinaryTreeModel root = new BinaryTreeModel(\"right\");\n-\n-        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n-        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n-        root.setLeft(node1);\n-        root.setRight(node2);\n-        \n-        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n-        node2.setRight(node3);\n-        \n-        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n-        node3.setRight(node4);\n-        \n-        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n-        node4.setRight(node5);\n-        \n-        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n-        node5.setRight(node6);\n-        \n-        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n-        node6.setRight(node7);\n-        \n-        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n-        node7.setRight(node8);\n-\n-        return root;\n-    }\n-\n-    @Test\n-    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n-        new BinaryTreePrinter(balanced).print();\n-    }\n-\n-    @Test\n-    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n-        new BinaryTreePrinter(leftUnbalanced).print();\n-    }\n-\n-    @Test\n-    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n-        new BinaryTreePrinter(rightUnbalanced).print();\n-    }\n-\n-}",
    "output": "delete extra files"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n@@ -0,0 +1,124 @@\n+package com.baeldung.binarytree;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrintingBinaryTreeTest {\n+\n+    private BinaryTreeModel balanced;\n+    private BinaryTreeModel leftUnbalanced;\n+    private BinaryTreeModel rightUnbalanced;\n+\n+    @Before\n+    public void setup() {\n+        balanced = createBalancedTree();\n+        leftUnbalanced = createLeftUnbalancedTree();\n+        rightUnbalanced = createRightUnbalancedTree();\n+    }\n+\n+    private BinaryTreeModel createBalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+\n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node1.setLeft(node3);\n+        node1.setRight(node4);\n+\n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node2.setLeft(node5);\n+        node2.setRight(node6);\n+\n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node3.setLeft(node7);\n+\n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        BinaryTreeModel node9 = new BinaryTreeModel(\"node9\");\n+        node7.setLeft(node8);\n+        node7.setRight(node9);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createLeftUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"left\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node1.setLeft(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setLeft(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setLeft(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setLeft(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setLeft(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setLeft(node8);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createRightUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"right\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node2.setRight(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setRight(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setRight(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setRight(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setRight(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setRight(node8);\n+\n+        return root;\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(balanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(leftUnbalanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(rightUnbalanced).print();\n+    }\n+\n+}",
    "output": "Merge branch 'pr-BAEL-3408' of https://github.com/yavuztas/tutorials.git into pr-BAEL-3408"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.binarytree;\n+\n+public class BinaryTreeModel {\n+\n+    private Object value;\n+    private BinaryTreeModel left;\n+    private BinaryTreeModel right;\n+\n+    public BinaryTreeModel(Object value) {\n+        this.value = value;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+\n+    public BinaryTreeModel getLeft() {\n+        return left;\n+    }\n+\n+    public void setLeft(BinaryTreeModel left) {\n+        this.left = left;\n+    }\n+\n+    public BinaryTreeModel getRight() {\n+        return right;\n+    }\n+\n+    public void setRight(BinaryTreeModel right) {\n+        this.right = right;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n@@ -0,0 +1,62 @@\n+package com.baeldung.binarytree;\n+\n+public class BinaryTreePrinter {\n+\n+    private BinaryTreeModel tree;\n+\n+    public BinaryTreePrinter(BinaryTreeModel tree) {\n+        this.tree = tree;\n+    }\n+\n+    private String traversePreOrder(BinaryTreeModel root) {\n+\n+        if (root == null) {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(root.getValue());\n+        sb.append(\"\\n\");\n+\n+        String pointerRight = \"└──\";\n+        String pointerLeft = (root.getRight() != null) ? \"├──\" : \"└──\";\n+\n+        traverseNodes(sb, \"\", pointerLeft, root.getLeft(), root.getRight() != null);\n+        traverseNodes(sb, \"\", pointerRight, root.getRight(), false);\n+\n+        return sb.toString();\n+    }\n+\n+    private void traverseNodes(StringBuilder sb, String padding, String pointer, BinaryTreeModel node,\n+        boolean hasRightSibling) {\n+\n+        if (node != null) {\n+\n+            sb.append(padding);\n+            sb.append(pointer);\n+            sb.append(node.getValue());\n+            sb.append(\"\\n\");\n+\n+            StringBuilder paddingBuilder = new StringBuilder(padding);\n+            if (hasRightSibling) {\n+                paddingBuilder.append(\"│  \");\n+            } else {\n+                paddingBuilder.append(\"   \");\n+            }\n+\n+            String paddingForBoth = paddingBuilder.toString();\n+            String pointerRight = \"└──\";\n+            String pointerLeft = (node.getRight() != null) ? \"├──\" : \"└──\";\n+\n+            traverseNodes(sb, paddingForBoth, pointerLeft, node.getLeft(), node.getRight() != null);\n+            traverseNodes(sb, paddingForBoth, pointerRight, node.getRight(), false);\n+\n+        }\n+\n+    }\n+\n+    public void print() {\n+        System.out.println(traversePreOrder(tree));\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeUnitTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeUnitTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeUnitTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeUnitTest.java\n@@ -0,0 +1,124 @@\n+package com.baeldung.binarytree;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrintingBinaryTreeUnitTest {\n+\n+    private BinaryTreeModel balanced;\n+    private BinaryTreeModel leftUnbalanced;\n+    private BinaryTreeModel rightUnbalanced;\n+\n+    @Before\n+    public void setup() {\n+        balanced = createBalancedTree();\n+        leftUnbalanced = createLeftUnbalancedTree();\n+        rightUnbalanced = createRightUnbalancedTree();\n+    }\n+\n+    private BinaryTreeModel createBalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+\n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node1.setLeft(node3);\n+        node1.setRight(node4);\n+\n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node2.setLeft(node5);\n+        node2.setRight(node6);\n+\n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node3.setLeft(node7);\n+\n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        BinaryTreeModel node9 = new BinaryTreeModel(\"node9\");\n+        node7.setLeft(node8);\n+        node7.setRight(node9);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createLeftUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"left\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node1.setLeft(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setLeft(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setLeft(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setLeft(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setLeft(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setLeft(node8);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createRightUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"right\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node2.setRight(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setRight(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setRight(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setRight(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setRight(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setRight(node8);\n+\n+        return root;\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(balanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(leftUnbalanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(rightUnbalanced).print();\n+    }\n+\n+}",
    "output": "Add source code for BAEL-3408"
  },
  {
    "input": "diff --git a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreeModel.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.binarytree;\n+\n+public class BinaryTreeModel {\n+\n+    private Object value;\n+    private BinaryTreeModel left;\n+    private BinaryTreeModel right;\n+\n+    public BinaryTreeModel(Object value) {\n+        this.value = value;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+\n+    public BinaryTreeModel getLeft() {\n+        return left;\n+    }\n+\n+    public void setLeft(BinaryTreeModel left) {\n+        this.left = left;\n+    }\n+\n+    public BinaryTreeModel getRight() {\n+        return right;\n+    }\n+\n+    public void setRight(BinaryTreeModel right) {\n+        this.right = right;\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n--- a/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n+++ b/core-java-modules/core-java/src/main/java/com/baeldung/binarytree/BinaryTreePrinter.java\n@@ -0,0 +1,62 @@\n+package com.baeldung.binarytree;\n+\n+public class BinaryTreePrinter {\n+\n+    private BinaryTreeModel tree;\n+\n+    public BinaryTreePrinter(BinaryTreeModel tree) {\n+        this.tree = tree;\n+    }\n+\n+    private String traversePreOrder(BinaryTreeModel root) {\n+\n+        if (root == null) {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(root.getValue());\n+        sb.append(\"\\n\");\n+\n+        String pointerRight = \"└──\";\n+        String pointerLeft = (root.getRight() != null) ? \"├──\" : \"└──\";\n+\n+        traverseNodes(sb, \"\", pointerLeft, root.getLeft(), root.getRight() != null);\n+        traverseNodes(sb, \"\", pointerRight, root.getRight(), false);\n+\n+        return sb.toString();\n+    }\n+\n+    private void traverseNodes(StringBuilder sb, String padding, String pointer, BinaryTreeModel node,\n+        boolean hasRightSibling) {\n+\n+        if (node != null) {\n+\n+            sb.append(padding);\n+            sb.append(pointer);\n+            sb.append(node.getValue());\n+            sb.append(\"\\n\");\n+\n+            StringBuilder paddingBuilder = new StringBuilder(padding);\n+            if (hasRightSibling) {\n+                paddingBuilder.append(\"│  \");\n+            } else {\n+                paddingBuilder.append(\"   \");\n+            }\n+\n+            String paddingForBoth = paddingBuilder.toString();\n+            String pointerRight = \"└──\";\n+            String pointerLeft = (node.getRight() != null) ? \"├──\" : \"└──\";\n+\n+            traverseNodes(sb, paddingForBoth, pointerLeft, node.getLeft(), node.getRight() != null);\n+            traverseNodes(sb, paddingForBoth, pointerRight, node.getRight(), false);\n+\n+        }\n+\n+    }\n+\n+    public void print() {\n+        System.out.println(traversePreOrder(tree));\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n--- a/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n+++ b/core-java-modules/core-java/src/test/java/com/baeldung/binarytree/PrintingBinaryTreeTest.java\n@@ -0,0 +1,124 @@\n+package com.baeldung.binarytree;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrintingBinaryTreeTest {\n+\n+    private BinaryTreeModel balanced;\n+    private BinaryTreeModel leftUnbalanced;\n+    private BinaryTreeModel rightUnbalanced;\n+\n+    @Before\n+    public void setup() {\n+        balanced = createBalancedTree();\n+        leftUnbalanced = createLeftUnbalancedTree();\n+        rightUnbalanced = createRightUnbalancedTree();\n+    }\n+\n+    private BinaryTreeModel createBalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"root\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+\n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node1.setLeft(node3);\n+        node1.setRight(node4);\n+\n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node2.setLeft(node5);\n+        node2.setRight(node6);\n+\n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node3.setLeft(node7);\n+\n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        BinaryTreeModel node9 = new BinaryTreeModel(\"node9\");\n+        node7.setLeft(node8);\n+        node7.setRight(node9);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createLeftUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"left\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node1.setLeft(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setLeft(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setLeft(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setLeft(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setLeft(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setLeft(node8);\n+\n+        return root;\n+    }\n+\n+    private BinaryTreeModel createRightUnbalancedTree() {\n+\n+        BinaryTreeModel root = new BinaryTreeModel(\"right\");\n+\n+        BinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\n+        BinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\n+        root.setLeft(node1);\n+        root.setRight(node2);\n+        \n+        BinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\n+        node2.setRight(node3);\n+        \n+        BinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\n+        node3.setRight(node4);\n+        \n+        BinaryTreeModel node5 = new BinaryTreeModel(\"node5\");\n+        node4.setRight(node5);\n+        \n+        BinaryTreeModel node6 = new BinaryTreeModel(\"node6\");\n+        node5.setRight(node6);\n+        \n+        BinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\n+        node6.setRight(node7);\n+        \n+        BinaryTreeModel node8 = new BinaryTreeModel(\"node8\");\n+        node7.setRight(node8);\n+\n+        return root;\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelBalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(balanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelLeftUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(leftUnbalanced).print();\n+    }\n+\n+    @Test\n+    public void givenBinaryTreeModelRightUnbalanced_whenPrintWithBinaryTreePrinter() {\n+        new BinaryTreePrinter(rightUnbalanced).print();\n+    }\n+\n+}",
    "output": "Add source code for BAEL-3408"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.LocalDate;\r\n+import java.time.ZoneId;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+import org.apache.commons.lang3.time.DateUtils;\r\n+\r\n+import hirondelle.date4j.DateTime;\r\n+\r\n+public class DateComparisonUtils {\r\n+\r\n+    public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\r\n+        LocalDate localDate1 = date1.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        LocalDate localDate2 = date2.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        return localDate1.isEqual(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n+        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n+        return fmt.format(date1)\r\n+            .equals(fmt.format(date2));\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingCalendar(Date date1, Date date2) {\r\n+        Calendar calendar1 = Calendar.getInstance();\r\n+        calendar1.setTime(date1);\r\n+        Calendar calendar2 = Calendar.getInstance();\r\n+        calendar2.setTime(date2);\r\n+        return calendar1.get(Calendar.YEAR) == calendar2.get(Calendar.YEAR) && calendar1.get(Calendar.MONTH) == calendar2.get(Calendar.MONTH) && calendar1.get(Calendar.DAY_OF_MONTH) == calendar2.get(Calendar.DAY_OF_MONTH);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingApacheCommons(Date date1, Date date2) {\r\n+        return DateUtils.isSameDay(date1, date2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingJoda(Date date1, Date date2) {\r\n+        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(date1);\r\n+        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(date2);\r\n+        return localDate1.equals(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingDate4j(Date date1, Date date2) {\r\n+        DateTime dateObject1 = DateTime.forInstant(date1.getTime(), TimeZone.getDefault());\r\n+        DateTime dateObject2 = DateTime.forInstant(date2.getTime(), TimeZone.getDefault());\r\n+        return dateObject1.isSameDayAs(dateObject2);\r\n+    }\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.time.LocalDateTime;\r\n+import java.time.ZoneId;\r\n+import java.util.Date;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class DateComparisonUtilsUnitTest {\r\n+\r\n+    private Date day1Morning = toDate(LocalDateTime.of(2019, 10, 19, 6, 30, 40));\r\n+    private Date day1Evening = toDate(LocalDateTime.of(2019, 10, 19, 18, 30, 50));\r\n+    private Date day2Morning = toDate(LocalDateTime.of(2019, 10, 20, 6, 30, 50));\r\n+\r\n+    private Date toDate(LocalDateTime localDateTime) {\r\n+        return Date.from(localDateTime.atZone(ZoneId.systemDefault())\r\n+            .toInstant());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day1Evening));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Evening, day2Morning));\r\n+    }\r\n+}\r",
    "output": "Merge pull request #8187 from AlNiyas/sameDayFInalBranch\n\n BAEL-3224 - Checking if Two Java Dates are On the Same Day"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -7,7 +7,7 @@\n import java.time.ZoneId;\r\n import java.util.Date;\r\n \r\n-import org.junit.jupiter.api.Test;\r\n+import org.junit.Test;\r\n \r\n public class DateComparisonUtilsUnitTest {\r\n \r\n@@ -21,7 +21,7 @@ private Date toDate(LocalDateTime localDateTime) {\n     }\r\n \r\n     @Test\r\n-    void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n+    public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n         assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n         assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n@@ -31,7 +31,7 @@ void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\n     }\r\n \r\n     @Test\r\n-    void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n+    public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n         assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n \r",
    "output": "update junits\n\nupdate junits"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n@@ -17,7 +17,9 @@ public Locale locale() {\n \n     @Override\n     public void configureTypeRegistry(TypeRegistry typeRegistry) {\n-        typeRegistry.defineDataTableType(new DataTableType(BookCatalog.class, new BookTableTransformer()));\n+        typeRegistry.defineDataTableType(\n+          new DataTableType(BookCatalog.class, new BookTableTransformer())\n+        );\n     }\n     \n     private static class BookTableTransformer implements TableTransformer<BookCatalog> {\n@@ -28,10 +30,10 @@ public BookCatalog transform(DataTable table) throws Throwable {\n             BookCatalog catalog = new BookCatalog();\n             \n             table.cells()\n-                .stream()\n-                .skip(1)        // Skip header row\n-                .map(fields -> new Book(fields.get(0), fields.get(1)))\n-                .forEach(catalog::addBook);\n+              .stream()\n+              .skip(1)        // Skip header row\n+              .map(fields -> new Book(fields.get(0), fields.get(1)))\n+              .forEach(catalog::addBook);\n             \n             return catalog;\n         }",
    "output": "BAEL-3444: Corrected line continuation formatting"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/caesarcipher/CaesarCipher.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/caesarcipher/CaesarCipher.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/caesarcipher/CaesarCipher.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/caesarcipher/CaesarCipher.java\n@@ -0,0 +1,83 @@\n+package com.baeldung.algorithms.caesarcipher;\n+\n+import org.apache.commons.math3.stat.inference.ChiSquareTest;\n+\n+import java.util.Arrays;\n+import java.util.stream.IntStream;\n+\n+public class CaesarCipher {\n+    private static final char LETTER_A = 'a';\n+    private static final char LETTER_Z = 'z';\n+    private static final int ALPHABET_SIZE = LETTER_Z - LETTER_A + 1;\n+    private static final double[] ENGLISH_LETTERS_PROBABILITIES = {0.073, 0.009, 0.030, 0.044, 0.130, 0.028, 0.016, 0.035, 0.074, 0.002, 0.003, 0.035, 0.025, 0.078, 0.074, 0.027, 0.003, 0.077, 0.063, 0.093, 0.027, 0.013, 0.016, 0.005, 0.019, 0.001};\n+\n+    public String cipher(String message, int offset) {\n+        StringBuilder result = new StringBuilder();\n+\n+        for (char character : message.toCharArray()) {\n+            if (character != ' ') {\n+                int originalAlphabetPosition = character - LETTER_A;\n+                int newAlphabetPosition = (originalAlphabetPosition + offset) % ALPHABET_SIZE;\n+                char newCharacter = (char) (LETTER_A + newAlphabetPosition);\n+                result.append(newCharacter);\n+            } else {\n+                result.append(character);\n+            }\n+        }\n+\n+        return result.toString();\n+    }\n+\n+    public String decipher(String message, int offset) {\n+        return cipher(message, ALPHABET_SIZE - (offset % ALPHABET_SIZE));\n+    }\n+\n+    public int breakCipher(String message) {\n+        return probableOffset(chiSquares(message));\n+    }\n+\n+    private double[] chiSquares(String message) {\n+        double[] expectedLettersFrequencies = expectedLettersFrequencies(message.length());\n+\n+        double[] chiSquares = new double[ALPHABET_SIZE];\n+\n+        for (int offset = 0; offset < chiSquares.length; offset++) {\n+            String decipheredMessage = decipher(message, offset);\n+            long[] lettersFrequencies = observedLettersFrequencies(decipheredMessage);\n+            double chiSquare = new ChiSquareTest().chiSquare(expectedLettersFrequencies, lettersFrequencies);\n+            chiSquares[offset] = chiSquare;\n+        }\n+\n+        return chiSquares;\n+    }\n+\n+    private long[] observedLettersFrequencies(String message) {\n+        return IntStream.rangeClosed(LETTER_A, LETTER_Z)\n+          .mapToLong(letter -> countLetter((char) letter, message))\n+          .toArray();\n+    }\n+\n+    private long countLetter(char letter, String message) {\n+        return message.chars()\n+          .filter(character -> character == letter)\n+          .count();\n+    }\n+\n+    private double[] expectedLettersFrequencies(int messageLength) {\n+        return Arrays.stream(ENGLISH_LETTERS_PROBABILITIES)\n+          .map(probability -> probability * messageLength)\n+          .toArray();\n+    }\n+\n+    private int probableOffset(double[] chiSquares) {\n+        int probableOffset = 0;\n+        for (int offset = 0; offset < chiSquares.length; offset++) {\n+            System.out.println(String.format(\"Chi-Square for offset %d: %.2f\", offset, chiSquares[offset]));\n+            if (chiSquares[offset] < chiSquares[probableOffset]) {\n+                probableOffset = offset;\n+            }\n+        }\n+\n+        return probableOffset;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/caesarcipher/CaesarCipherUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/caesarcipher/CaesarCipherUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/caesarcipher/CaesarCipherUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/caesarcipher/CaesarCipherUnitTest.java\n@@ -0,0 +1,83 @@\n+package com.baeldung.algorithms.caesarcipher;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class CaesarCipherUnitTest {\n+    private static final String SENTENCE = \"he told me i could never teach a llama to drive\";\n+    private static final String SENTENCE_SHIFTED_THREE = \"kh wrog ph l frxog qhyhu whdfk d oodpd wr gulyh\";\n+    private static final String SENTENCE_SHIFTED_TEN = \"ro dyvn wo s myevn xofob dokmr k vvkwk dy nbsfo\";\n+\n+    private CaesarCipher algorithm = new CaesarCipher();\n+\n+    @Test\n+    void givenSentenceAndShiftThree_whenCipher_thenCipheredMessageWithoutOverflow() {\n+        String cipheredSentence = algorithm.cipher(SENTENCE, 3);\n+\n+        assertThat(cipheredSentence)\n+          .isEqualTo(SENTENCE_SHIFTED_THREE);\n+    }\n+\n+    @Test\n+    void givenSentenceAndShiftTen_whenCipher_thenCipheredMessageWithOverflow() {\n+        String cipheredSentence = algorithm.cipher(SENTENCE, 10);\n+\n+        assertThat(cipheredSentence)\n+          .isEqualTo(SENTENCE_SHIFTED_TEN);\n+    }\n+\n+    @Test\n+    void givenSentenceAndShiftThirtySix_whenCipher_thenCipheredLikeTenMessageWithOverflow() {\n+        String cipheredSentence = algorithm.cipher(SENTENCE, 36);\n+\n+        assertThat(cipheredSentence)\n+          .isEqualTo(SENTENCE_SHIFTED_TEN);\n+    }\n+\n+    @Test\n+    void givenSentenceShiftedThreeAndShiftThree_whenDecipher_thenOriginalSentenceWithoutOverflow() {\n+        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_THREE, 3);\n+\n+        assertThat(decipheredSentence)\n+          .isEqualTo(SENTENCE);\n+    }\n+\n+    @Test\n+    void givenSentenceShiftedTenAndShiftTen_whenDecipher_thenOriginalSentenceWithOverflow() {\n+        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_TEN, 10);\n+\n+        assertThat(decipheredSentence)\n+          .isEqualTo(SENTENCE);\n+    }\n+\n+    @Test\n+    void givenSentenceShiftedTenAndShiftThirtySix_whenDecipher_thenOriginalSentenceWithOverflow() {\n+        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_TEN, 36);\n+\n+        assertThat(decipheredSentence)\n+          .isEqualTo(SENTENCE);\n+    }\n+\n+    @Test\n+    void givenSentenceShiftedThree_whenBreakCipher_thenOriginalSentence() {\n+        int offset = algorithm.breakCipher(SENTENCE_SHIFTED_THREE);\n+\n+        assertThat(offset)\n+          .isEqualTo(3);\n+\n+        assertThat(algorithm.decipher(SENTENCE_SHIFTED_THREE, offset))\n+          .isEqualTo(SENTENCE);\n+    }\n+\n+    @Test\n+    void givenSentenceShiftedTen_whenBreakCipher_thenOriginalSentence() {\n+        int offset = algorithm.breakCipher(SENTENCE_SHIFTED_TEN);\n+\n+        assertThat(offset)\n+          .isEqualTo(10);\n+\n+        assertThat(algorithm.decipher(SENTENCE_SHIFTED_TEN, offset))\n+          .isEqualTo(SENTENCE);\n+    }\n+}\n\\ No newline at end of file",
    "output": "dupirefr/dupire.francois+pro@gmail.com [BAEL-2452] Caesar Cipher in Java (#8209)\n\n* Added benchmarking on larger matrices\r\n\r\n* [BAEL-3452] Added cipher algorithm\r\n\r\n* [BAEL-3452] Added deciphering\r\n\r\n* [BAEL-3452] Added break algorithm\r\n\r\n* [BAEL-3452] Finalizing break algorithm\r\n\r\n* Revert \"Added benchmarking on larger matrices\"\r\n\r\nThis reverts commit 4ea87c0aea44bd73be721691a3c427b03854b442."
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n--- a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n+++ b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.spring.cloud.eureka.client;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n+\n+@SpringBootApplication\n+@EnableEurekaClient\n+public class EurekaClientApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(EurekaClientApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n--- a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n+++ b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.spring.cloud.eureka.server;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n+\n+@SpringBootApplication\n+@EnableEurekaServer\n+public class EurekaServerApplication {\n+    public static void main(String[] args) {\n+        SpringApplication.run(EurekaServerApplication.class, args);\n+    }\n+}",
    "output": "Merge pull request #8156 from tinomthomas/master\n\nBAEL - 1836"
  },
  {
    "input": "diff --git a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n--- a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n+++ b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorIfElse.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.maths;\n+package com.baeldung.maths.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n@@ -7,7 +7,6 @@ public class BasicCalculatorIfElse {\n \n     public static void main(String[] args) {\n \n-        Scanner scanner = new Scanner(System.in);\n         System.out.println(\"---------------------------------- \\n\" +\n                 \"Welcome to Basic Calculator \\n\" +\n                 \"----------------------------------\");\n@@ -16,6 +15,8 @@ public static void main(String[] args) {\n                 \"2. Subtraction (-) \\n\" +\n                 \"3. Multiplication (* OR x) \\n\" +\n                 \"4. Division (/) \\n\");\n+\n+        Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n             char operation = scanner.next().charAt(0);\n@@ -47,6 +48,8 @@ public static void main(String[] args) {\n             }\n         } catch (InputMismatchException exc) {\n             System.err.println(exc.getMessage());\n+        } finally {\n+            scanner.close();\n         }\n     }\n-} \n\\ No newline at end of file\n+}\n\\ No newline at end of file\n\ndiff --git a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n--- a/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n+++ b/java-math-2/src/main/java/com/baeldung/maths/calculator/basic/BasicCalculatorSwitchCase.java\n@@ -1,12 +1,11 @@\n-package com.baeldung.maths;\n+package com.baeldung.maths.calculator.basic;\n \n import java.util.InputMismatchException;\n import java.util.Scanner;\n \n public class BasicCalculatorSwitchCase {\n     public static void main(String[] args) {\n \n-        Scanner scanner = new Scanner(System.in);\n         System.out.println(\"---------------------------------- \\n\"\n             + \"Welcome to Basic Calculator \\n\"\n             + \"----------------------------------\");\n@@ -15,6 +14,8 @@ public static void main(String[] args) {\n                 \"2. Subtraction (-) \\n\" +\n                 \"3. Multiplication (* OR x) \\n\" +\n                 \"4. Division (/) \\n\");\n+\n+        Scanner scanner = new Scanner(System.in);\n         try {\n             System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n             char operation = scanner.next().charAt(0);\n@@ -55,8 +56,9 @@ public static void main(String[] args) {\n             }\n         } catch (InputMismatchException exc) {\n             System.err.println(exc.getMessage());\n+        } finally {\n+            scanner.close();\n         }\n-        scanner.close();\n     }\n }\n ",
    "output": "BAEL-3506"
  },
  {
    "input": "diff --git a/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java b/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n--- a/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n+++ b/ddd/src/main/java/com/baeldung/ddd/layers/domain/Order.java\n@@ -45,8 +45,7 @@ private OrderItem getOrderItem(final UUID id) {\n         return orderItems\n           .stream()\n           .filter(orderItem -> orderItem\n-            .getProduct()\n-            .getId()\n+            .getProductId()\n             .equals(id))\n           .findFirst()\n           .orElseThrow(() -> new DomainException(\"Product with \" + id + \" doesn't exist.\"));\n\ndiff --git a/ddd/src/main/java/com/baeldung/ddd/layers/domain/OrderItem.java b/ddd/src/main/java/com/baeldung/ddd/layers/domain/OrderItem.java\n--- a/ddd/src/main/java/com/baeldung/ddd/layers/domain/OrderItem.java\n+++ b/ddd/src/main/java/com/baeldung/ddd/layers/domain/OrderItem.java\n@@ -2,32 +2,35 @@\n \n import java.math.BigDecimal;\n import java.util.Objects;\n+import java.util.UUID;\n \n public class OrderItem {\n-    private final Product product;\n+    private final UUID productId;\n+    private final BigDecimal price;\n \n     public OrderItem(final Product product) {\n-        this.product = product;\n+        this.productId = product.getId();\n+        this.price = product.getPrice();\n     }\n \n-    public BigDecimal getPrice() {\n-        return product.getPrice();\n+    public UUID getProductId() {\n+        return productId;\n     }\n \n-    public Product getProduct() {\n-        return product;\n+    public BigDecimal getPrice() {\n+        return price;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n         OrderItem orderItem = (OrderItem) o;\n-        return Objects.equals(product, orderItem.product);\n+        return Objects.equals(productId, orderItem.productId) && Objects.equals(price, orderItem.price);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(product);\n+        return Objects.hash(productId, price);\n     }\n }\n\ndiff --git a/ddd/src/test/java/com/baeldung/ddd/layers/domain/OrderUnitTest.java b/ddd/src/test/java/com/baeldung/ddd/layers/domain/OrderUnitTest.java\n--- a/ddd/src/test/java/com/baeldung/ddd/layers/domain/OrderUnitTest.java\n+++ b/ddd/src/test/java/com/baeldung/ddd/layers/domain/OrderUnitTest.java\n@@ -50,12 +50,12 @@ void shouldAddProduct_thenThrowException() {\n     @Test\n     void shouldRemoveProduct_thenUpdatePrice() {\n         final Order order = OrderProvider.getCreatedOrder();\n-\n-        order.removeOrder(order\n+        final UUID productId = order\n           .getOrderItems()\n           .get(0)\n-          .getProduct()\n-          .getId());\n+          .getProductId();\n+        \n+        order.removeOrder(productId);\n \n         assertEquals(0, order\n           .getOrderItems()\n\ndiff --git a/ddd/src/test/java/com/baeldung/ddd/layers/domain/service/DomainOrderServiceUnitTest.java b/ddd/src/test/java/com/baeldung/ddd/layers/domain/service/DomainOrderServiceUnitTest.java\n--- a/ddd/src/test/java/com/baeldung/ddd/layers/domain/service/DomainOrderServiceUnitTest.java\n+++ b/ddd/src/test/java/com/baeldung/ddd/layers/domain/service/DomainOrderServiceUnitTest.java\n@@ -80,8 +80,8 @@ void shouldDeleteProduct_thenSaveOrder() {\n         final UUID productId = order\n           .getOrderItems()\n           .get(0)\n-          .getProduct()\n-          .getId();\n+          .getProductId();\n+        \n         when(orderRepository.findById(order.getId())).thenReturn(Optional.of(order));\n \n         tested.deleteProduct(order.getId(), productId);",
    "output": "BAEL-2275: Change orderitem to be built based on product"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n@@ -7,20 +7,19 @@\n import javax.persistence.EntityExistsException;\n import javax.persistence.TransactionRequiredException;\n \n-import org.hamcrest.core.Is;\n-import org.hamcrest.core.IsNull;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = PersistenceContextDemoApplication.class)\n+@SpringBootTest(classes = com.baeldung.persistencecontext.PersistenceContextDemoApplication.class)\n public class PersistenceContextIntegrationTest {\n-    \n+\n     @Autowired\n     private TransctionPersistenceContextUserService transctionPersistenceContext;\n     @Autowired\n@@ -30,10 +29,12 @@ public class PersistenceContextIntegrationTest {\n     public void testThatWhenUserSavedWithTransctionPersistenceContextThenUserShouldGetSavedInDB() {\n         User user = new User(121L, \"Devender\", \"admin\");\n         transctionPersistenceContext.insertWithTransaction(user);\n+\n         User userFromTransctionPersistenceContext = transctionPersistenceContext.find(user.getId());\n+        assertNotNull(userFromTransctionPersistenceContext);\n+\n         User userFromExtendedPersistenceContext = extendedPersistenceContext.find(user.getId());\n-        assertThat(userFromTransctionPersistenceContext, Is.is(IsNull.notNullValue()));\n-        assertThat(userFromExtendedPersistenceContext, Is.is(IsNull.notNullValue()));\n+        assertNotNull(userFromExtendedPersistenceContext);\n     }\n \n     @Test(expected = TransactionRequiredException.class)\n@@ -46,10 +47,12 @@ public void testThatUserSaveWithoutTransactionThrowException() {\n     public void testThatWhenUserSavedWithExtendedPersistenceContextWithoutTransactionThenUserShouldGetCached() {\n         User user = new User(123L, \"Devender\", \"admin\");\n         extendedPersistenceContext.insertWithoutTransaction(user);\n+\n         User userFromExtendedPersistenceContext = extendedPersistenceContext.find(user.getId());\n+        assertNotNull(userFromExtendedPersistenceContext);\n+\n         User userFromTransctionPersistenceContext = transctionPersistenceContext.find(user.getId());\n-        assertThat(userFromExtendedPersistenceContext, Is.is(IsNull.notNullValue()));\n-        assertThat(userFromTransctionPersistenceContext, Is.is(IsNull.nullValue()));\n+        assertNull(userFromTransctionPersistenceContext);\n     }\n \n     @Test(expected = EntityExistsException.class)\n@@ -64,24 +67,24 @@ public void testThatPersistUserWithSameIdentifierThrowException() {\n     public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldSaveEntityIntoDB() {\n         User user = new User(127L, \"Devender\", \"admin\");\n         extendedPersistenceContext.insertWithTransaction(user);\n+\n         User userFromDB = transctionPersistenceContext.find(user.getId());\n-        assertThat(userFromDB, Is.is(IsNull.notNullValue()));\n+        assertNotNull(userFromDB);\n     }\n \n     @Test\n     public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldFlushCachedEntityIntoDB() {\n         User user1 = new User(124L, \"Devender\", \"admin\");\n         extendedPersistenceContext.insertWithoutTransaction(user1);\n+\n         User user2 = new User(125L, \"Devender\", \"admin\");\n         extendedPersistenceContext.insertWithTransaction(user2);\n-        User userFromExtendedPersistenceContextuser1 = extendedPersistenceContext.find(user1.getId());\n-        User userFromExtendedPersistenceContextuser2 = extendedPersistenceContext.find(user2.getId());\n-        User userFromTransctionPersistenceContextuser1 = transctionPersistenceContext.find(user1.getId());\n-        User userFromTransctionPersistenceContextuser2 = transctionPersistenceContext.find(user2.getId());\n-        assertThat(userFromExtendedPersistenceContextuser1, Is.is(IsNull.notNullValue()));\n-        assertThat(userFromExtendedPersistenceContextuser2, Is.is(IsNull.notNullValue()));\n-        assertThat(userFromTransctionPersistenceContextuser1, Is.is(IsNull.notNullValue()));\n-        assertThat(userFromTransctionPersistenceContextuser2, Is.is(IsNull.notNullValue()));\n+\n+        User user1FromTransctionPersistenceContext = transctionPersistenceContext.find(user1.getId());\n+        assertNotNull(user1FromTransctionPersistenceContext);\n+\n+        User user2FromTransctionPersistenceContext = transctionPersistenceContext.find(user2.getId());\n+        assertNotNull(user2FromTransctionPersistenceContext);\n     }\n \n }",
    "output": "Review commnet changes"
  },
  {
    "input": "diff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n@@ -0,0 +1,102 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Pizza {\n+\n+    public enum PizzaSize {\n+        LARGE, MEDIUM, SMALL;\n+    }\n+\n+    private String name;\n+    private PizzaSize size;\n+    private List<String> toppings;\n+    private boolean stuffedCrust;\n+    private boolean collect;\n+    private Integer discount;\n+\n+    private Pizza(PizzaBuilder builder) {\n+        this.name = builder.name;\n+        this.size = builder.size;\n+        this.toppings = builder.toppings;\n+        this.stuffedCrust = builder.stuffedCrust;\n+        this.collect = builder.collect;\n+        this.discount = builder.discount;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public PizzaSize getSize() {\n+        return size;\n+    }\n+\n+    public List<String> getToppings() {\n+        return toppings;\n+    }\n+\n+    public boolean isStuffedCrust() {\n+        return stuffedCrust;\n+    }\n+\n+    public boolean isCollecting() {\n+        return collect;\n+    }\n+\n+    public Integer getDiscount() {\n+        return discount;\n+    }\n+\n+    public static class PizzaBuilder {\n+        private String name;\n+        private PizzaSize size;\n+\n+        private List<String> toppings;\n+        private boolean stuffedCrust;\n+        private boolean collect;\n+        private Integer discount = null;\n+\n+        public PizzaBuilder() {\n+        }\n+\n+        public PizzaBuilder name(String name) {\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public PizzaBuilder size(PizzaSize size) {\n+            this.size = size;\n+            return this;\n+        }\n+\n+        public PizzaBuilder withExtraTopping(String extraTopping) {\n+            if (this.toppings == null) {\n+                toppings = new ArrayList<>();\n+            }\n+            this.toppings.add(extraTopping);\n+            return this;\n+        }\n+\n+        public PizzaBuilder withStuffedCrust(boolean stuffedCrust) {\n+            this.stuffedCrust = stuffedCrust;\n+            return this;\n+        }\n+\n+        public PizzaBuilder willCollect(boolean collect) {\n+            this.collect = collect;\n+            return this;\n+        }\n+\n+        public PizzaBuilder applyDiscount(Integer discount) {\n+            this.discount = discount;\n+            return this;\n+        }\n+\n+        public Pizza build() {\n+            return new Pizza(this);\n+        }\n+    }\n+\n+}\n\ndiff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n+\n+public class PizzaService {\n+\n+    private Pizza.PizzaBuilder builder;\n+\n+    public PizzaService(Pizza.PizzaBuilder builder) {\n+        this.builder = builder;\n+    }\n+\n+    public Pizza orderHouseSpecial() {\n+        return builder.name(\"Special\")\n+            .size(PizzaSize.LARGE)\n+            .withExtraTopping(\"Mushrooms\")\n+            .withStuffedCrust(true)\n+            .withExtraTopping(\"Chilli\")\n+            .willCollect(true)\n+            .applyDiscount(20)\n+            .build();\n+    }\n+}\n\ndiff --git a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n--- a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n+++ b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n@@ -0,0 +1,88 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Answers;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaBuilder;\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n+\n+public class PizzaServiceUnitTest {\n+\n+    @Mock\n+    private Pizza expectedPizza;\n+\n+    @Mock(answer = Answers.RETURNS_DEEP_STUBS)\n+    private PizzaBuilder anotherbuilder;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringCaptor;\n+    @Captor\n+    private ArgumentCaptor<Pizza.PizzaSize> sizeCaptor;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    public void givenTraditonalMocking_whenServiceInvoked_thenPizzaIsBuilt() {\n+        PizzaBuilder nameBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder sizeBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder firstToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder secondToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder stuffedBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder willCollectBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        PizzaBuilder discountBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n+\n+        PizzaBuilder builder = Mockito.mock(Pizza.PizzaBuilder.class);\n+        when(builder.name(anyString())).thenReturn(nameBuilder);\n+        when(nameBuilder.size(any(Pizza.PizzaSize.class))).thenReturn(sizeBuilder);\n+        when(sizeBuilder.withExtraTopping(anyString())).thenReturn(firstToppingBuilder);\n+        when(firstToppingBuilder.withStuffedCrust(anyBoolean())).thenReturn(stuffedBuilder);\n+        when(stuffedBuilder.withExtraTopping(anyString())).thenReturn(secondToppingBuilder);\n+        when(secondToppingBuilder.willCollect(anyBoolean())).thenReturn(willCollectBuilder);\n+        when(willCollectBuilder.applyDiscount(anyInt())).thenReturn(discountBuilder);\n+        when(discountBuilder.build()).thenReturn(expectedPizza);\n+\n+        PizzaService service = new PizzaService(builder);\n+        assertEquals(\"Expected Pizza\", expectedPizza, service.orderHouseSpecial());\n+\n+        verify(builder).name(stringCaptor.capture());\n+        assertEquals(\"Pizza name: \", \"Special\", stringCaptor.getValue());\n+\n+        verify(nameBuilder).size(sizeCaptor.capture());\n+        assertEquals(\"Pizza size: \", PizzaSize.LARGE, sizeCaptor.getValue());\n+\n+    }\n+\n+    @Test\n+    public void givenDeepStubs_whenServiceInvoked_thenPizzaIsBuilt() {\n+        Mockito.when(anotherbuilder.name(anyString())\n+            .size(any(Pizza.PizzaSize.class))\n+            .withExtraTopping(anyString())\n+            .withStuffedCrust(anyBoolean())\n+            .withExtraTopping(anyString())\n+            .willCollect(anyBoolean())\n+            .applyDiscount(anyInt())\n+            .build())\n+            .thenReturn(expectedPizza);\n+\n+        PizzaService service = new PizzaService(anotherbuilder);\n+        assertEquals(\"Expected Pizza\", expectedPizza, service.orderHouseSpecial());\n+    }\n+\n+}\n\ndiff --git a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n--- a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n+++ b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n+\n+public class PizzaUnitTest {\n+\n+    @Test\n+    public void givenFluentPizzaApi_whenBuilt_thenPizzaHasCorrectAttributes() {\n+        Pizza pizza = new Pizza.PizzaBuilder()\n+            .name(\"Margherita\")\n+            .size(PizzaSize.LARGE)\n+            .withExtraTopping(\"Mushroom\")\n+            .withStuffedCrust(false)\n+            .willCollect(true)\n+            .applyDiscount(20)\n+            .build();\n+        \n+        assertEquals(\"Pizza name: \", \"Margherita\", pizza.getName());\n+        assertEquals(\"Pizza size: \", PizzaSize.LARGE, pizza.getSize());\n+        assertEquals(\"Extra toppings: \", \"Mushroom\", pizza.getToppings()\n+            .get(0));\n+        assertFalse(\"Has stuffed crust: \", pizza.isStuffedCrust());\n+        assertTrue(\"Will collect: \", pizza.isCollecting());\n+        assertEquals(\"Discounts: \", Integer.valueOf(20), pizza.getDiscount());\n+    }\n+}",
    "output": "BAEL-3416 - Mockito and Fluent APIs (#8201)\n\n* BAEL-3416 - Mockito and Fluent APIs\r\n- stage changes\r\n\r\n* staging changes\r\n\r\n* BAEL-3416 - Mockito and Fluent APIs"
  },
  {
    "input": "diff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphExperiments.java\n@@ -0,0 +1,52 @@\n+package com.baeldung.graphframes;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.function.VoidFunction;\n+import org.apache.spark.graphx.Edge;\n+import org.apache.spark.graphx.Graph;\n+import org.apache.spark.graphx.VertexRDD;\n+import org.graphframes.GraphFrame;\n+import scala.Tuple2;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GraphExperiments {\n+    public static Map<Long, User> USERS = new HashMap<>();\n+\n+    public static void main(String[] args) throws IOException {\n+        Logger.getLogger(\"org\").setLevel(Level.OFF);\n+        GraphLoader loader = new GraphLoader();\n+        GraphFrame graph = loader.getGraphFrameUserRelationship();\n+\n+        GraphExperiments experiments = new GraphExperiments();\n+        experiments.doGraphFrameOperations(graph);\n+        experiments.doGraphFrameAlgorithms(graph);\n+    }\n+\n+    private void doGraphFrameOperations(GraphFrame graph) {\n+        graph.vertices().show();\n+        graph.edges().show();\n+\n+        graph.vertices().filter(\"name = 'Martin'\").show();\n+\n+        graph.filterEdges(\"type = 'Friend'\")\n+            .dropIsolatedVertices().vertices().show();\n+\n+        graph.degrees().show();\n+        graph.inDegrees().show();\n+        graph.outDegrees().show();\n+    }\n+\n+    private void doGraphFrameAlgorithms(GraphFrame graph) {\n+\n+        graph.pageRank().maxIter(20).resetProbability(0.0001).run().vertices().show();\n+\n+        graph.connectedComponents().run().show();\n+\n+        graph.triangleCount().run().show();\n+    }\n+\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/GraphLoader.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.graphframes;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.graphframes.GraphFrame;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GraphLoader {\n+\n+    public JavaSparkContext getSparkContext() throws IOException {\n+        Path temp = Files.createTempDirectory(\"sparkGraphFrames\");\n+        SparkConf sparkConf = new SparkConf().setAppName(\"SparkGraphX\").setMaster(\"local[*]\");\n+        JavaSparkContext javaSparkContext = new JavaSparkContext(sparkConf);\n+        javaSparkContext.setCheckpointDir(temp.toString());\n+        return javaSparkContext;\n+    }\n+\n+    public GraphFrame getGraphFrameUserRelationship() throws IOException {\n+        Path temp = Files.createTempDirectory(\"sparkGraphFrames\");\n+        SparkSession session = SparkSession.builder()\n+            .appName(\"SparkGraphFrameSample\")\n+            .config(\"spark.sql.warehouse.dir\", temp.toString())//\"/file:C:/temp\"\n+            .sparkContext(getSparkContext().sc())\n+            .master(\"local[*]\")\n+            .getOrCreate();\n+        List<User> users = loadUsers();\n+\n+        Dataset<Row> userDataset = session.createDataFrame(users, User.class);\n+\n+        List<Relationship> relationshipsList = getRelations();\n+        Dataset<Row> relationshipDataset = session.createDataFrame(relationshipsList, Relationship.class);\n+\n+        GraphFrame graphFrame = new GraphFrame(userDataset, relationshipDataset);\n+\n+        return graphFrame;\n+    }\n+\n+    public List<Relationship> getRelations() {\n+        List<Relationship> relationships = new ArrayList<>();\n+        relationships.add(new Relationship(\"Friend\", \"1\", \"2\"));\n+        relationships.add(new Relationship(\"Following\", \"1\", \"4\"));\n+        relationships.add(new Relationship(\"Friend\", \"2\", \"4\"));\n+        relationships.add(new Relationship(\"Relative\", \"3\", \"1\"));\n+        relationships.add(new Relationship(\"Relative\", \"3\", \"4\"));\n+\n+        return relationships;\n+    }\n+\n+    private List<User> loadUsers() {\n+        User john = new User(1L, \"John\");\n+        User martin = new User(2L, \"Martin\");\n+        User peter = new User(3L, \"Peter\");\n+        User alicia = new User(4L, \"Alicia\");\n+\n+        List<User> users = new ArrayList<>();\n+\n+        users.add(new User(1L, \"John\"));\n+        users.add(new User(2L, \"Martin\"));\n+        users.add(new User(3L, \"Peter\"));\n+        users.add(new User(4L, \"Alicia\"));\n+\n+        return users;\n+    }\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java b/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/Relationship.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.graphframes;\n+\n+import java.io.Serializable;\n+import java.util.UUID;\n+\n+public class Relationship implements Serializable {\n+    private String type;\n+    private String src;\n+    private String dst;\n+    private UUID id;\n+\n+    public Relationship(String type, String src, String dst) {\n+        this.type = type;\n+        this.src = src;\n+        this.dst = dst;\n+        this.id = UUID.randomUUID();\n+    }\n+\n+    public String getId() {\n+        return id.toString();\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getSrc() {\n+        return src;\n+    }\n+\n+    public String getDst() {\n+        return dst;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+    \treturn getSrc() + \" -- \" + getType() + \" --> \" + getDst();\n+    }\n+}\n\ndiff --git a/apache-spark/src/main/java/com/baeldung/graphframes/User.java b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n--- a/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n+++ b/apache-spark/src/main/java/com/baeldung/graphframes/User.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.graphframes;\n+\n+import java.io.Serializable;\n+\n+public class User implements Serializable {\n+\n+    private Long id;\n+    private String name;\n+\n+    public User(long id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public String getId() {\n+        return id.toString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+    \treturn \"struct<\" + id + \",\" + name + \">\";\n+    }\n+}",
    "output": "BAEL-3086 - Rework to deal with GraphFrames Librarz"
  },
  {
    "input": "diff --git a/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorIfElse.java b/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorIfElse.java\n--- a/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorIfElse.java\n+++ b/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorIfElse.java\n@@ -0,0 +1,52 @@\n+package com.baeldung.maths;\n+\n+import java.util.InputMismatchException;\n+import java.util.Scanner;\n+\n+public class BasicCalculatorIfElse {\n+\n+    public static void main(String[] args) {\n+\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.println(\"---------------------------------- \\n\" +\n+                \"Welcome to Basic Calculator \\n\" +\n+                \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" +\n+                \"1. Addition (+) \\n\" +\n+                \"2. Subtraction (-) \\n\" +\n+                \"3. Multiplication (* OR x) \\n\" +\n+                \"4. Division (/) \\n\");\n+        try {\n+            System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n+            char operation = scanner.next().charAt(0);\n+\n+            if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n+                System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n+            }\n+\n+            System.out.println(\"Enter First Number: \");\n+            double num1 = scanner.nextDouble();\n+\n+            System.out.println(\"Enter Second Number: \");\n+            double num2 = scanner.nextDouble();\n+\n+            if (operation == '/' && num2 == 0.0) {\n+                System.err.println(\"Second Number cannot be zero for Division operation.\");\n+            }\n+\n+            if (operation == '+') {\n+                System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+            } else if (operation == '-') {\n+                System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+            } else if (operation == '*' || operation == 'x') {\n+                System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+            } else if (operation == '/') {\n+                System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+            } else {\n+                System.err.println(\"Invalid Operator Specified.\");\n+            }\n+        } catch (InputMismatchException exc) {\n+            System.err.println(exc.getMessage());\n+        }\n+    }\n+} \n\\ No newline at end of file\n\ndiff --git a/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorSwitchCase.java b/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorSwitchCase.java\n--- a/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorSwitchCase.java\n+++ b/java-numbers/src/main/java/com/baeldung/maths/BasicCalculatorSwitchCase.java\n@@ -0,0 +1,62 @@\n+package com.baeldung.maths;\n+\n+import java.util.InputMismatchException;\n+import java.util.Scanner;\n+\n+public class BasicCalculatorSwitchCase {\n+    public static void main(String[] args) {\n+\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.println(\"---------------------------------- \\n\"\n+            + \"Welcome to Basic Calculator \\n\"\n+            + \"----------------------------------\");\n+        System.out.println(\"Following operations are supported : \\n\" +\n+                \"1. Addition (+) \\n\" +\n+                \"2. Subtraction (-) \\n\" +\n+                \"3. Multiplication (* OR x) \\n\" +\n+                \"4. Division (/) \\n\");\n+        try {\n+            System.out.println(\"Enter an operator: (+ OR - OR * OR /) \");\n+            char operation = scanner.next().charAt(0);\n+\n+            if (!(operation == '+' || operation == '-' || operation == '*' || operation == 'x' || operation == '/')) {\n+                System.err.println(\"Invalid Operator. Please use only + or - or * or /\");\n+            }\n+\n+            System.out.println(\"Enter First Number: \");\n+            double num1 = scanner.nextDouble();\n+\n+            System.out.println(\"Enter Second Number: \");\n+            double num2 = scanner.nextDouble();\n+\n+            if (operation == '/' && num2 == 0.0) {\n+                System.err.println(\"Second Number cannot be zero for Division operation.\");\n+            }\n+\n+            switch (operation) {\n+                case '+':\n+                    System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n+                    break;\n+                case '-':\n+                    System.out.println(num1 + \" - \" + num2 + \" = \" + (num1 - num2));\n+                    break;\n+                case '*':\n+                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                    break;\n+                case 'x':\n+                    System.out.println(num1 + \" x \" + num2 + \" = \" + (num1 * num2));\n+                    break;\n+                case '/':\n+                    System.out.println(num1 + \" / \" + num2 + \" = \" + (num1 / num2));\n+                    break;\n+                default:\n+                    System.err.println(\"Invalid Operator Specified.\");\n+                    break;\n+            }\n+        } catch (InputMismatchException exc) {\n+            System.err.println(exc.getMessage());\n+        }\n+        scanner.close();\n+    }\n+}\n+",
    "output": "BAEL-3506"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.LocalDate;\r\n+import java.time.ZoneId;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+import org.apache.commons.lang3.time.DateUtils;\r\n+\r\n+import hirondelle.date4j.DateTime;\r\n+\r\n+public class DateComparisonUtils {\r\n+\r\n+    public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\r\n+        LocalDate localDate1 = date1.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        LocalDate localDate2 = date2.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        return localDate1.isEqual(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n+        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n+        return fmt.format(date1)\r\n+            .equals(fmt.format(date2));\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingCalendar(Date date1, Date date2) {\r\n+        Calendar calendar1 = Calendar.getInstance();\r\n+        calendar1.setTime(date1);\r\n+        Calendar calendar2 = Calendar.getInstance();\r\n+        calendar2.setTime(date2);\r\n+        return calendar1.get(Calendar.YEAR) == calendar2.get(Calendar.YEAR) && calendar1.get(Calendar.MONTH) == calendar2.get(Calendar.MONTH) && calendar1.get(Calendar.DAY_OF_MONTH) == calendar2.get(Calendar.DAY_OF_MONTH);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingApacheCommons(Date date1, Date date2) {\r\n+        return DateUtils.isSameDay(date1, date2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingJoda(Date date1, Date date2) {\r\n+        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(date1);\r\n+        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(date2);\r\n+        return localDate1.equals(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingDate4j(Date date1, Date date2) {\r\n+        DateTime dateObject1 = DateTime.forInstant(date1.getTime(), TimeZone.getDefault());\r\n+        DateTime dateObject2 = DateTime.forInstant(date2.getTime(), TimeZone.getDefault());\r\n+        return dateObject1.isSameDayAs(dateObject2);\r\n+    }\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.time.LocalDateTime;\r\n+import java.time.ZoneId;\r\n+import java.util.Date;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+public class DateComparisonUtilsUnitTest {\r\n+\r\n+    private Date day1Morning = toDate(LocalDateTime.of(2019, 10, 19, 6, 30, 40));\r\n+    private Date day1Evening = toDate(LocalDateTime.of(2019, 10, 19, 18, 30, 50));\r\n+    private Date day2Morning = toDate(LocalDateTime.of(2019, 10, 20, 6, 30, 50));\r\n+\r\n+    private Date toDate(LocalDateTime localDateTime) {\r\n+        return Date.from(localDateTime.atZone(ZoneId.systemDefault())\r\n+            .toInstant());\r\n+    }\r\n+\r\n+    @Test\r\n+    void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day1Evening));\r\n+    }\r\n+\r\n+    @Test\r\n+    void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Evening, day2Morning));\r\n+    }\r\n+}\r",
    "output": "BAEL-3224 - Checking if 2 Java Dates are in the same day"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/config/ResourceServerWebConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n@@ -7,7 +7,7 @@\n \n @Configuration\n @EnableWebMvc\n-@ComponentScan({ \"org.baeldung.web.controller\" })\n+@ComponentScan({ \"com.baeldung.web.controller\" })\n public class ResourceServerWebConfig implements WebMvcConfigurer {\n \n }\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/controller/FooController.java\n@@ -1,18 +1,18 @@\n-package org.baeldung.web.controller;\n+package com.baeldung.web.controller;\n \n-import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n-import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.baeldung.web.dto.Foo;\n+import com.baeldung.web.dto.Foo;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;\n+\n @Controller\n public class FooController {\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/main/java/com/baeldung/web/dto/Foo.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.web.dto;\n+package com.baeldung.web.dto;\n \n public class Foo {\n     private long id;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.ResourceServerApplication;\n+import com.baeldung.config.ResourceServerApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-foos-resource/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.ResourceServerApplication;\n+import com.baeldung.config.ResourceServerApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/CustomZuulFilter.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.stereotype.Component;\n \n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiApplication.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/main/java/com/baeldung/config/UiWebConfig.java\n@@ -1,4 +1,4 @@\n-package org.baeldung.config;\n+package com.baeldung.config;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextIntegrationTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.UiApplication;\n+import com.baeldung.config.UiApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/SpringContextTest.java\n@@ -1,6 +1,6 @@\n-package org.baeldung;\n+package com.baeldung;\n \n-import org.baeldung.config.UiApplication;\n+import com.baeldung.config.UiApplication;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n\ndiff --git a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n--- a/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n+++ b/spring-cloud/spring-cloud-zuul/spring-zuul-ui/src/test/java/com/baeldung/web/LiveTest.java\n@@ -1,11 +1,10 @@\n-package org.baeldung.web;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Test;\n+package com.baeldung.web;\n \n import io.restassured.RestAssured;\n import io.restassured.response.Response;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n \n public class LiveTest {\n ",
    "output": "[BAEL-19176] - Move spring-zuul under spring-cloud"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java b/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n--- a/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n+++ b/core-java-modules/core-java-concurrency-advanced-2/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java\n@@ -0,0 +1,137 @@\n+package com.baeldung.rejection;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy;\n+import java.util.concurrent.ThreadPoolExecutor.DiscardPolicy;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class SaturationPolicyUnitTest {\n+\n+    private ThreadPoolExecutor executor;\n+\n+    @After\n+    public void shutdownExecutor() {\n+        if (executor != null && !executor.isTerminated()) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        assertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\")))\n+                .isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        long startTime = System.nanoTime();\n+        executor.execute(() -> waitFor(100));\n+        double blockedDuration = (System.nanoTime() - startTime) / 1_000_000.0;\n+\n+        assertThat(blockedDuration).isGreaterThanOrEqualTo(100);\n+    }\n+\n+    @Test\n+    public void givenDiscardPolicy_WhenSaturated_ThenExecutorDiscardsTheNewTask() throws InterruptedException {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new DiscardPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"Result\"));\n+\n+        assertThat(queue.poll(200, MILLISECONDS)).isNull();\n+    }\n+\n+    @Test\n+    public void givenDiscardOldestPolicy_WhenSaturated_ThenExecutorDiscardsTheOldestTask() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new ArrayBlockingQueue<>(2), new DiscardOldestPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"First\"));\n+        executor.execute(() -> queue.offer(\"Second\"));\n+        executor.execute(() -> queue.offer(\"Third\"));\n+\n+        waitFor(150);\n+        List<String> results = new ArrayList<>();\n+        queue.drainTo(results);\n+        assertThat(results).containsExactlyInAnyOrder(\"Second\", \"Third\");\n+    }\n+\n+    @Test\n+    public void givenGrowPolicy_WhenSaturated_ThenExecutorIncreaseTheMaxPoolSize() {\n+        executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new ArrayBlockingQueue<>(2), new GrowPolicy());\n+        executor.execute(() -> waitFor(100));\n+\n+        BlockingQueue<String> queue = new LinkedBlockingDeque<>();\n+        executor.execute(() -> queue.offer(\"First\"));\n+        executor.execute(() -> queue.offer(\"Second\"));\n+        executor.execute(() -> queue.offer(\"Third\"));\n+\n+        waitFor(150);\n+        List<String> results = new ArrayList<>();\n+        queue.drainTo(results);\n+        assertThat(results).containsExactlyInAnyOrder(\"First\", \"Second\", \"Third\");\n+    }\n+\n+    @Test\n+    public void givenExecutorIsTerminated_WhenSubmittedNewTask_ThenTheSaturationPolicyApplies() {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n+        executor.shutdownNow();\n+\n+        assertThatThrownBy(() -> executor.execute(() -> {}))\n+                .isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void givenExecutorIsTerminating_WhenSubmittedNewTask_ThenTheSaturationPolicyApplies() {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\n+        executor.execute(() -> waitFor(100));\n+        executor.shutdown();\n+\n+        assertThatThrownBy(() -> executor.execute(() -> {}))\n+                .isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    private static class GrowPolicy implements RejectedExecutionHandler {\n+\n+        private final Lock lock = new ReentrantLock();\n+\n+        @Override\n+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+            lock.lock();\n+            try {\n+                executor.setMaximumPoolSize(executor.getMaximumPoolSize() + 1);\n+            } finally {\n+                lock.unlock();\n+            }\n+\n+            executor.submit(r);\n+        }\n+    }\n+\n+    private void waitFor(int millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+}",
    "output": "Sample codes for RejectedExecutionHandler article."
  },
  {
    "input": "diff --git a/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java b/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n--- a/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n+++ b/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n@@ -9,7 +9,7 @@\n \n import twitter4j.TwitterException;\n \n-public class ApplicationIntegrationTest {\n+public class ApplicationManualTest {\n \n \t/**\n \t * In order run this jUnit test you need to configure your API details in the twitter4j.properties",
    "output": "Merge pull request #8191 from dkapil/task/BAEL-19173\n\nBAEL-19173 Fix the integrations tests in Twitter4J"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n@@ -44,7 +44,7 @@ public void haveBooksInTheStoreByMap(DataTable table) {\n     }\n     \n     @Given(\"^I have the following books in the store with transformer$\")\n-    public void haveBooksInTheStoreByListOfTransformer(BookCatalog catalog) {\n+    public void haveBooksInTheStoreByTransformer(BookCatalog catalog) {\n         store.addAllBooks(catalog.getBooks());\n     }\n     ",
    "output": "BAEL-3444: Corrected typo of test method name"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreIntegrationTest.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreIntegrationTest.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreIntegrationTest.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreIntegrationTest.java\n@@ -5,7 +5,6 @@\n import io.cucumber.junit.Cucumber;\n import io.cucumber.junit.CucumberOptions;\n \n-\n @RunWith(Cucumber.class)\n @CucumberOptions(features = \"classpath:features/book-store.feature\")\n public class BookStoreIntegrationTest {\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRegistryConfigurer.java\n@@ -18,7 +18,6 @@ public Locale locale() {\n     @Override\n     public void configureTypeRegistry(TypeRegistry typeRegistry) {\n         typeRegistry.defineDataTableType(new DataTableType(BookCatalog.class, new BookTableTransformer()));\n-        \n     }\n     \n     private static class BookTableTransformer implements TableTransformer<BookCatalog> {\n@@ -34,11 +33,8 @@ public BookCatalog transform(DataTable table) throws Throwable {\n                 .map(fields -> new Book(fields.get(0), fields.get(1)))\n                 .forEach(catalog::addBook);\n             \n-            System.out.println(catalog);\n-            \n             return catalog;\n         }\n         \n     }\n-\n }\n\ndiff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n@@ -43,8 +43,8 @@ public void haveBooksInTheStoreByMap(DataTable table) {\n         }\n     }\n     \n-    @Given(\"^I have the following books in the store with custom table parsing$\")\n-    public void haveBooksInTheStoreByListOfDomainObjects(BookCatalog catalog) {\n+    @Given(\"^I have the following books in the store with transformer$\")\n+    public void haveBooksInTheStoreByListOfTransformer(BookCatalog catalog) {\n         store.addAllBooks(catalog.getBooks());\n     }\n     ",
    "output": "BAEL-3444: Simplified example steps"
  },
  {
    "input": "diff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n@@ -1,5 +1,6 @@\n package com.baeldung.mockito.fluentapi;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n public class Pizza {\n@@ -11,23 +12,51 @@ public enum PizzaSize {\n     private String name;\n     private PizzaSize size;\n     private List<String> toppings;\n-\n-    private String email;\n     private boolean stuffedCrust;\n+    private boolean collect;\n+    private Integer discount;\n \n     private Pizza(PizzaBuilder builder) {\n         this.name = builder.name;\n         this.size = builder.size;\n         this.toppings = builder.toppings;\n         this.stuffedCrust = builder.stuffedCrust;\n+        this.collect = builder.collect;\n+        this.discount = builder.discount;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public PizzaSize getSize() {\n+        return size;\n+    }\n+\n+    public List<String> getToppings() {\n+        return toppings;\n+    }\n+\n+    public boolean isStuffedCrust() {\n+        return stuffedCrust;\n+    }\n+\n+    public boolean isCollecting() {\n+        return collect;\n+    }\n+\n+    public Integer getDiscount() {\n+        return discount;\n     }\n \n     public static class PizzaBuilder {\n         private String name;\n         private PizzaSize size;\n-        private String email;\n+\n+        private List<String> toppings = new ArrayList<>();\n         private boolean stuffedCrust;\n-        private List<String> toppings;\n+        private boolean collect;\n+        private Integer discount = null;\n \n         public PizzaBuilder(String name) {\n             this.name = name;\n@@ -48,13 +77,13 @@ public PizzaBuilder withStuffedCrust(boolean stuffedCrust) {\n             return this;\n         }\n \n-        public BankAccountBuilder willCollect(boolean collect) {\n-            this.newsletter = newsletter;\n+        public PizzaBuilder willCollect(boolean collect) {\n+            this.collect = collect;\n             return this;\n         }\n \n-        public BankAccountBuilder applyDiscount(boolean collect) {\n-            this.newsletter = newsletter;\n+        public PizzaBuilder applyDiscount(Integer discount) {\n+            this.discount = discount;\n             return this;\n         }\n \n@@ -63,20 +92,4 @@ public Pizza build() {\n         }\n     }\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public PizzaSize getSize() {\n-        return size;\n-    }\n-\n-    public String getEmail() {\n-        return email;\n-    }\n-\n-    public boolean isNewsletter() {\n-        return newsletter;\n-    }\n-\n }\n\ndiff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n@@ -1,5 +1,29 @@\n package com.baeldung.mockito.fluentapi;\n \n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n+\n public class PizzaService {\n \n+    private Pizza pizza;\n+\n+    public PizzaService(Pizza.PizzaBuilder builder) {\n+        this.pizza = builder.build();\n+    }\n+\n+    public List<String> listToppings(Pizza.PizzaBuilder builder) {\n+        Pizza build = builder.size(PizzaSize.LARGE)\n+            .withExtaTopping(\"Mushroom\")\n+            .withStuffedCrust(false)\n+            .willCollect(true)\n+            .applyDiscount(20)\n+            .build();\n+    }\n+\n+    public boolean isLarge() {\n+        return PizzaSize.LARGE.equals(pizza.getSize());\n+    }\n+\n }\n\ndiff --git a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n--- a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n+++ b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n@@ -1,23 +1,86 @@\n package com.baeldung.mockito.fluentapi;\n \n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.Mockito.when;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n \n public class PizzaServiceUnitTest {\n \n-    @Test\n-    public void test() {\n-        \n-    }\n+    @Mock(answer = Answers.RETURNS_DEEP_STUBS)\n+    private ArrayList<String> mockList;\n \n-    public List<String> convertAllToUpperCase(List<String> words) {\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+    \n+    \n+    @Test\n+    public void givenPizzaWithToppings_whenServiceInvoked_thenReturnsList() {\n \n-        return words.stream()\n+        //Foo mock = mock(Foo.class, RETURNS_DEEP_STUBS);\n+        \n+        List<String> bob = Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\");\n+        \n+        \n+        when(mockList.stream()\n+            .filter(s -> s.startsWith(\"c\"))\n             .map(String::toUpperCase)\n-            .collect(Collectors.toList());\n-\n+            .sorted()\n+            .collect(Collectors.toList()))\n+        .thenReturn(bob);\n+        \n+       Assert.assertEquals(bob, mockList.stream()\n+            .filter(s -> s.startsWith(\"c\"))\n+            .map(String::toUpperCase)\n+            .sorted()\n+            .collect(Collectors.toList()));\n+        \n+        \n+//        List<String> filtered = Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\")\n+//            .stream()\n+//            .filter(s -> s.startsWith(\"c\"))\n+//            .map(String::toUpperCase)\n+//            .sorted()\n+//            .collect(Collectors.toList());\n+//        \n+//        \n+//        \n+//        \n+//        Pizza.PizzaBuilder builder = Mockito.mock(Pizza.PizzaBuilder.class, Mockito.RETURNS_DEEP_STUBS);\n+//        \n+//        Pizza pizza = Mockito.mock(Pizza.class);\n+//        \n+//        Mockito.when(builder\n+//          .size(PizzaSize.LARGE)\n+//          .withExtaTopping(\"Mushroom\")\n+//          .withStuffedCrust(false)\n+//          .willCollect(true)\n+//          .applyDiscount(20)\n+//          .build()).thenReturn(pizza);\n+//        \n+//        PizzaService service = new PizzaService(builder);\n+//        \n+//        List<String> listToppings = service.listToppings();\n+        \n+        \n     }\n \n }\n\ndiff --git a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n--- a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n+++ b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaUnitTest.java\n@@ -0,0 +1,43 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+\n+\n+import org.junit.Test;\n+\n+import com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n+\n+public class PizzaUnitTest {\n+\n+    @Test\n+    public void givenPizza_whenBuilt_thenShouldReturnPizzaWithCorrectAttributes() {\n+        Pizza pizza = new Pizza\n+            .PizzaBuilder(\"Margherita\")\n+            .size(PizzaSize.LARGE)\n+            .withExtaTopping(\"Mushroom\")\n+            .withStuffedCrust(false)\n+            .willCollect(true)\n+            .applyDiscount(20)\n+            .build();\n+        \n+        //assert\n+    }\n+    \n+    @Test\n+    public void givenPizza_whenBuiltWithTraditonalMock_thenShouldReturnPizza() {\n+        \n+        Mock\n+        \n+        \n+        Pizza pizza = new Pizza\n+            .PizzaBuilder(\"Margherita\")\n+            .size(PizzaSize.LARGE)\n+            .withExtaTopping(\"Mushroom\")\n+            .withStuffedCrust(false)\n+            .willCollect(true)\n+            .applyDiscount(20)\n+            .build();\n+        \n+        //assert\n+    }\n+\n+}",
    "output": "staging changes"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n--- a/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n+++ b/testing-modules/testing-libraries/src/test/java/com/baeldung/cucumber/books/BookStoreRunSteps.java\n@@ -28,8 +28,8 @@ public void haveBooksInTheStoreByList(DataTable table) {\n         \n         List<List<String>> rows = table.asLists(String.class);\n         \n-        for (List<String> fields: rows) {\n-            store.addBook(new Book(fields.get(0), fields.get(1)));\n+        for (List<String> columns: rows) {\n+            store.addBook(new Book(columns.get(0), columns.get(1)));\n         }\n     }\n     \n@@ -38,8 +38,8 @@ public void haveBooksInTheStoreByMap(DataTable table) {\n         \n         List<Map<String, String>> rows = table.asMaps(String.class, String.class);\n         \n-        for (Map<String, String> fields: rows) {\n-            store.addBook(new Book(fields.get(\"title\"), fields.get(\"author\")));\n+        for (Map<String, String> columns: rows) {\n+            store.addBook(new Book(columns.get(\"title\"), columns.get(\"author\")));\n         }\n     }\n     ",
    "output": "BAEL-3444: Renamed parsing logic variables for improved clarity in the context of article."
  },
  {
    "input": "diff --git a/cloud-foundry-uaa/cf-uaa-oauth2-resource-server/src/main/java/com/baeldung/cfuaa/oauth2/resourceserver/CFUAAOAuth2ResourceServerRestController.java b/cloud-foundry-uaa/cf-uaa-oauth2-resource-server/src/main/java/com/baeldung/cfuaa/oauth2/resourceserver/CFUAAOAuth2ResourceServerRestController.java\n--- a/cloud-foundry-uaa/cf-uaa-oauth2-resource-server/src/main/java/com/baeldung/cfuaa/oauth2/resourceserver/CFUAAOAuth2ResourceServerRestController.java\n+++ b/cloud-foundry-uaa/cf-uaa-oauth2-resource-server/src/main/java/com/baeldung/cfuaa/oauth2/resourceserver/CFUAAOAuth2ResourceServerRestController.java\n@@ -18,7 +18,7 @@ public String index(@AuthenticationPrincipal Jwt jwt) {\n \r\n     @GetMapping(\"/read\")\r\n     public String read(JwtAuthenticationToken jwtAuthenticationToken) {\r\n-        return \"Hello write: \" + jwtAuthenticationToken.getTokenAttributes();\r\n+        return \"Hello read: \" + jwtAuthenticationToken.getTokenAttributes();\r\n     }\r\n \r\n     @GetMapping(\"/write\")\r",
    "output": "Fix copy/paste bug in CFUAAOAuth2ResourceServerRestController (#8033)"
  },
  {
    "input": "diff --git a/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java b/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n--- a/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n+++ b/twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java\n@@ -9,7 +9,7 @@\n \n import twitter4j.TwitterException;\n \n-public class ApplicationIntegrationTest {\n+public class ApplicationManualTest {\n \n \t/**\n \t * In order run this jUnit test you need to configure your API details in the twitter4j.properties",
    "output": "BAEL-19173 Fix the integrations tests in Twitter4J\n\n- Renaming ApplicationIntegrationTest.java to ApplicationManualTest.java"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n@@ -7,15 +7,9 @@\n import com.baeldung.datetime.sql.TimeUtils;\n \n import java.text.ParseException;\n-import java.util.Date;\n \n public class TimeUtilsUnitTest {\n \n-    @Test\n-    public void givenCurrentTime_thenNowIsReturned() {\n-        assertEquals(TimeUtils.getNow(), new Date());\n-    }\n-\n     @Test(expected = IllegalArgumentException.class)\n     public void givenTimeAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {\n         TimeUtils.getTime(\"10 11 12\");",
    "output": "removed unreliable test case from core-java-modules/core-java-date-operations"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeeBean.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeeBean.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeeBean.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeeBean.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.pojo;\n+\n+import java.io.Serializable;\n+import java.time.LocalDate;\n+\n+public class EmployeeBean implements Serializable {\n+\n+    /**\n+     * \n+     */\n+    private static final long serialVersionUID = -3760445487636086034L;\n+\n+    private String firstName;\n+\n+    private String lastName;\n+\n+    private LocalDate startDate;\n+\n+    public EmployeeBean() {\n+\n+    }\n+\n+    public EmployeeBean(String firstName, String lastName, LocalDate startDate) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+        this.startDate = startDate;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public LocalDate getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStartDate(LocalDate startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeePojo.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeePojo.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeePojo.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/EmployeePojo.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.pojo;\n+\n+import java.time.LocalDate;\n+\n+public class EmployeePojo {\n+\n+    public String firstName;\n+\n+    public String lastName;\n+\n+    private LocalDate startDate;\n+\n+    public EmployeePojo(String firstName, String lastName, LocalDate startDate) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+        this.startDate = startDate;\n+    }\n+\n+    public String name() {\n+        return this.firstName + \" \" + this.lastName;\n+    }\n+\n+    public LocalDate getStart() {\n+        return this.startDate;\n+    }\n+\n+}\n\ndiff --git a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/ReflectionExample.java b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/ReflectionExample.java\n--- a/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/ReflectionExample.java\n+++ b/core-java-modules/core-java-lang-2/src/main/java/com/baeldung/pojo/ReflectionExample.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.pojo;\n+\n+import java.beans.PropertyDescriptor;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+\n+public class ReflectionExample {\n+\n+    public static void main(String[] args) {\n+\n+        System.out.println(\"Fields for EmployeePojo are:\");\n+        for (PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(EmployeePojo.class)) {\n+            System.out.println(pd.getDisplayName());\n+        }\n+\n+        System.out.println(\"Fields for EmployeeBean are:\");\n+        for (PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(EmployeeBean.class)) {\n+            System.out.println(pd.getDisplayName());\n+        }\n+\n+    }\n+\n+}",
    "output": "BAEL-3212 - Examples of POJO, Bean and BeanUtils reflection (#7782)\n\n* BAEL-3212 - Examples of POJO, Bean and BeanUtils reflection\r\n\r\n* Update pom.xml"
  },
  {
    "input": "diff --git a/testing-modules/junit-5/src/test/java/com/baeldung/execution/time/SampleExecutionTimeUnitTest.java b/testing-modules/junit-5/src/test/java/com/baeldung/execution/time/SampleExecutionTimeUnitTest.java\n--- a/testing-modules/junit-5/src/test/java/com/baeldung/execution/time/SampleExecutionTimeUnitTest.java\n+++ b/testing-modules/junit-5/src/test/java/com/baeldung/execution/time/SampleExecutionTimeUnitTest.java\n@@ -0,0 +1,38 @@\n+package com.baeldung.execution.time;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class SampleExecutionTimeUnitTest {\n+\n+    @Test\n+    void someUnitTest() {\n+\n+        assertTrue(doSomething());\n+    }\n+\n+//    @Test\n+//    void someIntegrationTest() throws Exception {\n+//\n+//        //simulate an operation that may take 5 seconds\n+//        Thread.sleep(5000);\n+//\n+//        assertTrue(doSomething());\n+//    }\n+//\n+//    @Test\n+//    void someEndToEndTest() throws Exception {\n+//\n+//        //simulate an operation that may take 10 seconds\n+//        Thread.sleep(10000);\n+//\n+//        assertTrue(doSomething());\n+//\n+//    }\n+\n+    private boolean doSomething() {\n+        return true;\n+    }\n+}",
    "output": "BAEL-3236 Determine the execution time of JUnit Tests (#7985)\n\n* BAEL3236 Execution time Junit\r\n\r\n* BAEL3236 Execution time Junit\r\n\r\n* BAEL3236 Added more test cases\r\n\r\n* BAEL3236 Added more test cases\r\n\r\n* BAEL3236 Renaming to integration test\r\n\r\n* BAEL3236 Temporary enabling\r\n\r\n* BAEL3236 Reverting Integration tests\r\n\r\n* BAEL3236 Refactoring TCs\r\n\r\n* BAEL3236 Refactoring TCs\r\n\r\n* BAEL3236 Removing now unused spring and http client deps\r\n\r\n* BAEL3236 Fixing test cases and updating the missed version in pom.xml\r\n\r\n* BAEL3236 throwing Exception in TCs"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/date/comparison/DateComparisonUtils.java\n@@ -0,0 +1,55 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.LocalDate;\r\n+import java.time.ZoneId;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+import org.apache.commons.lang3.time.DateUtils;\r\n+\r\n+import hirondelle.date4j.DateTime;\r\n+\r\n+public class DateComparisonUtils {\r\n+\r\n+    public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\r\n+        LocalDate localDate1 = date1.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        LocalDate localDate2 = date2.toInstant()\r\n+            .atZone(ZoneId.systemDefault())\r\n+            .toLocalDate();\r\n+        return localDate1.isEqual(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\r\n+        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\r\n+        return fmt.format(date1)\r\n+            .equals(fmt.format(date2));\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingCalendar(Date date1, Date date2) {\r\n+        Calendar calendar1 = Calendar.getInstance();\r\n+        calendar1.setTime(date1);\r\n+        Calendar calendar2 = Calendar.getInstance();\r\n+        calendar2.setTime(date2);\r\n+        return calendar1.get(Calendar.YEAR) == calendar2.get(Calendar.YEAR) && calendar1.get(Calendar.MONTH) == calendar2.get(Calendar.MONTH) && calendar1.get(Calendar.DAY_OF_MONTH) == calendar2.get(Calendar.DAY_OF_MONTH);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingApacheCommons(Date date1, Date date2) {\r\n+        return DateUtils.isSameDay(date1, date2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingJoda(Date date1, Date date2) {\r\n+        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(date1);\r\n+        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(date2);\r\n+        return localDate1.equals(localDate2);\r\n+    }\r\n+\r\n+    public static boolean isSameDayUsingDate4j(Date date1, Date date2) {\r\n+        DateTime dateObject1 = DateTime.forInstant(date1.getTime(), TimeZone.getDefault());\r\n+        DateTime dateObject2 = DateTime.forInstant(date2.getTime(), TimeZone.getDefault());\r\n+        return dateObject1.isSameDayAs(dateObject2);\r\n+    }\r\n+}\r\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/date/comparison/DateComparisonUtilsUnitTest.java\n@@ -0,0 +1,53 @@\n+package com.baeldung.date.comparison;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.time.LocalDateTime;\r\n+import java.time.ZoneId;\r\n+import java.util.Date;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+public class DateComparisonUtilsUnitTest {\r\n+\r\n+    private Date day1Morning = toDate(LocalDateTime.of(2019, 10, 19, 6, 30, 40));\r\n+    private Date day1Evening = toDate(LocalDateTime.of(2019, 10, 19, 18, 30, 50));\r\n+    private Date day2Morning = toDate(LocalDateTime.of(2019, 10, 20, 6, 30, 50));\r\n+\r\n+    private Date toDate(LocalDateTime localDateTime) {\r\n+        return Date.from(localDateTime.atZone(ZoneId.systemDefault())\r\n+            .toInstant());\r\n+    }\r\n+\r\n+    @Test\r\n+    void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day1Evening));\r\n+        assertTrue(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day1Evening));\r\n+    }\r\n+\r\n+    @Test\r\n+    void givenDates_whenIsDifferentDay_thenReturnsFalse() {\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Evening, day2Morning));\r\n+\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day2Morning));\r\n+        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Evening, day2Morning));\r\n+    }\r\n+}\r",
    "output": "BAEL-3224 - Checking if 2 Java Dates are in the same day"
  },
  {
    "input": "diff --git a/libraries-security/src/main/java/com/baeldung/digitalsignature/Utils.java b/libraries-security/src/main/java/com/baeldung/digitalsignature/Utils.java\n--- a/libraries-security/src/main/java/com/baeldung/digitalsignature/Utils.java\n+++ b/libraries-security/src/main/java/com/baeldung/digitalsignature/Utils.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.digitalsignature;\n+\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.cert.Certificate;\n+\n+public class Utils {\n+\n+    private static final String STORE_TYPE = \"PKCS12\";\n+    private static final char[] PASSWORD = \"changeit\".toCharArray();\n+    private static final String SENDER_KEYSTORE = \"sender_keystore.p12\";\n+    private static final String SENDER_ALIAS = \"senderKeyPair\";\n+\n+    public static final String SIGNING_ALGORITHM = \"SHA256withRSA\";\n+\n+    private static final String RECEIVER_KEYSTORE = \"receiver_keystore.p12\";\n+    private static final String RECEIVER_ALIAS = \"receiverKeyPair\";\n+\n+    public static PrivateKey getPrivateKey() throws Exception {\n+        KeyStore keyStore = KeyStore.getInstance(STORE_TYPE);\n+        keyStore.load(new FileInputStream(SENDER_KEYSTORE), PASSWORD);\n+        return (PrivateKey) keyStore.getKey(SENDER_ALIAS, PASSWORD);\n+    }\n+\n+    public static PublicKey getPublicKey() throws Exception {\n+        KeyStore keyStore = KeyStore.getInstance(STORE_TYPE);\n+        keyStore.load(new FileInputStream(RECEIVER_KEYSTORE), PASSWORD);\n+        Certificate certificate = keyStore.getCertificate(RECEIVER_ALIAS);\n+        return certificate.getPublicKey();\n+    }\n+}\n\ndiff --git a/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherSigning.java b/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherSigning.java\n--- a/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherSigning.java\n+++ b/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherSigning.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.digitalsignature.level1;\n+\n+import com.baeldung.digitalsignature.Utils;\n+\n+import javax.crypto.Cipher;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.MessageDigest;\n+import java.security.PrivateKey;\n+\n+public class DigitalSignatureWithMessageDigestAndCipherSigning {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PrivateKey privateKey = Utils.getPrivateKey();\n+\n+        byte[] messageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/digitalsignature/message.txt\"));\n+\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+        byte[] messageHash = md.digest(messageBytes);\n+\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n+        byte[] digitalSignature = cipher.doFinal(messageHash);\n+\n+        Files.write(Paths.get(\"target/digital_signature_1\"), digitalSignature);\n+    }\n+}\n\ndiff --git a/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherVerifying.java b/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherVerifying.java\n--- a/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherVerifying.java\n+++ b/libraries-security/src/main/java/com/baeldung/digitalsignature/level1/DigitalSignatureWithMessageDigestAndCipherVerifying.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.digitalsignature.level1;\n+\n+import com.baeldung.digitalsignature.Utils;\n+\n+import javax.crypto.Cipher;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.MessageDigest;\n+import java.security.PublicKey;\n+import java.util.Arrays;\n+\n+public class DigitalSignatureWithMessageDigestAndCipherVerifying {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PublicKey publicKey = Utils.getPublicKey();\n+\n+        byte[] messageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/digitalsignature/message.txt\"));\n+\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+        byte[] newMessageHash = md.digest(messageBytes);\n+\n+        byte[] encryptedMessageHash = Files.readAllBytes(Paths.get(\"target/digital_signature_1\"));\n+\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.DECRYPT_MODE, publicKey);\n+        byte[] decryptedMessageHash = cipher.doFinal(encryptedMessageHash);\n+\n+        boolean isCorrect = Arrays.equals(decryptedMessageHash, newMessageHash);\n+        System.out.println(\"Signature \" + (isCorrect ? \"correct\" : \"incorrect\"));\n+    }\n+\n+}\n\ndiff --git a/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureSigning.java b/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureSigning.java\n--- a/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureSigning.java\n+++ b/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureSigning.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.digitalsignature.level2;\n+\n+import com.baeldung.digitalsignature.Utils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.Signature;\n+\n+public class DigitalSignatureWithSignatureSigning {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PrivateKey privateKey = Utils.getPrivateKey();\n+\n+        Signature signature = Signature.getInstance(Utils.SIGNING_ALGORITHM);\n+        signature.initSign(privateKey);\n+\n+        byte[] messageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/digitalsignature/message.txt\"));\n+\n+        signature.update(messageBytes);\n+        byte[] digitalSignature = signature.sign();\n+\n+        Files.write(Paths.get(\"target/digital_signature_2\"), digitalSignature);\n+    }\n+\n+}\n\ndiff --git a/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureVerifying.java b/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureVerifying.java\n--- a/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureVerifying.java\n+++ b/libraries-security/src/main/java/com/baeldung/digitalsignature/level2/DigitalSignatureWithSignatureVerifying.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.digitalsignature.level2;\n+\n+import com.baeldung.digitalsignature.Utils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+\n+public class DigitalSignatureWithSignatureVerifying {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PublicKey publicKey = Utils.getPublicKey();\n+\n+        byte[] sig = Files.readAllBytes(Paths.get(\"target/digital_signature_2\"));\n+\n+        Signature signature = Signature.getInstance(Utils.SIGNING_ALGORITHM);\n+        signature.initVerify(publicKey);\n+\n+        byte[] messageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/digitalsignature/message.txt\"));\n+\n+        signature.update(messageBytes);\n+\n+        boolean isCorrect = signature.verify(sig);\n+        System.out.println(\"Signature \" + (isCorrect ? \"correct\" : \"incorrect\"));\n+    }\n+}",
    "output": "BAEL-3282 -- Digital signature. (#7981)\n\n* Digital signature.\r\n\r\n* Digital signature.\r\nmove message.txt in src/test/resources/digitalsignature."
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/Circle.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/Circle.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/Circle.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/Circle.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.strictfpUsage;\n+\n+public strictfp interface Circle {\n+    double computeArea(double radius);\n+}\n\ndiff --git a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n--- a/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n+++ b/core-java-modules/core-java-lang-math/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.strictfpUsage;\n+\n+public strictfp class ScientificCalculator {\n+\n+    public double sum(double value1, double value2) {\n+        return value1 + value2;\n+    }\n+\n+    public double diff(double value1, double value2) {\n+        return value1 - value2;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n--- a/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n+++ b/core-java-modules/core-java-lang-math/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.strictfpUsage;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class ScientificCalculatorUnitTest {\n+\n+    @Test\n+    public void whenMethodOfstrictfpClassInvoked_thenIdenticalResultOnAllPlatforms() {\n+        ScientificCalculator calculator = new ScientificCalculator();\n+        double result = calculator.sum(23e10, 98e17);\n+        assertThat(result, is(9.800000230000001E18));\n+        result = calculator.diff(Double.MAX_VALUE, 1.56);\n+        assertThat(result, is(1.7976931348623157E308));\n+    }\n+}",
    "output": "BAEL-3404 Review comments (#8181)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListFilter.java b/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListFilter.java\n--- a/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListFilter.java\n+++ b/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListFilter.java\n@@ -0,0 +1,70 @@\n+package com.baeldung.benchmark;\n+\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.api.list.primitive.MutableIntList;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+import org.eclipse.collections.impl.list.mutable.FastList;\n+import org.eclipse.collections.impl.list.mutable.primitive.IntArrayList;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.Random;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@Fork(2)\n+public class IntegerListFilter {\n+\n+    private List<Integer> jdkIntList;\n+    private MutableList<Integer> ecMutableList;\n+    private IntList ecIntList;\n+    private ExecutorService executor;\n+\n+    @Setup\n+    public void setup() {\n+        PrimitiveIterator.OfInt iterator = new Random(1L).ints(-10000, 10000).iterator();\n+        ecMutableList = FastList.newWithNValues(1_000_000, iterator::nextInt);\n+        jdkIntList = new ArrayList<>(1_000_000);\n+        jdkIntList.addAll(ecMutableList);\n+        ecIntList = ecMutableList.collectInt(i -> i, new IntArrayList(1_000_000));\n+        executor = Executors.newWorkStealingPool();\n+    }\n+\n+    @Benchmark\n+    public List<Integer> jdkList() {\n+        return jdkIntList.stream().filter(i -> i % 5 == 0).collect(Collectors.toList());\n+    }\n+\n+    @Benchmark\n+    public MutableList<Integer> ecMutableList() {\n+        return ecMutableList.select(i -> i % 5 == 0);\n+    }\n+\n+    @Benchmark\n+    public List<Integer> jdkListParallel() {\n+        return jdkIntList.parallelStream().filter(i -> i % 5 == 0).collect(Collectors.toList());\n+    }\n+\n+    @Benchmark\n+    public MutableList<Integer> ecMutableListParallel() {\n+        return ecMutableList.asParallel(executor, 100_000).select(i -> i % 5 == 0).toList();\n+    }\n+\n+    @Benchmark\n+    public IntList ecPrimitive() {\n+        return this.ecIntList.select(i -> i % 5 == 0);\n+    }\n+\n+    @Benchmark\n+    public IntList ecPrimitiveParallel() {\n+        return this.ecIntList.primitiveParallelStream().filter(i -> i % 5 == 0).collect(IntLists.mutable::empty, MutableIntList::add, MutableIntList::addAll);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListSum.java b/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListSum.java\n--- a/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListSum.java\n+++ b/core-java-modules/core-java-11/src/main/java/com/baeldung/benchmark/IntegerListSum.java\n@@ -0,0 +1,67 @@\n+package com.baeldung.benchmark;\n+\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.list.mutable.FastList;\n+import org.eclipse.collections.impl.list.mutable.primitive.IntArrayList;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.Random;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@Fork(2)\n+public class IntegerListSum {\n+\n+    private List<Integer> jdkIntList;\n+    private MutableList<Integer> ecMutableList;\n+    private ExecutorService executor;\n+    private IntList ecIntList;\n+\n+    @Setup\n+    public void setup() {\n+        PrimitiveIterator.OfInt iterator = new Random(1L).ints(-10000, 10000).iterator();\n+        ecMutableList = FastList.newWithNValues(1_000_000, iterator::nextInt);\n+        jdkIntList = new ArrayList<>(1_000_000);\n+        jdkIntList.addAll(ecMutableList);\n+        ecIntList = ecMutableList.collectInt(i -> i, new IntArrayList(1_000_000));\n+        executor = Executors.newWorkStealingPool();\n+    }\n+\n+    @Benchmark\n+    public long jdkList() {\n+        return jdkIntList.stream().mapToLong(i -> i).sum();\n+    }\n+\n+    @Benchmark\n+    public long ecMutableList() {\n+        return ecMutableList.sumOfInt(i -> i);\n+    }\n+\n+    @Benchmark\n+    public long jdkListParallel() {\n+        return jdkIntList.parallelStream().mapToLong(i -> i).sum();\n+    }\n+\n+    @Benchmark\n+    public long ecMutableListParallel() {\n+        return ecMutableList.asParallel(executor, 100_000).sumOfInt(i -> i);\n+    }\n+\n+    @Benchmark\n+    public long ecPrimitive() {\n+        return this.ecIntList.sum();\n+    }\n+\n+    @Benchmark\n+    public long ecPrimitiveParallel() {\n+        return this.ecIntList.primitiveParallelStream().sum();\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListFilterUnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListFilterUnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListFilterUnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListFilterUnitTest.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.benchmark;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class IntegerListFilterUnitTest {\n+\n+    private IntegerListFilter integerListFilter;\n+\n+    @Before\n+    public void init() {\n+        integerListFilter = new IntegerListFilter();\n+        integerListFilter.setup();\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenJDKListsMustBeOfSameSize() {\n+        assertEquals(integerListFilter.jdkList().size(), integerListFilter.jdkListParallel().size());\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenMutableListsMustBeOfSameSize() {\n+        assertEquals(integerListFilter.ecMutableList().size(), integerListFilter.ecMutableListParallel().size());\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenPrimitiveListsMustBeOfSameSize() {\n+        assertEquals(integerListFilter.ecPrimitive().size(), integerListFilter.ecPrimitiveParallel().size());\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListSumUnitTest.java b/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListSumUnitTest.java\n--- a/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListSumUnitTest.java\n+++ b/core-java-modules/core-java-11/src/test/java/com/baeldung/benchmark/IntegerListSumUnitTest.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.benchmark;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class IntegerListSumUnitTest {\n+\n+    private IntegerListSum integerListSum;\n+\n+    @Before\n+    public void init() {\n+        integerListSum = new IntegerListSum();\n+        integerListSum.setup();\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenJDKListsMustHaveSameValue() {\n+        assertEquals(integerListSum.jdkList(), integerListSum.jdkListParallel());\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenMutableListsMustHaveSameValue() {\n+        assertEquals(integerListSum.ecMutableList(), integerListSum.ecMutableListParallel());\n+    }\n+\n+    @Test\n+    public void whenBenchmarkIsExecute_thenPrimitiveListsMustHaveSameValue() {\n+        assertEquals(integerListSum.ecPrimitive(), integerListSum.ecPrimitiveParallel());\n+    }\n+}",
    "output": "BAEL-3414 (#8177)\n\n* BAEL-3414\r\n\r\n* BAEL-3414 -> Add unit tests\r\n\r\n* BAEL-3414 -> Clean up pom.xml"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n@@ -0,0 +1,31 @@\n+package com.baeldung.datetime;\n+\n+import java.time.DayOfWeek;\n+import java.time.LocalDate;\n+\n+public class AddSubtractDaysSkippingWeekendsUtils {\n+\n+    public static LocalDate addDaysSkippingWeekends(LocalDate date, int days) {\n+        LocalDate result = date;\n+        int addedDays = 0;\n+        while (addedDays < days) {\n+            result = result.plusDays(1);\n+            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n+                ++addedDays;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public static LocalDate subtractDaysSkippingWeekends(LocalDate date, int days) {\n+        LocalDate result = date;\n+        int subtractedDays = 0;\n+        while (subtractedDays < days) {\n+            result = result.minusDays(1);\n+            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n+                ++subtractedDays;\n+            }\n+        }\n+        return result;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.datetime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+import java.time.LocalDate;\n+\n+public class AddSubtractDaysSkippingWeekendsUtilsUnitTest {\n+\n+    @Test\n+    public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekends() {\n+        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n+        LocalDate expectedDate = LocalDate.of(2019, 11, 13);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addDaysSkippingWeekends(initialDate, 4);\n+        assertEquals(expectedDate, result);\n+    }\n+\n+    @Test\n+    public void givenLocalDateAndDaysToSubtract_thenSubtractDaysSkippingWeekends() {\n+        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n+        LocalDate expectedDate = LocalDate.of(2019, 11, 1);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.subtractDaysSkippingWeekends(initialDate, 4);\n+        assertEquals(expectedDate, result);\n+    }\n+\n+}",
    "output": "Merge pull request #8153 from vatsalgosar/BAEL-3401\n\n[BAEL-3401]- Skipping Weekends While Adding Days"
  },
  {
    "input": "diff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/Pizza.java\n@@ -0,0 +1,82 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import java.util.List;\n+\n+public class Pizza {\n+\n+    public enum PizzaSize {\n+        LARGE, MEDIUM, SMALL;\n+    }\n+\n+    private String name;\n+    private PizzaSize size;\n+    private List<String> toppings;\n+\n+    private String email;\n+    private boolean stuffedCrust;\n+\n+    private Pizza(PizzaBuilder builder) {\n+        this.name = builder.name;\n+        this.size = builder.size;\n+        this.toppings = builder.toppings;\n+        this.stuffedCrust = builder.stuffedCrust;\n+    }\n+\n+    public static class PizzaBuilder {\n+        private String name;\n+        private PizzaSize size;\n+        private String email;\n+        private boolean stuffedCrust;\n+        private List<String> toppings;\n+\n+        public PizzaBuilder(String name) {\n+            this.name = name;\n+        }\n+\n+        public PizzaBuilder size(PizzaSize size) {\n+            this.size = size;\n+            return this;\n+        }\n+\n+        public PizzaBuilder withExtaTopping(String extraTopping) {\n+            this.toppings.add(extraTopping);\n+            return this;\n+        }\n+\n+        public PizzaBuilder withStuffedCrust(boolean stuffedCrust) {\n+            this.stuffedCrust = stuffedCrust;\n+            return this;\n+        }\n+\n+        public BankAccountBuilder willCollect(boolean collect) {\n+            this.newsletter = newsletter;\n+            return this;\n+        }\n+\n+        public BankAccountBuilder applyDiscount(boolean collect) {\n+            this.newsletter = newsletter;\n+            return this;\n+        }\n+\n+        public Pizza build() {\n+            return new Pizza(this);\n+        }\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public PizzaSize getSize() {\n+        return size;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public boolean isNewsletter() {\n+        return newsletter;\n+    }\n+\n+}\n\ndiff --git a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n--- a/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n+++ b/testing-modules/mockito-2/src/main/java/com/baeldung/mockito/fluentapi/PizzaService.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+public class PizzaService {\n+\n+}\n\ndiff --git a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n--- a/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n+++ b/testing-modules/mockito-2/src/test/java/com/baeldung/mockito/fluentapi/PizzaServiceUnitTest.java\n@@ -0,0 +1,23 @@\n+package com.baeldung.mockito.fluentapi;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+\n+public class PizzaServiceUnitTest {\n+\n+    @Test\n+    public void test() {\n+        \n+    }\n+\n+    public List<String> convertAllToUpperCase(List<String> words) {\n+\n+        return words.stream()\n+            .map(String::toUpperCase)\n+            .collect(Collectors.toList());\n+\n+    }\n+\n+}",
    "output": "BAEL-3416 - Mockito and Fluent APIs\n- stage changes"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n@@ -37,7 +37,7 @@ public void testThatWhenUserSavedWithTransctionPersistenceContextThenUserShouldG\n     }\n \n     @Test(expected = TransactionRequiredException.class)\n-    public void testThatWhenUserSaveWithOutTransactionowTransactionRequiredExceptionOnPersist() {\n+    public void testThatUserSaveWithoutTransactionThrowException() {\n         User user = new User(122L, \"Devender\", \"admin\");\n         transctionPersistenceContext.insertWithoutTransaction(user);\n     }\n@@ -53,7 +53,7 @@ public void testThatWhenUserSavedWithExtendedPersistenceContextWithoutTransactio\n     }\n \n     @Test(expected = EntityExistsException.class)\n-    public void testThatWhenAddUserWithSameIdentifierInPersistenceContextThenShouldThrowException() {\n+    public void testThatPersistUserWithSameIdentifierThrowException() {\n         User user1 = new User(126L, \"Devender\", \"admin\");\n         User user2 = new User(126L, \"Devender\", \"admin\");\n         extendedPersistenceContext.insertWithoutTransaction(user1);",
    "output": "Break long line into smaller"
  },
  {
    "input": "diff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n@@ -1,16 +0,0 @@\n-package com.baeldung.hexagonal.arch;\n-\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n-\n-@SpringBootApplication\n-@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })\n-public class AddressBookApplication {\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(AddressBookApplication.class, args);\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n@@ -1,32 +0,0 @@\n-package com.baeldung.hexagonal.arch.adapter.controller;\n-\n-import java.util.List;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n-\n-@RestController\n-@RequestMapping(\"/contacts\")\n-public class AddressBookController {\n-\n-    @Autowired\n-    private AddressBookService addressBookService;\n-\n-    @PostMapping\n-    public void addContact(@RequestBody Contact contact) {\n-        addressBookService.createContact(contact);\n-    }\n-\n-    @GetMapping\n-    public List<Contact> getAllContacts() {\n-        return addressBookService.getAllContacts();\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n@@ -1,30 +0,0 @@\n-package com.baeldung.hexagonal.arch.adapter.repository;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.springframework.stereotype.Repository;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n-\n-@Repository\n-public class ContactRepositoryImpl implements ContactRepository {\n-\n-    private Map<String, Contact> contactsRepo = new HashMap<String, Contact>();\n-\n-    @Override\n-    public void createContact(Contact contact) {\n-        contactsRepo.put(contact.getName(), contact);\n-    }\n-\n-    @Override\n-    public List<Contact> getAllContacts() {\n-        return contactsRepo.values()\n-            .stream()\n-            .collect(Collectors.toList());\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n@@ -1,33 +0,0 @@\n-package com.baeldung.hexagonal.arch.core.domain;\n-\n-public class Contact {\n-\n-    private String name;\n-    private String address;\n-    private int contactNumber;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getAddress() {\n-        return address;\n-    }\n-\n-    public void setAddress(String address) {\n-        this.address = address;\n-    }\n-\n-    public int getContactNumber() {\n-        return contactNumber;\n-    }\n-\n-    public void setContactNumber(int contactNumber) {\n-        this.contactNumber = contactNumber;\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n@@ -1,28 +0,0 @@\n-package com.baeldung.hexagonal.arch.core.service;\n-\n-import java.util.List;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n-import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n-\n-@Service\n-public class AddressBookServiceImpl implements AddressBookService {\n-\n-    @Autowired\n-    ContactRepository contactRepository;\n-\n-    @Override\n-    public void createContact(Contact contact) {\n-        contactRepository.createContact(contact);\n-    }\n-\n-    @Override\n-    public List<Contact> getAllContacts() {\n-        return contactRepository.getAllContacts();\n-    }\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n@@ -1,13 +0,0 @@\n-package com.baeldung.hexagonal.arch.port.repo;\n-\n-import java.util.List;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-\n-public interface ContactRepository {\n-\n-    void createContact(Contact contact);\n-\n-    List<Contact> getAllContacts();\n-\n-}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n@@ -1,13 +0,0 @@\n-package com.baeldung.hexagonal.arch.port.service;\n-\n-import java.util.List;\n-\n-import com.baeldung.hexagonal.arch.core.domain.Contact;\n-\n-public interface AddressBookService {\n-\n-    public void createContact(Contact contact);\n-\n-    public List<Contact> getAllContacts();\n-\n-}",
    "output": "Removed source code for evaluation article"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/controller/UserController.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/controller/UserController.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/controller/UserController.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/controller/UserController.java\n@@ -1,56 +0,0 @@\n-package com.baeldung.persistencecontext.controller;\n-\n-import com.baeldung.persistencecontext.entity.User;\n-import com.baeldung.persistencecontext.service.ExtendedPersistenceContextUserService;\n-import com.baeldung.persistencecontext.service.TransctionPersistenceContextUserService;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.*;\n-\n-@RestController\n-public class UserController {\n-\n-    @Autowired\n-    private TransctionPersistenceContextUserService transctionPersistenceContext;\n-    @Autowired\n-    private ExtendedPersistenceContextUserService extendedPersistenceContext;\n-\n-    @RequestMapping(value = \"v1/user\", method = RequestMethod.POST,\n-            consumes = \"application/json\",\n-            produces = \"application/json\")\n-    public User saveUserV1(@RequestBody User user) {\n-        return transctionPersistenceContext.insertWithTransaction(user);\n-    }\n-\n-    @RequestMapping(value = \"v2/user\", method = RequestMethod.POST,\n-            consumes = \"application/json\",\n-            produces = \"application/json\")\n-    public User saveUserV2(@RequestBody User user) {\n-        return extendedPersistenceContext.insertWithoutTransaction(user);\n-    }\n-\n-    @RequestMapping(value = \"v3/user\", method = RequestMethod.POST,\n-            consumes = \"application/json\",\n-            produces = \"application/json\")\n-    public User saveUserV3(@RequestBody User user) {\n-        return extendedPersistenceContext.insertWithTransaction(user);\n-    }\n-\n-    @RequestMapping(value = \"v4/user\", method = RequestMethod.POST,\n-            consumes = \"application/json\",\n-            produces = \"application/json\")\n-    public User saveUserV4(@RequestBody User user) {\n-        return transctionPersistenceContext.insertWithoutTransaction(user);\n-    }\n-\n-    @RequestMapping(value = \"v1/user/{id}\", method = RequestMethod.GET,\n-            produces = \"application/json\")\n-    public User getUserV1(@PathVariable(\"id\") Long id) {\n-        return transctionPersistenceContext.find(id);\n-    }\n-\n-    @RequestMapping(value = \"v2/user/{id}\", method = RequestMethod.GET,\n-            produces = \"application/json\")\n-    public User getUserV2(@PathVariable(\"id\") Long id) {\n-        return extendedPersistenceContext.find(id);\n-    }\n-}",
    "output": "Remove controller"
  },
  {
    "input": "diff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n@@ -3,8 +3,8 @@\n import java.math.BigDecimal;\n \n public class BasicAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n \n     public BigDecimal getBalance() {\n         return this.balance;\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class ChainedAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class ChainedFluentAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class FluentAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n@@ -11,6 +11,10 @@\n @Getter\n @Setter\n public class PrefixedAccount {\n-    String sName;\n-    BigDecimal bdBalance;\n+    private String sName;\n+    private BigDecimal bdBalance;\n+\n+    @Accessors(prefix = \"s_\")\n+    private String s_notes;\n+\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class PrefixedFluentAccount {\n-    String sName;\n-    BigDecimal bdBalance;\n+    private String sName;\n+    private BigDecimal bdBalance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n@@ -8,6 +8,6 @@\n @Getter\n @Setter\n public class StandardAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n--- a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n+++ b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n@@ -12,11 +12,11 @@ public class AccessorsUnitTest {\n     @Test\n     public void givenBasicAccount_thenUseBasicAccessors() {\n         BasicAccount account = new BasicAccount();\n-        account.setBalance(BigDecimal.TEN);\n         account.setName(\"Basic Accessors\");\n+        account.setBalance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Basic Accessors\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n     }\n \n     @Test\n@@ -25,17 +25,17 @@ public void givenFluentAccount_thenUseFluentAccessors() {\n         account.name(\"Fluent Account\");\n         account.balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Fluent Account\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n     @Test\n     public void givenChainedAccount_thenUseChainedAccessors() {\n         ChainedAccount account = new ChainedAccount();\n         account.setName(\"Chained Account\").setBalance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Chained Account\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n     }\n \n     @Test\n@@ -44,18 +44,20 @@ public void givenChainedFluentAccount_thenUseChainedFluentAccessors() {\n           .name(\"Fluent Account\")\n           .balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Fluent Account\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n     @Test\n     public void givenPrefixedAccount_thenRemovePrefixFromAccessors() {\n         PrefixedAccount account = new PrefixedAccount();\n         account.setName(\"Prefixed Fields\");\n         account.setBalance(BigDecimal.TEN);\n+        account.setNotes(\"Notes\");\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Prefixed Fields\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Notes\", account.getNotes());\n     }\n \n     @Test\n@@ -65,8 +67,8 @@ public void givenPrefixedFluentAccount_thenRemovePrefixFromAccessors() {\n           .name(\"Prefixed Fluent Fields\")\n           .balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Prefixed Fluent Fields\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n }",
    "output": "BAEL-3475 Add code for Lombok Accessors including prefix with trailing _ (#8166)\n\n* BAEL-3475 - Add code for Lombok Accessors\r\n\r\n* BAEL-3475 - Updated lombok.version to latest\r\n\r\n* BAEL-3475 - Rename Test to UnitTest\r\n\r\n* BAEL-3475 - Add prefix with trailing _, make fields private, and update delombok version"
  },
  {
    "input": "diff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n@@ -3,8 +3,8 @@\n import java.math.BigDecimal;\n \n public class BasicAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n \n     public BigDecimal getBalance() {\n         return this.balance;\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class ChainedAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class ChainedFluentAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class FluentAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n@@ -11,6 +11,10 @@\n @Getter\n @Setter\n public class PrefixedAccount {\n-    String sName;\n-    BigDecimal bdBalance;\n+    private String sName;\n+    private BigDecimal bdBalance;\n+\n+    @Accessors(prefix = \"s_\")\n+    private String s_notes;\n+\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n@@ -10,6 +10,6 @@\n @Getter\n @Setter\n public class PrefixedFluentAccount {\n-    String sName;\n-    BigDecimal bdBalance;\n+    private String sName;\n+    private BigDecimal bdBalance;\n }\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n@@ -8,6 +8,6 @@\n @Getter\n @Setter\n public class StandardAccount {\n-    String name;\n-    BigDecimal balance;\n+    private String name;\n+    private BigDecimal balance;\n }\n\ndiff --git a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n--- a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n+++ b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n@@ -12,11 +12,11 @@ public class AccessorsUnitTest {\n     @Test\n     public void givenBasicAccount_thenUseBasicAccessors() {\n         BasicAccount account = new BasicAccount();\n-        account.setBalance(BigDecimal.TEN);\n         account.setName(\"Basic Accessors\");\n+        account.setBalance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Basic Accessors\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n     }\n \n     @Test\n@@ -25,17 +25,17 @@ public void givenFluentAccount_thenUseFluentAccessors() {\n         account.name(\"Fluent Account\");\n         account.balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Fluent Account\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n     @Test\n     public void givenChainedAccount_thenUseChainedAccessors() {\n         ChainedAccount account = new ChainedAccount();\n         account.setName(\"Chained Account\").setBalance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Chained Account\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n     }\n \n     @Test\n@@ -44,18 +44,20 @@ public void givenChainedFluentAccount_thenUseChainedFluentAccessors() {\n           .name(\"Fluent Account\")\n           .balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Fluent Account\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n     @Test\n     public void givenPrefixedAccount_thenRemovePrefixFromAccessors() {\n         PrefixedAccount account = new PrefixedAccount();\n         account.setName(\"Prefixed Fields\");\n         account.setBalance(BigDecimal.TEN);\n+        account.setNotes(\"Notes\");\n \n-        assertEquals(BigDecimal.TEN, account.getBalance());\n         assertEquals(\"Prefixed Fields\", account.getName());\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Notes\", account.getNotes());\n     }\n \n     @Test\n@@ -65,8 +67,8 @@ public void givenPrefixedFluentAccount_thenRemovePrefixFromAccessors() {\n           .name(\"Prefixed Fluent Fields\")\n           .balance(BigDecimal.TEN);\n \n-        assertEquals(BigDecimal.TEN, account.balance());\n         assertEquals(\"Prefixed Fluent Fields\", account.name());\n+        assertEquals(BigDecimal.TEN, account.balance());\n     }\n \n }",
    "output": "BAEL-3475 - Add prefix with trailing _, make fields private, and update delombok version"
  },
  {
    "input": "diff --git a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n--- a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n+++ b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n@@ -1,72 +0,0 @@\n-package com.baeldung.lombok.accessors;\n-\n-import com.baeldung.lombok.accessors.model.*;\n-import org.junit.Test;\n-\n-import java.math.BigDecimal;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-public class AccessorsTest {\n-\n-    @Test\n-    public void givenBasicAccount_thenUseBasicAccessors() {\n-        BasicAccount account = new BasicAccount();\n-        account.setBalance(BigDecimal.TEN);\n-        account.setName(\"Basic Accessors\");\n-\n-        assertEquals(BigDecimal.TEN, account.getBalance());\n-        assertEquals(\"Basic Accessors\", account.getName());\n-    }\n-\n-    @Test\n-    public void givenFluentAccount_thenUseFluentAccessors() {\n-        FluentAccount account = new FluentAccount();\n-        account.name(\"Fluent Account\");\n-        account.balance(BigDecimal.TEN);\n-\n-        assertEquals(BigDecimal.TEN, account.balance());\n-        assertEquals(\"Fluent Account\", account.name());\n-    }\n-\n-    @Test\n-    public void givenChainedAccount_thenUseChainedAccessors() {\n-        ChainedAccount account = new ChainedAccount();\n-        account.setName(\"Chained Account\").setBalance(BigDecimal.TEN);\n-\n-        assertEquals(BigDecimal.TEN, account.getBalance());\n-        assertEquals(\"Chained Account\", account.getName());\n-    }\n-\n-    @Test\n-    public void givenChainedFluentAccount_thenUseChainedFluentAccessors() {\n-        ChainedFluentAccount account = new ChainedFluentAccount()\n-          .name(\"Fluent Account\")\n-          .balance(BigDecimal.TEN);\n-\n-        assertEquals(BigDecimal.TEN, account.balance());\n-        assertEquals(\"Fluent Account\", account.name());\n-    }\n-\n-    @Test\n-    public void givenPrefixedAccount_thenRemovePrefixFromAccessors() {\n-        PrefixedAccount account = new PrefixedAccount();\n-        account.setName(\"Prefixed Fields\");\n-        account.setBalance(BigDecimal.TEN);\n-\n-        assertEquals(BigDecimal.TEN, account.getBalance());\n-        assertEquals(\"Prefixed Fields\", account.getName());\n-    }\n-\n-    @Test\n-    public void givenPrefixedFluentAccount_thenRemovePrefixFromAccessors() {\n-        PrefixedFluentAccount account = new PrefixedFluentAccount();\n-        account\n-          .name(\"Prefixed Fluent Fields\")\n-          .balance(BigDecimal.TEN);\n-\n-        assertEquals(BigDecimal.TEN, account.balance());\n-        assertEquals(\"Prefixed Fluent Fields\", account.name());\n-    }\n-\n-}",
    "output": "BAEL-3475 - Rename Test to UnitTest"
  },
  {
    "input": "diff --git a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n--- a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n+++ b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsTest.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.lombok.accessors;\n+\n+import com.baeldung.lombok.accessors.model.*;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class AccessorsTest {\n+\n+    @Test\n+    public void givenBasicAccount_thenUseBasicAccessors() {\n+        BasicAccount account = new BasicAccount();\n+        account.setBalance(BigDecimal.TEN);\n+        account.setName(\"Basic Accessors\");\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Basic Accessors\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenFluentAccount_thenUseFluentAccessors() {\n+        FluentAccount account = new FluentAccount();\n+        account.name(\"Fluent Account\");\n+        account.balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Fluent Account\", account.name());\n+    }\n+\n+    @Test\n+    public void givenChainedAccount_thenUseChainedAccessors() {\n+        ChainedAccount account = new ChainedAccount();\n+        account.setName(\"Chained Account\").setBalance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Chained Account\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenChainedFluentAccount_thenUseChainedFluentAccessors() {\n+        ChainedFluentAccount account = new ChainedFluentAccount()\n+          .name(\"Fluent Account\")\n+          .balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Fluent Account\", account.name());\n+    }\n+\n+    @Test\n+    public void givenPrefixedAccount_thenRemovePrefixFromAccessors() {\n+        PrefixedAccount account = new PrefixedAccount();\n+        account.setName(\"Prefixed Fields\");\n+        account.setBalance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Prefixed Fields\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenPrefixedFluentAccount_thenRemovePrefixFromAccessors() {\n+        PrefixedFluentAccount account = new PrefixedFluentAccount();\n+        account\n+          .name(\"Prefixed Fluent Fields\")\n+          .balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Prefixed Fluent Fields\", account.name());\n+    }\n+\n+}",
    "output": "BAEL-3475 - Add code for Lombok Accessors"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n--- a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n@@ -33,9 +33,9 @@ public void givenEmployeeList_andNameFilterList_thenObtainFilteredEmployeeList_u\n \n         for (Employee employee : originalList) {\n             for (String name : nameFilter) {\n-                if (employee.getName()\n-                    .equalsIgnoreCase(name)) {\n+                if (employee.getName().equals(name)) {\n                     filteredList.add(employee);\n+                    //break;\n                 }\n             }\n         }",
    "output": "Merge pull request #8155 from alessiostalla/BAEL-18411\n\n#BAEL-18411 change code sample to use equals instead of equalsIgnoreC…"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n--- a/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n+++ b/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/list/duplicatescounter/DuplicatesCounter.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.list;\n+package com.baeldung.list.duplicatescounter;\n \n import java.util.HashMap;\n import java.util.List;\n\ndiff --git a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n--- a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/list/duplicatescounter/DuplicatesCounterUnitTest.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.list;\n+package com.baeldung.list.duplicatescounter;\n \n import org.assertj.core.util.Lists;\n import org.junit.jupiter.api.Test;",
    "output": "[BAEL-3402]move to an individual package (#8161)"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Rating.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.streamreduce.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Rating {\n+\n+    double points;\n+    List<Review> reviews = new ArrayList<>();\n+\n+    public Rating() {}\n+\n+    public void add(Review review) {\n+        reviews.add(review);\n+        computeRating();\n+    }\n+\n+    private double computeRating() {\n+        double totalPoints = reviews.stream().map(Review::getPoints).reduce(0, Integer::sum);\n+        this.points = totalPoints / reviews.size();\n+        return this.points;\n+    }\n+\n+    public static Rating average(Rating r1, Rating r2) {\n+        Rating combined = new Rating();\n+        combined.reviews = new ArrayList<>(r1.reviews);\n+        combined.reviews.addAll(r2.reviews);\n+        combined.computeRating();\n+        return combined;\n+    }\n+\n+    public double getPoints() {\n+        return points;\n+    }\n+\n+    public List<Review> getReviews() {\n+        return reviews;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/Review.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.streamreduce.entities;\n+\n+public class Review {\n+\n+    int points;\n+    String review;\n+\n+    public Review(int points, String review) {\n+        this.points = points;\n+        this.review = review;\n+    }\n+\n+    public int getPoints() {\n+        return points;\n+    }\n+\n+    public void setPoints(int points) {\n+        this.points = points;\n+    }\n+\n+    public String getReview() {\n+        return review;\n+    }\n+\n+    public void setReview(String review) {\n+        this.review = review;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n--- a/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n+++ b/core-java-modules/core-java-8/src/main/java/com/baeldung/streamreduce/entities/User.java\n@@ -4,6 +4,7 @@ public class User {\n \n     private final String name;\n     private final int age;\n+    private final Rating rating = new Rating();\n \n     public User(String name, int age) {\n         this.name = name;\n@@ -17,7 +18,11 @@ public String getName() {\n     public int getAge() {\n         return age;\n     }\n-    \n+\n+    public Rating getRating() {\n+        return rating;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"User{\" + \"name=\" + name + \", age=\" + age + '}';\n\ndiff --git a/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java b/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n--- a/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n+++ b/core-java-modules/core-java-8/src/test/java/com/baeldung/streamreduce/tests/StreamReduceManualTest.java\n@@ -1,5 +1,7 @@\n package com.baeldung.streamreduce.tests;\n \n+import com.baeldung.streamreduce.entities.Rating;\n+import com.baeldung.streamreduce.entities.Review;\n import com.baeldung.streamreduce.entities.User;\n import com.baeldung.streamreduce.utilities.NumberUtils;\n import java.util.ArrayList;\n@@ -64,6 +66,31 @@ public void givenUserList_whenReduceWithAgeAccumulatorAndSumCombiner_thenCorrect\n         assertThat(result).isEqualTo(65);\n     }\n \n+    @Test\n+    public void givenUserList_whenReduceWithGreaterAgeAccumulator_thenFindsOldest() {\n+        List<User> users = Arrays.asList(new User(\"John\", 30), new User(\"Alex\", 40), new User(\"Julie\", 35));\n+\n+        User oldest = users.stream().reduce(users.get(0), (user1, user2) -> user1.getAge() >= user2.getAge() ? user1 : user2);\n+\n+        assertThat(oldest).isEqualTo(users.get(1));\n+    }\n+\n+    @Test\n+    public void givenUserListWithRatings_whenReduceWithGreaterAgeAccumulator_thenFindsOldest() {\n+        User john = new User(\"John\", 30);\n+        john.getRating().add(new Review(5, \"\"));\n+        john.getRating().add(new Review(3, \"not bad\"));\n+        User julie = new User(\"Julie\", 35);\n+        john.getRating().add(new Review(4, \"great!\"));\n+        john.getRating().add(new Review(2, \"terrible experience\"));\n+        john.getRating().add(new Review(4, \"\"));\n+        List<User> users = Arrays.asList(john, julie);\n+\n+        Rating averageRating = users.stream().reduce(new Rating(), (rating, user) -> Rating.average(rating, user.getRating()), Rating::average);\n+\n+        assertThat(averageRating.getPoints()).isEqualTo(3.6);\n+    }\n+\n     @Test\n     public void givenStringList_whenReduceWithParallelStream_thenCorrect() {\n         List<String> letters = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\");",
    "output": "#BAEL-18410 add code sample for reduce with complex objects"
  },
  {
    "input": "diff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.prototype;\n+\n+public class PineTree extends Tree {\n+\n+    private String type;\n+\n+    public PineTree(double mass, double height) {\n+        super(mass, height);\n+        this.type = \"Pine\";\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public Tree copy() {\n+        return new PineTree(this.getMass(), this.getHeight());\n+    }\n+\n+}\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PlasticTree.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.prototype;\n+\n+public class PlasticTree extends Tree {\n+\n+    private String name;\n+\n+    public PlasticTree(double mass, double height) {\n+        super(mass, height);\n+        this.name = \"PlasticTree\";\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Tree copy() {\n+        return new PlasticTree(this.getMass(), this.getHeight());\n+    }\n+\n+}\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/Tree.java\n@@ -1,6 +1,6 @@\n package com.baeldung.prototype;\n \n-public class Tree implements TreeCloneable {\n+public abstract class Tree {\n \n     private double mass;\n     private double height;\n@@ -40,15 +40,5 @@ public String toString() {\n         return \"Tree [mass=\" + mass + \", height=\" + height + \", position=\" + position + \"]\";\n     }\n \n-    @Override\n-    public TreeCloneable createA_Clone() {\n-        Tree tree = null;\n-        try {\n-            tree = (Tree) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            e.printStackTrace();\n-        }\n-        return tree;\n-    }\n-\n+    public abstract Tree copy();\n }\n\ndiff --git a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/TreeCloneable.java b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/TreeCloneable.java\n--- a/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/TreeCloneable.java\n+++ b/patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/TreeCloneable.java\n@@ -1,6 +0,0 @@\n-package com.baeldung.prototype;\n-\n-public interface TreeCloneable extends Cloneable {\n-\n-    TreeCloneable createA_Clone();\n-}\n\ndiff --git a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n--- a/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n+++ b/patterns/design-patterns-creational/src/test/java/com/baeldung/prototype/TreePrototypeUnitTest.java\n@@ -7,18 +7,35 @@\n public class TreePrototypeUnitTest {\n \n     @Test\n-    public void givenATreePrototypeWhenClonedThenCreateA_Clone() {\n+    public void givenAPlasticTreePrototypeWhenClonedThenCreateA_Clone() {\n         double mass = 10.0;\n         double height = 3.7;\n         Position position = new Position(3, 7);\n         Position otherPosition = new Position(4, 8);\n \n-        Tree tree = new Tree(mass, height);\n-        tree.setPosition(position);\n-        Tree anotherTree = (Tree) tree.createA_Clone();\n-        anotherTree.setPosition(otherPosition);\n+        PlasticTree plasticTree = new PlasticTree(mass, height);\n+        plasticTree.setPosition(position);\n+        PlasticTree anotherPlasticTree = (PlasticTree) plasticTree.copy();\n+        anotherPlasticTree.setPosition(otherPosition);\n \n-        assertEquals(position, tree.getPosition());\n-        assertEquals(otherPosition, anotherTree.getPosition());\n+        assertEquals(position, plasticTree.getPosition());\n+        assertEquals(otherPosition, anotherPlasticTree.getPosition());\n+\n+    }\n+\n+    @Test\n+    public void givenAPineTreePrototypeWhenClonedThenCreateA_Clone() {\n+        double mass = 10.0;\n+        double height = 3.7;\n+        Position position = new Position(3, 7);\n+        Position otherPosition = new Position(4, 8);\n+\n+        PineTree pineTree = new PineTree(mass, height);\n+        pineTree.setPosition(position);\n+        PineTree anotherPineTree = (PineTree) pineTree.copy();\n+        anotherPineTree.setPosition(otherPosition);\n+\n+        assertEquals(position, pineTree.getPosition());\n+        assertEquals(otherPosition, anotherPineTree.getPosition());\n     }\n }",
    "output": "BAEL-3091: The Prototype Pattern in Java - Changes based on comments"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/debug/entity/Customer.java b/core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/debug/entity/Customer.java\n--- a/core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/debug/entity/Customer.java\n+++ b/core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/debug/entity/Customer.java\n@@ -0,0 +1,19 @@\n+package com.baeldung.streams.debug.entity;\n+\n+public class Customer {\n+    private final String name;\n+    private final int age;\n+\n+    public Customer(String name, int age) {\n+        this.name = name;\n+        this.age = age;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example1.java b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example1.java\n--- a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example1.java\n+++ b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example1.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.streams.debug;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+\n+public class Example1 {\n+    @Test\n+    public void whenDebugging_thenInformationIsShown() {\n+        int[] listOutputSorted = IntStream.of(-3, 10, -4, 1, 3)\n+            .sorted()\n+            .toArray();\n+\n+        assertThat(listOutputSorted).isSorted();\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n--- a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n+++ b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n@@ -0,0 +1,36 @@\n+package com.baeldung.streams.debug;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+\n+import com.baeldung.streams.debug.entity.Customer;\n+\n+public class Example2 {\n+    @Test\n+    public void whenDebugging_thenInformationIsShown() {\n+        List<Optional<Customer>> customers = Arrays.asList(\n+            Optional.of(new Customer(\"John P.\", 15)),\n+            Optional.of(new Customer(\"Sarah M.\", 78)),\n+            Optional.empty(),\n+            Optional.of(new Customer(\"Mary T.\", 20)),\n+            Optional.empty(),\n+            Optional.of(new Customer(\"Florian G.\", 89)),\n+            Optional.empty()\n+        );\n+\n+        long numberOf65PlusCustomers = customers.stream()\n+            .flatMap(c -> c.map(Stream::of)\n+              .orElseGet(Stream::empty))\n+            .mapToInt(Customer::getAge)\n+            .filter(c -> c > 65)\n+            .count();\n+\n+        assertThat(numberOf65PlusCustomers).isEqualTo(2);\n+    }\n+}",
    "output": "Merge pull request #8109 from martinvw/feature/BAEL-3392\n\n[BAEL-3392] Debugging Java 8 Streams with IntelliJ"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/Circle.java b/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/Circle.java\n--- a/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/Circle.java\n+++ b/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/Circle.java\n@@ -0,0 +1,5 @@\n+package com.baeldung.strictfpUsage;\n+\n+public strictfp interface Circle {\n+    double computeArea(double radius);\n+}\n\ndiff --git a/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java b/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n--- a/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n+++ b/core-java-modules/core-java-lang-oop-4/src/main/java/com/baeldung/strictfpUsage/ScientificCalculator.java\n@@ -0,0 +1,12 @@\n+package com.baeldung.strictfpUsage;\n+\n+public strictfp class ScientificCalculator {\n+\n+    public double sum(double value1, double value2) {\n+        return value1 + value2;\n+    }\n+\n+    public double diff(double value1, double value2) {\n+        return value1 - value2;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-lang-oop-4/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java b/core-java-modules/core-java-lang-oop-4/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n--- a/core-java-modules/core-java-lang-oop-4/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n+++ b/core-java-modules/core-java-lang-oop-4/src/test/java/com/baeldung/strictfpUsage/ScientificCalculatorUnitTest.java\n@@ -0,0 +1,18 @@\n+package com.baeldung.strictfpUsage;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class ScientificCalculatorUnitTest {\n+\n+    @Test\n+    public void whenMethodOfstrictfpClassInvoked_thenIdenticalResultOnAllPlatforms() {\n+        ScientificCalculator calculator = new ScientificCalculator();\n+        double result = calculator.sum(23e10, 98e17);\n+        assertThat(result, is(9.800000230000001E18));\n+        result = calculator.diff(Double.MAX_VALUE, 1.56);\n+        assertThat(result, is(1.7976931348623157E308));\n+    }\n+}",
    "output": "Bael 3404 strictfp in java (#8157)\n\n* BAEL-3404 Creating new OOP module\r\n\r\n* BAEL-3404 Code changes"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n@@ -5,17 +5,27 @@\n \n public class AddSubtractDaysSkippingWeekendsUtils {\n \n-    public static LocalDate addSubtractDaysSkippingWeekendsIterativeMethod(LocalDate date, int days) {\n+    public static LocalDate addDaysSkippingWeekends(LocalDate date, int days) {\n         LocalDate result = date;\n         int addedDays = 0;\n-        int absDays = Math.abs(days);\n-        int day = (days > 0) ? 1 : -1;\n-        while (addedDays < absDays) {\n-            result = result.plusDays(day);\n+        while (addedDays < days) {\n+            result = result.plusDays(1);\n             if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n                 ++addedDays;\n             }\n         }\n         return result;\n     }\n+\n+    public static LocalDate subtractDaysSkippingWeekends(LocalDate date, int days) {\n+        LocalDate result = date;\n+        int subtractedDays = 0;\n+        while (subtractedDays < days) {\n+            result = result.minusDays(1);\n+            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n+                ++subtractedDays;\n+            }\n+        }\n+        return result;\n+    }\n }\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n@@ -9,18 +9,18 @@\n public class AddSubtractDaysSkippingWeekendsUtilsUnitTest {\n \n     @Test\n-    public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekendsUsingIterativeMethod() {\n+    public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekends() {\n         LocalDate initialDate = LocalDate.of(2019, 11, 7);\n         LocalDate expectedDate = LocalDate.of(2019, 11, 13);\n-        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addSubtractDaysSkippingWeekendsIterativeMethod(initialDate, 4);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addDaysSkippingWeekends(initialDate, 4);\n         assertEquals(expectedDate, result);\n     }\n \n     @Test\n-    public void givenLocalDateAndDaysToAdd_thenSubtractDaysSkippingWeekendsUsingIterativeMethod() {\n+    public void givenLocalDateAndDaysToSubtract_thenSubtractDaysSkippingWeekends() {\n         LocalDate initialDate = LocalDate.of(2019, 11, 7);\n         LocalDate expectedDate = LocalDate.of(2019, 11, 1);\n-        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addSubtractDaysSkippingWeekendsIterativeMethod(initialDate, -4);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.subtractDaysSkippingWeekends(initialDate, 4);\n         assertEquals(expectedDate, result);\n     }\n ",
    "output": "- Separated add and subtract days into two methods for simplification"
  },
  {
    "input": "diff --git a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n--- a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n+++ b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-client/src/main/java/com/baeldung/spring/cloud/eureka/client/EurekaClientApplication.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.spring.cloud.eureka.client;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n+\n+@SpringBootApplication\n+@EnableEurekaClient\n+public class EurekaClientApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(EurekaClientApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n--- a/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n+++ b/spring-cloud/spring-cloud-eureka-self-preservation/spring-cloud-eureka-server/src/main/java/com/baeldung/spring/cloud/eureka/server/EurekaServerApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.spring.cloud.eureka.server;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n+\n+@SpringBootApplication\n+@EnableEurekaServer\n+public class EurekaServerApplication {\n+    public static void main(String[] args) {\n+        SpringApplication.run(EurekaServerApplication.class, args);\n+    }\n+}",
    "output": "BAEL - 1836"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n--- a/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n+++ b/core-java-modules/core-java-collections-list-3/src/test/java/com/baeldung/collection/filtering/CollectionFilteringUnitTest.java\n@@ -33,9 +33,9 @@ public void givenEmployeeList_andNameFilterList_thenObtainFilteredEmployeeList_u\n \n         for (Employee employee : originalList) {\n             for (String name : nameFilter) {\n-                if (employee.getName()\n-                    .equalsIgnoreCase(name)) {\n+                if (employee.getName().equals(name)) {\n                     filteredList.add(employee);\n+                    //break;\n                 }\n             }\n         }",
    "output": "#BAEL-18411 change code sample to use equals instead of equalsIgnoreCase and add commented out break statement mentioned in the article."
  },
  {
    "input": "diff --git a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Customer.java b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Customer.java\n--- a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Customer.java\n+++ b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Customer.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.fetchMode;\n+\n+import org.hibernate.annotations.Fetch;\n+import org.hibernate.annotations.FetchMode;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Entity\n+public class Customer {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    @OneToMany(mappedBy = \"customer\")\n+    @Fetch(value = FetchMode.SELECT)\n+    private Set<Order> orders = new HashSet<>();\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Set<Order> getOrders() {\n+        return orders;\n+    }\n+\n+    public void setOrders(Set<Order> orders) {\n+        this.orders = orders;\n+    }\n+}\n\ndiff --git a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Order.java b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Order.java\n--- a/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Order.java\n+++ b/persistence-modules/hibernate5-2/src/main/java/com/baeldung/fetchMode/Order.java\n@@ -0,0 +1,50 @@\n+package com.baeldung.fetchMode;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Order {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"customer_id\")\n+    private Customer customer;\n+\n+    public Order() {\n+\n+    }\n+\n+    public Order(String name, Customer customer) {\n+        this.name = name;\n+        this.customer = customer;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Customer getCustomer() {\n+        return customer;\n+    }\n+\n+    public void setCustomer(Customer customer) {\n+        this.customer = customer;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}",
    "output": "Merge pull request #8110 from MajewskiKrzysztof/BAEL-2513\n\nBAEL-2513"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtils.java\n@@ -0,0 +1,21 @@\n+package com.baeldung.datetime;\n+\n+import java.time.DayOfWeek;\n+import java.time.LocalDate;\n+\n+public class AddSubtractDaysSkippingWeekendsUtils {\n+\n+    public static LocalDate addSubtractDaysSkippingWeekendsIterativeMethod(LocalDate date, int days) {\n+        LocalDate result = date;\n+        int addedDays = 0;\n+        int absDays = Math.abs(days);\n+        int day = (days > 0) ? 1 : -1;\n+        while (addedDays < absDays) {\n+            result = result.plusDays(day);\n+            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n+                ++addedDays;\n+            }\n+        }\n+        return result;\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/AddSubtractDaysSkippingWeekendsUtilsUnitTest.java\n@@ -0,0 +1,27 @@\n+package com.baeldung.datetime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+import java.time.LocalDate;\n+\n+public class AddSubtractDaysSkippingWeekendsUtilsUnitTest {\n+\n+    @Test\n+    public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekendsUsingIterativeMethod() {\n+        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n+        LocalDate expectedDate = LocalDate.of(2019, 11, 13);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addSubtractDaysSkippingWeekendsIterativeMethod(initialDate, 4);\n+        assertEquals(expectedDate, result);\n+    }\n+\n+    @Test\n+    public void givenLocalDateAndDaysToAdd_thenSubtractDaysSkippingWeekendsUsingIterativeMethod() {\n+        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n+        LocalDate expectedDate = LocalDate.of(2019, 11, 1);\n+        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addSubtractDaysSkippingWeekendsIterativeMethod(initialDate, -4);\n+        assertEquals(expectedDate, result);\n+    }\n+\n+}",
    "output": "BAEL-3401\n- Implementation for adding days skipping weekends in LocalDate object in Java 8"
  },
  {
    "input": "diff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/Application.java b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/Application.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/Application.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/Application.java\n@@ -0,0 +1,14 @@\n+package com.baeldung.flash_attributes;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+\n+@SpringBootApplication\n+public class Application extends SpringBootServletInitializer {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/controllers/PoemSubmission.java b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/controllers/PoemSubmission.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/controllers/PoemSubmission.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/controllers/PoemSubmission.java\n@@ -0,0 +1,49 @@\n+package com.baeldung.flash_attributes.controllers;\n+\n+import com.baeldung.flash_attributes.model.Poem;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.mvc.support.RedirectAttributes;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n+import org.springframework.web.servlet.view.RedirectView;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+@Controller\n+public class PoemSubmission {\n+\n+    @GetMapping(\"/poem/success\")\n+    public String getSuccess(HttpServletRequest request) {\n+        Map<String, ?> inputFlashMap = RequestContextUtils.getInputFlashMap(request);\n+        if (inputFlashMap != null) {\n+            Poem poem = (Poem) inputFlashMap.get(\"poem\");\n+            return \"success\";\n+        } else {\n+            return \"redirect:/poem/submit\";\n+        }\n+    }\n+\n+    @PostMapping(\"/poem/submit\")\n+    public RedirectView submitPost(\n+        HttpServletRequest request, \n+        @ModelAttribute Poem poem, \n+        RedirectAttributes redirectAttributes) {\n+        if (Poem.isValidPoem(poem)) {\n+            redirectAttributes.addFlashAttribute(\"poem\", poem);\n+            return new RedirectView(\"/poem/success\", true);\n+        } else {\n+            return new RedirectView(\"/poem/submit\", true);\n+        }\n+    }\n+\n+    @GetMapping(\"/poem/submit\")\n+    public String submitGet(Model model) {\n+        model.addAttribute(\"poem\", new Poem());\n+        return \"submit\";\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/model/Poem.java b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/model/Poem.java\n--- a/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/model/Poem.java\n+++ b/spring-mvc-simple-2/src/main/java/com/baeldung/flash_attributes/model/Poem.java\n@@ -0,0 +1,39 @@\n+package com.baeldung.flash_attributes.model;\n+\n+import org.apache.logging.log4j.util.Strings;\n+\n+public class Poem {\n+    private String title;\n+    private String author;\n+    private String body;\n+\n+    public static boolean isValidPoem(Poem poem) {\n+        return poem != null && Strings.isNotBlank(poem.getAuthor()) && Strings.isNotBlank(poem.getBody())\n+          && Strings.isNotBlank(poem.getTitle());\n+    }\n+\n+    public String getTitle() {\n+        return this.title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getBody() {\n+        return this.body;\n+    }\n+\n+    public void setBody(String body) {\n+        this.body = body;\n+    }\n+\n+    public String getAuthor() {\n+        return this.author;\n+    }\n+\n+    public void setAuthor(String author) {\n+        this.author = author;\n+    }\n+\n+}",
    "output": "BAEL-3284: Guide to Flash Attributes in a Spring Web Application (#8070)"
  },
  {
    "input": "diff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/SpringdocApplication.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/SpringdocApplication.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/SpringdocApplication.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/SpringdocApplication.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.springdoc;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SpringdocApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(SpringdocApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/controller/BookController.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/controller/BookController.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/controller/BookController.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/controller/BookController.java\n@@ -0,0 +1,73 @@\n+package com.baeldung.springdoc.controller;\n+\n+import java.util.Collection;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.baeldung.springdoc.exception.BookNotFoundException;\n+import com.baeldung.springdoc.model.Book;\n+import com.baeldung.springdoc.repository.BookRepository;\n+\n+@RestController\n+@RequestMapping(\"/api/book\")\n+public class BookController {\n+\n+    @Autowired\n+    private BookRepository repository;\n+\n+    @GetMapping(\"/{id}\")\n+    public Book findById(@PathVariable long id) {\n+        return repository.findById(id)\n+            .orElseThrow(() -> new BookNotFoundException());\n+    }\n+\n+    @GetMapping(\"/\")\n+    public Collection<Book> findBooks() {\n+        return repository.getBooks();\n+    }\n+\n+    @PutMapping(\"/{id}\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public Book updateBook(@PathVariable(\"id\") final String id, @RequestBody final Book book) {\n+        return book;\n+    }\n+\n+    @PatchMapping(\"/{id}\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public Book patchBook(@PathVariable(\"id\") final String id, @RequestBody final Book book) {\n+        return book;\n+    }\n+\n+    @PostMapping(\"/\")\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public Book postBook(@NotNull @Valid @RequestBody final Book book) {\n+        return book;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.HEAD, value = \"/\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public Book headBook() {\n+        return new Book();\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public long deleteBook(@PathVariable final long id) {\n+        return id;\n+    }\n+}\n\ndiff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/BookNotFoundException.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/BookNotFoundException.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/BookNotFoundException.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/BookNotFoundException.java\n@@ -0,0 +1,10 @@\n+package com.baeldung.springdoc.exception;\n+\n+@SuppressWarnings(\"serial\")\n+public class BookNotFoundException extends RuntimeException {\n+\n+    public BookNotFoundException() {\n+\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/GlobalControllerExceptionHandler.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/GlobalControllerExceptionHandler.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/GlobalControllerExceptionHandler.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/exception/GlobalControllerExceptionHandler.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.springdoc.exception;\n+\n+import org.springframework.core.convert.ConversionFailedException;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+\n+@RestControllerAdvice\n+public class GlobalControllerExceptionHandler {\n+\n+    @ExceptionHandler(ConversionFailedException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public ResponseEntity<String> handleConnversion(RuntimeException ex) {\n+        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @ExceptionHandler(BookNotFoundException.class)\n+    @ResponseStatus(HttpStatus.NOT_FOUND)\n+    public ResponseEntity<String> handleBookNotFound(RuntimeException ex) {\n+        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\n+    }\n+}\n\ndiff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/model/Book.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/model/Book.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/model/Book.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/model/Book.java\n@@ -0,0 +1,41 @@\n+package com.baeldung.springdoc.model;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+public class Book {\n+\n+    private long id;\n+\n+    @NotBlank\n+    @Size(min = 0, max = 20)\n+    private String title;\n+\n+    @NotBlank\n+    @Size(min = 0, max = 30)\n+    private String author;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getAuthor() {\n+        return author;\n+    }\n+\n+    public void setAuthor(String author) {\n+        this.author = author;\n+    }\n+}\n\ndiff --git a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/repository/BookRepository.java b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/repository/BookRepository.java\n--- a/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/repository/BookRepository.java\n+++ b/spring-boot-springdoc/src/main/java/com/baeldung/springdoc/repository/BookRepository.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.springdoc.repository;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.springdoc.model.Book;\n+\n+@Repository\n+public class BookRepository {\n+\n+    private Map<Long, Book> books = new HashMap<>();\n+\n+    public Optional<Book> findById(long id) {\n+        return Optional.ofNullable(books.get(id));\n+    }\n+\n+    public void add(Book book) {\n+        books.put(book.getId(), book);\n+    }\n+\n+    public Collection<Book> getBooks() {\n+        return books.values();\n+    }\n+}\n\ndiff --git a/spring-boot-springdoc/src/test/java/com/baeldung/springdoc/SpringContextIntegrationTest.java b/spring-boot-springdoc/src/test/java/com/baeldung/springdoc/SpringContextIntegrationTest.java\n--- a/spring-boot-springdoc/src/test/java/com/baeldung/springdoc/SpringContextIntegrationTest.java\n+++ b/spring-boot-springdoc/src/test/java/com/baeldung/springdoc/SpringContextIntegrationTest.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.springdoc;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class SpringContextIntegrationTest {\n+\n+    @Test\n+    public void whenSpringContextIsBootstrapped_thenNoExceptions() {\n+    \n+    }\n+\n+}",
    "output": "[BAEL-3319] - Documenting a Spring REST API using OpenAPI (#7919)\n\n* [BAEL-3211] Generate Integers within a range in Java\r\n\r\n* [BAEL-3211] Generate Integers within a range in Java\r\n\r\n* Moved files from java-numbers to java-numbers-2\r\n\r\n* [BAEL-3319] - Documenting a Spring REST API using OpenAPI\r\n\r\n* [BAEL-3319] Added a new module for springdoc-openapi library\r\n\r\n* Incorporated feedback - indents, GetMapping et al annotations, package as jar, remove README & spring-webflux change, use of map in BookRepository\r\n\r\n* Used DeleteMapping instead of RequestMapping\r\n\r\n* Add the spring-boot-springdoc module to root pom.xml\r\n\r\n* Remove plain spring boot starter from pom.xml"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-4/src/main/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveInteger.java b/algorithms-miscellaneous-4/src/main/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveInteger.java\n--- a/algorithms-miscellaneous-4/src/main/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveInteger.java\n+++ b/algorithms-miscellaneous-4/src/main/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveInteger.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.algorithms.smallestinteger;\n+\n+import java.util.Arrays;\n+\n+public class SmallestMissingPositiveInteger {\n+    public static int searchInSortedArray(int[] input) {\n+        for (int i = 0; i < input.length; i++) {\n+            if (i != input[i]) {\n+                return i;\n+            }\n+        }\n+\n+        return input.length;\n+    }\n+\n+    public static int searchInUnsortedArraySortingFirst(int[] input) {\n+        Arrays.sort(input);\n+        return searchInSortedArray(input);\n+    }\n+\n+    public static int searchInUnsortedArrayBooleanArray(int[] input) {\n+        boolean[] flags = new boolean[input.length];\n+        for (int number : input) {\n+            if (number < flags.length) {\n+                flags[number] = true;\n+            }\n+        }\n+\n+        for (int i = 0; i < flags.length; i++) {\n+            if (!flags[i]) {\n+                return i;\n+            }\n+        }\n+\n+        return flags.length;\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n--- a/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n+++ b/algorithms-miscellaneous-4/src/test/java/com/baeldung/algorithms/smallestinteger/SmallestMissingPositiveIntegerUnitTest.java\n@@ -0,0 +1,88 @@\n+package com.baeldung.algorithms.smallestinteger;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class SmallestMissingPositiveIntegerUnitTest {\n+    @Test\n+    void givenArrayWithThreeMissing_whenSearchInSortedArray_thenThree() {\n+        int[] input = new int[] {0, 1, 2, 4, 5};\n+\n+        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n+\n+        assertThat(result).isEqualTo(3);\n+    }\n+\n+    @Test\n+    void givenArrayWithOneAndThreeMissing_whenSearchInSortedArray_thenOne() {\n+        int[] input = new int[] {0, 2, 4, 5};\n+\n+        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n+\n+        assertThat(result).isEqualTo(1);\n+    }\n+\n+    @Test\n+    void givenArrayWithoutMissingInteger_whenSearchInSortedArray_thenArrayLength() {\n+        int[] input = new int[] {0, 1, 2, 3, 4, 5};\n+\n+        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n+\n+        assertThat(result).isEqualTo(input.length);\n+    }\n+\n+    @Test\n+    void givenArrayWithThreeMissing_whenSearchInUnsortedArraySortingFirst_thenThree() {\n+        int[] input = new int[] {1, 4, 0, 5, 2};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n+\n+        assertThat(result).isEqualTo(3);\n+    }\n+\n+    @Test\n+    void givenArrayWithOneAndThreeMissing_whenSearchInUnsortedArraySortingFirst_thenOne() {\n+        int[] input = new int[] {4, 2, 0, 5};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n+\n+        assertThat(result).isEqualTo(1);\n+    }\n+\n+    @Test\n+    void givenArrayWithoutMissingInteger_whenSearchInUnsortedArraySortingFirst_thenArrayLength() {\n+        int[] input = new int[] {4, 5, 1, 3, 0, 2};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n+\n+        assertThat(result).isEqualTo(input.length);\n+    }\n+\n+    @Test\n+    void givenArrayWithThreeMissing_whenSearchInUnsortedArrayBooleanArray_thenThree() {\n+        int[] input = new int[] {1, 4, 0, 5, 2};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n+\n+        assertThat(result).isEqualTo(3);\n+    }\n+\n+    @Test\n+    void givenArrayWithOneAndThreeMissing_whenSearchInUnsortedArrayBooleanArray_thenOne() {\n+        int[] input = new int[] {4, 2, 0, 5};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n+\n+        assertThat(result).isEqualTo(1);\n+    }\n+\n+    @Test\n+    void givenArrayWithoutMissingInteger_whenSearchInUnsortedArrayBooleanArray_thenArrayLength() {\n+        int[] input = new int[] {4, 5, 1, 3, 0, 2};\n+\n+        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n+\n+        assertThat(result).isEqualTo(input.length);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #8084 from dupirefr/bael-3348\n\ndupirefr/dupire.francois+pro@gmail.com [BAEL-3348] Smallest missing positive integer in an array"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/binarygap/BinaryGap.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/binarygap/BinaryGap.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/binarygap/BinaryGap.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/binarygap/BinaryGap.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.algorithms.binarygap;\n+\n+public class BinaryGap {\n+    static int calculateBinaryGap(int n) {\n+        return calculateBinaryGap(n >>> Integer.numberOfTrailingZeros(n), 0, 0);\n+    }\n+\n+    static int calculateBinaryGap(int n, int current, int maximum) {\n+        if (n == 0) {\n+            return maximum;\n+        } else if ((n & 1) == 0) {\n+            return calculateBinaryGap(n >>> 1, current + 1, maximum);\n+        } else {\n+            return calculateBinaryGap(n >>> 1, 0, Math.max(maximum, current));\n+        }\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/binarygap/BinaryGapUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/binarygap/BinaryGapUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/binarygap/BinaryGapUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/binarygap/BinaryGapUnitTest.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.algorithms.binarygap;\n+\n+import static com.baeldung.algorithms.binarygap.BinaryGap.calculateBinaryGap;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class BinaryGapUnitTest {\n+\n+    @Test public void givenNoOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n+\n+        int result = calculateBinaryGap(63);\n+        assertEquals(0, result);\n+    }\n+\n+    @Test public void givenTrailingZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n+\n+        int result = calculateBinaryGap(40);\n+        assertEquals(1, result);\n+    }\n+\n+    @Test public void givenSingleOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n+\n+        int result = calculateBinaryGap(9);\n+        assertEquals(2, result);\n+    }\n+\n+    @Test public void givenMultipleOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n+\n+        int result = calculateBinaryGap(145);\n+        assertEquals(3, result);\n+    }\n+\n+}",
    "output": "[BAEL-3405] Solving Binary Gap using Recursion (#8144)\n\n* A quick and practical example of Hexagonal Architecture in Java\r\n\r\n* updated code as per eclipse formatter\r\n\r\n* [BAEL-3405] Solving Binary Gap using Recursion\r\n\r\n* removed java-hexagonal package"
  },
  {
    "input": "diff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java\n@@ -0,0 +1,24 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import java.math.BigDecimal;\n+\n+public class BasicAccount {\n+    String name;\n+    BigDecimal balance;\n+\n+    public BigDecimal getBalance() {\n+        return this.balance;\n+    }\n+\n+    public void setBalance(BigDecimal newBalance) {\n+        this.balance = newBalance;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String accountName) {\n+        this.name = accountName;\n+    }\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+\n+import java.math.BigDecimal;\n+\n+@Accessors(chain = true)\n+@Getter\n+@Setter\n+public class ChainedAccount {\n+    String name;\n+    BigDecimal balance;\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+\n+import java.math.BigDecimal;\n+\n+@Accessors(fluent = true, chain = true)\n+@Getter\n+@Setter\n+public class ChainedFluentAccount {\n+    String name;\n+    BigDecimal balance;\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+\n+import java.math.BigDecimal;\n+\n+@Accessors(fluent = true, chain = false)\n+@Getter\n+@Setter\n+public class FluentAccount {\n+    String name;\n+    BigDecimal balance;\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedAccount.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+\n+import java.math.BigDecimal;\n+\n+\n+@Accessors(prefix = {\"s\", \"bd\"})\n+@Getter\n+@Setter\n+public class PrefixedAccount {\n+    String sName;\n+    BigDecimal bdBalance;\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java\n@@ -0,0 +1,15 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+\n+import java.math.BigDecimal;\n+\n+@Accessors(prefix = {\"s\", \"bd\"}, fluent = true)\n+@Getter\n+@Setter\n+public class PrefixedFluentAccount {\n+    String sName;\n+    BigDecimal bdBalance;\n+}\n\ndiff --git a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n--- a/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n+++ b/lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.lombok.accessors.model;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.math.BigDecimal;\n+\n+@Getter\n+@Setter\n+public class StandardAccount {\n+    String name;\n+    BigDecimal balance;\n+}\n\ndiff --git a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n--- a/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n+++ b/lombok/src/test/java/com/baeldung/lombok/accessors/AccessorsUnitTest.java\n@@ -0,0 +1,72 @@\n+package com.baeldung.lombok.accessors;\n+\n+import com.baeldung.lombok.accessors.model.*;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class AccessorsUnitTest {\n+\n+    @Test\n+    public void givenBasicAccount_thenUseBasicAccessors() {\n+        BasicAccount account = new BasicAccount();\n+        account.setBalance(BigDecimal.TEN);\n+        account.setName(\"Basic Accessors\");\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Basic Accessors\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenFluentAccount_thenUseFluentAccessors() {\n+        FluentAccount account = new FluentAccount();\n+        account.name(\"Fluent Account\");\n+        account.balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Fluent Account\", account.name());\n+    }\n+\n+    @Test\n+    public void givenChainedAccount_thenUseChainedAccessors() {\n+        ChainedAccount account = new ChainedAccount();\n+        account.setName(\"Chained Account\").setBalance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Chained Account\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenChainedFluentAccount_thenUseChainedFluentAccessors() {\n+        ChainedFluentAccount account = new ChainedFluentAccount()\n+          .name(\"Fluent Account\")\n+          .balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Fluent Account\", account.name());\n+    }\n+\n+    @Test\n+    public void givenPrefixedAccount_thenRemovePrefixFromAccessors() {\n+        PrefixedAccount account = new PrefixedAccount();\n+        account.setName(\"Prefixed Fields\");\n+        account.setBalance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.getBalance());\n+        assertEquals(\"Prefixed Fields\", account.getName());\n+    }\n+\n+    @Test\n+    public void givenPrefixedFluentAccount_thenRemovePrefixFromAccessors() {\n+        PrefixedFluentAccount account = new PrefixedFluentAccount();\n+        account\n+          .name(\"Prefixed Fluent Fields\")\n+          .balance(BigDecimal.TEN);\n+\n+        assertEquals(BigDecimal.TEN, account.balance());\n+        assertEquals(\"Prefixed Fluent Fields\", account.name());\n+    }\n+\n+}",
    "output": "BAEL-3475 - Add code for Lombok Accessors (#8145)\n\n* BAEL-3475 - Add code for Lombok Accessors\r\n\r\n* BAEL-3475 - Updated lombok.version to latest\r\n\r\n* BAEL-3475 - Rename Test to UnitTest"
  },
  {
    "input": "diff --git a/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java b/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n--- a/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n+++ b/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n@@ -1,36 +1,28 @@\n package org.baeldung.springvault;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\n import org.junit.runner.RunWith;\n import org.junit.runners.MethodSorters;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.core.annotation.Order;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.annotation.DirtiesContext.ClassMode;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.context.support.AnnotationConfigContextLoader;\n-import org.springframework.vault.authentication.TokenAuthentication;\n-import org.springframework.vault.client.VaultEndpoint;\n-import org.springframework.vault.core.VaultTemplate;\n-import org.springframework.vault.support.VaultResponse;\n \n+import java.net.URISyntaxException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * These tests are requiring the {@code vault} command to be installed and available in the executing\n+ * platform. So, if you intend to run them in your environment, the please install the vault and then\n+ * run the ignored tests.\n+ */\n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = CredentialsService.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ContextConfiguration(classes = VaultTestConfiguration.class, loader = AnnotationConfigContextLoader.class)\n@@ -47,6 +39,7 @@ public class VaultIntegrationTest {\n      * @throws URISyntaxException\n      */\n     @Test\n+    @Ignore\n     public void givenCredentials_whenSecureCredentials_thenCredentialsSecured() throws URISyntaxException {\n         try {\n             // Given\n@@ -63,9 +56,11 @@ public void givenCredentials_whenSecureCredentials_thenCredentialsSecured() thro\n \n     /**\n      * Test to access credentials\n+     *\n      * @throws URISyntaxException\n      */\n     @Test\n+    @Ignore\n     public void whenAccessCredentials_thenCredentialsRetrieved() throws URISyntaxException {\n \n         // Given",
    "output": "Merge pull request #8148 from alimate/BAEL-3269\n\nBAEL-3269: Fix the Integrations Tests in spring-vault"
  },
  {
    "input": "diff --git a/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java b/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n--- a/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n+++ b/spring-vault/src/test/java/org/baeldung/springvault/VaultIntegrationTest.java\n@@ -1,36 +1,28 @@\n package org.baeldung.springvault;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\n import org.junit.runner.RunWith;\n import org.junit.runners.MethodSorters;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.core.annotation.Order;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.annotation.DirtiesContext.ClassMode;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.context.support.AnnotationConfigContextLoader;\n-import org.springframework.vault.authentication.TokenAuthentication;\n-import org.springframework.vault.client.VaultEndpoint;\n-import org.springframework.vault.core.VaultTemplate;\n-import org.springframework.vault.support.VaultResponse;\n \n+import java.net.URISyntaxException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * These tests are requiring the {@code vault} command to be installed and available in the executing\n+ * platform. So, if you intend to run them in your environment, the please install the vault and then\n+ * run the ignored tests.\n+ */\n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = CredentialsService.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ContextConfiguration(classes = VaultTestConfiguration.class, loader = AnnotationConfigContextLoader.class)\n@@ -47,6 +39,7 @@ public class VaultIntegrationTest {\n      * @throws URISyntaxException\n      */\n     @Test\n+    @Ignore\n     public void givenCredentials_whenSecureCredentials_thenCredentialsSecured() throws URISyntaxException {\n         try {\n             // Given\n@@ -63,9 +56,11 @@ public void givenCredentials_whenSecureCredentials_thenCredentialsSecured() thro\n \n     /**\n      * Test to access credentials\n+     *\n      * @throws URISyntaxException\n      */\n     @Test\n+    @Ignore\n     public void whenAccessCredentials_thenCredentialsRetrieved() throws URISyntaxException {\n \n         // Given",
    "output": "Fixed the Vault Issue"
  },
  {
    "input": "diff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/AddressBookApplication.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.hexagonal.arch;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+\n+@SpringBootApplication\n+@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })\n+public class AddressBookApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(AddressBookApplication.class, args);\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/controller/AddressBookController.java\n@@ -0,0 +1,32 @@\n+package com.baeldung.hexagonal.arch.adapter.controller;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n+\n+@RestController\n+@RequestMapping(\"/contacts\")\n+public class AddressBookController {\n+\n+    @Autowired\n+    private AddressBookService addressBookService;\n+\n+    @PostMapping\n+    public void addContact(@RequestBody Contact contact) {\n+        addressBookService.createContact(contact);\n+    }\n+\n+    @GetMapping\n+    public List<Contact> getAllContacts() {\n+        return addressBookService.getAllContacts();\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/adapter/repository/ContactRepositoryImpl.java\n@@ -0,0 +1,30 @@\n+package com.baeldung.hexagonal.arch.adapter.repository;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Repository;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n+\n+@Repository\n+public class ContactRepositoryImpl implements ContactRepository {\n+\n+    private Map<String, Contact> contactsRepo = new HashMap<String, Contact>();\n+\n+    @Override\n+    public void createContact(Contact contact) {\n+        contactsRepo.put(contact.getName(), contact);\n+    }\n+\n+    @Override\n+    public List<Contact> getAllContacts() {\n+        return contactsRepo.values()\n+            .stream()\n+            .collect(Collectors.toList());\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/domain/Contact.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.hexagonal.arch.core.domain;\n+\n+public class Contact {\n+\n+    private String name;\n+    private String address;\n+    private int contactNumber;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public int getContactNumber() {\n+        return contactNumber;\n+    }\n+\n+    public void setContactNumber(int contactNumber) {\n+        this.contactNumber = contactNumber;\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/core/service/AddressBookServiceImpl.java\n@@ -0,0 +1,28 @@\n+package com.baeldung.hexagonal.arch.core.service;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+import com.baeldung.hexagonal.arch.port.repo.ContactRepository;\n+import com.baeldung.hexagonal.arch.port.service.AddressBookService;\n+\n+@Service\n+public class AddressBookServiceImpl implements AddressBookService {\n+\n+    @Autowired\n+    ContactRepository contactRepository;\n+\n+    @Override\n+    public void createContact(Contact contact) {\n+        contactRepository.createContact(contact);\n+    }\n+\n+    @Override\n+    public List<Contact> getAllContacts() {\n+        return contactRepository.getAllContacts();\n+    }\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/repo/ContactRepository.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.hexagonal.arch.port.repo;\n+\n+import java.util.List;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+\n+public interface ContactRepository {\n+\n+    void createContact(Contact contact);\n+\n+    List<Contact> getAllContacts();\n+\n+}\n\ndiff --git a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n--- a/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n+++ b/patterns/hexagonal-architecture/src/main/java/com/baeldung/hexagonal/arch/port/service/AddressBookService.java\n@@ -0,0 +1,13 @@\n+package com.baeldung.hexagonal.arch.port.service;\n+\n+import java.util.List;\n+\n+import com.baeldung.hexagonal.arch.core.domain.Contact;\n+\n+public interface AddressBookService {\n+\n+    public void createContact(Contact contact);\n+\n+    public List<Contact> getAllContacts();\n+\n+}",
    "output": "Example for hexagonal architecture in java"
  },
  {
    "input": "diff --git a/spring-mvc-themes/src/main/java/com/baeldung/config/DataSourceConfig.java b/spring-mvc-themes/src/main/java/com/baeldung/config/DataSourceConfig.java\n--- a/spring-mvc-themes/src/main/java/com/baeldung/config/DataSourceConfig.java\n+++ b/spring-mvc-themes/src/main/java/com/baeldung/config/DataSourceConfig.java\n@@ -6,7 +6,6 @@\n import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\n import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\n import org.springframework.orm.jpa.JpaTransactionManager;\n-import org.springframework.orm.jpa.JpaVendorAdapter;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n import org.springframework.transaction.PlatformTransactionManager;\n@@ -29,16 +28,13 @@ public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource da\n         LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n         em.setDataSource(dataSource);\n         em.setPackagesToScan(\"com.baeldung.domain\");\n-        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n-        em.setJpaVendorAdapter(vendorAdapter);\n+        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n         return em;\n     }\n \n     @Bean\n     public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {\n-        JpaTransactionManager transactionManager = new JpaTransactionManager();\n-        transactionManager.setEntityManagerFactory(emf);\n-        return transactionManager;\n+        return new JpaTransactionManager(emf);\n     }\n \n     @Bean\n\ndiff --git a/spring-mvc-themes/src/main/java/com/baeldung/config/ThemeMVCConfig.java b/spring-mvc-themes/src/main/java/com/baeldung/config/ThemeMVCConfig.java\n--- a/spring-mvc-themes/src/main/java/com/baeldung/config/ThemeMVCConfig.java\n+++ b/spring-mvc-themes/src/main/java/com/baeldung/config/ThemeMVCConfig.java\n@@ -39,20 +39,12 @@ public ResourceBundleThemeSource resourceBundleThemeSource() {\n     }\n \n     @Bean\n-//    @Profile(\"cookie\")\n     public ThemeResolver themeResolver() {\n         UserPreferenceThemeResolver themeResolver = new UserPreferenceThemeResolver();\n         themeResolver.setDefaultThemeName(\"light\");\n         return themeResolver;\n     }\n \n-//    @Bean\n-//    @Profile(\"database\")\n-//    public ThemeResolver databaseThemeResolver() {\n-//        UserPreferenceThemeResolver themeResolver = new UserPreferenceThemeResolver();\n-//        themeResolver.setDefaultThemeName(\"light\");\n-//        return themeResolver;\n-//    }\n \n     @Override\n     public void configureViewResolvers(ViewResolverRegistry resolverRegistry) {\n\ndiff --git a/spring-mvc-themes/src/main/java/com/baeldung/theme/resolver/UserPreferenceThemeResolver.java b/spring-mvc-themes/src/main/java/com/baeldung/theme/resolver/UserPreferenceThemeResolver.java\n--- a/spring-mvc-themes/src/main/java/com/baeldung/theme/resolver/UserPreferenceThemeResolver.java\n+++ b/spring-mvc-themes/src/main/java/com/baeldung/theme/resolver/UserPreferenceThemeResolver.java\n@@ -11,6 +11,7 @@\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.util.Optional;\n \n public class UserPreferenceThemeResolver implements ThemeResolver {\n \n@@ -34,55 +35,40 @@ public void setDefaultThemeName(String defaultThemeName) {\n \n     @Override\n     public String resolveThemeName(HttpServletRequest request) {\n-        String themeName = (String) request.getAttribute(THEME_REQUEST_ATTRIBUTE_NAME);\n-        if (themeName != null) {\n-            return themeName;\n-        }\n-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-\n-        if (authentication != null && authentication.isAuthenticated() && isNotAnonymous(authentication)) {\n-            User user = (User) authentication.getPrincipal();\n-            UserPreference userPreference = userPreferenceRepository.findById(user.getUsername()).orElse(null);\n-\n-            if (userPreference != null) {\n-                themeName = userPreference.getTheme();\n-            }\n-        }\n-\n-        // Fall back to default theme.\n-        if (themeName == null) {\n-            themeName = getDefaultThemeName();\n-        }\n+        String themeName = findThemeFromRequest(request).orElse(findUserPreferredTheme().orElse(getDefaultThemeName()));\n         request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, themeName);\n         return themeName;\n     }\n \n-    private boolean isNotAnonymous(Authentication authentication) {\n-        return !isAnonymous(authentication);\n+    private Optional<String> findUserPreferredTheme() {\n+        Authentication authentication = SecurityContextHolder.getContext()\n+            .getAuthentication();\n+        UserPreference userPreference = getUserPreference(authentication).orElse(new UserPreference());\n+        return Optional.ofNullable(userPreference.getTheme());\n+    }\n+\n+    private Optional<String> findThemeFromRequest(HttpServletRequest request) {\n+        return Optional.ofNullable((String) request.getAttribute(THEME_REQUEST_ATTRIBUTE_NAME));\n     }\n \n-    private boolean isAnonymous(Authentication authentication) {\n-        return authentication != null && authentication.getPrincipal() instanceof String && \"anonymousUser\".equals(authentication.getPrincipal());\n+    private Optional<UserPreference> getUserPreference(Authentication authentication) {\n+        return isAuthenticated(authentication) ? userPreferenceRepository.findById(((User) authentication.getPrincipal()).getUsername()) : Optional.empty();\n+    }\n+\n+    private boolean isAuthenticated(Authentication authentication) {\n+        return authentication != null && authentication.isAuthenticated();\n     }\n \n     @Override\n     public void setThemeName(HttpServletRequest request, HttpServletResponse response, String theme) {\n-\n-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-        if (authentication != null && authentication.isAuthenticated() && isNotAnonymous(authentication)) {\n+        Authentication authentication = SecurityContextHolder.getContext()\n+            .getAuthentication();\n+        if (isAuthenticated(authentication)) {\n             request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, theme);\n-            User user = (User) authentication.getPrincipal();\n-\n-            UserPreference userPreference = userPreferenceRepository.findById(user.getUsername()).orElse(new UserPreference());\n-\n-            userPreference.setUsername(user.getUsername());\n+            UserPreference userPreference = getUserPreference(authentication).orElse(new UserPreference());\n+            userPreference.setUsername(((User) authentication.getPrincipal()).getUsername());\n             userPreference.setTheme(StringUtils.hasText(theme) ? theme : null);\n             userPreferenceRepository.save(userPreference);\n-\n-        }\n-\n-        if (!StringUtils.hasText(theme)) {\n-            request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, getDefaultThemeName());\n         }\n     }\n }",
    "output": "BAEL-3283 - Refactored the code as per review comments."
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/BasicUser.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/BasicUser.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/BasicUser.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/BasicUser.java\n@@ -5,7 +5,7 @@\n \n @Entity\n @Table(name = \"users\")\n-public class User {\n+public class BasicUser {\n \n     @Id\n     @GeneratedValue\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/repository/UserRepository.java\n@@ -1,17 +1,17 @@\n package com.baeldung.repository;\n \n-import com.baeldung.model.User;\n+import com.baeldung.model.BasicUser;\n import org.springframework.data.jpa.repository.EntityGraph;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n import java.util.Optional;\n \n-public interface UserRepository extends JpaRepository<User, Long> {\n+public interface UserRepository extends JpaRepository<BasicUser, Long> {\n \n     @EntityGraph(attributePaths = \"permissions\")\n-    Optional<User> findDetailedByUsername(String username);\n+    Optional<BasicUser> findDetailedByUsername(String username);\n \n-    Optional<User> findSummaryByUsername(String username);\n+    Optional<BasicUser> findSummaryByUsername(String username);\n \n-    Optional<User> findByUsername(String username);\n+    Optional<BasicUser> findByUsername(String username);\n }\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/SimpleUserService.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/SimpleUserService.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/SimpleUserService.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/SimpleUserService.java\n@@ -1,6 +1,6 @@\n package com.baeldung.service;\n \n-import com.baeldung.model.User;\n+import com.baeldung.model.BasicUser;\n import com.baeldung.repository.UserRepository;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n@@ -18,7 +18,7 @@ public SimpleUserService(UserRepository userRepository) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public Optional<User> findOne(String username) {\n+    public Optional<BasicUser> findOne(String username) {\n         return userRepository.findDetailedByUsername(username);\n     }\n }\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/UserService.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/UserService.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/UserService.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/UserService.java\n@@ -1,9 +1,9 @@\n package com.baeldung.service;\n \n-import com.baeldung.model.User;\n+import com.baeldung.model.BasicUser;\n \n import java.util.Optional;\n \n public interface UserService {\n-    Optional<User> findOne(String username);\n+    Optional<BasicUser> findOne(String username);\n }\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/web/DetailedUserDto.java b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/web/DetailedUserDto.java\n--- a/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/web/DetailedUserDto.java\n+++ b/persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/web/DetailedUserDto.java\n@@ -1,6 +1,6 @@\n package com.baeldung.web;\n \n-import com.baeldung.model.User;\n+import com.baeldung.model.BasicUser;\n \n import java.util.Set;\n \n@@ -34,7 +34,7 @@ public void setPermissions(Set<String> permissions) {\n         this.permissions = permissions;\n     }\n \n-    public static DetailedUserDto fromEntity(User user) {\n+    public static DetailedUserDto fromEntity(BasicUser user) {\n         DetailedUserDto detailed = new DetailedUserDto();\n         detailed.setId(user.getId());\n         detailed.setUsername(user.getUsername());\n\ndiff --git a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java\n@@ -1,6 +1,6 @@\n package com.baeldung.osiv;\n \n-import com.baeldung.model.User;\n+import com.baeldung.model.BasicUser;\n import com.baeldung.repository.UserRepository;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n@@ -32,7 +32,7 @@ class UserControllerIntegrationTest {\n \n     @BeforeEach\n     void setUp() {\n-        User user = new User();\n+        BasicUser user = new BasicUser();\n         user.setUsername(\"root\");\n         user.setPermissions(new HashSet<>(Arrays.asList(\"PERM_READ\", \"PERM_WRITE\")));\n ",
    "output": "fixed broken tests in persistence-modules/spring-data-jpa-3"
  },
  {
    "input": "diff --git a/remote-debugging/src/main/java/hello/Application.java b/remote-debugging/src/main/java/hello/Application.java\n--- a/remote-debugging/src/main/java/hello/Application.java\n+++ b/remote-debugging/src/main/java/hello/Application.java\n@@ -0,0 +1,14 @@\n+package hello;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+\n+@SpringBootApplication\n+@EnableScheduling\n+public class Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class);\n+    }\n+}\n\ndiff --git a/remote-debugging/src/main/java/hello/ScheduledTasks.java b/remote-debugging/src/main/java/hello/ScheduledTasks.java\n--- a/remote-debugging/src/main/java/hello/ScheduledTasks.java\n+++ b/remote-debugging/src/main/java/hello/ScheduledTasks.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package hello;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ScheduledTasks {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);\n+\n+    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n+\n+    @Scheduled(fixedRate = 5000)\n+    public void reportCurrentTime() {\n+        log.info(\"The time is now {}\", dateFormat.format(new Date()));\n+    }\n+}",
    "output": "Bael-3391 - Remote Debugger"
  },
  {
    "input": "diff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTree.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTree.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTree.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTree.java\n@@ -0,0 +1,33 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+public class BalancedBinaryTree {\n+\n+    public static boolean isBalanced(Tree tree) {\n+        return isBalancedRecursive(tree, -1).isBalanced;\n+    }\n+\n+    private static Result isBalancedRecursive(Tree tree, int depth) {\n+        if (tree == null) {\n+            return new Result(true, -1);\n+        }\n+\n+        Result leftSubtreeResult = isBalancedRecursive(tree.left(), depth + 1);\n+        Result rightSubtreeResult = isBalancedRecursive(tree.right(), depth + 1);\n+\n+        boolean isBalanced = Math.abs(leftSubtreeResult.height - rightSubtreeResult.height) <= 1;\n+        boolean subtreesAreBalanced = leftSubtreeResult.isBalanced && rightSubtreeResult.isBalanced;\n+        int height = Math.max(leftSubtreeResult.height, rightSubtreeResult.height) + 1;\n+\n+        return new Result(isBalanced && subtreesAreBalanced, height);\n+    }\n+\n+    private static final class Result {\n+        private final boolean isBalanced;\n+        private final int height;\n+\n+        private Result(boolean isBalanced, int height) {\n+            this.isBalanced = isBalanced;\n+            this.height = height;\n+        }\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/Tree.java b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/Tree.java\n--- a/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/Tree.java\n+++ b/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/balancedbinarytree/Tree.java\n@@ -0,0 +1,34 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+public class Tree {\n+    private final int value;\n+    private final Tree left;\n+    private final Tree right;\n+\n+    public Tree(int value, Tree left, Tree right) {\n+        this.value = value;\n+        this.left = left;\n+        this.right = right;\n+    }\n+\n+    public int value() {\n+        return value;\n+    }\n+\n+    public Tree left() {\n+        return left;\n+    }\n+\n+    public Tree right() {\n+        return right;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"[%s, %s, %s]\",\n+            value,\n+            left == null ? \"null\" : left.toString(),\n+            right == null ? \"null\" : right.toString()\n+        );\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTreeUnitTest.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTreeUnitTest.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTreeUnitTest.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BalancedBinaryTreeUnitTest.java\n@@ -0,0 +1,26 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+public class BalancedBinaryTreeUnitTest extends BinaryTreeDataProvider {\n+\n+    @Test\n+    public void givenBalancedTrees_whenCallingIsBalanced_ShouldReturnTrue() {\n+        for (Tree tree : balancedTrees()) {\n+            assertTrue(toString(tree) + \" should be balanced\", BalancedBinaryTree.isBalanced(tree));\n+        }\n+    }\n+\n+    @Test\n+    public void givenUnbalancedTrees_whenCallingIsBalanced_ShouldReturnFalse() {\n+        for (Tree tree : unbalancedTrees()) {\n+            assertFalse(toString(tree) + \" should not be balanced\", BalancedBinaryTree.isBalanced(tree));\n+        }\n+    }\n+\n+    private String toString(Tree tree) {\n+        return tree != null ? tree.toString() : \"null\";\n+    }\n+}\n\ndiff --git a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BinaryTreeDataProvider.java b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BinaryTreeDataProvider.java\n--- a/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BinaryTreeDataProvider.java\n+++ b/algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/balancedbinarytree/BinaryTreeDataProvider.java\n@@ -0,0 +1,69 @@\n+package com.baeldung.algorithms.balancedbinarytree;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+class BinaryTreeDataProvider {\n+\n+    static Collection<Tree> balancedTrees() {\n+        return Arrays.asList(\n+            null,\n+            leaf(1),\n+            tree(1, leaf(2), leaf(3)),\n+            tree(\n+                1,\n+                leaf(2),\n+                tree(3, leaf(4), null)\n+            ),\n+            tree(\n+                1,\n+                tree(\n+                    2,\n+                    tree(3, leaf(4), null),\n+                    leaf(5)\n+                ),\n+                tree(\n+                    6,\n+                    leaf(7),\n+                    tree(8, null, leaf(9))\n+                )\n+            )\n+        );\n+    }\n+\n+    static Collection<Tree> unbalancedTrees() {\n+        return Arrays.asList(\n+            tree(\n+                1,\n+                tree(2, leaf(3), null),\n+                null\n+            ),\n+            tree(\n+                1,\n+                tree(\n+                    2,\n+                    tree(3, leaf(4), leaf(5)),\n+                    null\n+                ),\n+                tree(6, leaf(7), null)\n+            ),\n+            tree(\n+                1,\n+                tree(2, leaf(3), null),\n+                tree(\n+                    4,\n+                    tree(5, leaf(6), leaf(7)),\n+                    null\n+                )\n+            )\n+        );\n+    }\n+\n+    private static Tree leaf(int value) {\n+        return new Tree(value, null, null);\n+    }\n+\n+    private static Tree tree(int value, Tree left, Tree right) {\n+        return new Tree(value, left, right);\n+    }\n+}",
    "output": "BAEL-3400 (#8113)\n\n* BAEL-3400\r\n\r\n* BALE-3400 | moved to algorithm-miscellaneous-5\r\n\r\n* BAEL-3400 | added modifiers"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/CalendarUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/CalendarUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/CalendarUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/CalendarUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.legacy.utilpackage;\n+package com.baeldung.datetime;\n \n import java.text.ParseException;\n import java.util.Calendar;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/DateUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/DateUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/DateUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/DateUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.legacy.utilpackage;\n+package com.baeldung.datetime;\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/DateUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/DateUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/DateUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/DateUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import java.sql.Date;\n import java.text.ParseException;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimeUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimeUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimeUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimeUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import java.sql.Time;\n import java.text.ParseException;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimestampUtils.java b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimestampUtils.java\n--- a/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimestampUtils.java\n+++ b/core-java-modules/core-java-date-operations/src/main/java/com/baeldung/datetime/sql/TimestampUtils.java\n@@ -1,4 +1,4 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import java.sql.Timestamp;\n import java.text.ParseException;\n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/CalendarUtilsUnitTest.java\n@@ -1,9 +1,12 @@\n-package com.baeldung.legacy.utilpackage;\n+package com.baeldung.datetime;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n \n+import com.baeldung.datetime.CalendarUtils;\n+import com.baeldung.datetime.DateUtils;\n+\n import java.text.ParseException;\n import java.util.Date;\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/DateUtilsUnitTest.java\n@@ -1,9 +1,11 @@\n-package com.baeldung.legacy.utilpackage;\n+package com.baeldung.datetime;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n \n+import com.baeldung.datetime.DateUtils;\n+\n import java.text.ParseException;\n import java.util.Date;\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/DateUtilsUnitTest.java\n@@ -1,9 +1,11 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n \n+import com.baeldung.datetime.sql.DateUtils;\n+\n import java.text.ParseException;\n import java.util.Date;\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimeUtilsUnitTest.java\n@@ -1,9 +1,11 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n \n+import com.baeldung.datetime.sql.TimeUtils;\n+\n import java.text.ParseException;\n import java.util.Date;\n \n\ndiff --git a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n--- a/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n+++ b/core-java-modules/core-java-date-operations/src/test/java/com/baeldung/datetime/sql/TimestampUtilsUnitTest.java\n@@ -1,17 +1,20 @@\n-package com.baeldung.legacy.sqlpackage;\n+package com.baeldung.datetime.sql;\n \n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n \n+import com.baeldung.datetime.sql.TimestampUtils;\n+\n import java.text.ParseException;\n import java.util.Date;\n \n public class TimestampUtilsUnitTest {\n \n     @Test\n     public void givenCurrentTimestamp_thenNowIsReturned() {\n-        assertEquals(TimestampUtils.getNow().getTime(), new Date().getTime());\n+        assertEquals(TimestampUtils.getNow()\n+            .getTime(), new Date().getTime());\n     }\n \n     @Test(expected = IllegalArgumentException.class)",
    "output": "BAEL-3375 - Get the current Date in Java (non Java 8)"
  },
  {
    "input": "diff --git a/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerController.java b/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerController.java\n--- a/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerController.java\n+++ b/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerController.java\n@@ -1,50 +0,0 @@\n-package com.baeldung.fetchMode;\n-\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import java.util.Set;\n-\n-@RestController\n-public class CustomerController {\n-\n-    private final CustomerRepository customerRepository;\n-    private final OrderRepository orderRepository;\n-\n-    public CustomerController(CustomerRepository customerRepository, OrderRepository orderRepository) {\n-        this.customerRepository = customerRepository;\n-        this.orderRepository = orderRepository;\n-    }\n-\n-    @GetMapping(\"test/{id}\")\n-    @Transactional\n-    public Set<Order> getCustomerOrders(@PathVariable Long id) {\n-        Customer customer = customerRepository.findById(id).get();\n-        return customer.getOrders();\n-    }\n-\n-    @GetMapping(\"save\")\n-    @Transactional\n-    public Long saveNewCustomer() {\n-        Customer customer = new Customer();\n-        customer = customerRepository.save(customer);\n-\n-        Order order1 = orderRepository.save(new Order(\"order 1\", customer));\n-        Order order2 = orderRepository.save(new Order(\"order 2\", customer));\n-        Order order3 = orderRepository.save(new Order(\"order 3\", customer));\n-        Order order4 = orderRepository.save(new Order(\"order 4\", customer));\n-        Order order5 = orderRepository.save(new Order(\"order 5\", customer));\n-\n-        customer.getOrders().add(order1);\n-        customer.getOrders().add(order2);\n-        customer.getOrders().add(order3);\n-        customer.getOrders().add(order4);\n-        customer.getOrders().add(order5);\n-\n-        Customer save = customerRepository.save(customer);\n-        return save.getId();\n-    }\n-\n-}\n\ndiff --git a/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerRepository.java b/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerRepository.java\n--- a/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerRepository.java\n+++ b/spring-boot-data/src/main/java/com/baeldung/fetchMode/CustomerRepository.java\n@@ -1,6 +0,0 @@\n-package com.baeldung.fetchMode;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-\n-public interface CustomerRepository extends JpaRepository<Customer, Long> {\n-}\n\ndiff --git a/spring-boot-data/src/main/java/com/baeldung/fetchMode/OrderRepository.java b/spring-boot-data/src/main/java/com/baeldung/fetchMode/OrderRepository.java\n--- a/spring-boot-data/src/main/java/com/baeldung/fetchMode/OrderRepository.java\n+++ b/spring-boot-data/src/main/java/com/baeldung/fetchMode/OrderRepository.java\n@@ -1,6 +0,0 @@\n-package com.baeldung.fetchMode;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-\n-public interface OrderRepository extends JpaRepository<Order, Long> {\n-}",
    "output": "move entities"
  },
  {
    "input": "diff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/ExtendedPersistenceContextUserService.java\n@@ -15,10 +15,6 @@ public class ExtendedPersistenceContextUserService {\n     @PersistenceContext(type = PersistenceContextType.EXTENDED)\n     private EntityManager entityManager;\n \n-    public EntityManager getEntityManager() {\n-        return entityManager;\n-    }\n-    \n     @Transactional\n     public User insertWithTransaction(User user) {\n         entityManager.persist(user);\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n--- a/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n+++ b/persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/persistencecontext/service/TransctionPersistenceContextUserService.java\n@@ -15,10 +15,6 @@ public class TransctionPersistenceContextUserService {\n     @PersistenceContext\n     private EntityManager entityManager;\n     \n-    public EntityManager getEntityManager() {\n-        return entityManager;\n-    }\n-\n     @Transactional\n     public User insertWithTransaction(User user) {\n         entityManager.persist(user);\n\ndiff --git a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n--- a/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/persistencecontext/PersistenceContextIntegrationTest.java\n@@ -40,7 +40,7 @@ public void testThatWhenUserSavedWithTransctionPersistenceContextThenUserShouldG\n     }\n \n     @Test(expected = HttpServerErrorException.class)\n-    public void testThatWhenUserSaveWithOutTransactionInPersistenceContextTypeTransactionThenShouldFailOnPersist() {\n+    public void testThatWhenUserSaveWithOutTransactionInPersistenceContextTypeTransactionThenShouldWhtowTransactionRequiredExceptionOnPersist() {\n         User user = new User(122L, \"Devender\", \"admin\");\n         restTemplate.postForEntity(buildRequestUrl(\"v4/user/\"), user, User.class);\n     }\n@@ -55,6 +55,21 @@ public void testThatWhenUserSavedWithExtendedPersistenceContextWithoutTransactio\n         assertThat(userFromTransctionPersistenceContext, Is.is(IsNull.nullValue()));\n     }\n \n+    @Test(expected = HttpServerErrorException.class)\n+    public void testThatWhenAddUserWithSameIdentifierInPersistenceContextThenShouldThrowException() {\n+        User user = new User(126L, \"Devender\", \"admin\");\n+        restTemplate.postForEntity(buildRequestUrl(\"v2/user/\"), user, User.class);\n+        restTemplate.postForEntity(buildRequestUrl(\"v2/user/\"), user, User.class);\n+    }\n+\n+    @Test\n+    public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldSaveEntityIntoDB() {\n+        User user = new User(127L, \"Devender\", \"admin\");\n+        restTemplate.postForEntity(buildRequestUrl(\"v3/user/\"), user, User.class);\n+        User userFromDB = restTemplate.getForObject(buildRequestUrl(\"v1/user/127\"), User.class);\n+        assertThat(userFromDB, Is.is(IsNull.notNullValue()));\n+    }\n+\n     @Test\n     public void testThatWhenUserSavedWithExtendedPersistenceContextWithTransactionThenUserShouldFlushCachedEntityIntoDB() {\n         User user = new User(124L, \"Devender\", \"admin\");",
    "output": "added more test cases"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n--- a/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n+++ b/core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/debug/Example2.java\n@@ -26,7 +26,7 @@ public void whenDebugging_thenInformationIsShown() {\n \n         long numberOf65PlusCustomers = customers.stream()\n             .flatMap(c -> c.map(Stream::of)\n-                .orElseGet(Stream::empty))\n+              .orElseGet(Stream::empty))\n             .mapToInt(Customer::getAge)\n             .filter(c -> c > 65)\n             .count();",
    "output": "Update Example2.java"
  },
  {
    "input": "diff --git a/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java b/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n--- a/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n+++ b/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n@@ -1,11 +1,7 @@\n package com.baeldung.protobuf;\n \n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.junit.Assert.assertThat;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n+import com.baeldung.protobuf.BaeldungTraining.Course;\n+import com.googlecode.protobuf.format.JsonFormat;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.impl.client.CloseableHttpClient;\n@@ -15,33 +11,38 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n \n-import com.baeldung.protobuf.BaeldungTraining.Course;\n-import com.googlecode.protobuf.format.JsonFormat;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertThat;\n \n @DirtiesContext\n @RunWith(SpringJUnit4ClassRunner.class)\n-@SpringBootTest(classes = Application.class, webEnvironment = WebEnvironment.DEFINED_PORT)\n+@SpringBootTest(classes = Application.class, webEnvironment = WebEnvironment.RANDOM_PORT)\n public class ApplicationIntegrationTest {\n \n-    private static final String COURSE1_URL = \"http://localhost:8080/courses/1\";\n-\n     @Autowired\n     private RestTemplate restTemplate;\n \n+    @LocalServerPort\n+    private int port;\n+\n     @Test\n     public void whenUsingRestTemplate_thenSucceed() {\n-        ResponseEntity<Course> course = restTemplate.getForEntity(COURSE1_URL, Course.class);\n+        ResponseEntity<Course> course = restTemplate.getForEntity(getUrl(), Course.class);\n         assertResponse(course.toString());\n     }\n \n     @Test\n     public void whenUsingHttpClient_thenSucceed() throws IOException {\n-        InputStream responseStream = executeHttpRequest(COURSE1_URL);\n+        InputStream responseStream = executeHttpRequest(getUrl());\n         String jsonOutput = convertProtobufMessageStreamToJsonString(responseStream);\n         assertResponse(jsonOutput);\n     }\n@@ -74,4 +75,8 @@ private void assertResponse(String response) {\n         assertThat(response, containsString(\"number\"));\n         assertThat(response, containsString(\"type\"));\n     }\n+\n+    private String getUrl() {\n+        return \"http://localhost:\" + port + \"/courses/1\";\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java b/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n--- a/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n@@ -1,16 +1,15 @@\n package org.baeldung;\n \n+import com.baeldung.protobuf.Application;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.protobuf.Application;\n-\n @DirtiesContext\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = Application.class)\n+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringContextIntegrationTest {\n \n     @Test\n\ndiff --git a/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java b/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n--- a/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n+++ b/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n@@ -1,16 +1,15 @@\n package org.baeldung;\n \n+import com.baeldung.protobuf.Application;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.protobuf.Application;\n-\n @DirtiesContext\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = Application.class)\n+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringContextTest {\n \n     @Test",
    "output": "Merge pull request #8134 from alimate/BAEL-3263\n\nBAEL-3263: Fix the Integrations Tests in spring-protobuf"
  },
  {
    "input": "diff --git a/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java b/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n--- a/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n+++ b/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n@@ -13,7 +13,7 @@\n import static org.hamcrest.Matchers.equalTo;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = AppConfig.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = AppConfig.class)\n public class SpringAndHystrixIntegrationTest {\n \n     @Autowired",
    "output": "Merge pull request #8133 from alimate/BAEL-3266\n\nBAEL-3266: Fix the Integrations Tests in Hystrix"
  },
  {
    "input": "diff --git a/spring-mockito/src/test/java/com/baeldung/UserServiceUnitTest.java b/spring-mockito/src/test/java/com/baeldung/UserServiceUnitTest.java\n--- a/spring-mockito/src/test/java/com/baeldung/UserServiceUnitTest.java\n+++ b/spring-mockito/src/test/java/com/baeldung/UserServiceUnitTest.java\n@@ -12,7 +12,7 @@\n @ActiveProfiles(\"test\")\n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringBootTest(classes = MocksApplication.class)\n-public class UserServiceIntegrationUnitTest {\n+public class UserServiceUnitTest {\n \n     @Autowired\n     private UserService userService;",
    "output": "Merge pull request #8088 from amit2103/BAEL-16045-19\n\n[BAEL-16045] - Renamed UserServiceIntegrationUnitTest to UserServiceU…"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableMain.java b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableMain.java\n--- a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableMain.java\n+++ b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableMain.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.trywithresource;\n+\n+public class AutoCloseableMain {\n+\n+    public static void main(String[] args) throws Exception {\n+        orderOfClosingResources();\n+    }\n+\n+    private static void orderOfClosingResources() throws Exception {\n+        try (AutoCloseableResourcesFirst af = new AutoCloseableResourcesFirst();\n+             AutoCloseableResourcesSecond as = new AutoCloseableResourcesSecond()) {\n+            af.doSomething();\n+            as.doSomething();\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesFirst.java b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesFirst.java\n--- a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesFirst.java\n+++ b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesFirst.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.trywithresource;\n+\n+public class AutoCloseableResourcesFirst implements AutoCloseable {\n+\n+    public AutoCloseableResourcesFirst() {\n+        System.out.println(\"Constructor -> AutoCloseableResources_First\");\n+    }\n+\n+    public void doSomething() {\n+        System.out.println(\"Something -> AutoCloseableResources_First\");\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        System.out.println(\"Closed AutoCloseableResources_First\");\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesSecond.java b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesSecond.java\n--- a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesSecond.java\n+++ b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/AutoCloseableResourcesSecond.java\n@@ -0,0 +1,17 @@\n+package com.baeldung.trywithresource;\n+\n+public class AutoCloseableResourcesSecond implements AutoCloseable {\n+\n+    public AutoCloseableResourcesSecond() {\n+        System.out.println(\"Constructor -> AutoCloseableResources_Second\");\n+    }\n+\n+    public void doSomething() {\n+        System.out.println(\"Something -> AutoCloseableResources_Second\");\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        System.out.println(\"Closed AutoCloseableResources_Second\");\n+    }\n+}\n\ndiff --git a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/MyResource.java b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/MyResource.java\n--- a/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/MyResource.java\n+++ b/core-java-modules/core-java-exceptions/src/main/java/com/baeldung/trywithresource/MyResource.java\n@@ -0,0 +1,8 @@\n+package com.baeldung.trywithresource;\n+\n+public class MyResource implements AutoCloseable {\n+    @Override\n+    public void close() throws Exception {\n+        System.out.println(\"Closed MyResource\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "Merge pull request #7465 from amit2103/BAEL-16045-15\n\n[BAEL-16045] - Check Article Code Matches GitHub for https://www.bael…"
  },
  {
    "input": "diff --git a/spring-5-security-oauth/src/main/java/com/baeldung/oauth2/LoginController.java b/spring-5-security-oauth/src/main/java/com/baeldung/oauth2/LoginController.java\n--- a/spring-5-security-oauth/src/main/java/com/baeldung/oauth2/LoginController.java\n+++ b/spring-5-security-oauth/src/main/java/com/baeldung/oauth2/LoginController.java\n@@ -71,5 +71,4 @@ public String getLoginInfo(Model model, OAuth2AuthenticationToken authentication\n \n         return \"loginSuccess\";\n     }\n-\n }\n\ndiff --git a/spring-security-rest-basic-auth/src/main/java/org/baeldung/web/controller/BarController.java b/spring-security-rest-basic-auth/src/main/java/org/baeldung/web/controller/BarController.java\n--- a/spring-security-rest-basic-auth/src/main/java/org/baeldung/web/controller/BarController.java\n+++ b/spring-security-rest-basic-auth/src/main/java/org/baeldung/web/controller/BarController.java\n@@ -1,8 +1,12 @@\n package org.baeldung.web.controller;\n \n+import java.nio.charset.Charset;\n+\n+import org.apache.commons.codec.binary.Base64;\n import org.baeldung.web.dto.Bar;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -28,4 +32,13 @@ public Bar findOne(@PathVariable(\"id\") final Long id) {\n         return new Bar();\n     }\n \n+    public HttpHeaders createHeaders(String username, String password){\n+        return new HttpHeaders() {{\n+              String auth = username + \":\" + password;\n+              byte[] encodedAuth = Base64.encodeBase64( \n+                 auth.getBytes(Charset.forName(\"US-ASCII\")) );\n+              String authHeader = \"Basic \" + new String( encodedAuth );\n+              set( \"Authorization\", authHeader );\n+           }};\n+     }\n }",
    "output": "Merge pull request #7433 from amit2103/BAEL-16045-9\n\nBael 16045 9"
  },
  {
    "input": "diff --git a/jackson-simple/src/test/java/com/baeldung/jackson/annotation/MyBean.java b/jackson-simple/src/test/java/com/baeldung/jackson/annotation/MyBean.java\n--- a/jackson-simple/src/test/java/com/baeldung/jackson/annotation/MyBean.java\n+++ b/jackson-simple/src/test/java/com/baeldung/jackson/annotation/MyBean.java\n@@ -1,8 +1,10 @@\n package com.baeldung.jackson.annotation;\n \n+import com.fasterxml.jackson.annotation.JsonGetter;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n \n @JsonInclude(Include.NON_NULL)\n @JsonPropertyOrder({ \"name\", \"id\" })\n@@ -18,4 +20,14 @@ public MyBean(final int id, final String name) {\n         this.id = id;\n         this.name = name;\n     }\n+    \n+    @JsonGetter(\"name\")\n+    public String getTheName() {\n+        return name;\n+    }\n+    \n+    @JsonSetter(\"name\")\n+    public void setTheName(String name) {\n+        this.name = name;\n+    }\n }",
    "output": "Merge pull request #7174 from amit2103/BAEL-14274-8\n\n[BAEL-14274] - Fixed article code for https://www.baeldung.com/jackso…"
  },
  {
    "input": "diff --git a/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ChildConfig2.java b/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ChildConfig2.java\n--- a/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ChildConfig2.java\n+++ b/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ChildConfig2.java\n@@ -16,7 +16,7 @@ public ChildValueHolder childValueHolder() {\n     }\n \n     @Bean\n-    public static PropertyPlaceholderConfigurer configurer() {\n+    public static PropertyPlaceholderConfigurer properties() {\n         final PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n         ppc.setLocations(new ClassPathResource(\"child.properties\"));\n         return ppc;\n\ndiff --git a/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ParentConfig2.java b/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ParentConfig2.java\n--- a/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ParentConfig2.java\n+++ b/spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ParentConfig2.java\n@@ -16,7 +16,7 @@ public ParentValueHolder parentValueHolder() {\n     }\n \n     @Bean\n-    public static PropertyPlaceholderConfigurer configurer() {\n+    public static PropertyPlaceholderConfigurer properties() {\n         final PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n         ppc.setLocations(new ClassPathResource(\"parent.properties\"));\n         return ppc;",
    "output": "Merge pull request #7168 from amit2103/BAEL-14274-3\n\n[BAEL-14274] - Fixed article code for https://www.baeldung.com/proper…"
  },
  {
    "input": "diff --git a/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java b/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n--- a/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n+++ b/spring-protobuf/src/test/java/com/baeldung/protobuf/ApplicationIntegrationTest.java\n@@ -1,11 +1,7 @@\n package com.baeldung.protobuf;\n \n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.junit.Assert.assertThat;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n+import com.baeldung.protobuf.BaeldungTraining.Course;\n+import com.googlecode.protobuf.format.JsonFormat;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.impl.client.CloseableHttpClient;\n@@ -15,33 +11,38 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n \n-import com.baeldung.protobuf.BaeldungTraining.Course;\n-import com.googlecode.protobuf.format.JsonFormat;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertThat;\n \n @DirtiesContext\n @RunWith(SpringJUnit4ClassRunner.class)\n-@SpringBootTest(classes = Application.class, webEnvironment = WebEnvironment.DEFINED_PORT)\n+@SpringBootTest(classes = Application.class, webEnvironment = WebEnvironment.RANDOM_PORT)\n public class ApplicationIntegrationTest {\n \n-    private static final String COURSE1_URL = \"http://localhost:8080/courses/1\";\n-\n     @Autowired\n     private RestTemplate restTemplate;\n \n+    @LocalServerPort\n+    private int port;\n+\n     @Test\n     public void whenUsingRestTemplate_thenSucceed() {\n-        ResponseEntity<Course> course = restTemplate.getForEntity(COURSE1_URL, Course.class);\n+        ResponseEntity<Course> course = restTemplate.getForEntity(getUrl(), Course.class);\n         assertResponse(course.toString());\n     }\n \n     @Test\n     public void whenUsingHttpClient_thenSucceed() throws IOException {\n-        InputStream responseStream = executeHttpRequest(COURSE1_URL);\n+        InputStream responseStream = executeHttpRequest(getUrl());\n         String jsonOutput = convertProtobufMessageStreamToJsonString(responseStream);\n         assertResponse(jsonOutput);\n     }\n@@ -74,4 +75,8 @@ private void assertResponse(String response) {\n         assertThat(response, containsString(\"number\"));\n         assertThat(response, containsString(\"type\"));\n     }\n+\n+    private String getUrl() {\n+        return \"http://localhost:\" + port + \"/courses/1\";\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java b/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n--- a/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n+++ b/spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java\n@@ -1,16 +1,15 @@\n package org.baeldung;\n \n+import com.baeldung.protobuf.Application;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.protobuf.Application;\n-\n @DirtiesContext\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = Application.class)\n+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringContextIntegrationTest {\n \n     @Test\n\ndiff --git a/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java b/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n--- a/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n+++ b/spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java\n@@ -1,16 +1,15 @@\n package org.baeldung;\n \n+import com.baeldung.protobuf.Application;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.baeldung.protobuf.Application;\n-\n @DirtiesContext\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = Application.class)\n+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SpringContextTest {\n \n     @Test",
    "output": "Fixed the Port Already in Use Issue"
  },
  {
    "input": "diff --git a/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java b/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n--- a/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n+++ b/hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java\n@@ -13,7 +13,7 @@\n import static org.hamcrest.Matchers.equalTo;\n \n @RunWith(SpringRunner.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = AppConfig.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = AppConfig.class)\n public class SpringAndHystrixIntegrationTest {\n \n     @Autowired",
    "output": "Fixed the Port Already in Use Issue"
  },
  {
    "input": "diff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java\n@@ -5,9 +5,9 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n \n-public interface ProductRepository extends PagingAndSortingRepository<ProductMultipleDB, Integer> {\n+public interface ProductRepository extends PagingAndSortingRepository<Product, Integer> {\n \n-    List<ProductMultipleDB> findAllByPrice(double price, Pageable pageable);\n+    List<Product> findAllByPrice(double price, Pageable pageable);\n }\n\ndiff --git a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n--- a/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n+++ b/persistence-modules/spring-data-jpa/src/main/java/com/baeldung/multipledb/model/product/Product.java\n@@ -6,7 +6,7 @@\n \n @Entity\n @Table(schema = \"products\")\n-public class ProductMultipleDB {\n+public class Product {\n \n     @Id\n     private int id;\n@@ -15,19 +15,19 @@ public class ProductMultipleDB {\n \n     private double price;\n \n-    public ProductMultipleDB() {\n+    public Product() {\n         super();\n     }\n \n-    private ProductMultipleDB(int id, String name, double price) {\n+    private Product(int id, String name, double price) {\n         super();\n         this.id = id;\n         this.name = name;\n         this.price = price;\n     }\n \n-    public static ProductMultipleDB from(int id, String name, double price) {\n-        return new ProductMultipleDB(id, name, price);\n+    public static Product from(int id, String name, double price) {\n+        return new Product(id, name, price);\n     }\n \n     public int getId() {\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/JpaMultipleDBIntegrationTest.java\n@@ -19,7 +19,7 @@\n import com.baeldung.multipledb.dao.product.ProductRepository;\n import com.baeldung.multipledb.dao.user.PossessionRepository;\n import com.baeldung.multipledb.dao.user.UserRepository;\n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n import com.baeldung.multipledb.model.user.PossessionMultipleDB;\n import com.baeldung.multipledb.model.user.UserMultipleDB;\n \n@@ -84,7 +84,7 @@ public void whenCreatingUsersWithSameEmail_thenRollback() {\n     @Test\n     @Transactional(\"productTransactionManager\")\n     public void whenCreatingProduct_thenCreated() {\n-        ProductMultipleDB product = new ProductMultipleDB();\n+        Product product = new Product();\n         product.setName(\"Book\");\n         product.setId(2);\n         product.setPrice(20);\n\ndiff --git a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n--- a/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n+++ b/persistence-modules/spring-data-jpa/src/test/java/com/baeldung/multipledb/ProductRepositoryIntegrationTest.java\n@@ -25,7 +25,7 @@\n \n import com.baeldung.multipledb.PersistenceProductConfiguration;\n import com.baeldung.multipledb.dao.product.ProductRepository;\n-import com.baeldung.multipledb.model.product.ProductMultipleDB;\n+import com.baeldung.multipledb.model.product.Product;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(classes=MultipleDbApplication.class)\n@@ -38,22 +38,22 @@ public class ProductRepositoryIntegrationTest {\n     @Before\n     @Transactional(\"productTransactionManager\")\n     public void setUp() {\n-        productRepository.save(ProductMultipleDB.from(1001, \"Book\", 21));\n-        productRepository.save(ProductMultipleDB.from(1002, \"Coffee\", 10));\n-        productRepository.save(ProductMultipleDB.from(1003, \"Jeans\", 30));\n-        productRepository.save(ProductMultipleDB.from(1004, \"Shirt\", 32));\n-        productRepository.save(ProductMultipleDB.from(1005, \"Bacon\", 10));\n+        productRepository.save(Product.from(1001, \"Book\", 21));\n+        productRepository.save(Product.from(1002, \"Coffee\", 10));\n+        productRepository.save(Product.from(1003, \"Jeans\", 30));\n+        productRepository.save(Product.from(1004, \"Shirt\", 32));\n+        productRepository.save(Product.from(1005, \"Bacon\", 10));\n     }\n \n     @Test\n     public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n         Pageable pageRequest = PageRequest.of(0, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1001, 1002)\n                 .contains(id)));\n     }\n@@ -62,11 +62,11 @@ public void whenRequestingFirstPageOfSizeTwo_ThenReturnFirstPage() {\n     public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n         Pageable pageRequest = PageRequest.of(1, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1003, 1004)\n                 .contains(id)));\n     }\n@@ -75,11 +75,11 @@ public void whenRequestingSecondPageOfSizeTwo_ThenReturnSecondPage() {\n     public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n         Pageable pageRequest = PageRequest.of(2, 2);\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(1));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1005)\n                 .contains(id)));\n     }\n@@ -88,12 +88,12 @@ public void whenRequestingLastPage_ThenReturnLastPageWithRemData() {\n     public void whenSortingByNameAscAndPaging_ThenReturnSortedPagedResult() {\n         Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"name\"));\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(3));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1005, 1001, 1002)));\n \n     }\n@@ -103,12 +103,12 @@ public void whenSortingByPriceDescAndPaging_ThenReturnSortedPagedResult() {\n         Pageable pageRequest = PageRequest.of(0, 3, Sort.by(\"price\")\n             .descending());\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(3));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001)));\n \n     }\n@@ -119,12 +119,12 @@ public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResul\n             .descending()\n             .and(Sort.by(\"name\")));\n \n-        Page<ProductMultipleDB> result = productRepository.findAll(pageRequest);\n+        Page<Product> result = productRepository.findAll(pageRequest);\n \n         assertThat(result.getContent(), hasSize(5));\n         assertThat(result.getContent()\n             .stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .collect(Collectors.toList()), equalTo(Arrays.asList(1004, 1003, 1001, 1005, 1002)));\n \n     }\n@@ -133,11 +133,11 @@ public void whenSortingByPriceDescAndNameAscAndPaging_ThenReturnSortedPagedResul\n     public void whenRequestingFirstPageOfSizeTwoUsingCustomMethod_ThenReturnFirstPage() {\n         Pageable pageRequest = PageRequest.of(0, 2);\n \n-        List<ProductMultipleDB> result = productRepository.findAllByPrice(10, pageRequest);\n+        List<Product> result = productRepository.findAllByPrice(10, pageRequest);\n \n         assertThat(result, hasSize(2));\n         assertTrue(result.stream()\n-            .map(ProductMultipleDB::getId)\n+            .map(Product::getId)\n             .allMatch(id -> Arrays.asList(1002, 1005)\n                 .contains(id)));\n     }",
    "output": "[BAEL-17317] - Check article code - https://www.baeldung.com/spring-data-jpa-pagination-sorting"
  },
  {
    "input": "diff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/controller/SimplePostController.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/controller/SimplePostController.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/controller/SimplePostController.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/controller/SimplePostController.java\n@@ -0,0 +1,74 @@\n+package com.baeldung.sampleapp.web.controller;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import com.baeldung.sampleapp.web.dto.Foo;\n+\n+// used to test HttpClientPostingTest\n+@RestController\n+public class SimplePostController {\n+\n+    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n+    public String postUser(@RequestParam final String username, @RequestParam final String password) {\n+        return \"Success\" + username;\n+    }\n+\n+    @RequestMapping(value = \"/users/detail\", method = RequestMethod.POST)\n+    public String postUserDetail(@RequestBody final Foo entity) {\n+        return \"Success\" + entity.getId();\n+    }\n+\n+    @RequestMapping(value = \"/users/multipart\", method = RequestMethod.POST)\n+    public String uploadFile(@RequestParam final String username, @RequestParam final String password, @RequestParam(\"file\") final MultipartFile file) {\n+        if (!file.isEmpty()) {\n+            try {\n+                final DateFormat dateFormat = new SimpleDateFormat(\"yyyy_MM_dd_HH.mm.ss\");\n+                final String fileName = dateFormat.format(new Date());\n+                final File fileServer = new File(fileName);\n+                fileServer.createNewFile();\n+                final byte[] bytes = file.getBytes();\n+                final BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(fileServer));\n+                stream.write(bytes);\n+                stream.close();\n+                return \"You successfully uploaded \" + username;\n+            } catch (final Exception e) {\n+                return \"You failed to upload \" + e.getMessage();\n+            }\n+        } else {\n+            return \"You failed to upload because the file was empty.\";\n+        }\n+    }\n+\n+    @RequestMapping(value = \"/users/upload\", method = RequestMethod.POST)\n+    public String postMultipart(@RequestParam(\"file\") final MultipartFile file) {\n+        if (!file.isEmpty()) {\n+            try {\n+                final DateFormat dateFormat = new SimpleDateFormat(\"yyyy_MM_dd_HH.mm.ss\");\n+                final String fileName = dateFormat.format(new Date());\n+                final File fileServer = new File(fileName);\n+                fileServer.createNewFile();\n+                final byte[] bytes = file.getBytes();\n+                final BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(fileServer));\n+                stream.write(bytes);\n+                stream.close();\n+                return \"You successfully uploaded \";\n+            } catch (final Exception e) {\n+                return \"You failed to upload \" + e.getMessage();\n+            }\n+        } else {\n+            return \"You failed to upload because the file was empty.\";\n+        }\n+    }\n+}\n\ndiff --git a/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/dto/Foo.java b/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/dto/Foo.java\n--- a/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/dto/Foo.java\n+++ b/testing-modules/testing-libraries/src/main/java/com/baeldung/sampleapp/web/dto/Foo.java\n@@ -0,0 +1,42 @@\n+package com.baeldung.sampleapp.web.dto;\n+\n+public class Foo {\n+    private long id;\n+    private String name;\n+\n+    public Foo() {\n+        super();\n+    }\n+\n+    public Foo(final String name) {\n+        super();\n+\n+        this.name = name;\n+    }\n+\n+    public Foo(final long id, final String name) {\n+        super();\n+\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    // API\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "[BAEL-18364] - moved the findBugs link to testing-modules/testing-libraries, and copied over the sample code from the article"
  },
  {
    "input": "diff --git a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/model/Subject.java\n@@ -0,0 +1,37 @@\n+package com.baeldung.modelmapper.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Subject {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(nullable = false)\n+    private String name;\n+\n+    public Subject() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n--- a/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n+++ b/spring-boot-rest/src/main/java/com/baeldung/modelmapper/repository/SubjectRepository.java\n@@ -0,0 +1,16 @@\n+package com.baeldung.modelmapper.repository;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.data.rest.core.annotation.RestResource;\n+\n+import com.baeldung.modelmapper.model.Subject;\n+\n+public interface SubjectRepository extends PagingAndSortingRepository<Subject, Long> {\n+\n+    @RestResource(path = \"nameContains\")\n+    public Page<Subject> findByNameContaining(@Param(\"name\") String name, Pageable p);\n+\n+}\n\\ No newline at end of file",
    "output": "[BAEL-17317] - Check article code - https://www.baeldung.com/rest-api-pagination-in-spring"
  },
  {
    "input": "diff --git a/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java b/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n--- a/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n+++ b/testing-modules/junit-5-basics/src/test/java/com/baeldung/migration/junit4/BeforeAndAfterAnnotationsUnitTest.java\n@@ -34,15 +34,15 @@ public void finalize() {\n     }\n \n     @Test\n-    public void whenCheckingListSize_ThenSizeEqualsToInit() {\n+    public void whenCheckingListSize_thenSizeEqualsToInit() {\n         LOG.info(\"executing test\");\n         assertEquals(2, list.size());\n \n         list.add(\"another test\");\n     }\n \n     @Test\n-    public void whenCheckingListSizeAgain_ThenSizeEqualsToInit() {\n+    public void whenCheckingListSizeAgain_thenSizeEqualsToInit() {\n         LOG.info(\"executing another test\");\n         assertEquals(2, list.size());\n ",
    "output": "[BAEL-17317] - Check article code - https://www.baeldung.com/junit-before-beforeclass-beforeeach-beforeall"
  },
  {
    "input": "diff --git a/spring-boot-mvc/src/main/java/com/baeldung/autoconfiguration/MySQLAutoconfiguration.java b/spring-boot-mvc/src/main/java/com/baeldung/autoconfiguration/MySQLAutoconfiguration.java\n--- a/spring-boot-mvc/src/main/java/com/baeldung/autoconfiguration/MySQLAutoconfiguration.java\n+++ b/spring-boot-mvc/src/main/java/com/baeldung/autoconfiguration/MySQLAutoconfiguration.java\n@@ -0,0 +1,118 @@\n+package com.baeldung.autoconfiguration;\n+\n+import java.util.Arrays;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.jdbc.datasource.DriverManagerDataSource;\n+import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+@Configuration\n+@ConditionalOnClass(DataSource.class)\n+@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n+@PropertySource(\"classpath:mysql.properties\")\n+public class MySQLAutoconfiguration {\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @Bean\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"local\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(\"jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true&&serverTimezone=UTC\");\n+        dataSource.setUsername(\"mysqluser\");\n+        dataSource.setPassword(\"mysqlpass\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean(name = \"dataSource\")\n+    @ConditionalOnProperty(name = \"usemysql\", havingValue = \"custom\")\n+    @ConditionalOnMissingBean\n+    public DataSource dataSource2() {\n+        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(env.getProperty(\"mysql.url\"));\n+        dataSource.setUsername(env.getProperty(\"mysql.user\") != null ? env.getProperty(\"mysql.user\") : \"\");\n+        dataSource.setPassword(env.getProperty(\"mysql.pass\") != null ? env.getProperty(\"mysql.pass\") : \"\");\n+\n+        return dataSource;\n+    }\n+\n+    @Bean\n+    @ConditionalOnBean(name = \"dataSource\")\n+    @ConditionalOnMissingBean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n+        final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n+        em.setDataSource(dataSource());\n+        em.setPackagesToScan(\"com.baeldung.autoconfiguration.example\");\n+        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n+        if (additionalProperties() != null) {\n+            em.setJpaProperties(additionalProperties());\n+        }\n+        return em;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(type = \"JpaTransactionManager\")\n+    JpaTransactionManager transactionManager(final EntityManagerFactory entityManagerFactory) {\n+        final JpaTransactionManager transactionManager = new JpaTransactionManager();\n+        transactionManager.setEntityManagerFactory(entityManagerFactory);\n+        return transactionManager;\n+    }\n+\n+    @ConditionalOnResource(resources = \"classpath:mysql.properties\")\n+    @Conditional(HibernateCondition.class)\n+    final Properties additionalProperties() {\n+        final Properties hibernateProperties = new Properties();\n+\n+        hibernateProperties.setProperty(\"hibernate.hbm2ddl.auto\", env.getProperty(\"mysql-hibernate.hbm2ddl.auto\"));\n+        hibernateProperties.setProperty(\"hibernate.dialect\", env.getProperty(\"mysql-hibernate.dialect\"));\n+        hibernateProperties.setProperty(\"hibernate.show_sql\", env.getProperty(\"mysql-hibernate.show_sql\") != null ? env.getProperty(\"mysql-hibernate.show_sql\") : \"false\");\n+\n+        return hibernateProperties;\n+    }\n+\n+    static class HibernateCondition extends SpringBootCondition {\n+\n+        private static final String[] CLASS_NAMES = { \"org.hibernate.ejb.HibernateEntityManager\", \"org.hibernate.jpa.HibernateEntityManager\" };\n+\n+        @Override\n+        public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+            ConditionMessage.Builder message = ConditionMessage.forCondition(\"Hibernate\");\n+\n+            return Arrays.stream(CLASS_NAMES).filter(className -> ClassUtils.isPresent(className, context.getClassLoader())).map(className -> ConditionOutcome.match(message.found(\"class\").items(Style.NORMAL, className))).findAny()\n+                    .orElseGet(() -> ConditionOutcome.noMatch(message.didNotFind(\"class\", \"classes\").items(Style.NORMAL, Arrays.asList(CLASS_NAMES))));\n+        }\n+\n+    }\n+}\n\ndiff --git a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n--- a/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n+++ b/spring-boot-mvc/src/test/java/org/baeldung/SpringContextLiveTest.java\n@@ -0,0 +1,19 @@\n+package org.baeldung;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+import com.baeldung.autoconfiguration.MySQLAutoconfiguration;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = MySQLAutoconfiguration.class)\n+@WebAppConfiguration\n+public class SpringContextLiveTest {\n+\n+    @Test\n+    public void whenSpringContextIsBootstrapped_thenNoExceptions() {\n+    }\n+}\n\\ No newline at end of file",
    "output": "[BAEL-17317] - Check article code - https://www.baeldung.com/spring-boot-annotations"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java b/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n--- a/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n+++ b/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n@@ -0,0 +1,44 @@\n+package com.baeldung.scanner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Scanner;\n+\n+import org.junit.Test;\n+\n+public class JavaScannerUnitTest {\n+\n+    @Test\n+    public void whenReadingLines_thenCorrect() {\n+        String input = \"Scanner\\nTest\\n\";\n+        try (Scanner scanner = new Scanner(input)) {\n+            assertEquals(\"Scanner\", scanner.nextLine());\n+            assertEquals(\"Test\", scanner.nextLine());\n+        }\n+    }\n+\n+    @Test\n+    public void whenReadingPartialLines_thenCorrect() {\n+        String input = \"Scanner\\n\";\n+        try (Scanner scanner = new Scanner(input)) {\n+            scanner.useDelimiter(\"\");\n+            scanner.next();\n+            assertEquals(\"canner\", scanner.nextLine());\n+        }\n+    }\n+\n+    @Test(expected = NoSuchElementException.class)\n+    public void givenNoNewLine_whenReadingNextLine_thenThrowNoSuchElementException() {\n+        try (Scanner scanner = new Scanner(\"\")) {\n+            String result = scanner.nextLine();\n+        }\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void givenScannerIsClosed_whenReadingNextLine_thenThrowIllegalStateException() {\n+        Scanner scanner = new Scanner(\"\");\n+        scanner.close();\n+        String result = scanner.nextLine();\n+    }\n+}",
    "output": "Merge pull request #8049 from vatsalgosar/BAEL-3143\n\nBAEL 3143"
  },
  {
    "input": "diff --git a/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java b/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n--- a/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n+++ b/core-java-modules/core-java-io-2/src/test/java/com/baeldung/scanner/JavaScannerUnitTest.java\n@@ -29,7 +29,6 @@ public void whenReadingPartialLines_thenCorrect() {\n     }\n \n     @Test(expected = NoSuchElementException.class)\n-\n     public void givenNoNewLine_whenReadingNextLine_thenThrowNoSuchElementException() {\n         try (Scanner scanner = new Scanner(\"\")) {\n             String result = scanner.nextLine();",
    "output": "Update JavaScannerUnitTest.java"
  },
  {
    "input": "diff --git a/javaxval/src/main/java/org/baeldung/javaxval/messageinterpolator/Person.java b/javaxval/src/main/java/org/baeldung/javaxval/messageinterpolator/Person.java\n--- a/javaxval/src/main/java/org/baeldung/javaxval/messageinterpolator/Person.java\n+++ b/javaxval/src/main/java/org/baeldung/javaxval/messageinterpolator/Person.java\n@@ -0,0 +1,42 @@\n+package org.baeldung.javaxval.messageinterpolator;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.Size;\n+\n+public class Person {\n+\n+    @Size(min = 10, max = 100, message = \"Name should be between {min} and {max} characters\")\n+    private String name;\n+\n+    @Min(value = 18, message = \"Age should not be less than {value}\")\n+    private int age;\n+    \n+    @Email(message = \"Email address should be in a correct format: ${validatedValue}\")\n+    private String email;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+    \n+    public String getEmail() {\n+        return email;\n+    }\n+    \n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+}\n\ndiff --git a/javaxval/src/test/java/org/baeldung/javaxval/messageinterpolator/ParameterMessageInterpolaterIntegrationTest.java b/javaxval/src/test/java/org/baeldung/javaxval/messageinterpolator/ParameterMessageInterpolaterIntegrationTest.java\n--- a/javaxval/src/test/java/org/baeldung/javaxval/messageinterpolator/ParameterMessageInterpolaterIntegrationTest.java\n+++ b/javaxval/src/test/java/org/baeldung/javaxval/messageinterpolator/ParameterMessageInterpolaterIntegrationTest.java\n@@ -0,0 +1,70 @@\n+package org.baeldung.javaxval.messageinterpolator;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Set;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+\n+import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ParameterMessageInterpolaterIntegrationTest {\n+\n+    private static Validator validator;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        ValidatorFactory validatorFactory = Validation.byDefaultProvider()\n+          .configure()\n+          .messageInterpolator(new ParameterMessageInterpolator())\n+          .buildValidatorFactory();\n+\n+        validator = validatorFactory.getValidator();\n+    }\n+\n+    @Test\n+    public void givenNameLengthLessThanMin_whenValidate_thenValidationFails() {\n+        Person person = new Person();\n+        person.setName(\"John Doe\");\n+        person.setAge(18);\n+\n+        Set<ConstraintViolation<Person>> violations = validator.validate(person);\n+        assertEquals(1, violations.size());\n+\n+        ConstraintViolation<Person> violation = violations.iterator().next();\n+        assertEquals(\"Name should be between 10 and 100 characters\", violation.getMessage());\n+    }\n+\n+    @Test\n+    public void givenAgeIsLessThanMin_whenValidate_thenValidationFails() {\n+        Person person = new Person();\n+        person.setName(\"John Stephaner Doe\");\n+        person.setAge(16);\n+\n+        Set<ConstraintViolation<Person>> violations = validator.validate(person);\n+        assertEquals(1, violations.size());\n+\n+        ConstraintViolation<Person> violation = violations.iterator().next();\n+        assertEquals(\"Age should not be less than 18\", violation.getMessage());\n+    }\n+    \n+    @Test\n+    public void givenEmailIsMalformed_whenValidate_thenValidationFails() {\n+        Person person = new Person();\n+        person.setName(\"John Stephaner Doe\");\n+        person.setAge(18);\n+        person.setEmail(\"johndoe.dev\");\n+        \n+        Set<ConstraintViolation<Person>> violations = validator.validate(person);\n+        assertEquals(1, violations.size());\n+        \n+        ConstraintViolation<Person> violation = violations.iterator().next();\n+        assertEquals(\"Email address should be in a correct format: ${validatedValue}\", violation.getMessage());\n+    }\n+\n+}",
    "output": "Merge pull request #8051 from yavuztas/pr-BAEL-3379\n\nPR-BAEL-3379"
  }
]